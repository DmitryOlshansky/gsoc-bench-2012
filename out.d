//Written in the D programming language
/**
 * License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
 *
 * Authors: Dmitry Olshansky
 *
 */
//Automatically generated from Unicode Character Database files


struct SimpleCaseEntry
{
    uint ch;
    ubyte n, bucket;// n - number in bucket
    @property ubyte size() const
    {
        return bucket & 0x3F;
    }
    @property auto isLower() const
    {
        return bucket & 0x40;
    }
    @property auto isUpper() const
    {
        return bucket & 0x80;
    }
    this(uint dch, ubyte num, ubyte size, bool lower, bool upper)
    {
        ch = dch;
        n = num;
        bucket = size;
        if(lower)
            bucket |= 0x40;
        if(upper)
            bucket |= 0x80;
        
    }
}

struct FullCaseEntry
{
    union
    {
        dchar ch;
        dstring seq;
    }
    ubyte n, size;// n number in batch, size - size of batch
    ubyte entry_len;// ==1 read ch, >1 - seq

    @property auto value()const
    { 
        return entry_len == 1 ? (&ch)[0..1] : cast(dstring)seq;
    }

    this(dstring value, ubyte num, ubyte batch_size)
    {
        assert(value.length < 255);
        entry_len = cast(ubyte)value.length;
        if(value.length == 1)
            ch = value[0];
        else{
            seq = value;
        }
        n = num;
        size = batch_size;
    }
}

struct CompEntry
{
    dchar rhs, composed;
}

struct UnicodeProperty
{
    string name;
    ubyte[] compressed;
}

struct TrieEntry(T...)
{
    size_t[] offsets;
    size_t[] sizes;
    size_t[] data;
}

immutable simpleCaseTable = [
    SimpleCaseEntry(0x10b7, 0, 2, false, true),
    SimpleCaseEntry(0x2d17, 1, 2, true, false),
    SimpleCaseEntry(0x1e64, 0, 2, false, true),
    SimpleCaseEntry(0x1e65, 1, 2, true, false),
    SimpleCaseEntry(0x1fe9, 0, 2, false, true),
    SimpleCaseEntry(0x1fe1, 1, 2, true, false),
    SimpleCaseEntry(0x216e, 0, 2, false, true),
    SimpleCaseEntry(0x217e, 1, 2, true, false),
    SimpleCaseEntry(0x2c11, 0, 2, false, true),
    SimpleCaseEntry(0x2c41, 1, 2, true, false),
    SimpleCaseEntry(0xa726, 0, 2, false, true),
    SimpleCaseEntry(0xa727, 1, 2, true, false),
    SimpleCaseEntry(0x0186, 0, 2, false, true),
    SimpleCaseEntry(0x0254, 1, 2, true, false),
    SimpleCaseEntry(0x0490, 0, 2, false, true),
    SimpleCaseEntry(0x0491, 1, 2, true, false),
    SimpleCaseEntry(0x10b8, 0, 2, false, true),
    SimpleCaseEntry(0x2d18, 1, 2, true, false),
    SimpleCaseEntry(0x1fea, 0, 2, false, true),
    SimpleCaseEntry(0x1f7a, 1, 2, true, false),
    SimpleCaseEntry(0x216f, 0, 2, false, true),
    SimpleCaseEntry(0x217f, 1, 2, true, false),
    SimpleCaseEntry(0x2c12, 0, 2, false, true),
    SimpleCaseEntry(0x2c42, 1, 2, true, false),
    SimpleCaseEntry(0x0187, 0, 2, false, true),
    SimpleCaseEntry(0x0188, 1, 2, true, false),
    SimpleCaseEntry(0x10b9, 0, 2, false, true),
    SimpleCaseEntry(0x2d19, 1, 2, true, false),
    SimpleCaseEntry(0x1e66, 0, 2, false, true),
    SimpleCaseEntry(0x1e67, 1, 2, true, false),
    SimpleCaseEntry(0x1feb, 0, 2, false, true),
    SimpleCaseEntry(0x1f7b, 1, 2, true, false),
    SimpleCaseEntry(0x2c13, 0, 2, false, true),
    SimpleCaseEntry(0x2c43, 1, 2, true, false),
    SimpleCaseEntry(0xa728, 0, 2, false, true),
    SimpleCaseEntry(0xa729, 1, 2, true, false),
    SimpleCaseEntry(0x0492, 0, 2, false, true),
    SimpleCaseEntry(0x0493, 1, 2, true, false),
    SimpleCaseEntry(0x10ba, 0, 2, false, true),
    SimpleCaseEntry(0x2d1a, 1, 2, true, false),
    SimpleCaseEntry(0x1fec, 0, 2, false, true),
    SimpleCaseEntry(0x1fe5, 1, 2, true, false),
    SimpleCaseEntry(0x2c14, 0, 2, false, true),
    SimpleCaseEntry(0x2c44, 1, 2, true, false),
    SimpleCaseEntry(0x0189, 0, 2, false, true),
    SimpleCaseEntry(0x0256, 1, 2, true, false),
    SimpleCaseEntry(0x10bb, 0, 2, false, true),
    SimpleCaseEntry(0x2d1b, 1, 2, true, false),
    SimpleCaseEntry(0x1e68, 0, 2, false, true),
    SimpleCaseEntry(0x1e69, 1, 2, true, false),
    SimpleCaseEntry(0x2c15, 0, 2, false, true),
    SimpleCaseEntry(0x2c45, 1, 2, true, false),
    SimpleCaseEntry(0xa72a, 0, 2, false, true),
    SimpleCaseEntry(0xa72b, 1, 2, true, false),
    SimpleCaseEntry(0x018a, 0, 2, false, true),
    SimpleCaseEntry(0x0257, 1, 2, true, false),
    SimpleCaseEntry(0x0494, 0, 2, false, true),
    SimpleCaseEntry(0x0495, 1, 2, true, false),
    SimpleCaseEntry(0x10bc, 0, 2, false, true),
    SimpleCaseEntry(0x2d1c, 1, 2, true, false),
    SimpleCaseEntry(0x2c16, 0, 2, false, true),
    SimpleCaseEntry(0x2c46, 1, 2, true, false),
    SimpleCaseEntry(0x018b, 0, 2, false, true),
    SimpleCaseEntry(0x018c, 1, 2, true, false),
    SimpleCaseEntry(0x10bd, 0, 2, false, true),
    SimpleCaseEntry(0x2d1d, 1, 2, true, false),
    SimpleCaseEntry(0x1e6a, 0, 2, false, true),
    SimpleCaseEntry(0x1e6b, 1, 2, true, false),
    SimpleCaseEntry(0x2c17, 0, 2, false, true),
    SimpleCaseEntry(0x2c47, 1, 2, true, false),
    SimpleCaseEntry(0xa72c, 0, 2, false, true),
    SimpleCaseEntry(0xa72d, 1, 2, true, false),
    SimpleCaseEntry(0x0496, 0, 2, false, true),
    SimpleCaseEntry(0x0497, 1, 2, true, false),
    SimpleCaseEntry(0x10be, 0, 2, false, true),
    SimpleCaseEntry(0x2d1e, 1, 2, true, false),
    SimpleCaseEntry(0x2c18, 0, 2, false, true),
    SimpleCaseEntry(0x2c48, 1, 2, true, false),
    SimpleCaseEntry(0x10bf, 0, 2, false, true),
    SimpleCaseEntry(0x2d1f, 1, 2, true, false),
    SimpleCaseEntry(0x1e6c, 0, 2, false, true),
    SimpleCaseEntry(0x1e6d, 1, 2, true, false),
    SimpleCaseEntry(0x2c19, 0, 2, false, true),
    SimpleCaseEntry(0x2c49, 1, 2, true, false),
    SimpleCaseEntry(0xa72e, 0, 2, false, true),
    SimpleCaseEntry(0xa72f, 1, 2, true, false),
    SimpleCaseEntry(0x018e, 0, 2, false, true),
    SimpleCaseEntry(0x01dd, 1, 2, true, false),
    SimpleCaseEntry(0x0498, 0, 2, false, true),
    SimpleCaseEntry(0x0499, 1, 2, true, false),
    SimpleCaseEntry(0x10c0, 0, 2, false, true),
    SimpleCaseEntry(0x2d20, 1, 2, true, false),
    SimpleCaseEntry(0x2c1a, 0, 2, false, true),
    SimpleCaseEntry(0x2c4a, 1, 2, true, false),
    SimpleCaseEntry(0x018f, 0, 2, false, true),
    SimpleCaseEntry(0x0259, 1, 2, true, false),
    SimpleCaseEntry(0x10c1, 0, 2, false, true),
    SimpleCaseEntry(0x2d21, 1, 2, true, false),
    SimpleCaseEntry(0x1e6e, 0, 2, false, true),
    SimpleCaseEntry(0x1e6f, 1, 2, true, false),
    SimpleCaseEntry(0x2c1b, 0, 2, false, true),
    SimpleCaseEntry(0x2c4b, 1, 2, true, false),
    SimpleCaseEntry(0x0190, 0, 2, false, true),
    SimpleCaseEntry(0x025b, 1, 2, true, false),
    SimpleCaseEntry(0x049a, 0, 2, false, true),
    SimpleCaseEntry(0x049b, 1, 2, true, false),
    SimpleCaseEntry(0x10c2, 0, 2, false, true),
    SimpleCaseEntry(0x2d22, 1, 2, true, false),
    SimpleCaseEntry(0x2c1c, 0, 2, false, true),
    SimpleCaseEntry(0x2c4c, 1, 2, true, false),
    SimpleCaseEntry(0x0191, 0, 2, false, true),
    SimpleCaseEntry(0x0192, 1, 2, true, false),
    SimpleCaseEntry(0x10c3, 0, 2, false, true),
    SimpleCaseEntry(0x2d23, 1, 2, true, false),
    SimpleCaseEntry(0x1e70, 0, 2, false, true),
    SimpleCaseEntry(0x1e71, 1, 2, true, false),
    SimpleCaseEntry(0x2c1d, 0, 2, false, true),
    SimpleCaseEntry(0x2c4d, 1, 2, true, false),
    SimpleCaseEntry(0xa732, 0, 2, false, true),
    SimpleCaseEntry(0xa733, 1, 2, true, false),
    SimpleCaseEntry(0x049c, 0, 2, false, true),
    SimpleCaseEntry(0x049d, 1, 2, true, false),
    SimpleCaseEntry(0x10c4, 0, 2, false, true),
    SimpleCaseEntry(0x2d24, 1, 2, true, false),
    SimpleCaseEntry(0x2c1e, 0, 2, false, true),
    SimpleCaseEntry(0x2c4e, 1, 2, true, false),
    SimpleCaseEntry(0x0193, 0, 2, false, true),
    SimpleCaseEntry(0x0260, 1, 2, true, false),
    SimpleCaseEntry(0x10c5, 0, 2, false, true),
    SimpleCaseEntry(0x2d25, 1, 2, true, false),
    SimpleCaseEntry(0x1e72, 0, 2, false, true),
    SimpleCaseEntry(0x1e73, 1, 2, true, false),
    SimpleCaseEntry(0x2c1f, 0, 2, false, true),
    SimpleCaseEntry(0x2c4f, 1, 2, true, false),
    SimpleCaseEntry(0xa734, 0, 2, false, true),
    SimpleCaseEntry(0xa735, 1, 2, true, false),
    SimpleCaseEntry(0x0194, 0, 2, false, true),
    SimpleCaseEntry(0x0263, 1, 2, true, false),
    SimpleCaseEntry(0x049e, 0, 2, false, true),
    SimpleCaseEntry(0x049f, 1, 2, true, false),
    SimpleCaseEntry(0x1ff8, 0, 2, false, true),
    SimpleCaseEntry(0x1f78, 1, 2, true, false),
    SimpleCaseEntry(0x2c20, 0, 2, false, true),
    SimpleCaseEntry(0x2c50, 1, 2, true, false),
    SimpleCaseEntry(0x10c7, 0, 2, false, true),
    SimpleCaseEntry(0x2d27, 1, 2, true, false),
    SimpleCaseEntry(0x1e74, 0, 2, false, true),
    SimpleCaseEntry(0x1e75, 1, 2, true, false),
    SimpleCaseEntry(0x1ff9, 0, 2, false, true),
    SimpleCaseEntry(0x1f79, 1, 2, true, false),
    SimpleCaseEntry(0x2c21, 0, 2, false, true),
    SimpleCaseEntry(0x2c51, 1, 2, true, false),
    SimpleCaseEntry(0xa736, 0, 2, false, true),
    SimpleCaseEntry(0xa737, 1, 2, true, false),
    SimpleCaseEntry(0x0196, 0, 2, false, true),
    SimpleCaseEntry(0x0269, 1, 2, true, false),
    SimpleCaseEntry(0x04a0, 0, 2, false, true),
    SimpleCaseEntry(0x04a1, 1, 2, true, false),
    SimpleCaseEntry(0x1ffa, 0, 2, false, true),
    SimpleCaseEntry(0x1f7c, 1, 2, true, false),
    SimpleCaseEntry(0x2c22, 0, 2, false, true),
    SimpleCaseEntry(0x2c52, 1, 2, true, false),
    SimpleCaseEntry(0x0197, 0, 2, false, true),
    SimpleCaseEntry(0x0268, 1, 2, true, false),
    SimpleCaseEntry(0x1e76, 0, 2, false, true),
    SimpleCaseEntry(0x1e77, 1, 2, true, false),
    SimpleCaseEntry(0x1ffb, 0, 2, false, true),
    SimpleCaseEntry(0x1f7d, 1, 2, true, false),
    SimpleCaseEntry(0x2c23, 0, 2, false, true),
    SimpleCaseEntry(0x2c53, 1, 2, true, false),
    SimpleCaseEntry(0xa738, 0, 2, false, true),
    SimpleCaseEntry(0xa739, 1, 2, true, false),
    SimpleCaseEntry(0x0198, 0, 2, false, true),
    SimpleCaseEntry(0x0199, 1, 2, true, false),
    SimpleCaseEntry(0x04a2, 0, 2, false, true),
    SimpleCaseEntry(0x04a3, 1, 2, true, false),
    SimpleCaseEntry(0x1ffc, 0, 2, false, false),
    SimpleCaseEntry(0x1ff3, 1, 2, true, false),
    SimpleCaseEntry(0x2c24, 0, 2, false, true),
    SimpleCaseEntry(0x2c54, 1, 2, true, false),
    SimpleCaseEntry(0x1e78, 0, 2, false, true),
    SimpleCaseEntry(0x1e79, 1, 2, true, false),
    SimpleCaseEntry(0x2c25, 0, 2, false, true),
    SimpleCaseEntry(0x2c55, 1, 2, true, false),
    SimpleCaseEntry(0xa73a, 0, 2, false, true),
    SimpleCaseEntry(0xa73b, 1, 2, true, false),
    SimpleCaseEntry(0x04a4, 0, 2, false, true),
    SimpleCaseEntry(0x04a5, 1, 2, true, false),
    SimpleCaseEntry(0x2183, 0, 2, false, true),
    SimpleCaseEntry(0x2184, 1, 2, true, false),
    SimpleCaseEntry(0x2c26, 0, 2, false, true),
    SimpleCaseEntry(0x2c56, 1, 2, true, false),
    SimpleCaseEntry(0x10cd, 0, 2, false, true),
    SimpleCaseEntry(0x2d2d, 1, 2, true, false),
    SimpleCaseEntry(0x1e7a, 0, 2, false, true),
    SimpleCaseEntry(0x1e7b, 1, 2, true, false),
    SimpleCaseEntry(0x2c27, 0, 2, false, true),
    SimpleCaseEntry(0x2c57, 1, 2, true, false),
    SimpleCaseEntry(0xa73c, 0, 2, false, true),
    SimpleCaseEntry(0xa73d, 1, 2, true, false),
    SimpleCaseEntry(0x019c, 0, 2, false, true),
    SimpleCaseEntry(0x026f, 1, 2, true, false),
    SimpleCaseEntry(0x04a6, 0, 2, false, true),
    SimpleCaseEntry(0x04a7, 1, 2, true, false),
    SimpleCaseEntry(0x2c28, 0, 2, false, true),
    SimpleCaseEntry(0x2c58, 1, 2, true, false),
    SimpleCaseEntry(0x019d, 0, 2, false, true),
    SimpleCaseEntry(0x0272, 1, 2, true, false),
    SimpleCaseEntry(0x1e7c, 0, 2, false, true),
    SimpleCaseEntry(0x1e7d, 1, 2, true, false),
    SimpleCaseEntry(0x2c29, 0, 2, false, true),
    SimpleCaseEntry(0x2c59, 1, 2, true, false),
    SimpleCaseEntry(0xa73e, 0, 2, false, true),
    SimpleCaseEntry(0xa73f, 1, 2, true, false),
    SimpleCaseEntry(0x04a8, 0, 2, false, true),
    SimpleCaseEntry(0x04a9, 1, 2, true, false),
    SimpleCaseEntry(0x2c2a, 0, 2, false, true),
    SimpleCaseEntry(0x2c5a, 1, 2, true, false),
    SimpleCaseEntry(0x019f, 0, 2, false, true),
    SimpleCaseEntry(0x0275, 1, 2, true, false),
    SimpleCaseEntry(0x1e7e, 0, 2, false, true),
    SimpleCaseEntry(0x1e7f, 1, 2, true, false),
    SimpleCaseEntry(0x2c2b, 0, 2, false, true),
    SimpleCaseEntry(0x2c5b, 1, 2, true, false),
    SimpleCaseEntry(0xa740, 0, 2, false, true),
    SimpleCaseEntry(0xa741, 1, 2, true, false),
    SimpleCaseEntry(0x01a0, 0, 2, false, true),
    SimpleCaseEntry(0x01a1, 1, 2, true, false),
    SimpleCaseEntry(0x04aa, 0, 2, false, true),
    SimpleCaseEntry(0x04ab, 1, 2, true, false),
    SimpleCaseEntry(0x2c2c, 0, 2, false, true),
    SimpleCaseEntry(0x2c5c, 1, 2, true, false),
    SimpleCaseEntry(0x1e80, 0, 2, false, true),
    SimpleCaseEntry(0x1e81, 1, 2, true, false),
    SimpleCaseEntry(0x2c2d, 0, 2, false, true),
    SimpleCaseEntry(0x2c5d, 1, 2, true, false),
    SimpleCaseEntry(0xa742, 0, 2, false, true),
    SimpleCaseEntry(0xa743, 1, 2, true, false),
    SimpleCaseEntry(0x01a2, 0, 2, false, true),
    SimpleCaseEntry(0x01a3, 1, 2, true, false),
    SimpleCaseEntry(0x04ac, 0, 2, false, true),
    SimpleCaseEntry(0x04ad, 1, 2, true, false),
    SimpleCaseEntry(0x2c2e, 0, 2, false, true),
    SimpleCaseEntry(0x2c5e, 1, 2, true, false),
    SimpleCaseEntry(0x1e82, 0, 2, false, true),
    SimpleCaseEntry(0x1e83, 1, 2, true, false),
    SimpleCaseEntry(0xa744, 0, 2, false, true),
    SimpleCaseEntry(0xa745, 1, 2, true, false),
    SimpleCaseEntry(0x01a4, 0, 2, false, true),
    SimpleCaseEntry(0x01a5, 1, 2, true, false),
    SimpleCaseEntry(0x04ae, 0, 2, false, true),
    SimpleCaseEntry(0x04af, 1, 2, true, false),
    SimpleCaseEntry(0x1e84, 0, 2, false, true),
    SimpleCaseEntry(0x1e85, 1, 2, true, false),
    SimpleCaseEntry(0xa746, 0, 2, false, true),
    SimpleCaseEntry(0xa747, 1, 2, true, false),
    SimpleCaseEntry(0x01a6, 0, 2, false, true),
    SimpleCaseEntry(0x0280, 1, 2, true, false),
    SimpleCaseEntry(0x04b0, 0, 2, false, true),
    SimpleCaseEntry(0x04b1, 1, 2, true, false),
    SimpleCaseEntry(0x01a7, 0, 2, false, true),
    SimpleCaseEntry(0x01a8, 1, 2, true, false),
    SimpleCaseEntry(0x1e86, 0, 2, false, true),
    SimpleCaseEntry(0x1e87, 1, 2, true, false),
    SimpleCaseEntry(0xa748, 0, 2, false, true),
    SimpleCaseEntry(0xa749, 1, 2, true, false),
    SimpleCaseEntry(0x04b2, 0, 2, false, true),
    SimpleCaseEntry(0x04b3, 1, 2, true, false),
    SimpleCaseEntry(0x01a9, 0, 2, false, true),
    SimpleCaseEntry(0x0283, 1, 2, true, false),
    SimpleCaseEntry(0x1e88, 0, 2, false, true),
    SimpleCaseEntry(0x1e89, 1, 2, true, false),
    SimpleCaseEntry(0xa74a, 0, 2, false, true),
    SimpleCaseEntry(0xa74b, 1, 2, true, false),
    SimpleCaseEntry(0x04b4, 0, 2, false, true),
    SimpleCaseEntry(0x04b5, 1, 2, true, false),
    SimpleCaseEntry(0x1e8a, 0, 2, false, true),
    SimpleCaseEntry(0x1e8b, 1, 2, true, false),
    SimpleCaseEntry(0xa74c, 0, 2, false, true),
    SimpleCaseEntry(0xa74d, 1, 2, true, false),
    SimpleCaseEntry(0x01ac, 0, 2, false, true),
    SimpleCaseEntry(0x01ad, 1, 2, true, false),
    SimpleCaseEntry(0x04b6, 0, 2, false, true),
    SimpleCaseEntry(0x04b7, 1, 2, true, false),
    SimpleCaseEntry(0x1e8c, 0, 2, false, true),
    SimpleCaseEntry(0x1e8d, 1, 2, true, false),
    SimpleCaseEntry(0xa74e, 0, 2, false, true),
    SimpleCaseEntry(0xa74f, 1, 2, true, false),
    SimpleCaseEntry(0x01ae, 0, 2, false, true),
    SimpleCaseEntry(0x0288, 1, 2, true, false),
    SimpleCaseEntry(0x04b8, 0, 2, false, true),
    SimpleCaseEntry(0x04b9, 1, 2, true, false),
    SimpleCaseEntry(0x10400, 0, 2, false, true),
    SimpleCaseEntry(0x10428, 1, 2, true, false),
    SimpleCaseEntry(0x01af, 0, 2, false, true),
    SimpleCaseEntry(0x01b0, 1, 2, true, false),
    SimpleCaseEntry(0x1e8e, 0, 2, false, true),
    SimpleCaseEntry(0x1e8f, 1, 2, true, false),
    SimpleCaseEntry(0xa750, 0, 2, false, true),
    SimpleCaseEntry(0xa751, 1, 2, true, false),
    SimpleCaseEntry(0x10401, 0, 2, false, true),
    SimpleCaseEntry(0x10429, 1, 2, true, false),
    SimpleCaseEntry(0x04ba, 0, 2, false, true),
    SimpleCaseEntry(0x04bb, 1, 2, true, false),
    SimpleCaseEntry(0x10402, 0, 2, false, true),
    SimpleCaseEntry(0x1042a, 1, 2, true, false),
    SimpleCaseEntry(0x01b1, 0, 2, false, true),
    SimpleCaseEntry(0x028a, 1, 2, true, false),
    SimpleCaseEntry(0x1e90, 0, 2, false, true),
    SimpleCaseEntry(0x1e91, 1, 2, true, false),
    SimpleCaseEntry(0xa752, 0, 2, false, true),
    SimpleCaseEntry(0xa753, 1, 2, true, false),
    SimpleCaseEntry(0x10403, 0, 2, false, true),
    SimpleCaseEntry(0x1042b, 1, 2, true, false),
    SimpleCaseEntry(0x01b2, 0, 2, false, true),
    SimpleCaseEntry(0x028b, 1, 2, true, false),
    SimpleCaseEntry(0x04bc, 0, 2, false, true),
    SimpleCaseEntry(0x04bd, 1, 2, true, false),
    SimpleCaseEntry(0x10404, 0, 2, false, true),
    SimpleCaseEntry(0x1042c, 1, 2, true, false),
    SimpleCaseEntry(0x01b3, 0, 2, false, true),
    SimpleCaseEntry(0x01b4, 1, 2, true, false),
    SimpleCaseEntry(0x1e92, 0, 2, false, true),
    SimpleCaseEntry(0x1e93, 1, 2, true, false),
    SimpleCaseEntry(0xa754, 0, 2, false, true),
    SimpleCaseEntry(0xa755, 1, 2, true, false),
    SimpleCaseEntry(0x10405, 0, 2, false, true),
    SimpleCaseEntry(0x1042d, 1, 2, true, false),
    SimpleCaseEntry(0x04be, 0, 2, false, true),
    SimpleCaseEntry(0x04bf, 1, 2, true, false),
    SimpleCaseEntry(0x10406, 0, 2, false, true),
    SimpleCaseEntry(0x1042e, 1, 2, true, false),
    SimpleCaseEntry(0x01b5, 0, 2, false, true),
    SimpleCaseEntry(0x01b6, 1, 2, true, false),
    SimpleCaseEntry(0x1e94, 0, 2, false, true),
    SimpleCaseEntry(0x1e95, 1, 2, true, false),
    SimpleCaseEntry(0xa756, 0, 2, false, true),
    SimpleCaseEntry(0xa757, 1, 2, true, false),
    SimpleCaseEntry(0x10407, 0, 2, false, true),
    SimpleCaseEntry(0x1042f, 1, 2, true, false),
    SimpleCaseEntry(0x04c0, 0, 2, false, true),
    SimpleCaseEntry(0x04cf, 1, 2, true, false),
    SimpleCaseEntry(0x10408, 0, 2, false, true),
    SimpleCaseEntry(0x10430, 1, 2, true, false),
    SimpleCaseEntry(0x01b7, 0, 2, false, true),
    SimpleCaseEntry(0x0292, 1, 2, true, false),
    SimpleCaseEntry(0x04c1, 0, 2, false, true),
    SimpleCaseEntry(0x04c2, 1, 2, true, false),
    SimpleCaseEntry(0xa758, 0, 2, false, true),
    SimpleCaseEntry(0xa759, 1, 2, true, false),
    SimpleCaseEntry(0x10409, 0, 2, false, true),
    SimpleCaseEntry(0x10431, 1, 2, true, false),
    SimpleCaseEntry(0x01b8, 0, 2, false, true),
    SimpleCaseEntry(0x01b9, 1, 2, true, false),
    SimpleCaseEntry(0x1040a, 0, 2, false, true),
    SimpleCaseEntry(0x10432, 1, 2, true, false),
    SimpleCaseEntry(0x04c3, 0, 2, false, true),
    SimpleCaseEntry(0x04c4, 1, 2, true, false),
    SimpleCaseEntry(0xa75a, 0, 2, false, true),
    SimpleCaseEntry(0xa75b, 1, 2, true, false),
    SimpleCaseEntry(0x1040b, 0, 2, false, true),
    SimpleCaseEntry(0x10433, 1, 2, true, false),
    SimpleCaseEntry(0x1040c, 0, 2, false, true),
    SimpleCaseEntry(0x10434, 1, 2, true, false),
    SimpleCaseEntry(0x04c5, 0, 2, false, true),
    SimpleCaseEntry(0x04c6, 1, 2, true, false),
    SimpleCaseEntry(0xa75c, 0, 2, false, true),
    SimpleCaseEntry(0xa75d, 1, 2, true, false),
    SimpleCaseEntry(0x1040d, 0, 2, false, true),
    SimpleCaseEntry(0x10435, 1, 2, true, false),
    SimpleCaseEntry(0x01bc, 0, 2, false, true),
    SimpleCaseEntry(0x01bd, 1, 2, true, false),
    SimpleCaseEntry(0x1e9b, 0, 3, true, false),
    SimpleCaseEntry(0x1e61, 1, 3, true, false),
    SimpleCaseEntry(0x1e60, 2, 3, false, true),
    SimpleCaseEntry(0x1040e, 0, 2, false, true),
    SimpleCaseEntry(0x10436, 1, 2, true, false),
    SimpleCaseEntry(0x04c7, 0, 2, false, true),
    SimpleCaseEntry(0x04c8, 1, 2, true, false),
    SimpleCaseEntry(0xa75e, 0, 2, false, true),
    SimpleCaseEntry(0xa75f, 1, 2, true, false),
    SimpleCaseEntry(0x1040f, 0, 2, false, true),
    SimpleCaseEntry(0x10437, 1, 2, true, false),
    SimpleCaseEntry(0x10410, 0, 2, false, true),
    SimpleCaseEntry(0x10438, 1, 2, true, false),
    SimpleCaseEntry(0x04c9, 0, 2, false, true),
    SimpleCaseEntry(0x04ca, 1, 2, true, false),
    SimpleCaseEntry(0x1e9e, 0, 2, false, true),
    SimpleCaseEntry(0x00df, 1, 2, true, false),
    SimpleCaseEntry(0xa760, 0, 2, false, true),
    SimpleCaseEntry(0xa761, 1, 2, true, false),
    SimpleCaseEntry(0x10411, 0, 2, false, true),
    SimpleCaseEntry(0x10439, 1, 2, true, false),
    SimpleCaseEntry(0x0345, 0, 4, true, false),
    SimpleCaseEntry(0x03b9, 1, 4, true, false),
    SimpleCaseEntry(0x0399, 2, 4, false, true),
    SimpleCaseEntry(0x1fbe, 3, 4, true, false),
    SimpleCaseEntry(0x10412, 0, 2, false, true),
    SimpleCaseEntry(0x1043a, 1, 2, true, false),
    SimpleCaseEntry(0x04cb, 0, 2, false, true),
    SimpleCaseEntry(0x04cc, 1, 2, true, false),
    SimpleCaseEntry(0x1ea0, 0, 2, false, true),
    SimpleCaseEntry(0x1ea1, 1, 2, true, false),
    SimpleCaseEntry(0xa762, 0, 2, false, true),
    SimpleCaseEntry(0xa763, 1, 2, true, false),
    SimpleCaseEntry(0x10413, 0, 2, false, true),
    SimpleCaseEntry(0x1043b, 1, 2, true, false),
    SimpleCaseEntry(0x10414, 0, 2, false, true),
    SimpleCaseEntry(0x1043c, 1, 2, true, false),
    SimpleCaseEntry(0x04cd, 0, 2, false, true),
    SimpleCaseEntry(0x04ce, 1, 2, true, false),
    SimpleCaseEntry(0x1ea2, 0, 2, false, true),
    SimpleCaseEntry(0x1ea3, 1, 2, true, false),
    SimpleCaseEntry(0x24b6, 0, 2, false, true),
    SimpleCaseEntry(0x24d0, 1, 2, true, false),
    SimpleCaseEntry(0xa764, 0, 2, false, true),
    SimpleCaseEntry(0xa765, 1, 2, true, false),
    SimpleCaseEntry(0x10415, 0, 2, false, true),
    SimpleCaseEntry(0x1043d, 1, 2, true, false),
    SimpleCaseEntry(0x01c4, 0, 3, false, true),
    SimpleCaseEntry(0x01c6, 1, 3, true, false),
    SimpleCaseEntry(0x01c5, 2, 3, false, false),
    SimpleCaseEntry(0x24b7, 0, 2, false, true),
    SimpleCaseEntry(0x24d1, 1, 2, true, false),
    SimpleCaseEntry(0x10416, 0, 2, false, true),
    SimpleCaseEntry(0x1043e, 1, 2, true, false),
    SimpleCaseEntry(0x01c5, 0, 3, false, false),
    SimpleCaseEntry(0x01c6, 1, 3, true, false),
    SimpleCaseEntry(0x01c4, 2, 3, false, true),
    SimpleCaseEntry(0x1ea4, 0, 2, false, true),
    SimpleCaseEntry(0x1ea5, 1, 2, true, false),
    SimpleCaseEntry(0x24b8, 0, 2, false, true),
    SimpleCaseEntry(0x24d2, 1, 2, true, false),
    SimpleCaseEntry(0xa766, 0, 2, false, true),
    SimpleCaseEntry(0xa767, 1, 2, true, false),
    SimpleCaseEntry(0x10417, 0, 2, false, true),
    SimpleCaseEntry(0x1043f, 1, 2, true, false),
    SimpleCaseEntry(0x0041, 0, 2, false, true),
    SimpleCaseEntry(0x0061, 1, 2, true, false),
    SimpleCaseEntry(0x04d0, 0, 2, false, true),
    SimpleCaseEntry(0x04d1, 1, 2, true, false),
    SimpleCaseEntry(0x24b9, 0, 2, false, true),
    SimpleCaseEntry(0x24d3, 1, 2, true, false),
    SimpleCaseEntry(0x10418, 0, 2, false, true),
    SimpleCaseEntry(0x10440, 1, 2, true, false),
    SimpleCaseEntry(0x0042, 0, 2, false, true),
    SimpleCaseEntry(0x0062, 1, 2, true, false),
    SimpleCaseEntry(0x01c7, 0, 3, false, true),
    SimpleCaseEntry(0x01c9, 1, 3, true, false),
    SimpleCaseEntry(0x01c8, 2, 3, false, false),
    SimpleCaseEntry(0x1ea6, 0, 2, false, true),
    SimpleCaseEntry(0x1ea7, 1, 2, true, false),
    SimpleCaseEntry(0x24ba, 0, 2, false, true),
    SimpleCaseEntry(0x24d4, 1, 2, true, false),
    SimpleCaseEntry(0xa768, 0, 2, false, true),
    SimpleCaseEntry(0xa769, 1, 2, true, false),
    SimpleCaseEntry(0x10419, 0, 2, false, true),
    SimpleCaseEntry(0x10441, 1, 2, true, false),
    SimpleCaseEntry(0x0043, 0, 2, false, true),
    SimpleCaseEntry(0x0063, 1, 2, true, false),
    SimpleCaseEntry(0x01c8, 0, 3, false, false),
    SimpleCaseEntry(0x01c9, 1, 3, true, false),
    SimpleCaseEntry(0x01c7, 2, 3, false, true),
    SimpleCaseEntry(0x04d2, 0, 2, false, true),
    SimpleCaseEntry(0x04d3, 1, 2, true, false),
    SimpleCaseEntry(0x24bb, 0, 2, false, true),
    SimpleCaseEntry(0x24d5, 1, 2, true, false),
    SimpleCaseEntry(0x1041a, 0, 2, false, true),
    SimpleCaseEntry(0x10442, 1, 2, true, false),
    SimpleCaseEntry(0x0044, 0, 2, false, true),
    SimpleCaseEntry(0x0064, 1, 2, true, false),
    SimpleCaseEntry(0x1ea8, 0, 2, false, true),
    SimpleCaseEntry(0x1ea9, 1, 2, true, false),
    SimpleCaseEntry(0x24bc, 0, 2, false, true),
    SimpleCaseEntry(0x24d6, 1, 2, true, false),
    SimpleCaseEntry(0xa76a, 0, 2, false, true),
    SimpleCaseEntry(0xa76b, 1, 2, true, false),
    SimpleCaseEntry(0x1041b, 0, 2, false, true),
    SimpleCaseEntry(0x10443, 1, 2, true, false),
    SimpleCaseEntry(0x0045, 0, 2, false, true),
    SimpleCaseEntry(0x0065, 1, 2, true, false),
    SimpleCaseEntry(0x01ca, 0, 3, false, true),
    SimpleCaseEntry(0x01cc, 1, 3, true, false),
    SimpleCaseEntry(0x01cb, 2, 3, false, false),
    SimpleCaseEntry(0x04d4, 0, 2, false, true),
    SimpleCaseEntry(0x04d5, 1, 2, true, false),
    SimpleCaseEntry(0x24bd, 0, 2, false, true),
    SimpleCaseEntry(0x24d7, 1, 2, true, false),
    SimpleCaseEntry(0x1041c, 0, 2, false, true),
    SimpleCaseEntry(0x10444, 1, 2, true, false),
    SimpleCaseEntry(0x0046, 0, 2, false, true),
    SimpleCaseEntry(0x0066, 1, 2, true, false),
    SimpleCaseEntry(0x01cb, 0, 3, false, false),
    SimpleCaseEntry(0x01cc, 1, 3, true, false),
    SimpleCaseEntry(0x01ca, 2, 3, false, true),
    SimpleCaseEntry(0x1eaa, 0, 2, false, true),
    SimpleCaseEntry(0x1eab, 1, 2, true, false),
    SimpleCaseEntry(0x24be, 0, 2, false, true),
    SimpleCaseEntry(0x24d8, 1, 2, true, false),
    SimpleCaseEntry(0xa76c, 0, 2, false, true),
    SimpleCaseEntry(0xa76d, 1, 2, true, false),
    SimpleCaseEntry(0x1041d, 0, 2, false, true),
    SimpleCaseEntry(0x10445, 1, 2, true, false),
    SimpleCaseEntry(0x0047, 0, 2, false, true),
    SimpleCaseEntry(0x0067, 1, 2, true, false),
    SimpleCaseEntry(0x04d6, 0, 2, false, true),
    SimpleCaseEntry(0x04d7, 1, 2, true, false),
    SimpleCaseEntry(0x24bf, 0, 2, false, true),
    SimpleCaseEntry(0x24d9, 1, 2, true, false),
    SimpleCaseEntry(0x1041e, 0, 2, false, true),
    SimpleCaseEntry(0x10446, 1, 2, true, false),
    SimpleCaseEntry(0x0048, 0, 2, false, true),
    SimpleCaseEntry(0x0068, 1, 2, true, false),
    SimpleCaseEntry(0x01cd, 0, 2, false, true),
    SimpleCaseEntry(0x01ce, 1, 2, true, false),
    SimpleCaseEntry(0x1eac, 0, 2, false, true),
    SimpleCaseEntry(0x1ead, 1, 2, true, false),
    SimpleCaseEntry(0x24c0, 0, 2, false, true),
    SimpleCaseEntry(0x24da, 1, 2, true, false),
    SimpleCaseEntry(0xa76e, 0, 2, false, true),
    SimpleCaseEntry(0xa76f, 1, 2, true, false),
    SimpleCaseEntry(0x1041f, 0, 2, false, true),
    SimpleCaseEntry(0x10447, 1, 2, true, false),
    SimpleCaseEntry(0x0049, 0, 2, false, true),
    SimpleCaseEntry(0x0069, 1, 2, true, false),
    SimpleCaseEntry(0x04d8, 0, 2, false, true),
    SimpleCaseEntry(0x04d9, 1, 2, true, false),
    SimpleCaseEntry(0x24c1, 0, 2, false, true),
    SimpleCaseEntry(0x24db, 1, 2, true, false),
    SimpleCaseEntry(0x10420, 0, 2, false, true),
    SimpleCaseEntry(0x10448, 1, 2, true, false),
    SimpleCaseEntry(0x004a, 0, 2, false, true),
    SimpleCaseEntry(0x006a, 1, 2, true, false),
    SimpleCaseEntry(0x01cf, 0, 2, false, true),
    SimpleCaseEntry(0x01d0, 1, 2, true, false),
    SimpleCaseEntry(0x1eae, 0, 2, false, true),
    SimpleCaseEntry(0x1eaf, 1, 2, true, false),
    SimpleCaseEntry(0x24c2, 0, 2, false, true),
    SimpleCaseEntry(0x24dc, 1, 2, true, false),
    SimpleCaseEntry(0x10421, 0, 2, false, true),
    SimpleCaseEntry(0x10449, 1, 2, true, false),
    SimpleCaseEntry(0x004b, 0, 3, false, true),
    SimpleCaseEntry(0x006b, 1, 3, true, false),
    SimpleCaseEntry(0x212a, 2, 3, false, true),
    SimpleCaseEntry(0x04da, 0, 2, false, true),
    SimpleCaseEntry(0x04db, 1, 2, true, false),
    SimpleCaseEntry(0x24c3, 0, 2, false, true),
    SimpleCaseEntry(0x24dd, 1, 2, true, false),
    SimpleCaseEntry(0x10422, 0, 2, false, true),
    SimpleCaseEntry(0x1044a, 1, 2, true, false),
    SimpleCaseEntry(0x004c, 0, 2, false, true),
    SimpleCaseEntry(0x006c, 1, 2, true, false),
    SimpleCaseEntry(0x01d1, 0, 2, false, true),
    SimpleCaseEntry(0x01d2, 1, 2, true, false),
    SimpleCaseEntry(0x1eb0, 0, 2, false, true),
    SimpleCaseEntry(0x1eb1, 1, 2, true, false),
    SimpleCaseEntry(0x24c4, 0, 2, false, true),
    SimpleCaseEntry(0x24de, 1, 2, true, false),
    SimpleCaseEntry(0x10423, 0, 2, false, true),
    SimpleCaseEntry(0x1044b, 1, 2, true, false),
    SimpleCaseEntry(0x004d, 0, 2, false, true),
    SimpleCaseEntry(0x006d, 1, 2, true, false),
    SimpleCaseEntry(0x04dc, 0, 2, false, true),
    SimpleCaseEntry(0x04dd, 1, 2, true, false),
    SimpleCaseEntry(0x24c5, 0, 2, false, true),
    SimpleCaseEntry(0x24df, 1, 2, true, false),
    SimpleCaseEntry(0x10424, 0, 2, false, true),
    SimpleCaseEntry(0x1044c, 1, 2, true, false),
    SimpleCaseEntry(0x004e, 0, 2, false, true),
    SimpleCaseEntry(0x006e, 1, 2, true, false),
    SimpleCaseEntry(0x01d3, 0, 2, false, true),
    SimpleCaseEntry(0x01d4, 1, 2, true, false),
    SimpleCaseEntry(0x1eb2, 0, 2, false, true),
    SimpleCaseEntry(0x1eb3, 1, 2, true, false),
    SimpleCaseEntry(0x24c6, 0, 2, false, true),
    SimpleCaseEntry(0x24e0, 1, 2, true, false),
    SimpleCaseEntry(0x10425, 0, 2, false, true),
    SimpleCaseEntry(0x1044d, 1, 2, true, false),
    SimpleCaseEntry(0x004f, 0, 2, false, true),
    SimpleCaseEntry(0x006f, 1, 2, true, false),
    SimpleCaseEntry(0x04de, 0, 2, false, true),
    SimpleCaseEntry(0x04df, 1, 2, true, false),
    SimpleCaseEntry(0x24c7, 0, 2, false, true),
    SimpleCaseEntry(0x24e1, 1, 2, true, false),
    SimpleCaseEntry(0x2c60, 0, 2, false, true),
    SimpleCaseEntry(0x2c61, 1, 2, true, false),
    SimpleCaseEntry(0x10426, 0, 2, false, true),
    SimpleCaseEntry(0x1044e, 1, 2, true, false),
    SimpleCaseEntry(0x0050, 0, 2, false, true),
    SimpleCaseEntry(0x0070, 1, 2, true, false),
    SimpleCaseEntry(0x01d5, 0, 2, false, true),
    SimpleCaseEntry(0x01d6, 1, 2, true, false),
    SimpleCaseEntry(0x1eb4, 0, 2, false, true),
    SimpleCaseEntry(0x1eb5, 1, 2, true, false),
    SimpleCaseEntry(0x24c8, 0, 2, false, true),
    SimpleCaseEntry(0x24e2, 1, 2, true, false),
    SimpleCaseEntry(0x10427, 0, 2, false, true),
    SimpleCaseEntry(0x1044f, 1, 2, true, false),
    SimpleCaseEntry(0x0051, 0, 2, false, true),
    SimpleCaseEntry(0x0071, 1, 2, true, false),
    SimpleCaseEntry(0x04e0, 0, 2, false, true),
    SimpleCaseEntry(0x04e1, 1, 2, true, false),
    SimpleCaseEntry(0x24c9, 0, 2, false, true),
    SimpleCaseEntry(0x24e3, 1, 2, true, false),
    SimpleCaseEntry(0x2c62, 0, 2, false, true),
    SimpleCaseEntry(0x026b, 1, 2, true, false),
    SimpleCaseEntry(0x0052, 0, 2, false, true),
    SimpleCaseEntry(0x0072, 1, 2, true, false),
    SimpleCaseEntry(0x01d7, 0, 2, false, true),
    SimpleCaseEntry(0x01d8, 1, 2, true, false),
    SimpleCaseEntry(0x1eb6, 0, 2, false, true),
    SimpleCaseEntry(0x1eb7, 1, 2, true, false),
    SimpleCaseEntry(0x24ca, 0, 2, false, true),
    SimpleCaseEntry(0x24e4, 1, 2, true, false),
    SimpleCaseEntry(0x2c63, 0, 2, false, true),
    SimpleCaseEntry(0x1d7d, 1, 2, true, false),
    SimpleCaseEntry(0x0053, 0, 3, false, true),
    SimpleCaseEntry(0x0073, 1, 3, true, false),
    SimpleCaseEntry(0x017f, 2, 3, true, false),
    SimpleCaseEntry(0x04e2, 0, 2, false, true),
    SimpleCaseEntry(0x04e3, 1, 2, true, false),
    SimpleCaseEntry(0x24cb, 0, 2, false, true),
    SimpleCaseEntry(0x24e5, 1, 2, true, false),
    SimpleCaseEntry(0x2c64, 0, 2, false, true),
    SimpleCaseEntry(0x027d, 1, 2, true, false),
    SimpleCaseEntry(0xa779, 0, 2, false, true),
    SimpleCaseEntry(0xa77a, 1, 2, true, false),
    SimpleCaseEntry(0x0054, 0, 2, false, true),
    SimpleCaseEntry(0x0074, 1, 2, true, false),
    SimpleCaseEntry(0x01d9, 0, 2, false, true),
    SimpleCaseEntry(0x01da, 1, 2, true, false),
    SimpleCaseEntry(0x1eb8, 0, 2, false, true),
    SimpleCaseEntry(0x1eb9, 1, 2, true, false),
    SimpleCaseEntry(0x24cc, 0, 2, false, true),
    SimpleCaseEntry(0x24e6, 1, 2, true, false),
    SimpleCaseEntry(0x0055, 0, 2, false, true),
    SimpleCaseEntry(0x0075, 1, 2, true, false),
    SimpleCaseEntry(0x04e4, 0, 2, false, true),
    SimpleCaseEntry(0x04e5, 1, 2, true, false),
    SimpleCaseEntry(0x24cd, 0, 2, false, true),
    SimpleCaseEntry(0x24e7, 1, 2, true, false),
    SimpleCaseEntry(0xa77b, 0, 2, false, true),
    SimpleCaseEntry(0xa77c, 1, 2, true, false),
    SimpleCaseEntry(0x0056, 0, 2, false, true),
    SimpleCaseEntry(0x0076, 1, 2, true, false),
    SimpleCaseEntry(0x01db, 0, 2, false, true),
    SimpleCaseEntry(0x01dc, 1, 2, true, false),
    SimpleCaseEntry(0x1eba, 0, 2, false, true),
    SimpleCaseEntry(0x1ebb, 1, 2, true, false),
    SimpleCaseEntry(0x24ce, 0, 2, false, true),
    SimpleCaseEntry(0x24e8, 1, 2, true, false),
    SimpleCaseEntry(0x2c67, 0, 2, false, true),
    SimpleCaseEntry(0x2c68, 1, 2, true, false),
    SimpleCaseEntry(0x0057, 0, 2, false, true),
    SimpleCaseEntry(0x0077, 1, 2, true, false),
    SimpleCaseEntry(0x04e6, 0, 2, false, true),
    SimpleCaseEntry(0x04e7, 1, 2, true, false),
    SimpleCaseEntry(0x24cf, 0, 2, false, true),
    SimpleCaseEntry(0x24e9, 1, 2, true, false),
    SimpleCaseEntry(0xa77d, 0, 2, false, true),
    SimpleCaseEntry(0x1d79, 1, 2, true, false),
    SimpleCaseEntry(0x0058, 0, 2, false, true),
    SimpleCaseEntry(0x0078, 1, 2, true, false),
    SimpleCaseEntry(0x1ebc, 0, 2, false, true),
    SimpleCaseEntry(0x1ebd, 1, 2, true, false),
    SimpleCaseEntry(0x2c69, 0, 2, false, true),
    SimpleCaseEntry(0x2c6a, 1, 2, true, false),
    SimpleCaseEntry(0xa77e, 0, 2, false, true),
    SimpleCaseEntry(0xa77f, 1, 2, true, false),
    SimpleCaseEntry(0x0059, 0, 2, false, true),
    SimpleCaseEntry(0x0079, 1, 2, true, false),
    SimpleCaseEntry(0x01de, 0, 2, false, true),
    SimpleCaseEntry(0x01df, 1, 2, true, false),
    SimpleCaseEntry(0x04e8, 0, 2, false, true),
    SimpleCaseEntry(0x04e9, 1, 2, true, false),
    SimpleCaseEntry(0x005a, 0, 2, false, true),
    SimpleCaseEntry(0x007a, 1, 2, true, false),
    SimpleCaseEntry(0x1ebe, 0, 2, false, true),
    SimpleCaseEntry(0x1ebf, 1, 2, true, false),
    SimpleCaseEntry(0x2c6b, 0, 2, false, true),
    SimpleCaseEntry(0x2c6c, 1, 2, true, false),
    SimpleCaseEntry(0xa780, 0, 2, false, true),
    SimpleCaseEntry(0xa781, 1, 2, true, false),
    SimpleCaseEntry(0x01e0, 0, 2, false, true),
    SimpleCaseEntry(0x01e1, 1, 2, true, false),
    SimpleCaseEntry(0x04ea, 0, 2, false, true),
    SimpleCaseEntry(0x04eb, 1, 2, true, false),
    SimpleCaseEntry(0x1ec0, 0, 2, false, true),
    SimpleCaseEntry(0x1ec1, 1, 2, true, false),
    SimpleCaseEntry(0x2c6d, 0, 2, false, true),
    SimpleCaseEntry(0x0251, 1, 2, true, false),
    SimpleCaseEntry(0xa782, 0, 2, false, true),
    SimpleCaseEntry(0xa783, 1, 2, true, false),
    SimpleCaseEntry(0x01e2, 0, 2, false, true),
    SimpleCaseEntry(0x01e3, 1, 2, true, false),
    SimpleCaseEntry(0x04ec, 0, 2, false, true),
    SimpleCaseEntry(0x04ed, 1, 2, true, false),
    SimpleCaseEntry(0x2c6e, 0, 2, false, true),
    SimpleCaseEntry(0x0271, 1, 2, true, false),
    SimpleCaseEntry(0x1ec2, 0, 2, false, true),
    SimpleCaseEntry(0x1ec3, 1, 2, true, false),
    SimpleCaseEntry(0x2c6f, 0, 2, false, true),
    SimpleCaseEntry(0x0250, 1, 2, true, false),
    SimpleCaseEntry(0xa784, 0, 2, false, true),
    SimpleCaseEntry(0xa785, 1, 2, true, false),
    SimpleCaseEntry(0x01e4, 0, 2, false, true),
    SimpleCaseEntry(0x01e5, 1, 2, true, false),
    SimpleCaseEntry(0x04ee, 0, 2, false, true),
    SimpleCaseEntry(0x04ef, 1, 2, true, false),
    SimpleCaseEntry(0x2c70, 0, 2, false, true),
    SimpleCaseEntry(0x0252, 1, 2, true, false),
    SimpleCaseEntry(0x1ec4, 0, 2, false, true),
    SimpleCaseEntry(0x1ec5, 1, 2, true, false),
    SimpleCaseEntry(0xa786, 0, 2, false, true),
    SimpleCaseEntry(0xa787, 1, 2, true, false),
    SimpleCaseEntry(0x01e6, 0, 2, false, true),
    SimpleCaseEntry(0x01e7, 1, 2, true, false),
    SimpleCaseEntry(0x04f0, 0, 2, false, true),
    SimpleCaseEntry(0x04f1, 1, 2, true, false),
    SimpleCaseEntry(0x2c72, 0, 2, false, true),
    SimpleCaseEntry(0x2c73, 1, 2, true, false),
    SimpleCaseEntry(0x1ec6, 0, 2, false, true),
    SimpleCaseEntry(0x1ec7, 1, 2, true, false),
    SimpleCaseEntry(0x01e8, 0, 2, false, true),
    SimpleCaseEntry(0x01e9, 1, 2, true, false),
    SimpleCaseEntry(0x04f2, 0, 2, false, true),
    SimpleCaseEntry(0x04f3, 1, 2, true, false),
    SimpleCaseEntry(0x1ec8, 0, 2, false, true),
    SimpleCaseEntry(0x1ec9, 1, 2, true, false),
    SimpleCaseEntry(0x2c75, 0, 2, false, true),
    SimpleCaseEntry(0x2c76, 1, 2, true, false),
    SimpleCaseEntry(0x01ea, 0, 2, false, true),
    SimpleCaseEntry(0x01eb, 1, 2, true, false),
    SimpleCaseEntry(0x04f4, 0, 2, false, true),
    SimpleCaseEntry(0x04f5, 1, 2, true, false),
    SimpleCaseEntry(0xa78b, 0, 2, false, true),
    SimpleCaseEntry(0xa78c, 1, 2, true, false),
    SimpleCaseEntry(0x0370, 0, 2, false, true),
    SimpleCaseEntry(0x0371, 1, 2, true, false),
    SimpleCaseEntry(0x1eca, 0, 2, false, true),
    SimpleCaseEntry(0x1ecb, 1, 2, true, false),
    SimpleCaseEntry(0x01ec, 0, 2, false, true),
    SimpleCaseEntry(0x01ed, 1, 2, true, false),
    SimpleCaseEntry(0x04f6, 0, 2, false, true),
    SimpleCaseEntry(0x04f7, 1, 2, true, false),
    SimpleCaseEntry(0xa78d, 0, 2, false, true),
    SimpleCaseEntry(0x0265, 1, 2, true, false),
    SimpleCaseEntry(0x0372, 0, 2, false, true),
    SimpleCaseEntry(0x0373, 1, 2, true, false),
    SimpleCaseEntry(0x1ecc, 0, 2, false, true),
    SimpleCaseEntry(0x1ecd, 1, 2, true, false),
    SimpleCaseEntry(0x01ee, 0, 2, false, true),
    SimpleCaseEntry(0x01ef, 1, 2, true, false),
    SimpleCaseEntry(0x04f8, 0, 2, false, true),
    SimpleCaseEntry(0x04f9, 1, 2, true, false),
    SimpleCaseEntry(0x1ece, 0, 2, false, true),
    SimpleCaseEntry(0x1ecf, 1, 2, true, false),
    SimpleCaseEntry(0xa790, 0, 2, false, true),
    SimpleCaseEntry(0xa791, 1, 2, true, false),
    SimpleCaseEntry(0x04fa, 0, 2, false, true),
    SimpleCaseEntry(0x04fb, 1, 2, true, false),
    SimpleCaseEntry(0x01f1, 0, 3, false, true),
    SimpleCaseEntry(0x01f3, 1, 3, true, false),
    SimpleCaseEntry(0x01f2, 2, 3, false, false),
    SimpleCaseEntry(0x0376, 0, 2, false, true),
    SimpleCaseEntry(0x0377, 1, 2, true, false),
    SimpleCaseEntry(0x1ed0, 0, 2, false, true),
    SimpleCaseEntry(0x1ed1, 1, 2, true, false),
    SimpleCaseEntry(0xa792, 0, 2, false, true),
    SimpleCaseEntry(0xa793, 1, 2, true, false),
    SimpleCaseEntry(0x01f2, 0, 3, false, false),
    SimpleCaseEntry(0x01f3, 1, 3, true, false),
    SimpleCaseEntry(0x01f1, 2, 3, false, true),
    SimpleCaseEntry(0x04fc, 0, 2, false, true),
    SimpleCaseEntry(0x04fd, 1, 2, true, false),
    SimpleCaseEntry(0x2c7e, 0, 2, false, true),
    SimpleCaseEntry(0x023f, 1, 2, true, false),
    SimpleCaseEntry(0x1ed2, 0, 2, false, true),
    SimpleCaseEntry(0x1ed3, 1, 2, true, false),
    SimpleCaseEntry(0x2c7f, 0, 2, false, true),
    SimpleCaseEntry(0x0240, 1, 2, true, false),
    SimpleCaseEntry(0x01f4, 0, 2, false, true),
    SimpleCaseEntry(0x01f5, 1, 2, true, false),
    SimpleCaseEntry(0x04fe, 0, 2, false, true),
    SimpleCaseEntry(0x04ff, 1, 2, true, false),
    SimpleCaseEntry(0x2c80, 0, 2, false, true),
    SimpleCaseEntry(0x2c81, 1, 2, true, false),
    SimpleCaseEntry(0x1ed4, 0, 2, false, true),
    SimpleCaseEntry(0x1ed5, 1, 2, true, false),
    SimpleCaseEntry(0x01f6, 0, 2, false, true),
    SimpleCaseEntry(0x0195, 1, 2, true, false),
    SimpleCaseEntry(0x0500, 0, 2, false, true),
    SimpleCaseEntry(0x0501, 1, 2, true, false),
    SimpleCaseEntry(0x2c82, 0, 2, false, true),
    SimpleCaseEntry(0x2c83, 1, 2, true, false),
    SimpleCaseEntry(0x01f7, 0, 2, false, true),
    SimpleCaseEntry(0x01bf, 1, 2, true, false),
    SimpleCaseEntry(0x1ed6, 0, 2, false, true),
    SimpleCaseEntry(0x1ed7, 1, 2, true, false),
    SimpleCaseEntry(0x01f8, 0, 2, false, true),
    SimpleCaseEntry(0x01f9, 1, 2, true, false),
    SimpleCaseEntry(0x0502, 0, 2, false, true),
    SimpleCaseEntry(0x0503, 1, 2, true, false),
    SimpleCaseEntry(0x2c84, 0, 2, false, true),
    SimpleCaseEntry(0x2c85, 1, 2, true, false),
    SimpleCaseEntry(0x1ed8, 0, 2, false, true),
    SimpleCaseEntry(0x1ed9, 1, 2, true, false),
    SimpleCaseEntry(0x01fa, 0, 2, false, true),
    SimpleCaseEntry(0x01fb, 1, 2, true, false),
    SimpleCaseEntry(0x0504, 0, 2, false, true),
    SimpleCaseEntry(0x0505, 1, 2, true, false),
    SimpleCaseEntry(0x2c86, 0, 2, false, true),
    SimpleCaseEntry(0x2c87, 1, 2, true, false),
    SimpleCaseEntry(0x1eda, 0, 2, false, true),
    SimpleCaseEntry(0x1edb, 1, 2, true, false),
    SimpleCaseEntry(0x01fc, 0, 2, false, true),
    SimpleCaseEntry(0x01fd, 1, 2, true, false),
    SimpleCaseEntry(0x0506, 0, 2, false, true),
    SimpleCaseEntry(0x0507, 1, 2, true, false),
    SimpleCaseEntry(0x2c88, 0, 2, false, true),
    SimpleCaseEntry(0x2c89, 1, 2, true, false),
    SimpleCaseEntry(0x1edc, 0, 2, false, true),
    SimpleCaseEntry(0x1edd, 1, 2, true, false),
    SimpleCaseEntry(0x01fe, 0, 2, false, true),
    SimpleCaseEntry(0x01ff, 1, 2, true, false),
    SimpleCaseEntry(0x0508, 0, 2, false, true),
    SimpleCaseEntry(0x0509, 1, 2, true, false),
    SimpleCaseEntry(0x2c8a, 0, 2, false, true),
    SimpleCaseEntry(0x2c8b, 1, 2, true, false),
    SimpleCaseEntry(0x1ede, 0, 2, false, true),
    SimpleCaseEntry(0x1edf, 1, 2, true, false),
    SimpleCaseEntry(0xa7a0, 0, 2, false, true),
    SimpleCaseEntry(0xa7a1, 1, 2, true, false),
    SimpleCaseEntry(0x0200, 0, 2, false, true),
    SimpleCaseEntry(0x0201, 1, 2, true, false),
    SimpleCaseEntry(0x050a, 0, 2, false, true),
    SimpleCaseEntry(0x050b, 1, 2, true, false),
    SimpleCaseEntry(0x2c8c, 0, 2, false, true),
    SimpleCaseEntry(0x2c8d, 1, 2, true, false),
    SimpleCaseEntry(0x0386, 0, 2, false, true),
    SimpleCaseEntry(0x03ac, 1, 2, true, false),
    SimpleCaseEntry(0x1ee0, 0, 2, false, true),
    SimpleCaseEntry(0x1ee1, 1, 2, true, false),
    SimpleCaseEntry(0xa7a2, 0, 2, false, true),
    SimpleCaseEntry(0xa7a3, 1, 2, true, false),
    SimpleCaseEntry(0x0202, 0, 2, false, true),
    SimpleCaseEntry(0x0203, 1, 2, true, false),
    SimpleCaseEntry(0x050c, 0, 2, false, true),
    SimpleCaseEntry(0x050d, 1, 2, true, false),
    SimpleCaseEntry(0x2c8e, 0, 2, false, true),
    SimpleCaseEntry(0x2c8f, 1, 2, true, false),
    SimpleCaseEntry(0x0388, 0, 2, false, true),
    SimpleCaseEntry(0x03ad, 1, 2, true, false),
    SimpleCaseEntry(0x1ee2, 0, 2, false, true),
    SimpleCaseEntry(0x1ee3, 1, 2, true, false),
    SimpleCaseEntry(0xa7a4, 0, 2, false, true),
    SimpleCaseEntry(0xa7a5, 1, 2, true, false),
    SimpleCaseEntry(0x0204, 0, 2, false, true),
    SimpleCaseEntry(0x0205, 1, 2, true, false),
    SimpleCaseEntry(0x0389, 0, 2, false, true),
    SimpleCaseEntry(0x03ae, 1, 2, true, false),
    SimpleCaseEntry(0x050e, 0, 2, false, true),
    SimpleCaseEntry(0x050f, 1, 2, true, false),
    SimpleCaseEntry(0x2c90, 0, 2, false, true),
    SimpleCaseEntry(0x2c91, 1, 2, true, false),
    SimpleCaseEntry(0x038a, 0, 2, false, true),
    SimpleCaseEntry(0x03af, 1, 2, true, false),
    SimpleCaseEntry(0x1ee4, 0, 2, false, true),
    SimpleCaseEntry(0x1ee5, 1, 2, true, false),
    SimpleCaseEntry(0xa7a6, 0, 2, false, true),
    SimpleCaseEntry(0xa7a7, 1, 2, true, false),
    SimpleCaseEntry(0x0206, 0, 2, false, true),
    SimpleCaseEntry(0x0207, 1, 2, true, false),
    SimpleCaseEntry(0x0510, 0, 2, false, true),
    SimpleCaseEntry(0x0511, 1, 2, true, false),
    SimpleCaseEntry(0x2c92, 0, 2, false, true),
    SimpleCaseEntry(0x2c93, 1, 2, true, false),
    SimpleCaseEntry(0x038c, 0, 2, false, true),
    SimpleCaseEntry(0x03cc, 1, 2, true, false),
    SimpleCaseEntry(0x1ee6, 0, 2, false, true),
    SimpleCaseEntry(0x1ee7, 1, 2, true, false),
    SimpleCaseEntry(0xa7a8, 0, 2, false, true),
    SimpleCaseEntry(0xa7a9, 1, 2, true, false),
    SimpleCaseEntry(0x0208, 0, 2, false, true),
    SimpleCaseEntry(0x0209, 1, 2, true, false),
    SimpleCaseEntry(0x0512, 0, 2, false, true),
    SimpleCaseEntry(0x0513, 1, 2, true, false),
    SimpleCaseEntry(0x2c94, 0, 2, false, true),
    SimpleCaseEntry(0x2c95, 1, 2, true, false),
    SimpleCaseEntry(0x038e, 0, 2, false, true),
    SimpleCaseEntry(0x03cd, 1, 2, true, false),
    SimpleCaseEntry(0x1ee8, 0, 2, false, true),
    SimpleCaseEntry(0x1ee9, 1, 2, true, false),
    SimpleCaseEntry(0xa7aa, 0, 2, false, true),
    SimpleCaseEntry(0x0266, 1, 2, true, false),
    SimpleCaseEntry(0x020a, 0, 2, false, true),
    SimpleCaseEntry(0x020b, 1, 2, true, false),
    SimpleCaseEntry(0x038f, 0, 2, false, true),
    SimpleCaseEntry(0x03ce, 1, 2, true, false),
    SimpleCaseEntry(0x0514, 0, 2, false, true),
    SimpleCaseEntry(0x0515, 1, 2, true, false),
    SimpleCaseEntry(0x2c96, 0, 2, false, true),
    SimpleCaseEntry(0x2c97, 1, 2, true, false),
    SimpleCaseEntry(0x1eea, 0, 2, false, true),
    SimpleCaseEntry(0x1eeb, 1, 2, true, false),
    SimpleCaseEntry(0x020c, 0, 2, false, true),
    SimpleCaseEntry(0x020d, 1, 2, true, false),
    SimpleCaseEntry(0x0391, 0, 2, false, true),
    SimpleCaseEntry(0x03b1, 1, 2, true, false),
    SimpleCaseEntry(0x0516, 0, 2, false, true),
    SimpleCaseEntry(0x0517, 1, 2, true, false),
    SimpleCaseEntry(0x2c98, 0, 2, false, true),
    SimpleCaseEntry(0x2c99, 1, 2, true, false),
    SimpleCaseEntry(0x0392, 0, 3, false, true),
    SimpleCaseEntry(0x03b2, 1, 3, true, false),
    SimpleCaseEntry(0x03d0, 2, 3, true, false),
    SimpleCaseEntry(0x1eec, 0, 2, false, true),
    SimpleCaseEntry(0x1eed, 1, 2, true, false),
    SimpleCaseEntry(0x020e, 0, 2, false, true),
    SimpleCaseEntry(0x020f, 1, 2, true, false),
    SimpleCaseEntry(0x0393, 0, 2, false, true),
    SimpleCaseEntry(0x03b3, 1, 2, true, false),
    SimpleCaseEntry(0x0518, 0, 2, false, true),
    SimpleCaseEntry(0x0519, 1, 2, true, false),
    SimpleCaseEntry(0x2c9a, 0, 2, false, true),
    SimpleCaseEntry(0x2c9b, 1, 2, true, false),
    SimpleCaseEntry(0x0394, 0, 2, false, true),
    SimpleCaseEntry(0x03b4, 1, 2, true, false),
    SimpleCaseEntry(0x1eee, 0, 2, false, true),
    SimpleCaseEntry(0x1eef, 1, 2, true, false),
    SimpleCaseEntry(0x0210, 0, 2, false, true),
    SimpleCaseEntry(0x0211, 1, 2, true, false),
    SimpleCaseEntry(0x0395, 0, 3, false, true),
    SimpleCaseEntry(0x03b5, 1, 3, true, false),
    SimpleCaseEntry(0x03f5, 2, 3, true, false),
    SimpleCaseEntry(0x051a, 0, 2, false, true),
    SimpleCaseEntry(0x051b, 1, 2, true, false),
    SimpleCaseEntry(0x2c9c, 0, 2, false, true),
    SimpleCaseEntry(0x2c9d, 1, 2, true, false),
    SimpleCaseEntry(0x0396, 0, 2, false, true),
    SimpleCaseEntry(0x03b6, 1, 2, true, false),
    SimpleCaseEntry(0x1ef0, 0, 2, false, true),
    SimpleCaseEntry(0x1ef1, 1, 2, true, false),
    SimpleCaseEntry(0x0212, 0, 2, false, true),
    SimpleCaseEntry(0x0213, 1, 2, true, false),
    SimpleCaseEntry(0x0397, 0, 2, false, true),
    SimpleCaseEntry(0x03b7, 1, 2, true, false),
    SimpleCaseEntry(0x051c, 0, 2, false, true),
    SimpleCaseEntry(0x051d, 1, 2, true, false),
    SimpleCaseEntry(0x2c9e, 0, 2, false, true),
    SimpleCaseEntry(0x2c9f, 1, 2, true, false),
    SimpleCaseEntry(0x0398, 0, 4, false, true),
    SimpleCaseEntry(0x03b8, 1, 4, true, false),
    SimpleCaseEntry(0x03d1, 2, 4, true, false),
    SimpleCaseEntry(0x03f4, 3, 4, false, true),
    SimpleCaseEntry(0x1ef2, 0, 2, false, true),
    SimpleCaseEntry(0x1ef3, 1, 2, true, false),
    SimpleCaseEntry(0x0214, 0, 2, false, true),
    SimpleCaseEntry(0x0215, 1, 2, true, false),
    SimpleCaseEntry(0x0399, 0, 4, false, true),
    SimpleCaseEntry(0x03b9, 1, 4, true, false),
    SimpleCaseEntry(0x0345, 2, 4, true, false),
    SimpleCaseEntry(0x1fbe, 3, 4, true, false),
    SimpleCaseEntry(0x051e, 0, 2, false, true),
    SimpleCaseEntry(0x051f, 1, 2, true, false),
    SimpleCaseEntry(0x2ca0, 0, 2, false, true),
    SimpleCaseEntry(0x2ca1, 1, 2, true, false),
    SimpleCaseEntry(0x039a, 0, 3, false, true),
    SimpleCaseEntry(0x03ba, 1, 3, true, false),
    SimpleCaseEntry(0x03f0, 2, 3, true, false),
    SimpleCaseEntry(0x1ef4, 0, 2, false, true),
    SimpleCaseEntry(0x1ef5, 1, 2, true, false),
    SimpleCaseEntry(0x0216, 0, 2, false, true),
    SimpleCaseEntry(0x0217, 1, 2, true, false),
    SimpleCaseEntry(0x039b, 0, 2, false, true),
    SimpleCaseEntry(0x03bb, 1, 2, true, false),
    SimpleCaseEntry(0x0520, 0, 2, false, true),
    SimpleCaseEntry(0x0521, 1, 2, true, false),
    SimpleCaseEntry(0x2ca2, 0, 2, false, true),
    SimpleCaseEntry(0x2ca3, 1, 2, true, false),
    SimpleCaseEntry(0x039c, 0, 3, false, true),
    SimpleCaseEntry(0x03bc, 1, 3, true, false),
    SimpleCaseEntry(0x00b5, 2, 3, true, false),
    SimpleCaseEntry(0x1ef6, 0, 2, false, true),
    SimpleCaseEntry(0x1ef7, 1, 2, true, false),
    SimpleCaseEntry(0x0218, 0, 2, false, true),
    SimpleCaseEntry(0x0219, 1, 2, true, false),
    SimpleCaseEntry(0x039d, 0, 2, false, true),
    SimpleCaseEntry(0x03bd, 1, 2, true, false),
    SimpleCaseEntry(0x0522, 0, 2, false, true),
    SimpleCaseEntry(0x0523, 1, 2, true, false),
    SimpleCaseEntry(0x2ca4, 0, 2, false, true),
    SimpleCaseEntry(0x2ca5, 1, 2, true, false),
    SimpleCaseEntry(0x039e, 0, 2, false, true),
    SimpleCaseEntry(0x03be, 1, 2, true, false),
    SimpleCaseEntry(0x1ef8, 0, 2, false, true),
    SimpleCaseEntry(0x1ef9, 1, 2, true, false),
    SimpleCaseEntry(0x021a, 0, 2, false, true),
    SimpleCaseEntry(0x021b, 1, 2, true, false),
    SimpleCaseEntry(0x039f, 0, 2, false, true),
    SimpleCaseEntry(0x03bf, 1, 2, true, false),
    SimpleCaseEntry(0x0524, 0, 2, false, true),
    SimpleCaseEntry(0x0525, 1, 2, true, false),
    SimpleCaseEntry(0x2ca6, 0, 2, false, true),
    SimpleCaseEntry(0x2ca7, 1, 2, true, false),
    SimpleCaseEntry(0x03a0, 0, 3, false, true),
    SimpleCaseEntry(0x03c0, 1, 3, true, false),
    SimpleCaseEntry(0x03d6, 2, 3, true, false),
    SimpleCaseEntry(0x1efa, 0, 2, false, true),
    SimpleCaseEntry(0x1efb, 1, 2, true, false),
    SimpleCaseEntry(0x021c, 0, 2, false, true),
    SimpleCaseEntry(0x021d, 1, 2, true, false),
    SimpleCaseEntry(0x03a1, 0, 3, false, true),
    SimpleCaseEntry(0x03c1, 1, 3, true, false),
    SimpleCaseEntry(0x03f1, 2, 3, true, false),
    SimpleCaseEntry(0x0526, 0, 2, false, true),
    SimpleCaseEntry(0x0527, 1, 2, true, false),
    SimpleCaseEntry(0x2ca8, 0, 2, false, true),
    SimpleCaseEntry(0x2ca9, 1, 2, true, false),
    SimpleCaseEntry(0x1efc, 0, 2, false, true),
    SimpleCaseEntry(0x1efd, 1, 2, true, false),
    SimpleCaseEntry(0x021e, 0, 2, false, true),
    SimpleCaseEntry(0x021f, 1, 2, true, false),
    SimpleCaseEntry(0x03a3, 0, 3, false, true),
    SimpleCaseEntry(0x03c3, 1, 3, true, false),
    SimpleCaseEntry(0x03c2, 2, 3, true, false),
    SimpleCaseEntry(0x2caa, 0, 2, false, true),
    SimpleCaseEntry(0x2cab, 1, 2, true, false),
    SimpleCaseEntry(0x03a4, 0, 2, false, true),
    SimpleCaseEntry(0x03c4, 1, 2, true, false),
    SimpleCaseEntry(0x1efe, 0, 2, false, true),
    SimpleCaseEntry(0x1eff, 1, 2, true, false),
    SimpleCaseEntry(0x0220, 0, 2, false, true),
    SimpleCaseEntry(0x019e, 1, 2, true, false),
    SimpleCaseEntry(0x03a5, 0, 2, false, true),
    SimpleCaseEntry(0x03c5, 1, 2, true, false),
    SimpleCaseEntry(0x2cac, 0, 2, false, true),
    SimpleCaseEntry(0x2cad, 1, 2, true, false),
    SimpleCaseEntry(0x03a6, 0, 3, false, true),
    SimpleCaseEntry(0x03c6, 1, 3, true, false),
    SimpleCaseEntry(0x03d5, 2, 3, true, false),
    SimpleCaseEntry(0x0222, 0, 2, false, true),
    SimpleCaseEntry(0x0223, 1, 2, true, false),
    SimpleCaseEntry(0x03a7, 0, 2, false, true),
    SimpleCaseEntry(0x03c7, 1, 2, true, false),
    SimpleCaseEntry(0x2cae, 0, 2, false, true),
    SimpleCaseEntry(0x2caf, 1, 2, true, false),
    SimpleCaseEntry(0x03a8, 0, 2, false, true),
    SimpleCaseEntry(0x03c8, 1, 2, true, false),
    SimpleCaseEntry(0x0224, 0, 2, false, true),
    SimpleCaseEntry(0x0225, 1, 2, true, false),
    SimpleCaseEntry(0x03a9, 0, 3, false, true),
    SimpleCaseEntry(0x03c9, 1, 3, true, false),
    SimpleCaseEntry(0x2126, 2, 3, false, true),
    SimpleCaseEntry(0x2cb0, 0, 2, false, true),
    SimpleCaseEntry(0x2cb1, 1, 2, true, false),
    SimpleCaseEntry(0xa640, 0, 2, false, true),
    SimpleCaseEntry(0xa641, 1, 2, true, false),
    SimpleCaseEntry(0x03aa, 0, 2, false, true),
    SimpleCaseEntry(0x03ca, 1, 2, true, false),
    SimpleCaseEntry(0x0226, 0, 2, false, true),
    SimpleCaseEntry(0x0227, 1, 2, true, false),
    SimpleCaseEntry(0x03ab, 0, 2, false, true),
    SimpleCaseEntry(0x03cb, 1, 2, true, false),
    SimpleCaseEntry(0x2cb2, 0, 2, false, true),
    SimpleCaseEntry(0x2cb3, 1, 2, true, false),
    SimpleCaseEntry(0xa642, 0, 2, false, true),
    SimpleCaseEntry(0xa643, 1, 2, true, false),
    SimpleCaseEntry(0x0531, 0, 2, false, true),
    SimpleCaseEntry(0x0561, 1, 2, true, false),
    SimpleCaseEntry(0x0228, 0, 2, false, true),
    SimpleCaseEntry(0x0229, 1, 2, true, false),
    SimpleCaseEntry(0x0532, 0, 2, false, true),
    SimpleCaseEntry(0x0562, 1, 2, true, false),
    SimpleCaseEntry(0x2cb4, 0, 2, false, true),
    SimpleCaseEntry(0x2cb5, 1, 2, true, false),
    SimpleCaseEntry(0xa644, 0, 2, false, true),
    SimpleCaseEntry(0xa645, 1, 2, true, false),
    SimpleCaseEntry(0x0533, 0, 2, false, true),
    SimpleCaseEntry(0x0563, 1, 2, true, false),
    SimpleCaseEntry(0x1f08, 0, 2, false, true),
    SimpleCaseEntry(0x1f00, 1, 2, true, false),
    SimpleCaseEntry(0x022a, 0, 2, false, true),
    SimpleCaseEntry(0x022b, 1, 2, true, false),
    SimpleCaseEntry(0x0534, 0, 2, false, true),
    SimpleCaseEntry(0x0564, 1, 2, true, false),
    SimpleCaseEntry(0x1f09, 0, 2, false, true),
    SimpleCaseEntry(0x1f01, 1, 2, true, false),
    SimpleCaseEntry(0x2cb6, 0, 2, false, true),
    SimpleCaseEntry(0x2cb7, 1, 2, true, false),
    SimpleCaseEntry(0xa646, 0, 2, false, true),
    SimpleCaseEntry(0xa647, 1, 2, true, false),
    SimpleCaseEntry(0x0535, 0, 2, false, true),
    SimpleCaseEntry(0x0565, 1, 2, true, false),
    SimpleCaseEntry(0x1f0a, 0, 2, false, true),
    SimpleCaseEntry(0x1f02, 1, 2, true, false),
    SimpleCaseEntry(0x022c, 0, 2, false, true),
    SimpleCaseEntry(0x022d, 1, 2, true, false),
    SimpleCaseEntry(0x0536, 0, 2, false, true),
    SimpleCaseEntry(0x0566, 1, 2, true, false),
    SimpleCaseEntry(0x1f0b, 0, 2, false, true),
    SimpleCaseEntry(0x1f03, 1, 2, true, false),
    SimpleCaseEntry(0x2cb8, 0, 2, false, true),
    SimpleCaseEntry(0x2cb9, 1, 2, true, false),
    SimpleCaseEntry(0xa648, 0, 2, false, true),
    SimpleCaseEntry(0xa649, 1, 2, true, false),
    SimpleCaseEntry(0x0537, 0, 2, false, true),
    SimpleCaseEntry(0x0567, 1, 2, true, false),
    SimpleCaseEntry(0x1f0c, 0, 2, false, true),
    SimpleCaseEntry(0x1f04, 1, 2, true, false),
    SimpleCaseEntry(0x022e, 0, 2, false, true),
    SimpleCaseEntry(0x022f, 1, 2, true, false),
    SimpleCaseEntry(0x0538, 0, 2, false, true),
    SimpleCaseEntry(0x0568, 1, 2, true, false),
    SimpleCaseEntry(0x1f0d, 0, 2, false, true),
    SimpleCaseEntry(0x1f05, 1, 2, true, false),
    SimpleCaseEntry(0x2cba, 0, 2, false, true),
    SimpleCaseEntry(0x2cbb, 1, 2, true, false),
    SimpleCaseEntry(0xa64a, 0, 2, false, true),
    SimpleCaseEntry(0xa64b, 1, 2, true, false),
    SimpleCaseEntry(0x0539, 0, 2, false, true),
    SimpleCaseEntry(0x0569, 1, 2, true, false),
    SimpleCaseEntry(0x1f0e, 0, 2, false, true),
    SimpleCaseEntry(0x1f06, 1, 2, true, false),
    SimpleCaseEntry(0x0230, 0, 2, false, true),
    SimpleCaseEntry(0x0231, 1, 2, true, false),
    SimpleCaseEntry(0x053a, 0, 2, false, true),
    SimpleCaseEntry(0x056a, 1, 2, true, false),
    SimpleCaseEntry(0x1f0f, 0, 2, false, true),
    SimpleCaseEntry(0x1f07, 1, 2, true, false),
    SimpleCaseEntry(0x2cbc, 0, 2, false, true),
    SimpleCaseEntry(0x2cbd, 1, 2, true, false),
    SimpleCaseEntry(0xa64c, 0, 2, false, true),
    SimpleCaseEntry(0xa64d, 1, 2, true, false),
    SimpleCaseEntry(0x053b, 0, 2, false, true),
    SimpleCaseEntry(0x056b, 1, 2, true, false),
    SimpleCaseEntry(0x0232, 0, 2, false, true),
    SimpleCaseEntry(0x0233, 1, 2, true, false),
    SimpleCaseEntry(0x053c, 0, 2, false, true),
    SimpleCaseEntry(0x056c, 1, 2, true, false),
    SimpleCaseEntry(0x2cbe, 0, 2, false, true),
    SimpleCaseEntry(0x2cbf, 1, 2, true, false),
    SimpleCaseEntry(0xa64e, 0, 2, false, true),
    SimpleCaseEntry(0xa64f, 1, 2, true, false),
    SimpleCaseEntry(0x053d, 0, 2, false, true),
    SimpleCaseEntry(0x056d, 1, 2, true, false),
    SimpleCaseEntry(0x053e, 0, 2, false, true),
    SimpleCaseEntry(0x056e, 1, 2, true, false),
    SimpleCaseEntry(0x2cc0, 0, 2, false, true),
    SimpleCaseEntry(0x2cc1, 1, 2, true, false),
    SimpleCaseEntry(0xa650, 0, 2, false, true),
    SimpleCaseEntry(0xa651, 1, 2, true, false),
    SimpleCaseEntry(0x053f, 0, 2, false, true),
    SimpleCaseEntry(0x056f, 1, 2, true, false),
    SimpleCaseEntry(0x0540, 0, 2, false, true),
    SimpleCaseEntry(0x0570, 1, 2, true, false),
    SimpleCaseEntry(0x2cc2, 0, 2, false, true),
    SimpleCaseEntry(0x2cc3, 1, 2, true, false),
    SimpleCaseEntry(0xa652, 0, 2, false, true),
    SimpleCaseEntry(0xa653, 1, 2, true, false),
    SimpleCaseEntry(0x0541, 0, 2, false, true),
    SimpleCaseEntry(0x0571, 1, 2, true, false),
    SimpleCaseEntry(0x0542, 0, 2, false, true),
    SimpleCaseEntry(0x0572, 1, 2, true, false),
    SimpleCaseEntry(0x2cc4, 0, 2, false, true),
    SimpleCaseEntry(0x2cc5, 1, 2, true, false),
    SimpleCaseEntry(0xa654, 0, 2, false, true),
    SimpleCaseEntry(0xa655, 1, 2, true, false),
    SimpleCaseEntry(0x0543, 0, 2, false, true),
    SimpleCaseEntry(0x0573, 1, 2, true, false),
    SimpleCaseEntry(0x1f18, 0, 2, false, true),
    SimpleCaseEntry(0x1f10, 1, 2, true, false),
    SimpleCaseEntry(0x00b5, 0, 3, true, false),
    SimpleCaseEntry(0x03bc, 1, 3, true, false),
    SimpleCaseEntry(0x039c, 2, 3, false, true),
    SimpleCaseEntry(0x023a, 0, 2, false, true),
    SimpleCaseEntry(0x2c65, 1, 2, true, false),
    SimpleCaseEntry(0x0544, 0, 2, false, true),
    SimpleCaseEntry(0x0574, 1, 2, true, false),
    SimpleCaseEntry(0x1f19, 0, 2, false, true),
    SimpleCaseEntry(0x1f11, 1, 2, true, false),
    SimpleCaseEntry(0x2cc6, 0, 2, false, true),
    SimpleCaseEntry(0x2cc7, 1, 2, true, false),
    SimpleCaseEntry(0xa656, 0, 2, false, true),
    SimpleCaseEntry(0xa657, 1, 2, true, false),
    SimpleCaseEntry(0x023b, 0, 2, false, true),
    SimpleCaseEntry(0x023c, 1, 2, true, false),
    SimpleCaseEntry(0x0545, 0, 2, false, true),
    SimpleCaseEntry(0x0575, 1, 2, true, false),
    SimpleCaseEntry(0x1f1a, 0, 2, false, true),
    SimpleCaseEntry(0x1f12, 1, 2, true, false),
    SimpleCaseEntry(0x0546, 0, 2, false, true),
    SimpleCaseEntry(0x0576, 1, 2, true, false),
    SimpleCaseEntry(0x1f1b, 0, 2, false, true),
    SimpleCaseEntry(0x1f13, 1, 2, true, false),
    SimpleCaseEntry(0x2cc8, 0, 2, false, true),
    SimpleCaseEntry(0x2cc9, 1, 2, true, false),
    SimpleCaseEntry(0xa658, 0, 2, false, true),
    SimpleCaseEntry(0xa659, 1, 2, true, false),
    SimpleCaseEntry(0x023d, 0, 2, false, true),
    SimpleCaseEntry(0x019a, 1, 2, true, false),
    SimpleCaseEntry(0x03c2, 0, 3, true, false),
    SimpleCaseEntry(0x03c3, 1, 3, true, false),
    SimpleCaseEntry(0x03a3, 2, 3, false, true),
    SimpleCaseEntry(0x0547, 0, 2, false, true),
    SimpleCaseEntry(0x0577, 1, 2, true, false),
    SimpleCaseEntry(0x1f1c, 0, 2, false, true),
    SimpleCaseEntry(0x1f14, 1, 2, true, false),
    SimpleCaseEntry(0x023e, 0, 2, false, true),
    SimpleCaseEntry(0x2c66, 1, 2, true, false),
    SimpleCaseEntry(0x0548, 0, 2, false, true),
    SimpleCaseEntry(0x0578, 1, 2, true, false),
    SimpleCaseEntry(0x1f1d, 0, 2, false, true),
    SimpleCaseEntry(0x1f15, 1, 2, true, false),
    SimpleCaseEntry(0x2cca, 0, 2, false, true),
    SimpleCaseEntry(0x2ccb, 1, 2, true, false),
    SimpleCaseEntry(0xa65a, 0, 2, false, true),
    SimpleCaseEntry(0xa65b, 1, 2, true, false),
    SimpleCaseEntry(0x0549, 0, 2, false, true),
    SimpleCaseEntry(0x0579, 1, 2, true, false),
    SimpleCaseEntry(0x054a, 0, 2, false, true),
    SimpleCaseEntry(0x057a, 1, 2, true, false),
    SimpleCaseEntry(0x2ccc, 0, 2, false, true),
    SimpleCaseEntry(0x2ccd, 1, 2, true, false),
    SimpleCaseEntry(0xa65c, 0, 2, false, true),
    SimpleCaseEntry(0xa65d, 1, 2, true, false),
    SimpleCaseEntry(0x0241, 0, 2, false, true),
    SimpleCaseEntry(0x0242, 1, 2, true, false),
    SimpleCaseEntry(0x054b, 0, 2, false, true),
    SimpleCaseEntry(0x057b, 1, 2, true, false),
    SimpleCaseEntry(0x054c, 0, 2, false, true),
    SimpleCaseEntry(0x057c, 1, 2, true, false),
    SimpleCaseEntry(0x2cce, 0, 2, false, true),
    SimpleCaseEntry(0x2ccf, 1, 2, true, false),
    SimpleCaseEntry(0xa65e, 0, 2, false, true),
    SimpleCaseEntry(0xa65f, 1, 2, true, false),
    SimpleCaseEntry(0x0243, 0, 2, false, true),
    SimpleCaseEntry(0x0180, 1, 2, true, false),
    SimpleCaseEntry(0x054d, 0, 2, false, true),
    SimpleCaseEntry(0x057d, 1, 2, true, false),
    SimpleCaseEntry(0x0244, 0, 2, false, true),
    SimpleCaseEntry(0x0289, 1, 2, true, false),
    SimpleCaseEntry(0x054e, 0, 2, false, true),
    SimpleCaseEntry(0x057e, 1, 2, true, false),
    SimpleCaseEntry(0x2cd0, 0, 2, false, true),
    SimpleCaseEntry(0x2cd1, 1, 2, true, false),
    SimpleCaseEntry(0xa660, 0, 2, false, true),
    SimpleCaseEntry(0xa661, 1, 2, true, false),
    SimpleCaseEntry(0x00c0, 0, 2, false, true),
    SimpleCaseEntry(0x00e0, 1, 2, true, false),
    SimpleCaseEntry(0x0245, 0, 2, false, true),
    SimpleCaseEntry(0x028c, 1, 2, true, false),
    SimpleCaseEntry(0x054f, 0, 2, false, true),
    SimpleCaseEntry(0x057f, 1, 2, true, false),
    SimpleCaseEntry(0x00c1, 0, 2, false, true),
    SimpleCaseEntry(0x00e1, 1, 2, true, false),
    SimpleCaseEntry(0x0246, 0, 2, false, true),
    SimpleCaseEntry(0x0247, 1, 2, true, false),
    SimpleCaseEntry(0x0550, 0, 2, false, true),
    SimpleCaseEntry(0x0580, 1, 2, true, false),
    SimpleCaseEntry(0x2cd2, 0, 2, false, true),
    SimpleCaseEntry(0x2cd3, 1, 2, true, false),
    SimpleCaseEntry(0xa662, 0, 2, false, true),
    SimpleCaseEntry(0xa663, 1, 2, true, false),
    SimpleCaseEntry(0x00c2, 0, 2, false, true),
    SimpleCaseEntry(0x00e2, 1, 2, true, false),
    SimpleCaseEntry(0x0551, 0, 2, false, true),
    SimpleCaseEntry(0x0581, 1, 2, true, false),
    SimpleCaseEntry(0x00c3, 0, 2, false, true),
    SimpleCaseEntry(0x00e3, 1, 2, true, false),
    SimpleCaseEntry(0x0248, 0, 2, false, true),
    SimpleCaseEntry(0x0249, 1, 2, true, false),
    SimpleCaseEntry(0x0552, 0, 2, false, true),
    SimpleCaseEntry(0x0582, 1, 2, true, false),
    SimpleCaseEntry(0x2cd4, 0, 2, false, true),
    SimpleCaseEntry(0x2cd5, 1, 2, true, false),
    SimpleCaseEntry(0xa664, 0, 2, false, true),
    SimpleCaseEntry(0xa665, 1, 2, true, false),
    SimpleCaseEntry(0x00c4, 0, 2, false, true),
    SimpleCaseEntry(0x00e4, 1, 2, true, false),
    SimpleCaseEntry(0x0553, 0, 2, false, true),
    SimpleCaseEntry(0x0583, 1, 2, true, false),
    SimpleCaseEntry(0x1f28, 0, 2, false, true),
    SimpleCaseEntry(0x1f20, 1, 2, true, false),
    SimpleCaseEntry(0x00c5, 0, 3, false, true),
    SimpleCaseEntry(0x00e5, 1, 3, true, false),
    SimpleCaseEntry(0x212b, 2, 3, false, true),
    SimpleCaseEntry(0x024a, 0, 2, false, true),
    SimpleCaseEntry(0x024b, 1, 2, true, false),
    SimpleCaseEntry(0x03cf, 0, 2, false, true),
    SimpleCaseEntry(0x03d7, 1, 2, true, false),
    SimpleCaseEntry(0x0554, 0, 2, false, true),
    SimpleCaseEntry(0x0584, 1, 2, true, false),
    SimpleCaseEntry(0x1f29, 0, 2, false, true),
    SimpleCaseEntry(0x1f21, 1, 2, true, false),
    SimpleCaseEntry(0x2cd6, 0, 2, false, true),
    SimpleCaseEntry(0x2cd7, 1, 2, true, false),
    SimpleCaseEntry(0xa666, 0, 2, false, true),
    SimpleCaseEntry(0xa667, 1, 2, true, false),
    SimpleCaseEntry(0x00c6, 0, 2, false, true),
    SimpleCaseEntry(0x00e6, 1, 2, true, false),
    SimpleCaseEntry(0x03d0, 0, 3, true, false),
    SimpleCaseEntry(0x03b2, 1, 3, true, false),
    SimpleCaseEntry(0x0392, 2, 3, false, true),
    SimpleCaseEntry(0x0555, 0, 2, false, true),
    SimpleCaseEntry(0x0585, 1, 2, true, false),
    SimpleCaseEntry(0x1f2a, 0, 2, false, true),
    SimpleCaseEntry(0x1f22, 1, 2, true, false),
    SimpleCaseEntry(0x00c7, 0, 2, false, true),
    SimpleCaseEntry(0x00e7, 1, 2, true, false),
    SimpleCaseEntry(0x024c, 0, 2, false, true),
    SimpleCaseEntry(0x024d, 1, 2, true, false),
    SimpleCaseEntry(0x03d1, 0, 4, true, false),
    SimpleCaseEntry(0x03b8, 1, 4, true, false),
    SimpleCaseEntry(0x0398, 2, 4, false, true),
    SimpleCaseEntry(0x03f4, 3, 4, false, true),
    SimpleCaseEntry(0x0556, 0, 2, false, true),
    SimpleCaseEntry(0x0586, 1, 2, true, false),
    SimpleCaseEntry(0x1f2b, 0, 2, false, true),
    SimpleCaseEntry(0x1f23, 1, 2, true, false),
    SimpleCaseEntry(0x2cd8, 0, 2, false, true),
    SimpleCaseEntry(0x2cd9, 1, 2, true, false),
    SimpleCaseEntry(0xa668, 0, 2, false, true),
    SimpleCaseEntry(0xa669, 1, 2, true, false),
    SimpleCaseEntry(0x00c8, 0, 2, false, true),
    SimpleCaseEntry(0x00e8, 1, 2, true, false),
    SimpleCaseEntry(0x1f2c, 0, 2, false, true),
    SimpleCaseEntry(0x1f24, 1, 2, true, false),
    SimpleCaseEntry(0x00c9, 0, 2, false, true),
    SimpleCaseEntry(0x00e9, 1, 2, true, false),
    SimpleCaseEntry(0x024e, 0, 2, false, true),
    SimpleCaseEntry(0x024f, 1, 2, true, false),
    SimpleCaseEntry(0x1f2d, 0, 2, false, true),
    SimpleCaseEntry(0x1f25, 1, 2, true, false),
    SimpleCaseEntry(0x2cda, 0, 2, false, true),
    SimpleCaseEntry(0x2cdb, 1, 2, true, false),
    SimpleCaseEntry(0xa66a, 0, 2, false, true),
    SimpleCaseEntry(0xa66b, 1, 2, true, false),
    SimpleCaseEntry(0x00ca, 0, 2, false, true),
    SimpleCaseEntry(0x00ea, 1, 2, true, false),
    SimpleCaseEntry(0x1f2e, 0, 2, false, true),
    SimpleCaseEntry(0x1f26, 1, 2, true, false),
    SimpleCaseEntry(0x00cb, 0, 2, false, true),
    SimpleCaseEntry(0x00eb, 1, 2, true, false),
    SimpleCaseEntry(0x03d5, 0, 3, true, false),
    SimpleCaseEntry(0x03c6, 1, 3, true, false),
    SimpleCaseEntry(0x03a6, 2, 3, false, true),
    SimpleCaseEntry(0x1f2f, 0, 2, false, true),
    SimpleCaseEntry(0x1f27, 1, 2, true, false),
    SimpleCaseEntry(0x2cdc, 0, 2, false, true),
    SimpleCaseEntry(0x2cdd, 1, 2, true, false),
    SimpleCaseEntry(0xa66c, 0, 2, false, true),
    SimpleCaseEntry(0xa66d, 1, 2, true, false),
    SimpleCaseEntry(0x00cc, 0, 2, false, true),
    SimpleCaseEntry(0x00ec, 1, 2, true, false),
    SimpleCaseEntry(0x03d6, 0, 3, true, false),
    SimpleCaseEntry(0x03c0, 1, 3, true, false),
    SimpleCaseEntry(0x03a0, 2, 3, false, true),
    SimpleCaseEntry(0x00cd, 0, 2, false, true),
    SimpleCaseEntry(0x00ed, 1, 2, true, false),
    SimpleCaseEntry(0x2cde, 0, 2, false, true),
    SimpleCaseEntry(0x2cdf, 1, 2, true, false),
    SimpleCaseEntry(0x00ce, 0, 2, false, true),
    SimpleCaseEntry(0x00ee, 1, 2, true, false),
    SimpleCaseEntry(0x03d8, 0, 2, false, true),
    SimpleCaseEntry(0x03d9, 1, 2, true, false),
    SimpleCaseEntry(0x00cf, 0, 2, false, true),
    SimpleCaseEntry(0x00ef, 1, 2, true, false),
    SimpleCaseEntry(0x2ce0, 0, 2, false, true),
    SimpleCaseEntry(0x2ce1, 1, 2, true, false),
    SimpleCaseEntry(0x00d0, 0, 2, false, true),
    SimpleCaseEntry(0x00f0, 1, 2, true, false),
    SimpleCaseEntry(0x03da, 0, 2, false, true),
    SimpleCaseEntry(0x03db, 1, 2, true, false),
    SimpleCaseEntry(0x00d1, 0, 2, false, true),
    SimpleCaseEntry(0x00f1, 1, 2, true, false),
    SimpleCaseEntry(0x2ce2, 0, 2, false, true),
    SimpleCaseEntry(0x2ce3, 1, 2, true, false),
    SimpleCaseEntry(0x00d2, 0, 2, false, true),
    SimpleCaseEntry(0x00f2, 1, 2, true, false),
    SimpleCaseEntry(0x03dc, 0, 2, false, true),
    SimpleCaseEntry(0x03dd, 1, 2, true, false),
    SimpleCaseEntry(0x00d3, 0, 2, false, true),
    SimpleCaseEntry(0x00f3, 1, 2, true, false),
    SimpleCaseEntry(0x00d4, 0, 2, false, true),
    SimpleCaseEntry(0x00f4, 1, 2, true, false),
    SimpleCaseEntry(0x03de, 0, 2, false, true),
    SimpleCaseEntry(0x03df, 1, 2, true, false),
    SimpleCaseEntry(0x1f38, 0, 2, false, true),
    SimpleCaseEntry(0x1f30, 1, 2, true, false),
    SimpleCaseEntry(0x00d5, 0, 2, false, true),
    SimpleCaseEntry(0x00f5, 1, 2, true, false),
    SimpleCaseEntry(0x1f39, 0, 2, false, true),
    SimpleCaseEntry(0x1f31, 1, 2, true, false),
    SimpleCaseEntry(0x00d6, 0, 2, false, true),
    SimpleCaseEntry(0x00f6, 1, 2, true, false),
    SimpleCaseEntry(0x03e0, 0, 2, false, true),
    SimpleCaseEntry(0x03e1, 1, 2, true, false),
    SimpleCaseEntry(0x1f3a, 0, 2, false, true),
    SimpleCaseEntry(0x1f32, 1, 2, true, false),
    SimpleCaseEntry(0x1f3b, 0, 2, false, true),
    SimpleCaseEntry(0x1f33, 1, 2, true, false),
    SimpleCaseEntry(0x00d8, 0, 2, false, true),
    SimpleCaseEntry(0x00f8, 1, 2, true, false),
    SimpleCaseEntry(0x03e2, 0, 2, false, true),
    SimpleCaseEntry(0x03e3, 1, 2, true, false),
    SimpleCaseEntry(0x1f3c, 0, 2, false, true),
    SimpleCaseEntry(0x1f34, 1, 2, true, false),
    SimpleCaseEntry(0x00d9, 0, 2, false, true),
    SimpleCaseEntry(0x00f9, 1, 2, true, false),
    SimpleCaseEntry(0x1f3d, 0, 2, false, true),
    SimpleCaseEntry(0x1f35, 1, 2, true, false),
    SimpleCaseEntry(0x00da, 0, 2, false, true),
    SimpleCaseEntry(0x00fa, 1, 2, true, false),
    SimpleCaseEntry(0x03e4, 0, 2, false, true),
    SimpleCaseEntry(0x03e5, 1, 2, true, false),
    SimpleCaseEntry(0x1f3e, 0, 2, false, true),
    SimpleCaseEntry(0x1f36, 1, 2, true, false),
    SimpleCaseEntry(0x2ceb, 0, 2, false, true),
    SimpleCaseEntry(0x2cec, 1, 2, true, false),
    SimpleCaseEntry(0x00db, 0, 2, false, true),
    SimpleCaseEntry(0x00fb, 1, 2, true, false),
    SimpleCaseEntry(0x1f3f, 0, 2, false, true),
    SimpleCaseEntry(0x1f37, 1, 2, true, false),
    SimpleCaseEntry(0x00dc, 0, 2, false, true),
    SimpleCaseEntry(0x00fc, 1, 2, true, false),
    SimpleCaseEntry(0x03e6, 0, 2, false, true),
    SimpleCaseEntry(0x03e7, 1, 2, true, false),
    SimpleCaseEntry(0x2ced, 0, 2, false, true),
    SimpleCaseEntry(0x2cee, 1, 2, true, false),
    SimpleCaseEntry(0x00dd, 0, 2, false, true),
    SimpleCaseEntry(0x00fd, 1, 2, true, false),
    SimpleCaseEntry(0x00de, 0, 2, false, true),
    SimpleCaseEntry(0x00fe, 1, 2, true, false),
    SimpleCaseEntry(0x03e8, 0, 2, false, true),
    SimpleCaseEntry(0x03e9, 1, 2, true, false),
    SimpleCaseEntry(0xa680, 0, 2, false, true),
    SimpleCaseEntry(0xa681, 1, 2, true, false),
    SimpleCaseEntry(0x03ea, 0, 2, false, true),
    SimpleCaseEntry(0x03eb, 1, 2, true, false),
    SimpleCaseEntry(0x2cf2, 0, 2, false, true),
    SimpleCaseEntry(0x2cf3, 1, 2, true, false),
    SimpleCaseEntry(0xa682, 0, 2, false, true),
    SimpleCaseEntry(0xa683, 1, 2, true, false),
    SimpleCaseEntry(0x03ec, 0, 2, false, true),
    SimpleCaseEntry(0x03ed, 1, 2, true, false),
    SimpleCaseEntry(0xa684, 0, 2, false, true),
    SimpleCaseEntry(0xa685, 1, 2, true, false),
    SimpleCaseEntry(0x03ee, 0, 2, false, true),
    SimpleCaseEntry(0x03ef, 1, 2, true, false),
    SimpleCaseEntry(0x1f48, 0, 2, false, true),
    SimpleCaseEntry(0x1f40, 1, 2, true, false),
    SimpleCaseEntry(0x1f49, 0, 2, false, true),
    SimpleCaseEntry(0x1f41, 1, 2, true, false),
    SimpleCaseEntry(0xa686, 0, 2, false, true),
    SimpleCaseEntry(0xa687, 1, 2, true, false),
    SimpleCaseEntry(0x03f0, 0, 3, true, false),
    SimpleCaseEntry(0x03ba, 1, 3, true, false),
    SimpleCaseEntry(0x039a, 2, 3, false, true),
    SimpleCaseEntry(0x1f4a, 0, 2, false, true),
    SimpleCaseEntry(0x1f42, 1, 2, true, false),
    SimpleCaseEntry(0x03f1, 0, 3, true, false),
    SimpleCaseEntry(0x03c1, 1, 3, true, false),
    SimpleCaseEntry(0x03a1, 2, 3, false, true),
    SimpleCaseEntry(0x1f4b, 0, 2, false, true),
    SimpleCaseEntry(0x1f43, 1, 2, true, false),
    SimpleCaseEntry(0xa688, 0, 2, false, true),
    SimpleCaseEntry(0xa689, 1, 2, true, false),
    SimpleCaseEntry(0x1f4c, 0, 2, false, true),
    SimpleCaseEntry(0x1f44, 1, 2, true, false),
    SimpleCaseEntry(0x1f4d, 0, 2, false, true),
    SimpleCaseEntry(0x1f45, 1, 2, true, false),
    SimpleCaseEntry(0xa68a, 0, 2, false, true),
    SimpleCaseEntry(0xa68b, 1, 2, true, false),
    SimpleCaseEntry(0x03f4, 0, 4, false, true),
    SimpleCaseEntry(0x03b8, 1, 4, true, false),
    SimpleCaseEntry(0x0398, 2, 4, false, true),
    SimpleCaseEntry(0x03d1, 3, 4, true, false),
    SimpleCaseEntry(0x03f5, 0, 3, true, false),
    SimpleCaseEntry(0x03b5, 1, 3, true, false),
    SimpleCaseEntry(0x0395, 2, 3, false, true),
    SimpleCaseEntry(0xa68c, 0, 2, false, true),
    SimpleCaseEntry(0xa68d, 1, 2, true, false),
    SimpleCaseEntry(0x03f7, 0, 2, false, true),
    SimpleCaseEntry(0x03f8, 1, 2, true, false),
    SimpleCaseEntry(0xa68e, 0, 2, false, true),
    SimpleCaseEntry(0xa68f, 1, 2, true, false),
    SimpleCaseEntry(0x03f9, 0, 2, false, true),
    SimpleCaseEntry(0x03f2, 1, 2, true, false),
    SimpleCaseEntry(0xa690, 0, 2, false, true),
    SimpleCaseEntry(0xa691, 1, 2, true, false),
    SimpleCaseEntry(0x03fa, 0, 2, false, true),
    SimpleCaseEntry(0x03fb, 1, 2, true, false),
    SimpleCaseEntry(0xa692, 0, 2, false, true),
    SimpleCaseEntry(0xa693, 1, 2, true, false),
    SimpleCaseEntry(0x03fd, 0, 2, false, true),
    SimpleCaseEntry(0x037b, 1, 2, true, false),
    SimpleCaseEntry(0xa694, 0, 2, false, true),
    SimpleCaseEntry(0xa695, 1, 2, true, false),
    SimpleCaseEntry(0x03fe, 0, 2, false, true),
    SimpleCaseEntry(0x037c, 1, 2, true, false),
    SimpleCaseEntry(0x03ff, 0, 2, false, true),
    SimpleCaseEntry(0x037d, 1, 2, true, false),
    SimpleCaseEntry(0x1f59, 0, 2, false, true),
    SimpleCaseEntry(0x1f51, 1, 2, true, false),
    SimpleCaseEntry(0xa696, 0, 2, false, true),
    SimpleCaseEntry(0xa697, 1, 2, true, false),
    SimpleCaseEntry(0x0400, 0, 2, false, true),
    SimpleCaseEntry(0x0450, 1, 2, true, false),
    SimpleCaseEntry(0x0401, 0, 2, false, true),
    SimpleCaseEntry(0x0451, 1, 2, true, false),
    SimpleCaseEntry(0x1f5b, 0, 2, false, true),
    SimpleCaseEntry(0x1f53, 1, 2, true, false),
    SimpleCaseEntry(0x0402, 0, 2, false, true),
    SimpleCaseEntry(0x0452, 1, 2, true, false),
    SimpleCaseEntry(0x0403, 0, 2, false, true),
    SimpleCaseEntry(0x0453, 1, 2, true, false),
    SimpleCaseEntry(0x1f5d, 0, 2, false, true),
    SimpleCaseEntry(0x1f55, 1, 2, true, false),
    SimpleCaseEntry(0x0404, 0, 2, false, true),
    SimpleCaseEntry(0x0454, 1, 2, true, false),
    SimpleCaseEntry(0x0405, 0, 2, false, true),
    SimpleCaseEntry(0x0455, 1, 2, true, false),
    SimpleCaseEntry(0x1f5f, 0, 2, false, true),
    SimpleCaseEntry(0x1f57, 1, 2, true, false),
    SimpleCaseEntry(0x0406, 0, 2, false, true),
    SimpleCaseEntry(0x0456, 1, 2, true, false),
    SimpleCaseEntry(0x0407, 0, 2, false, true),
    SimpleCaseEntry(0x0457, 1, 2, true, false),
    SimpleCaseEntry(0x0408, 0, 2, false, true),
    SimpleCaseEntry(0x0458, 1, 2, true, false),
    SimpleCaseEntry(0x0409, 0, 2, false, true),
    SimpleCaseEntry(0x0459, 1, 2, true, false),
    SimpleCaseEntry(0x0100, 0, 2, false, true),
    SimpleCaseEntry(0x0101, 1, 2, true, false),
    SimpleCaseEntry(0x040a, 0, 2, false, true),
    SimpleCaseEntry(0x045a, 1, 2, true, false),
    SimpleCaseEntry(0x040b, 0, 2, false, true),
    SimpleCaseEntry(0x045b, 1, 2, true, false),
    SimpleCaseEntry(0x0102, 0, 2, false, true),
    SimpleCaseEntry(0x0103, 1, 2, true, false),
    SimpleCaseEntry(0x040c, 0, 2, false, true),
    SimpleCaseEntry(0x045c, 1, 2, true, false),
    SimpleCaseEntry(0x040d, 0, 2, false, true),
    SimpleCaseEntry(0x045d, 1, 2, true, false),
    SimpleCaseEntry(0x0104, 0, 2, false, true),
    SimpleCaseEntry(0x0105, 1, 2, true, false),
    SimpleCaseEntry(0x040e, 0, 2, false, true),
    SimpleCaseEntry(0x045e, 1, 2, true, false),
    SimpleCaseEntry(0x1f68, 0, 2, false, true),
    SimpleCaseEntry(0x1f60, 1, 2, true, false),
    SimpleCaseEntry(0x040f, 0, 2, false, true),
    SimpleCaseEntry(0x045f, 1, 2, true, false),
    SimpleCaseEntry(0x1f69, 0, 2, false, true),
    SimpleCaseEntry(0x1f61, 1, 2, true, false),
    SimpleCaseEntry(0x0106, 0, 2, false, true),
    SimpleCaseEntry(0x0107, 1, 2, true, false),
    SimpleCaseEntry(0x0410, 0, 2, false, true),
    SimpleCaseEntry(0x0430, 1, 2, true, false),
    SimpleCaseEntry(0x1f6a, 0, 2, false, true),
    SimpleCaseEntry(0x1f62, 1, 2, true, false),
    SimpleCaseEntry(0x0411, 0, 2, false, true),
    SimpleCaseEntry(0x0431, 1, 2, true, false),
    SimpleCaseEntry(0x1f6b, 0, 2, false, true),
    SimpleCaseEntry(0x1f63, 1, 2, true, false),
    SimpleCaseEntry(0x0108, 0, 2, false, true),
    SimpleCaseEntry(0x0109, 1, 2, true, false),
    SimpleCaseEntry(0x0412, 0, 2, false, true),
    SimpleCaseEntry(0x0432, 1, 2, true, false),
    SimpleCaseEntry(0x1f6c, 0, 2, false, true),
    SimpleCaseEntry(0x1f64, 1, 2, true, false),
    SimpleCaseEntry(0x0413, 0, 2, false, true),
    SimpleCaseEntry(0x0433, 1, 2, true, false),
    SimpleCaseEntry(0x1f6d, 0, 2, false, true),
    SimpleCaseEntry(0x1f65, 1, 2, true, false),
    SimpleCaseEntry(0x010a, 0, 2, false, true),
    SimpleCaseEntry(0x010b, 1, 2, true, false),
    SimpleCaseEntry(0x0414, 0, 2, false, true),
    SimpleCaseEntry(0x0434, 1, 2, true, false),
    SimpleCaseEntry(0x1f6e, 0, 2, false, true),
    SimpleCaseEntry(0x1f66, 1, 2, true, false),
    SimpleCaseEntry(0x0415, 0, 2, false, true),
    SimpleCaseEntry(0x0435, 1, 2, true, false),
    SimpleCaseEntry(0x1f6f, 0, 2, false, true),
    SimpleCaseEntry(0x1f67, 1, 2, true, false),
    SimpleCaseEntry(0x010c, 0, 2, false, true),
    SimpleCaseEntry(0x010d, 1, 2, true, false),
    SimpleCaseEntry(0x0416, 0, 2, false, true),
    SimpleCaseEntry(0x0436, 1, 2, true, false),
    SimpleCaseEntry(0x0417, 0, 2, false, true),
    SimpleCaseEntry(0x0437, 1, 2, true, false),
    SimpleCaseEntry(0x010e, 0, 2, false, true),
    SimpleCaseEntry(0x010f, 1, 2, true, false),
    SimpleCaseEntry(0x0418, 0, 2, false, true),
    SimpleCaseEntry(0x0438, 1, 2, true, false),
    SimpleCaseEntry(0x0419, 0, 2, false, true),
    SimpleCaseEntry(0x0439, 1, 2, true, false),
    SimpleCaseEntry(0x0110, 0, 2, false, true),
    SimpleCaseEntry(0x0111, 1, 2, true, false),
    SimpleCaseEntry(0x041a, 0, 2, false, true),
    SimpleCaseEntry(0x043a, 1, 2, true, false),
    SimpleCaseEntry(0x041b, 0, 2, false, true),
    SimpleCaseEntry(0x043b, 1, 2, true, false),
    SimpleCaseEntry(0x0112, 0, 2, false, true),
    SimpleCaseEntry(0x0113, 1, 2, true, false),
    SimpleCaseEntry(0x041c, 0, 2, false, true),
    SimpleCaseEntry(0x043c, 1, 2, true, false),
    SimpleCaseEntry(0x041d, 0, 2, false, true),
    SimpleCaseEntry(0x043d, 1, 2, true, false),
    SimpleCaseEntry(0x0114, 0, 2, false, true),
    SimpleCaseEntry(0x0115, 1, 2, true, false),
    SimpleCaseEntry(0x041e, 0, 2, false, true),
    SimpleCaseEntry(0x043e, 1, 2, true, false),
    SimpleCaseEntry(0x041f, 0, 2, false, true),
    SimpleCaseEntry(0x043f, 1, 2, true, false),
    SimpleCaseEntry(0x0116, 0, 2, false, true),
    SimpleCaseEntry(0x0117, 1, 2, true, false),
    SimpleCaseEntry(0x0420, 0, 2, false, true),
    SimpleCaseEntry(0x0440, 1, 2, true, false),
    SimpleCaseEntry(0x0421, 0, 2, false, true),
    SimpleCaseEntry(0x0441, 1, 2, true, false),
    SimpleCaseEntry(0x0118, 0, 2, false, true),
    SimpleCaseEntry(0x0119, 1, 2, true, false),
    SimpleCaseEntry(0x0422, 0, 2, false, true),
    SimpleCaseEntry(0x0442, 1, 2, true, false),
    SimpleCaseEntry(0x0423, 0, 2, false, true),
    SimpleCaseEntry(0x0443, 1, 2, true, false),
    SimpleCaseEntry(0x011a, 0, 2, false, true),
    SimpleCaseEntry(0x011b, 1, 2, true, false),
    SimpleCaseEntry(0x0424, 0, 2, false, true),
    SimpleCaseEntry(0x0444, 1, 2, true, false),
    SimpleCaseEntry(0x0425, 0, 2, false, true),
    SimpleCaseEntry(0x0445, 1, 2, true, false),
    SimpleCaseEntry(0x011c, 0, 2, false, true),
    SimpleCaseEntry(0x011d, 1, 2, true, false),
    SimpleCaseEntry(0x0426, 0, 2, false, true),
    SimpleCaseEntry(0x0446, 1, 2, true, false),
    SimpleCaseEntry(0x0427, 0, 2, false, true),
    SimpleCaseEntry(0x0447, 1, 2, true, false),
    SimpleCaseEntry(0x011e, 0, 2, false, true),
    SimpleCaseEntry(0x011f, 1, 2, true, false),
    SimpleCaseEntry(0x0428, 0, 2, false, true),
    SimpleCaseEntry(0x0448, 1, 2, true, false),
    SimpleCaseEntry(0x0429, 0, 2, false, true),
    SimpleCaseEntry(0x0449, 1, 2, true, false),
    SimpleCaseEntry(0x0120, 0, 2, false, true),
    SimpleCaseEntry(0x0121, 1, 2, true, false),
    SimpleCaseEntry(0x042a, 0, 2, false, true),
    SimpleCaseEntry(0x044a, 1, 2, true, false),
    SimpleCaseEntry(0x042b, 0, 2, false, true),
    SimpleCaseEntry(0x044b, 1, 2, true, false),
    SimpleCaseEntry(0x1e00, 0, 2, false, true),
    SimpleCaseEntry(0x1e01, 1, 2, true, false),
    SimpleCaseEntry(0x0122, 0, 2, false, true),
    SimpleCaseEntry(0x0123, 1, 2, true, false),
    SimpleCaseEntry(0x042c, 0, 2, false, true),
    SimpleCaseEntry(0x044c, 1, 2, true, false),
    SimpleCaseEntry(0x042d, 0, 2, false, true),
    SimpleCaseEntry(0x044d, 1, 2, true, false),
    SimpleCaseEntry(0x1e02, 0, 2, false, true),
    SimpleCaseEntry(0x1e03, 1, 2, true, false),
    SimpleCaseEntry(0x0124, 0, 2, false, true),
    SimpleCaseEntry(0x0125, 1, 2, true, false),
    SimpleCaseEntry(0x042e, 0, 2, false, true),
    SimpleCaseEntry(0x044e, 1, 2, true, false),
    SimpleCaseEntry(0x1f88, 0, 2, false, false),
    SimpleCaseEntry(0x1f80, 1, 2, true, false),
    SimpleCaseEntry(0x042f, 0, 2, false, true),
    SimpleCaseEntry(0x044f, 1, 2, true, false),
    SimpleCaseEntry(0x1e04, 0, 2, false, true),
    SimpleCaseEntry(0x1e05, 1, 2, true, false),
    SimpleCaseEntry(0x1f89, 0, 2, false, false),
    SimpleCaseEntry(0x1f81, 1, 2, true, false),
    SimpleCaseEntry(0x0126, 0, 2, false, true),
    SimpleCaseEntry(0x0127, 1, 2, true, false),
    SimpleCaseEntry(0x1f8a, 0, 2, false, false),
    SimpleCaseEntry(0x1f82, 1, 2, true, false),
    SimpleCaseEntry(0x1e06, 0, 2, false, true),
    SimpleCaseEntry(0x1e07, 1, 2, true, false),
    SimpleCaseEntry(0x1f8b, 0, 2, false, false),
    SimpleCaseEntry(0x1f83, 1, 2, true, false),
    SimpleCaseEntry(0x0128, 0, 2, false, true),
    SimpleCaseEntry(0x0129, 1, 2, true, false),
    SimpleCaseEntry(0x1f8c, 0, 2, false, false),
    SimpleCaseEntry(0x1f84, 1, 2, true, false),
    SimpleCaseEntry(0x1e08, 0, 2, false, true),
    SimpleCaseEntry(0x1e09, 1, 2, true, false),
    SimpleCaseEntry(0x1f8d, 0, 2, false, false),
    SimpleCaseEntry(0x1f85, 1, 2, true, false),
    SimpleCaseEntry(0x012a, 0, 2, false, true),
    SimpleCaseEntry(0x012b, 1, 2, true, false),
    SimpleCaseEntry(0x1f8e, 0, 2, false, false),
    SimpleCaseEntry(0x1f86, 1, 2, true, false),
    SimpleCaseEntry(0x1e0a, 0, 2, false, true),
    SimpleCaseEntry(0x1e0b, 1, 2, true, false),
    SimpleCaseEntry(0x1f8f, 0, 2, false, false),
    SimpleCaseEntry(0x1f87, 1, 2, true, false),
    SimpleCaseEntry(0x012c, 0, 2, false, true),
    SimpleCaseEntry(0x012d, 1, 2, true, false),
    SimpleCaseEntry(0x1e0c, 0, 2, false, true),
    SimpleCaseEntry(0x1e0d, 1, 2, true, false),
    SimpleCaseEntry(0x012e, 0, 2, false, true),
    SimpleCaseEntry(0x012f, 1, 2, true, false),
    SimpleCaseEntry(0x1e0e, 0, 2, false, true),
    SimpleCaseEntry(0x1e0f, 1, 2, true, false),
    SimpleCaseEntry(0x1e10, 0, 2, false, true),
    SimpleCaseEntry(0x1e11, 1, 2, true, false),
    SimpleCaseEntry(0x0132, 0, 2, false, true),
    SimpleCaseEntry(0x0133, 1, 2, true, false),
    SimpleCaseEntry(0x1e12, 0, 2, false, true),
    SimpleCaseEntry(0x1e13, 1, 2, true, false),
    SimpleCaseEntry(0x0134, 0, 2, false, true),
    SimpleCaseEntry(0x0135, 1, 2, true, false),
    SimpleCaseEntry(0x1f98, 0, 2, false, false),
    SimpleCaseEntry(0x1f90, 1, 2, true, false),
    SimpleCaseEntry(0x1e14, 0, 2, false, true),
    SimpleCaseEntry(0x1e15, 1, 2, true, false),
    SimpleCaseEntry(0x1f99, 0, 2, false, false),
    SimpleCaseEntry(0x1f91, 1, 2, true, false),
    SimpleCaseEntry(0x0136, 0, 2, false, true),
    SimpleCaseEntry(0x0137, 1, 2, true, false),
    SimpleCaseEntry(0x1f9a, 0, 2, false, false),
    SimpleCaseEntry(0x1f92, 1, 2, true, false),
    SimpleCaseEntry(0x1e16, 0, 2, false, true),
    SimpleCaseEntry(0x1e17, 1, 2, true, false),
    SimpleCaseEntry(0x1f9b, 0, 2, false, false),
    SimpleCaseEntry(0x1f93, 1, 2, true, false),
    SimpleCaseEntry(0x1f9c, 0, 2, false, false),
    SimpleCaseEntry(0x1f94, 1, 2, true, false),
    SimpleCaseEntry(0x0139, 0, 2, false, true),
    SimpleCaseEntry(0x013a, 1, 2, true, false),
    SimpleCaseEntry(0x1e18, 0, 2, false, true),
    SimpleCaseEntry(0x1e19, 1, 2, true, false),
    SimpleCaseEntry(0x1f9d, 0, 2, false, false),
    SimpleCaseEntry(0x1f95, 1, 2, true, false),
    SimpleCaseEntry(0x1f9e, 0, 2, false, false),
    SimpleCaseEntry(0x1f96, 1, 2, true, false),
    SimpleCaseEntry(0x013b, 0, 2, false, true),
    SimpleCaseEntry(0x013c, 1, 2, true, false),
    SimpleCaseEntry(0x1e1a, 0, 2, false, true),
    SimpleCaseEntry(0x1e1b, 1, 2, true, false),
    SimpleCaseEntry(0x1f9f, 0, 2, false, false),
    SimpleCaseEntry(0x1f97, 1, 2, true, false),
    SimpleCaseEntry(0x013d, 0, 2, false, true),
    SimpleCaseEntry(0x013e, 1, 2, true, false),
    SimpleCaseEntry(0x1e1c, 0, 2, false, true),
    SimpleCaseEntry(0x1e1d, 1, 2, true, false),
    SimpleCaseEntry(0x2126, 0, 3, false, true),
    SimpleCaseEntry(0x03c9, 1, 3, true, false),
    SimpleCaseEntry(0x03a9, 2, 3, false, true),
    SimpleCaseEntry(0x013f, 0, 2, false, true),
    SimpleCaseEntry(0x0140, 1, 2, true, false),
    SimpleCaseEntry(0x1e1e, 0, 2, false, true),
    SimpleCaseEntry(0x1e1f, 1, 2, true, false),
    SimpleCaseEntry(0x0141, 0, 2, false, true),
    SimpleCaseEntry(0x0142, 1, 2, true, false),
    SimpleCaseEntry(0x1e20, 0, 2, false, true),
    SimpleCaseEntry(0x1e21, 1, 2, true, false),
    SimpleCaseEntry(0x212a, 0, 3, false, true),
    SimpleCaseEntry(0x006b, 1, 3, true, false),
    SimpleCaseEntry(0x004b, 2, 3, false, true),
    SimpleCaseEntry(0x212b, 0, 3, false, true),
    SimpleCaseEntry(0x00e5, 1, 3, true, false),
    SimpleCaseEntry(0x00c5, 2, 3, false, true),
    SimpleCaseEntry(0x0143, 0, 2, false, true),
    SimpleCaseEntry(0x0144, 1, 2, true, false),
    SimpleCaseEntry(0x1e22, 0, 2, false, true),
    SimpleCaseEntry(0x1e23, 1, 2, true, false),
    SimpleCaseEntry(0x1fa8, 0, 2, false, false),
    SimpleCaseEntry(0x1fa0, 1, 2, true, false),
    SimpleCaseEntry(0x0145, 0, 2, false, true),
    SimpleCaseEntry(0x0146, 1, 2, true, false),
    SimpleCaseEntry(0x1e24, 0, 2, false, true),
    SimpleCaseEntry(0x1e25, 1, 2, true, false),
    SimpleCaseEntry(0x1fa9, 0, 2, false, false),
    SimpleCaseEntry(0x1fa1, 1, 2, true, false),
    SimpleCaseEntry(0x1faa, 0, 2, false, false),
    SimpleCaseEntry(0x1fa2, 1, 2, true, false),
    SimpleCaseEntry(0x0147, 0, 2, false, true),
    SimpleCaseEntry(0x0148, 1, 2, true, false),
    SimpleCaseEntry(0x1e26, 0, 2, false, true),
    SimpleCaseEntry(0x1e27, 1, 2, true, false),
    SimpleCaseEntry(0x1fab, 0, 2, false, false),
    SimpleCaseEntry(0x1fa3, 1, 2, true, false),
    SimpleCaseEntry(0x1fac, 0, 2, false, false),
    SimpleCaseEntry(0x1fa4, 1, 2, true, false),
    SimpleCaseEntry(0x1e28, 0, 2, false, true),
    SimpleCaseEntry(0x1e29, 1, 2, true, false),
    SimpleCaseEntry(0x1fad, 0, 2, false, false),
    SimpleCaseEntry(0x1fa5, 1, 2, true, false),
    SimpleCaseEntry(0x2132, 0, 2, false, true),
    SimpleCaseEntry(0x214e, 1, 2, true, false),
    SimpleCaseEntry(0x014a, 0, 2, false, true),
    SimpleCaseEntry(0x014b, 1, 2, true, false),
    SimpleCaseEntry(0x1fae, 0, 2, false, false),
    SimpleCaseEntry(0x1fa6, 1, 2, true, false),
    SimpleCaseEntry(0x1e2a, 0, 2, false, true),
    SimpleCaseEntry(0x1e2b, 1, 2, true, false),
    SimpleCaseEntry(0x1faf, 0, 2, false, false),
    SimpleCaseEntry(0x1fa7, 1, 2, true, false),
    SimpleCaseEntry(0x014c, 0, 2, false, true),
    SimpleCaseEntry(0x014d, 1, 2, true, false),
    SimpleCaseEntry(0x1e2c, 0, 2, false, true),
    SimpleCaseEntry(0x1e2d, 1, 2, true, false),
    SimpleCaseEntry(0x014e, 0, 2, false, true),
    SimpleCaseEntry(0x014f, 1, 2, true, false),
    SimpleCaseEntry(0x1e2e, 0, 2, false, true),
    SimpleCaseEntry(0x1e2f, 1, 2, true, false),
    SimpleCaseEntry(0x0150, 0, 2, false, true),
    SimpleCaseEntry(0x0151, 1, 2, true, false),
    SimpleCaseEntry(0x1e30, 0, 2, false, true),
    SimpleCaseEntry(0x1e31, 1, 2, true, false),
    SimpleCaseEntry(0x0152, 0, 2, false, true),
    SimpleCaseEntry(0x0153, 1, 2, true, false),
    SimpleCaseEntry(0x1e32, 0, 2, false, true),
    SimpleCaseEntry(0x1e33, 1, 2, true, false),
    SimpleCaseEntry(0x0154, 0, 2, false, true),
    SimpleCaseEntry(0x0155, 1, 2, true, false),
    SimpleCaseEntry(0x1fb8, 0, 2, false, true),
    SimpleCaseEntry(0x1fb0, 1, 2, true, false),
    SimpleCaseEntry(0x1e34, 0, 2, false, true),
    SimpleCaseEntry(0x1e35, 1, 2, true, false),
    SimpleCaseEntry(0x1fb9, 0, 2, false, true),
    SimpleCaseEntry(0x1fb1, 1, 2, true, false),
    SimpleCaseEntry(0x0156, 0, 2, false, true),
    SimpleCaseEntry(0x0157, 1, 2, true, false),
    SimpleCaseEntry(0x0460, 0, 2, false, true),
    SimpleCaseEntry(0x0461, 1, 2, true, false),
    SimpleCaseEntry(0x1fba, 0, 2, false, true),
    SimpleCaseEntry(0x1f70, 1, 2, true, false),
    SimpleCaseEntry(0x1e36, 0, 2, false, true),
    SimpleCaseEntry(0x1e37, 1, 2, true, false),
    SimpleCaseEntry(0x1fbb, 0, 2, false, true),
    SimpleCaseEntry(0x1f71, 1, 2, true, false),
    SimpleCaseEntry(0x0158, 0, 2, false, true),
    SimpleCaseEntry(0x0159, 1, 2, true, false),
    SimpleCaseEntry(0x0462, 0, 2, false, true),
    SimpleCaseEntry(0x0463, 1, 2, true, false),
    SimpleCaseEntry(0x1fbc, 0, 2, false, false),
    SimpleCaseEntry(0x1fb3, 1, 2, true, false),
    SimpleCaseEntry(0x1e38, 0, 2, false, true),
    SimpleCaseEntry(0x1e39, 1, 2, true, false),
    SimpleCaseEntry(0x015a, 0, 2, false, true),
    SimpleCaseEntry(0x015b, 1, 2, true, false),
    SimpleCaseEntry(0x0464, 0, 2, false, true),
    SimpleCaseEntry(0x0465, 1, 2, true, false),
    SimpleCaseEntry(0x1fbe, 0, 4, true, false),
    SimpleCaseEntry(0x03b9, 1, 4, true, false),
    SimpleCaseEntry(0x0345, 2, 4, true, false),
    SimpleCaseEntry(0x0399, 3, 4, false, true),
    SimpleCaseEntry(0x1e3a, 0, 2, false, true),
    SimpleCaseEntry(0x1e3b, 1, 2, true, false),
    SimpleCaseEntry(0x015c, 0, 2, false, true),
    SimpleCaseEntry(0x015d, 1, 2, true, false),
    SimpleCaseEntry(0x0466, 0, 2, false, true),
    SimpleCaseEntry(0x0467, 1, 2, true, false),
    SimpleCaseEntry(0x1e3c, 0, 2, false, true),
    SimpleCaseEntry(0x1e3d, 1, 2, true, false),
    SimpleCaseEntry(0x015e, 0, 2, false, true),
    SimpleCaseEntry(0x015f, 1, 2, true, false),
    SimpleCaseEntry(0x0468, 0, 2, false, true),
    SimpleCaseEntry(0x0469, 1, 2, true, false),
    SimpleCaseEntry(0xff21, 0, 2, false, true),
    SimpleCaseEntry(0xff41, 1, 2, true, false),
    SimpleCaseEntry(0x1e3e, 0, 2, false, true),
    SimpleCaseEntry(0x1e3f, 1, 2, true, false),
    SimpleCaseEntry(0xff22, 0, 2, false, true),
    SimpleCaseEntry(0xff42, 1, 2, true, false),
    SimpleCaseEntry(0x0160, 0, 2, false, true),
    SimpleCaseEntry(0x0161, 1, 2, true, false),
    SimpleCaseEntry(0x046a, 0, 2, false, true),
    SimpleCaseEntry(0x046b, 1, 2, true, false),
    SimpleCaseEntry(0xff23, 0, 2, false, true),
    SimpleCaseEntry(0xff43, 1, 2, true, false),
    SimpleCaseEntry(0x1e40, 0, 2, false, true),
    SimpleCaseEntry(0x1e41, 1, 2, true, false),
    SimpleCaseEntry(0xff24, 0, 2, false, true),
    SimpleCaseEntry(0xff44, 1, 2, true, false),
    SimpleCaseEntry(0x0162, 0, 2, false, true),
    SimpleCaseEntry(0x0163, 1, 2, true, false),
    SimpleCaseEntry(0x046c, 0, 2, false, true),
    SimpleCaseEntry(0x046d, 1, 2, true, false),
    SimpleCaseEntry(0xff25, 0, 2, false, true),
    SimpleCaseEntry(0xff45, 1, 2, true, false),
    SimpleCaseEntry(0x1e42, 0, 2, false, true),
    SimpleCaseEntry(0x1e43, 1, 2, true, false),
    SimpleCaseEntry(0xff26, 0, 2, false, true),
    SimpleCaseEntry(0xff46, 1, 2, true, false),
    SimpleCaseEntry(0x0164, 0, 2, false, true),
    SimpleCaseEntry(0x0165, 1, 2, true, false),
    SimpleCaseEntry(0x046e, 0, 2, false, true),
    SimpleCaseEntry(0x046f, 1, 2, true, false),
    SimpleCaseEntry(0x1fc8, 0, 2, false, true),
    SimpleCaseEntry(0x1f72, 1, 2, true, false),
    SimpleCaseEntry(0xff27, 0, 2, false, true),
    SimpleCaseEntry(0xff47, 1, 2, true, false),
    SimpleCaseEntry(0x1e44, 0, 2, false, true),
    SimpleCaseEntry(0x1e45, 1, 2, true, false),
    SimpleCaseEntry(0x1fc9, 0, 2, false, true),
    SimpleCaseEntry(0x1f73, 1, 2, true, false),
    SimpleCaseEntry(0xff28, 0, 2, false, true),
    SimpleCaseEntry(0xff48, 1, 2, true, false),
    SimpleCaseEntry(0x0166, 0, 2, false, true),
    SimpleCaseEntry(0x0167, 1, 2, true, false),
    SimpleCaseEntry(0x0470, 0, 2, false, true),
    SimpleCaseEntry(0x0471, 1, 2, true, false),
    SimpleCaseEntry(0x1fca, 0, 2, false, true),
    SimpleCaseEntry(0x1f74, 1, 2, true, false),
    SimpleCaseEntry(0xff29, 0, 2, false, true),
    SimpleCaseEntry(0xff49, 1, 2, true, false),
    SimpleCaseEntry(0x1e46, 0, 2, false, true),
    SimpleCaseEntry(0x1e47, 1, 2, true, false),
    SimpleCaseEntry(0x1fcb, 0, 2, false, true),
    SimpleCaseEntry(0x1f75, 1, 2, true, false),
    SimpleCaseEntry(0xff2a, 0, 2, false, true),
    SimpleCaseEntry(0xff4a, 1, 2, true, false),
    SimpleCaseEntry(0x0168, 0, 2, false, true),
    SimpleCaseEntry(0x0169, 1, 2, true, false),
    SimpleCaseEntry(0x0472, 0, 2, false, true),
    SimpleCaseEntry(0x0473, 1, 2, true, false),
    SimpleCaseEntry(0x1fcc, 0, 2, false, false),
    SimpleCaseEntry(0x1fc3, 1, 2, true, false),
    SimpleCaseEntry(0xff2b, 0, 2, false, true),
    SimpleCaseEntry(0xff4b, 1, 2, true, false),
    SimpleCaseEntry(0x1e48, 0, 2, false, true),
    SimpleCaseEntry(0x1e49, 1, 2, true, false),
    SimpleCaseEntry(0xff2c, 0, 2, false, true),
    SimpleCaseEntry(0xff4c, 1, 2, true, false),
    SimpleCaseEntry(0x016a, 0, 2, false, true),
    SimpleCaseEntry(0x016b, 1, 2, true, false),
    SimpleCaseEntry(0x0474, 0, 2, false, true),
    SimpleCaseEntry(0x0475, 1, 2, true, false),
    SimpleCaseEntry(0xff2d, 0, 2, false, true),
    SimpleCaseEntry(0xff4d, 1, 2, true, false),
    SimpleCaseEntry(0x1e4a, 0, 2, false, true),
    SimpleCaseEntry(0x1e4b, 1, 2, true, false),
    SimpleCaseEntry(0xff2e, 0, 2, false, true),
    SimpleCaseEntry(0xff4e, 1, 2, true, false),
    SimpleCaseEntry(0x016c, 0, 2, false, true),
    SimpleCaseEntry(0x016d, 1, 2, true, false),
    SimpleCaseEntry(0x0476, 0, 2, false, true),
    SimpleCaseEntry(0x0477, 1, 2, true, false),
    SimpleCaseEntry(0xff2f, 0, 2, false, true),
    SimpleCaseEntry(0xff4f, 1, 2, true, false),
    SimpleCaseEntry(0x1e4c, 0, 2, false, true),
    SimpleCaseEntry(0x1e4d, 1, 2, true, false),
    SimpleCaseEntry(0xff30, 0, 2, false, true),
    SimpleCaseEntry(0xff50, 1, 2, true, false),
    SimpleCaseEntry(0x016e, 0, 2, false, true),
    SimpleCaseEntry(0x016f, 1, 2, true, false),
    SimpleCaseEntry(0x0478, 0, 2, false, true),
    SimpleCaseEntry(0x0479, 1, 2, true, false),
    SimpleCaseEntry(0x10a0, 0, 2, false, true),
    SimpleCaseEntry(0x2d00, 1, 2, true, false),
    SimpleCaseEntry(0xff31, 0, 2, false, true),
    SimpleCaseEntry(0xff51, 1, 2, true, false),
    SimpleCaseEntry(0x10a1, 0, 2, false, true),
    SimpleCaseEntry(0x2d01, 1, 2, true, false),
    SimpleCaseEntry(0x1e4e, 0, 2, false, true),
    SimpleCaseEntry(0x1e4f, 1, 2, true, false),
    SimpleCaseEntry(0xff32, 0, 2, false, true),
    SimpleCaseEntry(0xff52, 1, 2, true, false),
    SimpleCaseEntry(0x0170, 0, 2, false, true),
    SimpleCaseEntry(0x0171, 1, 2, true, false),
    SimpleCaseEntry(0x047a, 0, 2, false, true),
    SimpleCaseEntry(0x047b, 1, 2, true, false),
    SimpleCaseEntry(0x10a2, 0, 2, false, true),
    SimpleCaseEntry(0x2d02, 1, 2, true, false),
    SimpleCaseEntry(0xff33, 0, 2, false, true),
    SimpleCaseEntry(0xff53, 1, 2, true, false),
    SimpleCaseEntry(0x10a3, 0, 2, false, true),
    SimpleCaseEntry(0x2d03, 1, 2, true, false),
    SimpleCaseEntry(0x1e50, 0, 2, false, true),
    SimpleCaseEntry(0x1e51, 1, 2, true, false),
    SimpleCaseEntry(0xff34, 0, 2, false, true),
    SimpleCaseEntry(0xff54, 1, 2, true, false),
    SimpleCaseEntry(0x0172, 0, 2, false, true),
    SimpleCaseEntry(0x0173, 1, 2, true, false),
    SimpleCaseEntry(0x047c, 0, 2, false, true),
    SimpleCaseEntry(0x047d, 1, 2, true, false),
    SimpleCaseEntry(0x10a4, 0, 2, false, true),
    SimpleCaseEntry(0x2d04, 1, 2, true, false),
    SimpleCaseEntry(0xff35, 0, 2, false, true),
    SimpleCaseEntry(0xff55, 1, 2, true, false),
    SimpleCaseEntry(0x10a5, 0, 2, false, true),
    SimpleCaseEntry(0x2d05, 1, 2, true, false),
    SimpleCaseEntry(0x1e52, 0, 2, false, true),
    SimpleCaseEntry(0x1e53, 1, 2, true, false),
    SimpleCaseEntry(0xff36, 0, 2, false, true),
    SimpleCaseEntry(0xff56, 1, 2, true, false),
    SimpleCaseEntry(0x0174, 0, 2, false, true),
    SimpleCaseEntry(0x0175, 1, 2, true, false),
    SimpleCaseEntry(0x047e, 0, 2, false, true),
    SimpleCaseEntry(0x047f, 1, 2, true, false),
    SimpleCaseEntry(0x10a6, 0, 2, false, true),
    SimpleCaseEntry(0x2d06, 1, 2, true, false),
    SimpleCaseEntry(0x1fd8, 0, 2, false, true),
    SimpleCaseEntry(0x1fd0, 1, 2, true, false),
    SimpleCaseEntry(0x2c00, 0, 2, false, true),
    SimpleCaseEntry(0x2c30, 1, 2, true, false),
    SimpleCaseEntry(0xff37, 0, 2, false, true),
    SimpleCaseEntry(0xff57, 1, 2, true, false),
    SimpleCaseEntry(0x10a7, 0, 2, false, true),
    SimpleCaseEntry(0x2d07, 1, 2, true, false),
    SimpleCaseEntry(0x1e54, 0, 2, false, true),
    SimpleCaseEntry(0x1e55, 1, 2, true, false),
    SimpleCaseEntry(0x1fd9, 0, 2, false, true),
    SimpleCaseEntry(0x1fd1, 1, 2, true, false),
    SimpleCaseEntry(0x2c01, 0, 2, false, true),
    SimpleCaseEntry(0x2c31, 1, 2, true, false),
    SimpleCaseEntry(0xff38, 0, 2, false, true),
    SimpleCaseEntry(0xff58, 1, 2, true, false),
    SimpleCaseEntry(0x0176, 0, 2, false, true),
    SimpleCaseEntry(0x0177, 1, 2, true, false),
    SimpleCaseEntry(0x0480, 0, 2, false, true),
    SimpleCaseEntry(0x0481, 1, 2, true, false),
    SimpleCaseEntry(0x10a8, 0, 2, false, true),
    SimpleCaseEntry(0x2d08, 1, 2, true, false),
    SimpleCaseEntry(0x1fda, 0, 2, false, true),
    SimpleCaseEntry(0x1f76, 1, 2, true, false),
    SimpleCaseEntry(0x2c02, 0, 2, false, true),
    SimpleCaseEntry(0x2c32, 1, 2, true, false),
    SimpleCaseEntry(0xff39, 0, 2, false, true),
    SimpleCaseEntry(0xff59, 1, 2, true, false),
    SimpleCaseEntry(0x10a9, 0, 2, false, true),
    SimpleCaseEntry(0x2d09, 1, 2, true, false),
    SimpleCaseEntry(0x1e56, 0, 2, false, true),
    SimpleCaseEntry(0x1e57, 1, 2, true, false),
    SimpleCaseEntry(0x1fdb, 0, 2, false, true),
    SimpleCaseEntry(0x1f77, 1, 2, true, false),
    SimpleCaseEntry(0x2160, 0, 2, false, true),
    SimpleCaseEntry(0x2170, 1, 2, true, false),
    SimpleCaseEntry(0x2c03, 0, 2, false, true),
    SimpleCaseEntry(0x2c33, 1, 2, true, false),
    SimpleCaseEntry(0xff3a, 0, 2, false, true),
    SimpleCaseEntry(0xff5a, 1, 2, true, false),
    SimpleCaseEntry(0x0178, 0, 2, false, true),
    SimpleCaseEntry(0x00ff, 1, 2, true, false),
    SimpleCaseEntry(0x10aa, 0, 2, false, true),
    SimpleCaseEntry(0x2d0a, 1, 2, true, false),
    SimpleCaseEntry(0x2161, 0, 2, false, true),
    SimpleCaseEntry(0x2171, 1, 2, true, false),
    SimpleCaseEntry(0x2c04, 0, 2, false, true),
    SimpleCaseEntry(0x2c34, 1, 2, true, false),
    SimpleCaseEntry(0x0179, 0, 2, false, true),
    SimpleCaseEntry(0x017a, 1, 2, true, false),
    SimpleCaseEntry(0x10ab, 0, 2, false, true),
    SimpleCaseEntry(0x2d0b, 1, 2, true, false),
    SimpleCaseEntry(0x1e58, 0, 2, false, true),
    SimpleCaseEntry(0x1e59, 1, 2, true, false),
    SimpleCaseEntry(0x2162, 0, 2, false, true),
    SimpleCaseEntry(0x2172, 1, 2, true, false),
    SimpleCaseEntry(0x2c05, 0, 2, false, true),
    SimpleCaseEntry(0x2c35, 1, 2, true, false),
    SimpleCaseEntry(0x10ac, 0, 2, false, true),
    SimpleCaseEntry(0x2d0c, 1, 2, true, false),
    SimpleCaseEntry(0x2163, 0, 2, false, true),
    SimpleCaseEntry(0x2173, 1, 2, true, false),
    SimpleCaseEntry(0x2c06, 0, 2, false, true),
    SimpleCaseEntry(0x2c36, 1, 2, true, false),
    SimpleCaseEntry(0x017b, 0, 2, false, true),
    SimpleCaseEntry(0x017c, 1, 2, true, false),
    SimpleCaseEntry(0x10ad, 0, 2, false, true),
    SimpleCaseEntry(0x2d0d, 1, 2, true, false),
    SimpleCaseEntry(0x1e5a, 0, 2, false, true),
    SimpleCaseEntry(0x1e5b, 1, 2, true, false),
    SimpleCaseEntry(0x2164, 0, 2, false, true),
    SimpleCaseEntry(0x2174, 1, 2, true, false),
    SimpleCaseEntry(0x2c07, 0, 2, false, true),
    SimpleCaseEntry(0x2c37, 1, 2, true, false),
    SimpleCaseEntry(0x10ae, 0, 2, false, true),
    SimpleCaseEntry(0x2d0e, 1, 2, true, false),
    SimpleCaseEntry(0x2165, 0, 2, false, true),
    SimpleCaseEntry(0x2175, 1, 2, true, false),
    SimpleCaseEntry(0x2c08, 0, 2, false, true),
    SimpleCaseEntry(0x2c38, 1, 2, true, false),
    SimpleCaseEntry(0x017d, 0, 2, false, true),
    SimpleCaseEntry(0x017e, 1, 2, true, false),
    SimpleCaseEntry(0x10af, 0, 2, false, true),
    SimpleCaseEntry(0x2d0f, 1, 2, true, false),
    SimpleCaseEntry(0x1e5c, 0, 2, false, true),
    SimpleCaseEntry(0x1e5d, 1, 2, true, false),
    SimpleCaseEntry(0x2166, 0, 2, false, true),
    SimpleCaseEntry(0x2176, 1, 2, true, false),
    SimpleCaseEntry(0x2c09, 0, 2, false, true),
    SimpleCaseEntry(0x2c39, 1, 2, true, false),
    SimpleCaseEntry(0x10b0, 0, 2, false, true),
    SimpleCaseEntry(0x2d10, 1, 2, true, false),
    SimpleCaseEntry(0x2167, 0, 2, false, true),
    SimpleCaseEntry(0x2177, 1, 2, true, false),
    SimpleCaseEntry(0x2c0a, 0, 2, false, true),
    SimpleCaseEntry(0x2c3a, 1, 2, true, false),
    SimpleCaseEntry(0x017f, 0, 3, true, false),
    SimpleCaseEntry(0x0073, 1, 3, true, false),
    SimpleCaseEntry(0x0053, 2, 3, false, true),
    SimpleCaseEntry(0x10b1, 0, 2, false, true),
    SimpleCaseEntry(0x2d11, 1, 2, true, false),
    SimpleCaseEntry(0x1e5e, 0, 2, false, true),
    SimpleCaseEntry(0x1e5f, 1, 2, true, false),
    SimpleCaseEntry(0x2168, 0, 2, false, true),
    SimpleCaseEntry(0x2178, 1, 2, true, false),
    SimpleCaseEntry(0x2c0b, 0, 2, false, true),
    SimpleCaseEntry(0x2c3b, 1, 2, true, false),
    SimpleCaseEntry(0x048a, 0, 2, false, true),
    SimpleCaseEntry(0x048b, 1, 2, true, false),
    SimpleCaseEntry(0x10b2, 0, 2, false, true),
    SimpleCaseEntry(0x2d12, 1, 2, true, false),
    SimpleCaseEntry(0x2169, 0, 2, false, true),
    SimpleCaseEntry(0x2179, 1, 2, true, false),
    SimpleCaseEntry(0x2c0c, 0, 2, false, true),
    SimpleCaseEntry(0x2c3c, 1, 2, true, false),
    SimpleCaseEntry(0x0181, 0, 2, false, true),
    SimpleCaseEntry(0x0253, 1, 2, true, false),
    SimpleCaseEntry(0x10b3, 0, 2, false, true),
    SimpleCaseEntry(0x2d13, 1, 2, true, false),
    SimpleCaseEntry(0x1e60, 0, 3, false, true),
    SimpleCaseEntry(0x1e61, 1, 3, true, false),
    SimpleCaseEntry(0x1e9b, 2, 3, true, false),
    SimpleCaseEntry(0x216a, 0, 2, false, true),
    SimpleCaseEntry(0x217a, 1, 2, true, false),
    SimpleCaseEntry(0x2c0d, 0, 2, false, true),
    SimpleCaseEntry(0x2c3d, 1, 2, true, false),
    SimpleCaseEntry(0xa722, 0, 2, false, true),
    SimpleCaseEntry(0xa723, 1, 2, true, false),
    SimpleCaseEntry(0x0182, 0, 2, false, true),
    SimpleCaseEntry(0x0183, 1, 2, true, false),
    SimpleCaseEntry(0x048c, 0, 2, false, true),
    SimpleCaseEntry(0x048d, 1, 2, true, false),
    SimpleCaseEntry(0x10b4, 0, 2, false, true),
    SimpleCaseEntry(0x2d14, 1, 2, true, false),
    SimpleCaseEntry(0x216b, 0, 2, false, true),
    SimpleCaseEntry(0x217b, 1, 2, true, false),
    SimpleCaseEntry(0x2c0e, 0, 2, false, true),
    SimpleCaseEntry(0x2c3e, 1, 2, true, false),
    SimpleCaseEntry(0x10b5, 0, 2, false, true),
    SimpleCaseEntry(0x2d15, 1, 2, true, false),
    SimpleCaseEntry(0x1e62, 0, 2, false, true),
    SimpleCaseEntry(0x1e63, 1, 2, true, false),
    SimpleCaseEntry(0x216c, 0, 2, false, true),
    SimpleCaseEntry(0x217c, 1, 2, true, false),
    SimpleCaseEntry(0x2c0f, 0, 2, false, true),
    SimpleCaseEntry(0x2c3f, 1, 2, true, false),
    SimpleCaseEntry(0xa724, 0, 2, false, true),
    SimpleCaseEntry(0xa725, 1, 2, true, false),
    SimpleCaseEntry(0x0184, 0, 2, false, true),
    SimpleCaseEntry(0x0185, 1, 2, true, false),
    SimpleCaseEntry(0x048e, 0, 2, false, true),
    SimpleCaseEntry(0x048f, 1, 2, true, false),
    SimpleCaseEntry(0x10b6, 0, 2, false, true),
    SimpleCaseEntry(0x2d16, 1, 2, true, false),
    SimpleCaseEntry(0x1fe8, 0, 2, false, true),
    SimpleCaseEntry(0x1fe0, 1, 2, true, false),
    SimpleCaseEntry(0x216d, 0, 2, false, true),
    SimpleCaseEntry(0x217d, 1, 2, true, false),
    SimpleCaseEntry(0x2c10, 0, 2, false, true),
    SimpleCaseEntry(0x2c40, 1, 2, true, false)
];
immutable fullCaseTable = [
    FullCaseEntry("Ⴗ", 0, 2),
    FullCaseEntry("ⴗ", 1, 2),
    FullCaseEntry("Ṥ", 0, 2),
    FullCaseEntry("ṥ", 1, 2),
    FullCaseEntry("Ῡ", 0, 2),
    FullCaseEntry("ῡ", 1, 2),
    FullCaseEntry("Ⅾ", 0, 2),
    FullCaseEntry("ⅾ", 1, 2),
    FullCaseEntry("Ⱁ", 0, 2),
    FullCaseEntry("ⱁ", 1, 2),
    FullCaseEntry("Ꜧ", 0, 2),
    FullCaseEntry("ꜧ", 1, 2),
    FullCaseEntry("Ɔ", 0, 2),
    FullCaseEntry("ɔ", 1, 2),
    FullCaseEntry("Ґ", 0, 2),
    FullCaseEntry("ґ", 1, 2),
    FullCaseEntry("Ⴘ", 0, 2),
    FullCaseEntry("ⴘ", 1, 2),
    FullCaseEntry("Ὺ", 0, 2),
    FullCaseEntry("ὺ", 1, 2),
    FullCaseEntry("Ⅿ", 0, 2),
    FullCaseEntry("ⅿ", 1, 2),
    FullCaseEntry("Ⱂ", 0, 2),
    FullCaseEntry("ⱂ", 1, 2),
    FullCaseEntry("Ƈ", 0, 2),
    FullCaseEntry("ƈ", 1, 2),
    FullCaseEntry("Ⴙ", 0, 2),
    FullCaseEntry("ⴙ", 1, 2),
    FullCaseEntry("Ṧ", 0, 2),
    FullCaseEntry("ṧ", 1, 2),
    FullCaseEntry("Ύ", 0, 2),
    FullCaseEntry("ύ", 1, 2),
    FullCaseEntry("Ⱃ", 0, 2),
    FullCaseEntry("ⱃ", 1, 2),
    FullCaseEntry("Ꜩ", 0, 2),
    FullCaseEntry("ꜩ", 1, 2),
    FullCaseEntry("Ғ", 0, 2),
    FullCaseEntry("ғ", 1, 2),
    FullCaseEntry("Ⴚ", 0, 2),
    FullCaseEntry("ⴚ", 1, 2),
    FullCaseEntry("Ῥ", 0, 2),
    FullCaseEntry("ῥ", 1, 2),
    FullCaseEntry("Ⱄ", 0, 2),
    FullCaseEntry("ⱄ", 1, 2),
    FullCaseEntry("Ɖ", 0, 2),
    FullCaseEntry("ɖ", 1, 2),
    FullCaseEntry("Ⴛ", 0, 2),
    FullCaseEntry("ⴛ", 1, 2),
    FullCaseEntry("Ṩ", 0, 2),
    FullCaseEntry("ṩ", 1, 2),
    FullCaseEntry("Ⱅ", 0, 2),
    FullCaseEntry("ⱅ", 1, 2),
    FullCaseEntry("Ꜫ", 0, 2),
    FullCaseEntry("ꜫ", 1, 2),
    FullCaseEntry("Ɗ", 0, 2),
    FullCaseEntry("ɗ", 1, 2),
    FullCaseEntry("Ҕ", 0, 2),
    FullCaseEntry("ҕ", 1, 2),
    FullCaseEntry("Ⴜ", 0, 2),
    FullCaseEntry("ⴜ", 1, 2),
    FullCaseEntry("Ⱆ", 0, 2),
    FullCaseEntry("ⱆ", 1, 2),
    FullCaseEntry("Ƌ", 0, 2),
    FullCaseEntry("ƌ", 1, 2),
    FullCaseEntry("Ⴝ", 0, 2),
    FullCaseEntry("ⴝ", 1, 2),
    FullCaseEntry("Ṫ", 0, 2),
    FullCaseEntry("ṫ", 1, 2),
    FullCaseEntry("Ⱇ", 0, 2),
    FullCaseEntry("ⱇ", 1, 2),
    FullCaseEntry("Ꜭ", 0, 2),
    FullCaseEntry("ꜭ", 1, 2),
    FullCaseEntry("Җ", 0, 2),
    FullCaseEntry("җ", 1, 2),
    FullCaseEntry("Ⴞ", 0, 2),
    FullCaseEntry("ⴞ", 1, 2),
    FullCaseEntry("Ⱈ", 0, 2),
    FullCaseEntry("ⱈ", 1, 2),
    FullCaseEntry("Ⴟ", 0, 2),
    FullCaseEntry("ⴟ", 1, 2),
    FullCaseEntry("Ṭ", 0, 2),
    FullCaseEntry("ṭ", 1, 2),
    FullCaseEntry("Ⱉ", 0, 2),
    FullCaseEntry("ⱉ", 1, 2),
    FullCaseEntry("Ꜯ", 0, 2),
    FullCaseEntry("ꜯ", 1, 2),
    FullCaseEntry("Ǝ", 0, 2),
    FullCaseEntry("ǝ", 1, 2),
    FullCaseEntry("Ҙ", 0, 2),
    FullCaseEntry("ҙ", 1, 2),
    FullCaseEntry("Ⴠ", 0, 2),
    FullCaseEntry("ⴠ", 1, 2),
    FullCaseEntry("ῲ", 0, 2),
    FullCaseEntry("ὼι", 1, 2),
    FullCaseEntry("Ⱊ", 0, 2),
    FullCaseEntry("ⱊ", 1, 2),
    FullCaseEntry("Ə", 0, 2),
    FullCaseEntry("ə", 1, 2),
    FullCaseEntry("Ⴡ", 0, 2),
    FullCaseEntry("ⴡ", 1, 2),
    FullCaseEntry("Ṯ", 0, 2),
    FullCaseEntry("ṯ", 1, 2),
    FullCaseEntry("ῳ", 0, 3),
    FullCaseEntry("ωι", 1, 3),
    FullCaseEntry("ῼ", 2, 3),
    FullCaseEntry("Ⱋ", 0, 2),
    FullCaseEntry("ⱋ", 1, 2),
    FullCaseEntry("Ɛ", 0, 2),
    FullCaseEntry("ɛ", 1, 2),
    FullCaseEntry("Қ", 0, 2),
    FullCaseEntry("қ", 1, 2),
    FullCaseEntry("Ⴢ", 0, 2),
    FullCaseEntry("ⴢ", 1, 2),
    FullCaseEntry("ῴ", 0, 2),
    FullCaseEntry("ώι", 1, 2),
    FullCaseEntry("Ⱌ", 0, 2),
    FullCaseEntry("ⱌ", 1, 2),
    FullCaseEntry("Ƒ", 0, 2),
    FullCaseEntry("ƒ", 1, 2),
    FullCaseEntry("Ⴣ", 0, 2),
    FullCaseEntry("ⴣ", 1, 2),
    FullCaseEntry("Ṱ", 0, 2),
    FullCaseEntry("ṱ", 1, 2),
    FullCaseEntry("Ⱍ", 0, 2),
    FullCaseEntry("ⱍ", 1, 2),
    FullCaseEntry("Ꜳ", 0, 2),
    FullCaseEntry("ꜳ", 1, 2),
    FullCaseEntry("Ҝ", 0, 2),
    FullCaseEntry("ҝ", 1, 2),
    FullCaseEntry("Ⴤ", 0, 2),
    FullCaseEntry("ⴤ", 1, 2),
    FullCaseEntry("ῶ", 0, 2),
    FullCaseEntry("ῶ", 1, 2),
    FullCaseEntry("Ⱎ", 0, 2),
    FullCaseEntry("ⱎ", 1, 2),
    FullCaseEntry("Ɠ", 0, 2),
    FullCaseEntry("ɠ", 1, 2),
    FullCaseEntry("Ⴥ", 0, 2),
    FullCaseEntry("ⴥ", 1, 2),
    FullCaseEntry("Ṳ", 0, 2),
    FullCaseEntry("ṳ", 1, 2),
    FullCaseEntry("ῷ", 0, 2),
    FullCaseEntry("ῶι", 1, 2),
    FullCaseEntry("Ⱏ", 0, 2),
    FullCaseEntry("ⱏ", 1, 2),
    FullCaseEntry("Ꜵ", 0, 2),
    FullCaseEntry("ꜵ", 1, 2),
    FullCaseEntry("Ɣ", 0, 2),
    FullCaseEntry("ɣ", 1, 2),
    FullCaseEntry("Ҟ", 0, 2),
    FullCaseEntry("ҟ", 1, 2),
    FullCaseEntry("Ὸ", 0, 2),
    FullCaseEntry("ὸ", 1, 2),
    FullCaseEntry("Ⱐ", 0, 2),
    FullCaseEntry("ⱐ", 1, 2),
    FullCaseEntry("Ⴧ", 0, 2),
    FullCaseEntry("ⴧ", 1, 2),
    FullCaseEntry("Ṵ", 0, 2),
    FullCaseEntry("ṵ", 1, 2),
    FullCaseEntry("Ό", 0, 2),
    FullCaseEntry("ό", 1, 2),
    FullCaseEntry("Ⱑ", 0, 2),
    FullCaseEntry("ⱑ", 1, 2),
    FullCaseEntry("Ꜷ", 0, 2),
    FullCaseEntry("ꜷ", 1, 2),
    FullCaseEntry("Ɩ", 0, 2),
    FullCaseEntry("ɩ", 1, 2),
    FullCaseEntry("Ҡ", 0, 2),
    FullCaseEntry("ҡ", 1, 2),
    FullCaseEntry("Ὼ", 0, 2),
    FullCaseEntry("ὼ", 1, 2),
    FullCaseEntry("Ⱒ", 0, 2),
    FullCaseEntry("ⱒ", 1, 2),
    FullCaseEntry("Ɨ", 0, 2),
    FullCaseEntry("ɨ", 1, 2),
    FullCaseEntry("Ṷ", 0, 2),
    FullCaseEntry("ṷ", 1, 2),
    FullCaseEntry("Ώ", 0, 2),
    FullCaseEntry("ώ", 1, 2),
    FullCaseEntry("Ⱓ", 0, 2),
    FullCaseEntry("ⱓ", 1, 2),
    FullCaseEntry("Ꜹ", 0, 2),
    FullCaseEntry("ꜹ", 1, 2),
    FullCaseEntry("Ƙ", 0, 2),
    FullCaseEntry("ƙ", 1, 2),
    FullCaseEntry("Ң", 0, 2),
    FullCaseEntry("ң", 1, 2),
    FullCaseEntry("ῼ", 0, 3),
    FullCaseEntry("ωι", 1, 3),
    FullCaseEntry("ῳ", 2, 3),
    FullCaseEntry("Ⱔ", 0, 2),
    FullCaseEntry("ⱔ", 1, 2),
    FullCaseEntry("Ṹ", 0, 2),
    FullCaseEntry("ṹ", 1, 2),
    FullCaseEntry("Ⱕ", 0, 2),
    FullCaseEntry("ⱕ", 1, 2),
    FullCaseEntry("Ꜻ", 0, 2),
    FullCaseEntry("ꜻ", 1, 2),
    FullCaseEntry("Ҥ", 0, 2),
    FullCaseEntry("ҥ", 1, 2),
    FullCaseEntry("Ↄ", 0, 2),
    FullCaseEntry("ↄ", 1, 2),
    FullCaseEntry("Ⱖ", 0, 2),
    FullCaseEntry("ⱖ", 1, 2),
    FullCaseEntry("Ⴭ", 0, 2),
    FullCaseEntry("ⴭ", 1, 2),
    FullCaseEntry("Ṻ", 0, 2),
    FullCaseEntry("ṻ", 1, 2),
    FullCaseEntry("Ⱗ", 0, 2),
    FullCaseEntry("ⱗ", 1, 2),
    FullCaseEntry("Ꜽ", 0, 2),
    FullCaseEntry("ꜽ", 1, 2),
    FullCaseEntry("Ɯ", 0, 2),
    FullCaseEntry("ɯ", 1, 2),
    FullCaseEntry("Ҧ", 0, 2),
    FullCaseEntry("ҧ", 1, 2),
    FullCaseEntry("Ⱘ", 0, 2),
    FullCaseEntry("ⱘ", 1, 2),
    FullCaseEntry("Ɲ", 0, 2),
    FullCaseEntry("ɲ", 1, 2),
    FullCaseEntry("Ṽ", 0, 2),
    FullCaseEntry("ṽ", 1, 2),
    FullCaseEntry("Ⱙ", 0, 2),
    FullCaseEntry("ⱙ", 1, 2),
    FullCaseEntry("Ꜿ", 0, 2),
    FullCaseEntry("ꜿ", 1, 2),
    FullCaseEntry("Ҩ", 0, 2),
    FullCaseEntry("ҩ", 1, 2),
    FullCaseEntry("Ⱚ", 0, 2),
    FullCaseEntry("ⱚ", 1, 2),
    FullCaseEntry("Ɵ", 0, 2),
    FullCaseEntry("ɵ", 1, 2),
    FullCaseEntry("Ṿ", 0, 2),
    FullCaseEntry("ṿ", 1, 2),
    FullCaseEntry("Ⱛ", 0, 2),
    FullCaseEntry("ⱛ", 1, 2),
    FullCaseEntry("Ꝁ", 0, 2),
    FullCaseEntry("ꝁ", 1, 2),
    FullCaseEntry("Ơ", 0, 2),
    FullCaseEntry("ơ", 1, 2),
    FullCaseEntry("Ҫ", 0, 2),
    FullCaseEntry("ҫ", 1, 2),
    FullCaseEntry("Ⱜ", 0, 2),
    FullCaseEntry("ⱜ", 1, 2),
    FullCaseEntry("Ẁ", 0, 2),
    FullCaseEntry("ẁ", 1, 2),
    FullCaseEntry("Ⱝ", 0, 2),
    FullCaseEntry("ⱝ", 1, 2),
    FullCaseEntry("Ꝃ", 0, 2),
    FullCaseEntry("ꝃ", 1, 2),
    FullCaseEntry("Ƣ", 0, 2),
    FullCaseEntry("ƣ", 1, 2),
    FullCaseEntry("Ҭ", 0, 2),
    FullCaseEntry("ҭ", 1, 2),
    FullCaseEntry("Ⱞ", 0, 2),
    FullCaseEntry("ⱞ", 1, 2),
    FullCaseEntry("Ẃ", 0, 2),
    FullCaseEntry("ẃ", 1, 2),
    FullCaseEntry("Ꝅ", 0, 2),
    FullCaseEntry("ꝅ", 1, 2),
    FullCaseEntry("Ƥ", 0, 2),
    FullCaseEntry("ƥ", 1, 2),
    FullCaseEntry("Ү", 0, 2),
    FullCaseEntry("ү", 1, 2),
    FullCaseEntry("Ẅ", 0, 2),
    FullCaseEntry("ẅ", 1, 2),
    FullCaseEntry("Ꝇ", 0, 2),
    FullCaseEntry("ꝇ", 1, 2),
    FullCaseEntry("Ʀ", 0, 2),
    FullCaseEntry("ʀ", 1, 2),
    FullCaseEntry("Ұ", 0, 2),
    FullCaseEntry("ұ", 1, 2),
    FullCaseEntry("Ƨ", 0, 2),
    FullCaseEntry("ƨ", 1, 2),
    FullCaseEntry("Ẇ", 0, 2),
    FullCaseEntry("ẇ", 1, 2),
    FullCaseEntry("Ꝉ", 0, 2),
    FullCaseEntry("ꝉ", 1, 2),
    FullCaseEntry("Ҳ", 0, 2),
    FullCaseEntry("ҳ", 1, 2),
    FullCaseEntry("Ʃ", 0, 2),
    FullCaseEntry("ʃ", 1, 2),
    FullCaseEntry("Ẉ", 0, 2),
    FullCaseEntry("ẉ", 1, 2),
    FullCaseEntry("Ꝋ", 0, 2),
    FullCaseEntry("ꝋ", 1, 2),
    FullCaseEntry("Ҵ", 0, 2),
    FullCaseEntry("ҵ", 1, 2),
    FullCaseEntry("Ẋ", 0, 2),
    FullCaseEntry("ẋ", 1, 2),
    FullCaseEntry("Ꝍ", 0, 2),
    FullCaseEntry("ꝍ", 1, 2),
    FullCaseEntry("Ƭ", 0, 2),
    FullCaseEntry("ƭ", 1, 2),
    FullCaseEntry("Ҷ", 0, 2),
    FullCaseEntry("ҷ", 1, 2),
    FullCaseEntry("Ẍ", 0, 2),
    FullCaseEntry("ẍ", 1, 2),
    FullCaseEntry("Ꝏ", 0, 2),
    FullCaseEntry("ꝏ", 1, 2),
    FullCaseEntry("Ʈ", 0, 2),
    FullCaseEntry("ʈ", 1, 2),
    FullCaseEntry("Ҹ", 0, 2),
    FullCaseEntry("ҹ", 1, 2),
    FullCaseEntry("𐐀", 0, 2),
    FullCaseEntry("𐐨", 1, 2),
    FullCaseEntry("Ư", 0, 2),
    FullCaseEntry("ư", 1, 2),
    FullCaseEntry("Ẏ", 0, 2),
    FullCaseEntry("ẏ", 1, 2),
    FullCaseEntry("Ꝑ", 0, 2),
    FullCaseEntry("ꝑ", 1, 2),
    FullCaseEntry("𐐁", 0, 2),
    FullCaseEntry("𐐩", 1, 2),
    FullCaseEntry("Һ", 0, 2),
    FullCaseEntry("һ", 1, 2),
    FullCaseEntry("𐐂", 0, 2),
    FullCaseEntry("𐐪", 1, 2),
    FullCaseEntry("Ʊ", 0, 2),
    FullCaseEntry("ʊ", 1, 2),
    FullCaseEntry("Ẑ", 0, 2),
    FullCaseEntry("ẑ", 1, 2),
    FullCaseEntry("Ꝓ", 0, 2),
    FullCaseEntry("ꝓ", 1, 2),
    FullCaseEntry("𐐃", 0, 2),
    FullCaseEntry("𐐫", 1, 2),
    FullCaseEntry("Ʋ", 0, 2),
    FullCaseEntry("ʋ", 1, 2),
    FullCaseEntry("Ҽ", 0, 2),
    FullCaseEntry("ҽ", 1, 2),
    FullCaseEntry("𐐄", 0, 2),
    FullCaseEntry("𐐬", 1, 2),
    FullCaseEntry("Ƴ", 0, 2),
    FullCaseEntry("ƴ", 1, 2),
    FullCaseEntry("Ẓ", 0, 2),
    FullCaseEntry("ẓ", 1, 2),
    FullCaseEntry("Ꝕ", 0, 2),
    FullCaseEntry("ꝕ", 1, 2),
    FullCaseEntry("𐐅", 0, 2),
    FullCaseEntry("𐐭", 1, 2),
    FullCaseEntry("Ҿ", 0, 2),
    FullCaseEntry("ҿ", 1, 2),
    FullCaseEntry("𐐆", 0, 2),
    FullCaseEntry("𐐮", 1, 2),
    FullCaseEntry("Ƶ", 0, 2),
    FullCaseEntry("ƶ", 1, 2),
    FullCaseEntry("Ẕ", 0, 2),
    FullCaseEntry("ẕ", 1, 2),
    FullCaseEntry("Ꝗ", 0, 2),
    FullCaseEntry("ꝗ", 1, 2),
    FullCaseEntry("𐐇", 0, 2),
    FullCaseEntry("𐐯", 1, 2),
    FullCaseEntry("Ӏ", 0, 2),
    FullCaseEntry("ӏ", 1, 2),
    FullCaseEntry("𐐈", 0, 2),
    FullCaseEntry("𐐰", 1, 2),
    FullCaseEntry("Ʒ", 0, 2),
    FullCaseEntry("ʒ", 1, 2),
    FullCaseEntry("Ӂ", 0, 2),
    FullCaseEntry("ӂ", 1, 2),
    FullCaseEntry("ẖ", 0, 2),
    FullCaseEntry("ẖ", 1, 2),
    FullCaseEntry("Ꝙ", 0, 2),
    FullCaseEntry("ꝙ", 1, 2),
    FullCaseEntry("𐐉", 0, 2),
    FullCaseEntry("𐐱", 1, 2),
    FullCaseEntry("Ƹ", 0, 2),
    FullCaseEntry("ƹ", 1, 2),
    FullCaseEntry("ẗ", 0, 2),
    FullCaseEntry("ẗ", 1, 2),
    FullCaseEntry("𐐊", 0, 2),
    FullCaseEntry("𐐲", 1, 2),
    FullCaseEntry("Ӄ", 0, 2),
    FullCaseEntry("ӄ", 1, 2),
    FullCaseEntry("ẘ", 0, 2),
    FullCaseEntry("ẘ", 1, 2),
    FullCaseEntry("Ꝛ", 0, 2),
    FullCaseEntry("ꝛ", 1, 2),
    FullCaseEntry("𐐋", 0, 2),
    FullCaseEntry("𐐳", 1, 2),
    FullCaseEntry("ẙ", 0, 2),
    FullCaseEntry("ẙ", 1, 2),
    FullCaseEntry("𐐌", 0, 2),
    FullCaseEntry("𐐴", 1, 2),
    FullCaseEntry("Ӆ", 0, 2),
    FullCaseEntry("ӆ", 1, 2),
    FullCaseEntry("ẚ", 0, 2),
    FullCaseEntry("aʾ", 1, 2),
    FullCaseEntry("Ꝝ", 0, 2),
    FullCaseEntry("ꝝ", 1, 2),
    FullCaseEntry("𐐍", 0, 2),
    FullCaseEntry("𐐵", 1, 2),
    FullCaseEntry("Ƽ", 0, 2),
    FullCaseEntry("ƽ", 1, 2),
    FullCaseEntry("ẛ", 0, 3),
    FullCaseEntry("ṡ", 1, 3),
    FullCaseEntry("Ṡ", 2, 3),
    FullCaseEntry("𐐎", 0, 2),
    FullCaseEntry("𐐶", 1, 2),
    FullCaseEntry("Ӈ", 0, 2),
    FullCaseEntry("ӈ", 1, 2),
    FullCaseEntry("Ꝟ", 0, 2),
    FullCaseEntry("ꝟ", 1, 2),
    FullCaseEntry("𐐏", 0, 2),
    FullCaseEntry("𐐷", 1, 2),
    FullCaseEntry("𐐐", 0, 2),
    FullCaseEntry("𐐸", 1, 2),
    FullCaseEntry("Ӊ", 0, 2),
    FullCaseEntry("ӊ", 1, 2),
    FullCaseEntry("ẞ", 0, 3),
    FullCaseEntry("ss", 1, 3),
    FullCaseEntry("ß", 2, 3),
    FullCaseEntry("Ꝡ", 0, 2),
    FullCaseEntry("ꝡ", 1, 2),
    FullCaseEntry("𐐑", 0, 2),
    FullCaseEntry("𐐹", 1, 2),
    FullCaseEntry("ͅ", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("Ι", 2, 4),
    FullCaseEntry("ι", 3, 4),
    FullCaseEntry("𐐒", 0, 2),
    FullCaseEntry("𐐺", 1, 2),
    FullCaseEntry("Ӌ", 0, 2),
    FullCaseEntry("ӌ", 1, 2),
    FullCaseEntry("Ạ", 0, 2),
    FullCaseEntry("ạ", 1, 2),
    FullCaseEntry("Ꝣ", 0, 2),
    FullCaseEntry("ꝣ", 1, 2),
    FullCaseEntry("𐐓", 0, 2),
    FullCaseEntry("𐐻", 1, 2),
    FullCaseEntry("𐐔", 0, 2),
    FullCaseEntry("𐐼", 1, 2),
    FullCaseEntry("Ӎ", 0, 2),
    FullCaseEntry("ӎ", 1, 2),
    FullCaseEntry("Ả", 0, 2),
    FullCaseEntry("ả", 1, 2),
    FullCaseEntry("Ⓐ", 0, 2),
    FullCaseEntry("ⓐ", 1, 2),
    FullCaseEntry("Ꝥ", 0, 2),
    FullCaseEntry("ꝥ", 1, 2),
    FullCaseEntry("𐐕", 0, 2),
    FullCaseEntry("𐐽", 1, 2),
    FullCaseEntry("Ǆ", 0, 3),
    FullCaseEntry("ǆ", 1, 3),
    FullCaseEntry("ǅ", 2, 3),
    FullCaseEntry("Ⓑ", 0, 2),
    FullCaseEntry("ⓑ", 1, 2),
    FullCaseEntry("𐐖", 0, 2),
    FullCaseEntry("𐐾", 1, 2),
    FullCaseEntry("ǅ", 0, 3),
    FullCaseEntry("ǆ", 1, 3),
    FullCaseEntry("Ǆ", 2, 3),
    FullCaseEntry("Ấ", 0, 2),
    FullCaseEntry("ấ", 1, 2),
    FullCaseEntry("Ⓒ", 0, 2),
    FullCaseEntry("ⓒ", 1, 2),
    FullCaseEntry("Ꝧ", 0, 2),
    FullCaseEntry("ꝧ", 1, 2),
    FullCaseEntry("𐐗", 0, 2),
    FullCaseEntry("𐐿", 1, 2),
    FullCaseEntry("A", 0, 2),
    FullCaseEntry("a", 1, 2),
    FullCaseEntry("Ӑ", 0, 2),
    FullCaseEntry("ӑ", 1, 2),
    FullCaseEntry("Ⓓ", 0, 2),
    FullCaseEntry("ⓓ", 1, 2),
    FullCaseEntry("𐐘", 0, 2),
    FullCaseEntry("𐑀", 1, 2),
    FullCaseEntry("B", 0, 2),
    FullCaseEntry("b", 1, 2),
    FullCaseEntry("Ǉ", 0, 3),
    FullCaseEntry("ǉ", 1, 3),
    FullCaseEntry("ǈ", 2, 3),
    FullCaseEntry("Ầ", 0, 2),
    FullCaseEntry("ầ", 1, 2),
    FullCaseEntry("Ⓔ", 0, 2),
    FullCaseEntry("ⓔ", 1, 2),
    FullCaseEntry("Ꝩ", 0, 2),
    FullCaseEntry("ꝩ", 1, 2),
    FullCaseEntry("𐐙", 0, 2),
    FullCaseEntry("𐑁", 1, 2),
    FullCaseEntry("C", 0, 2),
    FullCaseEntry("c", 1, 2),
    FullCaseEntry("ǈ", 0, 3),
    FullCaseEntry("ǉ", 1, 3),
    FullCaseEntry("Ǉ", 2, 3),
    FullCaseEntry("Ӓ", 0, 2),
    FullCaseEntry("ӓ", 1, 2),
    FullCaseEntry("Ⓕ", 0, 2),
    FullCaseEntry("ⓕ", 1, 2),
    FullCaseEntry("𐐚", 0, 2),
    FullCaseEntry("𐑂", 1, 2),
    FullCaseEntry("D", 0, 2),
    FullCaseEntry("d", 1, 2),
    FullCaseEntry("Ẩ", 0, 2),
    FullCaseEntry("ẩ", 1, 2),
    FullCaseEntry("Ⓖ", 0, 2),
    FullCaseEntry("ⓖ", 1, 2),
    FullCaseEntry("Ꝫ", 0, 2),
    FullCaseEntry("ꝫ", 1, 2),
    FullCaseEntry("𐐛", 0, 2),
    FullCaseEntry("𐑃", 1, 2),
    FullCaseEntry("E", 0, 2),
    FullCaseEntry("e", 1, 2),
    FullCaseEntry("Ǌ", 0, 3),
    FullCaseEntry("ǌ", 1, 3),
    FullCaseEntry("ǋ", 2, 3),
    FullCaseEntry("Ӕ", 0, 2),
    FullCaseEntry("ӕ", 1, 2),
    FullCaseEntry("Ⓗ", 0, 2),
    FullCaseEntry("ⓗ", 1, 2),
    FullCaseEntry("𐐜", 0, 2),
    FullCaseEntry("𐑄", 1, 2),
    FullCaseEntry("F", 0, 2),
    FullCaseEntry("f", 1, 2),
    FullCaseEntry("ǋ", 0, 3),
    FullCaseEntry("ǌ", 1, 3),
    FullCaseEntry("Ǌ", 2, 3),
    FullCaseEntry("Ẫ", 0, 2),
    FullCaseEntry("ẫ", 1, 2),
    FullCaseEntry("Ⓘ", 0, 2),
    FullCaseEntry("ⓘ", 1, 2),
    FullCaseEntry("Ꝭ", 0, 2),
    FullCaseEntry("ꝭ", 1, 2),
    FullCaseEntry("𐐝", 0, 2),
    FullCaseEntry("𐑅", 1, 2),
    FullCaseEntry("G", 0, 2),
    FullCaseEntry("g", 1, 2),
    FullCaseEntry("Ӗ", 0, 2),
    FullCaseEntry("ӗ", 1, 2),
    FullCaseEntry("Ⓙ", 0, 2),
    FullCaseEntry("ⓙ", 1, 2),
    FullCaseEntry("ﬀ", 0, 2),
    FullCaseEntry("ff", 1, 2),
    FullCaseEntry("𐐞", 0, 2),
    FullCaseEntry("𐑆", 1, 2),
    FullCaseEntry("H", 0, 2),
    FullCaseEntry("h", 1, 2),
    FullCaseEntry("Ǎ", 0, 2),
    FullCaseEntry("ǎ", 1, 2),
    FullCaseEntry("Ậ", 0, 2),
    FullCaseEntry("ậ", 1, 2),
    FullCaseEntry("Ⓚ", 0, 2),
    FullCaseEntry("ⓚ", 1, 2),
    FullCaseEntry("Ꝯ", 0, 2),
    FullCaseEntry("ꝯ", 1, 2),
    FullCaseEntry("ﬁ", 0, 2),
    FullCaseEntry("fi", 1, 2),
    FullCaseEntry("𐐟", 0, 2),
    FullCaseEntry("𐑇", 1, 2),
    FullCaseEntry("I", 0, 2),
    FullCaseEntry("i", 1, 2),
    FullCaseEntry("Ә", 0, 2),
    FullCaseEntry("ә", 1, 2),
    FullCaseEntry("Ⓛ", 0, 2),
    FullCaseEntry("ⓛ", 1, 2),
    FullCaseEntry("ﬂ", 0, 2),
    FullCaseEntry("fl", 1, 2),
    FullCaseEntry("𐐠", 0, 2),
    FullCaseEntry("𐑈", 1, 2),
    FullCaseEntry("J", 0, 2),
    FullCaseEntry("j", 1, 2),
    FullCaseEntry("Ǐ", 0, 2),
    FullCaseEntry("ǐ", 1, 2),
    FullCaseEntry("Ắ", 0, 2),
    FullCaseEntry("ắ", 1, 2),
    FullCaseEntry("Ⓜ", 0, 2),
    FullCaseEntry("ⓜ", 1, 2),
    FullCaseEntry("ﬃ", 0, 2),
    FullCaseEntry("ffi", 1, 2),
    FullCaseEntry("𐐡", 0, 2),
    FullCaseEntry("𐑉", 1, 2),
    FullCaseEntry("K", 0, 3),
    FullCaseEntry("k", 1, 3),
    FullCaseEntry("K", 2, 3),
    FullCaseEntry("Ӛ", 0, 2),
    FullCaseEntry("ӛ", 1, 2),
    FullCaseEntry("Ⓝ", 0, 2),
    FullCaseEntry("ⓝ", 1, 2),
    FullCaseEntry("ﬄ", 0, 2),
    FullCaseEntry("ffl", 1, 2),
    FullCaseEntry("𐐢", 0, 2),
    FullCaseEntry("𐑊", 1, 2),
    FullCaseEntry("L", 0, 2),
    FullCaseEntry("l", 1, 2),
    FullCaseEntry("Ǒ", 0, 2),
    FullCaseEntry("ǒ", 1, 2),
    FullCaseEntry("Ằ", 0, 2),
    FullCaseEntry("ằ", 1, 2),
    FullCaseEntry("Ⓞ", 0, 2),
    FullCaseEntry("ⓞ", 1, 2),
    FullCaseEntry("ﬅ", 0, 3),
    FullCaseEntry("st", 1, 3),
    FullCaseEntry("ﬆ", 2, 3),
    FullCaseEntry("𐐣", 0, 2),
    FullCaseEntry("𐑋", 1, 2),
    FullCaseEntry("M", 0, 2),
    FullCaseEntry("m", 1, 2),
    FullCaseEntry("Ӝ", 0, 2),
    FullCaseEntry("ӝ", 1, 2),
    FullCaseEntry("Ⓟ", 0, 2),
    FullCaseEntry("ⓟ", 1, 2),
    FullCaseEntry("ﬆ", 0, 3),
    FullCaseEntry("st", 1, 3),
    FullCaseEntry("ﬅ", 2, 3),
    FullCaseEntry("𐐤", 0, 2),
    FullCaseEntry("𐑌", 1, 2),
    FullCaseEntry("N", 0, 2),
    FullCaseEntry("n", 1, 2),
    FullCaseEntry("Ǔ", 0, 2),
    FullCaseEntry("ǔ", 1, 2),
    FullCaseEntry("Ẳ", 0, 2),
    FullCaseEntry("ẳ", 1, 2),
    FullCaseEntry("Ⓠ", 0, 2),
    FullCaseEntry("ⓠ", 1, 2),
    FullCaseEntry("𐐥", 0, 2),
    FullCaseEntry("𐑍", 1, 2),
    FullCaseEntry("O", 0, 2),
    FullCaseEntry("o", 1, 2),
    FullCaseEntry("Ӟ", 0, 2),
    FullCaseEntry("ӟ", 1, 2),
    FullCaseEntry("Ⓡ", 0, 2),
    FullCaseEntry("ⓡ", 1, 2),
    FullCaseEntry("Ⱡ", 0, 2),
    FullCaseEntry("ⱡ", 1, 2),
    FullCaseEntry("𐐦", 0, 2),
    FullCaseEntry("𐑎", 1, 2),
    FullCaseEntry("P", 0, 2),
    FullCaseEntry("p", 1, 2),
    FullCaseEntry("Ǖ", 0, 2),
    FullCaseEntry("ǖ", 1, 2),
    FullCaseEntry("Ẵ", 0, 2),
    FullCaseEntry("ẵ", 1, 2),
    FullCaseEntry("Ⓢ", 0, 2),
    FullCaseEntry("ⓢ", 1, 2),
    FullCaseEntry("𐐧", 0, 2),
    FullCaseEntry("𐑏", 1, 2),
    FullCaseEntry("Q", 0, 2),
    FullCaseEntry("q", 1, 2),
    FullCaseEntry("Ӡ", 0, 2),
    FullCaseEntry("ӡ", 1, 2),
    FullCaseEntry("Ⓣ", 0, 2),
    FullCaseEntry("ⓣ", 1, 2),
    FullCaseEntry("Ɫ", 0, 2),
    FullCaseEntry("ɫ", 1, 2),
    FullCaseEntry("R", 0, 2),
    FullCaseEntry("r", 1, 2),
    FullCaseEntry("Ǘ", 0, 2),
    FullCaseEntry("ǘ", 1, 2),
    FullCaseEntry("Ặ", 0, 2),
    FullCaseEntry("ặ", 1, 2),
    FullCaseEntry("Ⓤ", 0, 2),
    FullCaseEntry("ⓤ", 1, 2),
    FullCaseEntry("Ᵽ", 0, 2),
    FullCaseEntry("ᵽ", 1, 2),
    FullCaseEntry("S", 0, 3),
    FullCaseEntry("s", 1, 3),
    FullCaseEntry("ſ", 2, 3),
    FullCaseEntry("Ӣ", 0, 2),
    FullCaseEntry("ӣ", 1, 2),
    FullCaseEntry("Ⓥ", 0, 2),
    FullCaseEntry("ⓥ", 1, 2),
    FullCaseEntry("Ɽ", 0, 2),
    FullCaseEntry("ɽ", 1, 2),
    FullCaseEntry("Ꝺ", 0, 2),
    FullCaseEntry("ꝺ", 1, 2),
    FullCaseEntry("T", 0, 2),
    FullCaseEntry("t", 1, 2),
    FullCaseEntry("Ǚ", 0, 2),
    FullCaseEntry("ǚ", 1, 2),
    FullCaseEntry("Ẹ", 0, 2),
    FullCaseEntry("ẹ", 1, 2),
    FullCaseEntry("Ⓦ", 0, 2),
    FullCaseEntry("ⓦ", 1, 2),
    FullCaseEntry("U", 0, 2),
    FullCaseEntry("u", 1, 2),
    FullCaseEntry("Ӥ", 0, 2),
    FullCaseEntry("ӥ", 1, 2),
    FullCaseEntry("Ⓧ", 0, 2),
    FullCaseEntry("ⓧ", 1, 2),
    FullCaseEntry("Ꝼ", 0, 2),
    FullCaseEntry("ꝼ", 1, 2),
    FullCaseEntry("V", 0, 2),
    FullCaseEntry("v", 1, 2),
    FullCaseEntry("Ǜ", 0, 2),
    FullCaseEntry("ǜ", 1, 2),
    FullCaseEntry("Ẻ", 0, 2),
    FullCaseEntry("ẻ", 1, 2),
    FullCaseEntry("Ⓨ", 0, 2),
    FullCaseEntry("ⓨ", 1, 2),
    FullCaseEntry("Ⱨ", 0, 2),
    FullCaseEntry("ⱨ", 1, 2),
    FullCaseEntry("W", 0, 2),
    FullCaseEntry("w", 1, 2),
    FullCaseEntry("Ӧ", 0, 2),
    FullCaseEntry("ӧ", 1, 2),
    FullCaseEntry("Ⓩ", 0, 2),
    FullCaseEntry("ⓩ", 1, 2),
    FullCaseEntry("Ᵹ", 0, 2),
    FullCaseEntry("ᵹ", 1, 2),
    FullCaseEntry("X", 0, 2),
    FullCaseEntry("x", 1, 2),
    FullCaseEntry("Ẽ", 0, 2),
    FullCaseEntry("ẽ", 1, 2),
    FullCaseEntry("Ⱪ", 0, 2),
    FullCaseEntry("ⱪ", 1, 2),
    FullCaseEntry("Ꝿ", 0, 2),
    FullCaseEntry("ꝿ", 1, 2),
    FullCaseEntry("Y", 0, 2),
    FullCaseEntry("y", 1, 2),
    FullCaseEntry("Ǟ", 0, 2),
    FullCaseEntry("ǟ", 1, 2),
    FullCaseEntry("Ө", 0, 2),
    FullCaseEntry("ө", 1, 2),
    FullCaseEntry("Z", 0, 2),
    FullCaseEntry("z", 1, 2),
    FullCaseEntry("Ế", 0, 2),
    FullCaseEntry("ế", 1, 2),
    FullCaseEntry("Ⱬ", 0, 2),
    FullCaseEntry("ⱬ", 1, 2),
    FullCaseEntry("Ꞁ", 0, 2),
    FullCaseEntry("ꞁ", 1, 2),
    FullCaseEntry("ﬓ", 0, 2),
    FullCaseEntry("մն", 1, 2),
    FullCaseEntry("Ǡ", 0, 2),
    FullCaseEntry("ǡ", 1, 2),
    FullCaseEntry("Ӫ", 0, 2),
    FullCaseEntry("ӫ", 1, 2),
    FullCaseEntry("ﬔ", 0, 2),
    FullCaseEntry("մե", 1, 2),
    FullCaseEntry("Ề", 0, 2),
    FullCaseEntry("ề", 1, 2),
    FullCaseEntry("Ɑ", 0, 2),
    FullCaseEntry("ɑ", 1, 2),
    FullCaseEntry("Ꞃ", 0, 2),
    FullCaseEntry("ꞃ", 1, 2),
    FullCaseEntry("ﬕ", 0, 2),
    FullCaseEntry("մի", 1, 2),
    FullCaseEntry("Ǣ", 0, 2),
    FullCaseEntry("ǣ", 1, 2),
    FullCaseEntry("Ӭ", 0, 2),
    FullCaseEntry("ӭ", 1, 2),
    FullCaseEntry("Ɱ", 0, 2),
    FullCaseEntry("ɱ", 1, 2),
    FullCaseEntry("ﬖ", 0, 2),
    FullCaseEntry("վն", 1, 2),
    FullCaseEntry("Ể", 0, 2),
    FullCaseEntry("ể", 1, 2),
    FullCaseEntry("Ɐ", 0, 2),
    FullCaseEntry("ɐ", 1, 2),
    FullCaseEntry("Ꞅ", 0, 2),
    FullCaseEntry("ꞅ", 1, 2),
    FullCaseEntry("ﬗ", 0, 2),
    FullCaseEntry("մխ", 1, 2),
    FullCaseEntry("Ǥ", 0, 2),
    FullCaseEntry("ǥ", 1, 2),
    FullCaseEntry("Ӯ", 0, 2),
    FullCaseEntry("ӯ", 1, 2),
    FullCaseEntry("Ɒ", 0, 2),
    FullCaseEntry("ɒ", 1, 2),
    FullCaseEntry("Ễ", 0, 2),
    FullCaseEntry("ễ", 1, 2),
    FullCaseEntry("Ꞇ", 0, 2),
    FullCaseEntry("ꞇ", 1, 2),
    FullCaseEntry("Ǧ", 0, 2),
    FullCaseEntry("ǧ", 1, 2),
    FullCaseEntry("Ӱ", 0, 2),
    FullCaseEntry("ӱ", 1, 2),
    FullCaseEntry("Ⱳ", 0, 2),
    FullCaseEntry("ⱳ", 1, 2),
    FullCaseEntry("Ệ", 0, 2),
    FullCaseEntry("ệ", 1, 2),
    FullCaseEntry("Ǩ", 0, 2),
    FullCaseEntry("ǩ", 1, 2),
    FullCaseEntry("Ӳ", 0, 2),
    FullCaseEntry("ӳ", 1, 2),
    FullCaseEntry("Ỉ", 0, 2),
    FullCaseEntry("ỉ", 1, 2),
    FullCaseEntry("Ⱶ", 0, 2),
    FullCaseEntry("ⱶ", 1, 2),
    FullCaseEntry("Ǫ", 0, 2),
    FullCaseEntry("ǫ", 1, 2),
    FullCaseEntry("Ӵ", 0, 2),
    FullCaseEntry("ӵ", 1, 2),
    FullCaseEntry("Ꞌ", 0, 2),
    FullCaseEntry("ꞌ", 1, 2),
    FullCaseEntry("Ͱ", 0, 2),
    FullCaseEntry("ͱ", 1, 2),
    FullCaseEntry("Ị", 0, 2),
    FullCaseEntry("ị", 1, 2),
    FullCaseEntry("Ǭ", 0, 2),
    FullCaseEntry("ǭ", 1, 2),
    FullCaseEntry("Ӷ", 0, 2),
    FullCaseEntry("ӷ", 1, 2),
    FullCaseEntry("Ɥ", 0, 2),
    FullCaseEntry("ɥ", 1, 2),
    FullCaseEntry("Ͳ", 0, 2),
    FullCaseEntry("ͳ", 1, 2),
    FullCaseEntry("Ọ", 0, 2),
    FullCaseEntry("ọ", 1, 2),
    FullCaseEntry("Ǯ", 0, 2),
    FullCaseEntry("ǯ", 1, 2),
    FullCaseEntry("Ӹ", 0, 2),
    FullCaseEntry("ӹ", 1, 2),
    FullCaseEntry("Ỏ", 0, 2),
    FullCaseEntry("ỏ", 1, 2),
    FullCaseEntry("Ꞑ", 0, 2),
    FullCaseEntry("ꞑ", 1, 2),
    FullCaseEntry("ǰ", 0, 2),
    FullCaseEntry("ǰ", 1, 2),
    FullCaseEntry("Ӻ", 0, 2),
    FullCaseEntry("ӻ", 1, 2),
    FullCaseEntry("Ǳ", 0, 3),
    FullCaseEntry("ǳ", 1, 3),
    FullCaseEntry("ǲ", 2, 3),
    FullCaseEntry("Ͷ", 0, 2),
    FullCaseEntry("ͷ", 1, 2),
    FullCaseEntry("Ố", 0, 2),
    FullCaseEntry("ố", 1, 2),
    FullCaseEntry("Ꞓ", 0, 2),
    FullCaseEntry("ꞓ", 1, 2),
    FullCaseEntry("ǲ", 0, 3),
    FullCaseEntry("ǳ", 1, 3),
    FullCaseEntry("Ǳ", 2, 3),
    FullCaseEntry("Ӽ", 0, 2),
    FullCaseEntry("ӽ", 1, 2),
    FullCaseEntry("Ȿ", 0, 2),
    FullCaseEntry("ȿ", 1, 2),
    FullCaseEntry("Ồ", 0, 2),
    FullCaseEntry("ồ", 1, 2),
    FullCaseEntry("Ɀ", 0, 2),
    FullCaseEntry("ɀ", 1, 2),
    FullCaseEntry("Ǵ", 0, 2),
    FullCaseEntry("ǵ", 1, 2),
    FullCaseEntry("Ӿ", 0, 2),
    FullCaseEntry("ӿ", 1, 2),
    FullCaseEntry("Ⲁ", 0, 2),
    FullCaseEntry("ⲁ", 1, 2),
    FullCaseEntry("Ổ", 0, 2),
    FullCaseEntry("ổ", 1, 2),
    FullCaseEntry("Ƕ", 0, 2),
    FullCaseEntry("ƕ", 1, 2),
    FullCaseEntry("Ԁ", 0, 2),
    FullCaseEntry("ԁ", 1, 2),
    FullCaseEntry("Ⲃ", 0, 2),
    FullCaseEntry("ⲃ", 1, 2),
    FullCaseEntry("Ƿ", 0, 2),
    FullCaseEntry("ƿ", 1, 2),
    FullCaseEntry("Ỗ", 0, 2),
    FullCaseEntry("ỗ", 1, 2),
    FullCaseEntry("Ǹ", 0, 2),
    FullCaseEntry("ǹ", 1, 2),
    FullCaseEntry("Ԃ", 0, 2),
    FullCaseEntry("ԃ", 1, 2),
    FullCaseEntry("Ⲅ", 0, 2),
    FullCaseEntry("ⲅ", 1, 2),
    FullCaseEntry("Ộ", 0, 2),
    FullCaseEntry("ộ", 1, 2),
    FullCaseEntry("Ǻ", 0, 2),
    FullCaseEntry("ǻ", 1, 2),
    FullCaseEntry("Ԅ", 0, 2),
    FullCaseEntry("ԅ", 1, 2),
    FullCaseEntry("Ⲇ", 0, 2),
    FullCaseEntry("ⲇ", 1, 2),
    FullCaseEntry("Ớ", 0, 2),
    FullCaseEntry("ớ", 1, 2),
    FullCaseEntry("Ǽ", 0, 2),
    FullCaseEntry("ǽ", 1, 2),
    FullCaseEntry("Ԇ", 0, 2),
    FullCaseEntry("ԇ", 1, 2),
    FullCaseEntry("Ⲉ", 0, 2),
    FullCaseEntry("ⲉ", 1, 2),
    FullCaseEntry("Ờ", 0, 2),
    FullCaseEntry("ờ", 1, 2),
    FullCaseEntry("Ǿ", 0, 2),
    FullCaseEntry("ǿ", 1, 2),
    FullCaseEntry("Ԉ", 0, 2),
    FullCaseEntry("ԉ", 1, 2),
    FullCaseEntry("Ⲋ", 0, 2),
    FullCaseEntry("ⲋ", 1, 2),
    FullCaseEntry("Ở", 0, 2),
    FullCaseEntry("ở", 1, 2),
    FullCaseEntry("Ꞡ", 0, 2),
    FullCaseEntry("ꞡ", 1, 2),
    FullCaseEntry("Ȁ", 0, 2),
    FullCaseEntry("ȁ", 1, 2),
    FullCaseEntry("Ԋ", 0, 2),
    FullCaseEntry("ԋ", 1, 2),
    FullCaseEntry("Ⲍ", 0, 2),
    FullCaseEntry("ⲍ", 1, 2),
    FullCaseEntry("Ά", 0, 2),
    FullCaseEntry("ά", 1, 2),
    FullCaseEntry("Ỡ", 0, 2),
    FullCaseEntry("ỡ", 1, 2),
    FullCaseEntry("Ꞣ", 0, 2),
    FullCaseEntry("ꞣ", 1, 2),
    FullCaseEntry("Ȃ", 0, 2),
    FullCaseEntry("ȃ", 1, 2),
    FullCaseEntry("Ԍ", 0, 2),
    FullCaseEntry("ԍ", 1, 2),
    FullCaseEntry("Ⲏ", 0, 2),
    FullCaseEntry("ⲏ", 1, 2),
    FullCaseEntry("Έ", 0, 2),
    FullCaseEntry("έ", 1, 2),
    FullCaseEntry("Ợ", 0, 2),
    FullCaseEntry("ợ", 1, 2),
    FullCaseEntry("Ꞥ", 0, 2),
    FullCaseEntry("ꞥ", 1, 2),
    FullCaseEntry("Ȅ", 0, 2),
    FullCaseEntry("ȅ", 1, 2),
    FullCaseEntry("Ή", 0, 2),
    FullCaseEntry("ή", 1, 2),
    FullCaseEntry("Ԏ", 0, 2),
    FullCaseEntry("ԏ", 1, 2),
    FullCaseEntry("Ⲑ", 0, 2),
    FullCaseEntry("ⲑ", 1, 2),
    FullCaseEntry("Ί", 0, 2),
    FullCaseEntry("ί", 1, 2),
    FullCaseEntry("Ụ", 0, 2),
    FullCaseEntry("ụ", 1, 2),
    FullCaseEntry("Ꞧ", 0, 2),
    FullCaseEntry("ꞧ", 1, 2),
    FullCaseEntry("Ȇ", 0, 2),
    FullCaseEntry("ȇ", 1, 2),
    FullCaseEntry("Ԑ", 0, 2),
    FullCaseEntry("ԑ", 1, 2),
    FullCaseEntry("Ⲓ", 0, 2),
    FullCaseEntry("ⲓ", 1, 2),
    FullCaseEntry("Ό", 0, 2),
    FullCaseEntry("ό", 1, 2),
    FullCaseEntry("Ủ", 0, 2),
    FullCaseEntry("ủ", 1, 2),
    FullCaseEntry("Ꞩ", 0, 2),
    FullCaseEntry("ꞩ", 1, 2),
    FullCaseEntry("Ȉ", 0, 2),
    FullCaseEntry("ȉ", 1, 2),
    FullCaseEntry("Ԓ", 0, 2),
    FullCaseEntry("ԓ", 1, 2),
    FullCaseEntry("Ⲕ", 0, 2),
    FullCaseEntry("ⲕ", 1, 2),
    FullCaseEntry("Ύ", 0, 2),
    FullCaseEntry("ύ", 1, 2),
    FullCaseEntry("Ứ", 0, 2),
    FullCaseEntry("ứ", 1, 2),
    FullCaseEntry("Ɦ", 0, 2),
    FullCaseEntry("ɦ", 1, 2),
    FullCaseEntry("Ȋ", 0, 2),
    FullCaseEntry("ȋ", 1, 2),
    FullCaseEntry("Ώ", 0, 2),
    FullCaseEntry("ώ", 1, 2),
    FullCaseEntry("Ԕ", 0, 2),
    FullCaseEntry("ԕ", 1, 2),
    FullCaseEntry("Ⲗ", 0, 2),
    FullCaseEntry("ⲗ", 1, 2),
    FullCaseEntry("ΐ", 0, 3),
    FullCaseEntry("ΐ", 1, 3),
    FullCaseEntry("ΐ", 2, 3),
    FullCaseEntry("Ừ", 0, 2),
    FullCaseEntry("ừ", 1, 2),
    FullCaseEntry("Ȍ", 0, 2),
    FullCaseEntry("ȍ", 1, 2),
    FullCaseEntry("Α", 0, 2),
    FullCaseEntry("α", 1, 2),
    FullCaseEntry("Ԗ", 0, 2),
    FullCaseEntry("ԗ", 1, 2),
    FullCaseEntry("Ⲙ", 0, 2),
    FullCaseEntry("ⲙ", 1, 2),
    FullCaseEntry("Β", 0, 3),
    FullCaseEntry("β", 1, 3),
    FullCaseEntry("ϐ", 2, 3),
    FullCaseEntry("Ử", 0, 2),
    FullCaseEntry("ử", 1, 2),
    FullCaseEntry("Ȏ", 0, 2),
    FullCaseEntry("ȏ", 1, 2),
    FullCaseEntry("Γ", 0, 2),
    FullCaseEntry("γ", 1, 2),
    FullCaseEntry("Ԙ", 0, 2),
    FullCaseEntry("ԙ", 1, 2),
    FullCaseEntry("Ⲛ", 0, 2),
    FullCaseEntry("ⲛ", 1, 2),
    FullCaseEntry("Δ", 0, 2),
    FullCaseEntry("δ", 1, 2),
    FullCaseEntry("Ữ", 0, 2),
    FullCaseEntry("ữ", 1, 2),
    FullCaseEntry("Ȑ", 0, 2),
    FullCaseEntry("ȑ", 1, 2),
    FullCaseEntry("Ε", 0, 3),
    FullCaseEntry("ε", 1, 3),
    FullCaseEntry("ϵ", 2, 3),
    FullCaseEntry("Ԛ", 0, 2),
    FullCaseEntry("ԛ", 1, 2),
    FullCaseEntry("Ⲝ", 0, 2),
    FullCaseEntry("ⲝ", 1, 2),
    FullCaseEntry("Ζ", 0, 2),
    FullCaseEntry("ζ", 1, 2),
    FullCaseEntry("Ự", 0, 2),
    FullCaseEntry("ự", 1, 2),
    FullCaseEntry("Ȓ", 0, 2),
    FullCaseEntry("ȓ", 1, 2),
    FullCaseEntry("Η", 0, 2),
    FullCaseEntry("η", 1, 2),
    FullCaseEntry("Ԝ", 0, 2),
    FullCaseEntry("ԝ", 1, 2),
    FullCaseEntry("Ⲟ", 0, 2),
    FullCaseEntry("ⲟ", 1, 2),
    FullCaseEntry("Θ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("ϑ", 2, 4),
    FullCaseEntry("ϴ", 3, 4),
    FullCaseEntry("Ỳ", 0, 2),
    FullCaseEntry("ỳ", 1, 2),
    FullCaseEntry("Ȕ", 0, 2),
    FullCaseEntry("ȕ", 1, 2),
    FullCaseEntry("Ι", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("ͅ", 2, 4),
    FullCaseEntry("ι", 3, 4),
    FullCaseEntry("Ԟ", 0, 2),
    FullCaseEntry("ԟ", 1, 2),
    FullCaseEntry("Ⲡ", 0, 2),
    FullCaseEntry("ⲡ", 1, 2),
    FullCaseEntry("Κ", 0, 3),
    FullCaseEntry("κ", 1, 3),
    FullCaseEntry("ϰ", 2, 3),
    FullCaseEntry("Ỵ", 0, 2),
    FullCaseEntry("ỵ", 1, 2),
    FullCaseEntry("Ȗ", 0, 2),
    FullCaseEntry("ȗ", 1, 2),
    FullCaseEntry("Λ", 0, 2),
    FullCaseEntry("λ", 1, 2),
    FullCaseEntry("Ԡ", 0, 2),
    FullCaseEntry("ԡ", 1, 2),
    FullCaseEntry("Ⲣ", 0, 2),
    FullCaseEntry("ⲣ", 1, 2),
    FullCaseEntry("Μ", 0, 3),
    FullCaseEntry("μ", 1, 3),
    FullCaseEntry("µ", 2, 3),
    FullCaseEntry("Ỷ", 0, 2),
    FullCaseEntry("ỷ", 1, 2),
    FullCaseEntry("Ș", 0, 2),
    FullCaseEntry("ș", 1, 2),
    FullCaseEntry("Ν", 0, 2),
    FullCaseEntry("ν", 1, 2),
    FullCaseEntry("Ԣ", 0, 2),
    FullCaseEntry("ԣ", 1, 2),
    FullCaseEntry("Ⲥ", 0, 2),
    FullCaseEntry("ⲥ", 1, 2),
    FullCaseEntry("Ξ", 0, 2),
    FullCaseEntry("ξ", 1, 2),
    FullCaseEntry("Ỹ", 0, 2),
    FullCaseEntry("ỹ", 1, 2),
    FullCaseEntry("Ț", 0, 2),
    FullCaseEntry("ț", 1, 2),
    FullCaseEntry("Ο", 0, 2),
    FullCaseEntry("ο", 1, 2),
    FullCaseEntry("Ԥ", 0, 2),
    FullCaseEntry("ԥ", 1, 2),
    FullCaseEntry("Ⲧ", 0, 2),
    FullCaseEntry("ⲧ", 1, 2),
    FullCaseEntry("Π", 0, 3),
    FullCaseEntry("π", 1, 3),
    FullCaseEntry("ϖ", 2, 3),
    FullCaseEntry("Ỻ", 0, 2),
    FullCaseEntry("ỻ", 1, 2),
    FullCaseEntry("Ȝ", 0, 2),
    FullCaseEntry("ȝ", 1, 2),
    FullCaseEntry("Ρ", 0, 3),
    FullCaseEntry("ρ", 1, 3),
    FullCaseEntry("ϱ", 2, 3),
    FullCaseEntry("Ԧ", 0, 2),
    FullCaseEntry("ԧ", 1, 2),
    FullCaseEntry("Ⲩ", 0, 2),
    FullCaseEntry("ⲩ", 1, 2),
    FullCaseEntry("Ỽ", 0, 2),
    FullCaseEntry("ỽ", 1, 2),
    FullCaseEntry("Ȟ", 0, 2),
    FullCaseEntry("ȟ", 1, 2),
    FullCaseEntry("Σ", 0, 3),
    FullCaseEntry("σ", 1, 3),
    FullCaseEntry("ς", 2, 3),
    FullCaseEntry("Ⲫ", 0, 2),
    FullCaseEntry("ⲫ", 1, 2),
    FullCaseEntry("Τ", 0, 2),
    FullCaseEntry("τ", 1, 2),
    FullCaseEntry("Ỿ", 0, 2),
    FullCaseEntry("ỿ", 1, 2),
    FullCaseEntry("Ƞ", 0, 2),
    FullCaseEntry("ƞ", 1, 2),
    FullCaseEntry("Υ", 0, 2),
    FullCaseEntry("υ", 1, 2),
    FullCaseEntry("Ⲭ", 0, 2),
    FullCaseEntry("ⲭ", 1, 2),
    FullCaseEntry("Φ", 0, 3),
    FullCaseEntry("φ", 1, 3),
    FullCaseEntry("ϕ", 2, 3),
    FullCaseEntry("Ȣ", 0, 2),
    FullCaseEntry("ȣ", 1, 2),
    FullCaseEntry("Χ", 0, 2),
    FullCaseEntry("χ", 1, 2),
    FullCaseEntry("Ⲯ", 0, 2),
    FullCaseEntry("ⲯ", 1, 2),
    FullCaseEntry("Ψ", 0, 2),
    FullCaseEntry("ψ", 1, 2),
    FullCaseEntry("Ȥ", 0, 2),
    FullCaseEntry("ȥ", 1, 2),
    FullCaseEntry("Ω", 0, 3),
    FullCaseEntry("ω", 1, 3),
    FullCaseEntry("Ω", 2, 3),
    FullCaseEntry("Ⲱ", 0, 2),
    FullCaseEntry("ⲱ", 1, 2),
    FullCaseEntry("Ꙁ", 0, 2),
    FullCaseEntry("ꙁ", 1, 2),
    FullCaseEntry("Ϊ", 0, 2),
    FullCaseEntry("ϊ", 1, 2),
    FullCaseEntry("Ȧ", 0, 2),
    FullCaseEntry("ȧ", 1, 2),
    FullCaseEntry("Ϋ", 0, 2),
    FullCaseEntry("ϋ", 1, 2),
    FullCaseEntry("Ⲳ", 0, 2),
    FullCaseEntry("ⲳ", 1, 2),
    FullCaseEntry("Ꙃ", 0, 2),
    FullCaseEntry("ꙃ", 1, 2),
    FullCaseEntry("Ա", 0, 2),
    FullCaseEntry("ա", 1, 2),
    FullCaseEntry("Ȩ", 0, 2),
    FullCaseEntry("ȩ", 1, 2),
    FullCaseEntry("Բ", 0, 2),
    FullCaseEntry("բ", 1, 2),
    FullCaseEntry("Ⲵ", 0, 2),
    FullCaseEntry("ⲵ", 1, 2),
    FullCaseEntry("Ꙅ", 0, 2),
    FullCaseEntry("ꙅ", 1, 2),
    FullCaseEntry("Գ", 0, 2),
    FullCaseEntry("գ", 1, 2),
    FullCaseEntry("Ἀ", 0, 2),
    FullCaseEntry("ἀ", 1, 2),
    FullCaseEntry("Ȫ", 0, 2),
    FullCaseEntry("ȫ", 1, 2),
    FullCaseEntry("Դ", 0, 2),
    FullCaseEntry("դ", 1, 2),
    FullCaseEntry("Ἁ", 0, 2),
    FullCaseEntry("ἁ", 1, 2),
    FullCaseEntry("Ⲷ", 0, 2),
    FullCaseEntry("ⲷ", 1, 2),
    FullCaseEntry("Ꙇ", 0, 2),
    FullCaseEntry("ꙇ", 1, 2),
    FullCaseEntry("ΰ", 0, 3),
    FullCaseEntry("ΰ", 1, 3),
    FullCaseEntry("ΰ", 2, 3),
    FullCaseEntry("Ե", 0, 2),
    FullCaseEntry("ե", 1, 2),
    FullCaseEntry("Ἂ", 0, 2),
    FullCaseEntry("ἂ", 1, 2),
    FullCaseEntry("Ȭ", 0, 2),
    FullCaseEntry("ȭ", 1, 2),
    FullCaseEntry("Զ", 0, 2),
    FullCaseEntry("զ", 1, 2),
    FullCaseEntry("Ἃ", 0, 2),
    FullCaseEntry("ἃ", 1, 2),
    FullCaseEntry("Ⲹ", 0, 2),
    FullCaseEntry("ⲹ", 1, 2),
    FullCaseEntry("Ꙉ", 0, 2),
    FullCaseEntry("ꙉ", 1, 2),
    FullCaseEntry("Է", 0, 2),
    FullCaseEntry("է", 1, 2),
    FullCaseEntry("Ἄ", 0, 2),
    FullCaseEntry("ἄ", 1, 2),
    FullCaseEntry("Ȯ", 0, 2),
    FullCaseEntry("ȯ", 1, 2),
    FullCaseEntry("Ը", 0, 2),
    FullCaseEntry("ը", 1, 2),
    FullCaseEntry("Ἅ", 0, 2),
    FullCaseEntry("ἅ", 1, 2),
    FullCaseEntry("Ⲻ", 0, 2),
    FullCaseEntry("ⲻ", 1, 2),
    FullCaseEntry("Ꙋ", 0, 2),
    FullCaseEntry("ꙋ", 1, 2),
    FullCaseEntry("Թ", 0, 2),
    FullCaseEntry("թ", 1, 2),
    FullCaseEntry("Ἆ", 0, 2),
    FullCaseEntry("ἆ", 1, 2),
    FullCaseEntry("Ȱ", 0, 2),
    FullCaseEntry("ȱ", 1, 2),
    FullCaseEntry("Ժ", 0, 2),
    FullCaseEntry("ժ", 1, 2),
    FullCaseEntry("Ἇ", 0, 2),
    FullCaseEntry("ἇ", 1, 2),
    FullCaseEntry("Ⲽ", 0, 2),
    FullCaseEntry("ⲽ", 1, 2),
    FullCaseEntry("Ꙍ", 0, 2),
    FullCaseEntry("ꙍ", 1, 2),
    FullCaseEntry("Ի", 0, 2),
    FullCaseEntry("ի", 1, 2),
    FullCaseEntry("Ȳ", 0, 2),
    FullCaseEntry("ȳ", 1, 2),
    FullCaseEntry("Լ", 0, 2),
    FullCaseEntry("լ", 1, 2),
    FullCaseEntry("Ⲿ", 0, 2),
    FullCaseEntry("ⲿ", 1, 2),
    FullCaseEntry("Ꙏ", 0, 2),
    FullCaseEntry("ꙏ", 1, 2),
    FullCaseEntry("Խ", 0, 2),
    FullCaseEntry("խ", 1, 2),
    FullCaseEntry("Ծ", 0, 2),
    FullCaseEntry("ծ", 1, 2),
    FullCaseEntry("Ⳁ", 0, 2),
    FullCaseEntry("ⳁ", 1, 2),
    FullCaseEntry("Ꙑ", 0, 2),
    FullCaseEntry("ꙑ", 1, 2),
    FullCaseEntry("Կ", 0, 2),
    FullCaseEntry("կ", 1, 2),
    FullCaseEntry("Հ", 0, 2),
    FullCaseEntry("հ", 1, 2),
    FullCaseEntry("Ⳃ", 0, 2),
    FullCaseEntry("ⳃ", 1, 2),
    FullCaseEntry("Ꙓ", 0, 2),
    FullCaseEntry("ꙓ", 1, 2),
    FullCaseEntry("Ձ", 0, 2),
    FullCaseEntry("ձ", 1, 2),
    FullCaseEntry("Ղ", 0, 2),
    FullCaseEntry("ղ", 1, 2),
    FullCaseEntry("Ⳅ", 0, 2),
    FullCaseEntry("ⳅ", 1, 2),
    FullCaseEntry("Ꙕ", 0, 2),
    FullCaseEntry("ꙕ", 1, 2),
    FullCaseEntry("Ճ", 0, 2),
    FullCaseEntry("ճ", 1, 2),
    FullCaseEntry("Ἐ", 0, 2),
    FullCaseEntry("ἐ", 1, 2),
    FullCaseEntry("µ", 0, 3),
    FullCaseEntry("μ", 1, 3),
    FullCaseEntry("Μ", 2, 3),
    FullCaseEntry("Ⱥ", 0, 2),
    FullCaseEntry("ⱥ", 1, 2),
    FullCaseEntry("Մ", 0, 2),
    FullCaseEntry("մ", 1, 2),
    FullCaseEntry("Ἑ", 0, 2),
    FullCaseEntry("ἑ", 1, 2),
    FullCaseEntry("Ⳇ", 0, 2),
    FullCaseEntry("ⳇ", 1, 2),
    FullCaseEntry("Ꙗ", 0, 2),
    FullCaseEntry("ꙗ", 1, 2),
    FullCaseEntry("Ȼ", 0, 2),
    FullCaseEntry("ȼ", 1, 2),
    FullCaseEntry("Յ", 0, 2),
    FullCaseEntry("յ", 1, 2),
    FullCaseEntry("Ἒ", 0, 2),
    FullCaseEntry("ἒ", 1, 2),
    FullCaseEntry("Ն", 0, 2),
    FullCaseEntry("ն", 1, 2),
    FullCaseEntry("Ἓ", 0, 2),
    FullCaseEntry("ἓ", 1, 2),
    FullCaseEntry("Ⳉ", 0, 2),
    FullCaseEntry("ⳉ", 1, 2),
    FullCaseEntry("Ꙙ", 0, 2),
    FullCaseEntry("ꙙ", 1, 2),
    FullCaseEntry("Ƚ", 0, 2),
    FullCaseEntry("ƚ", 1, 2),
    FullCaseEntry("ς", 0, 3),
    FullCaseEntry("σ", 1, 3),
    FullCaseEntry("Σ", 2, 3),
    FullCaseEntry("Շ", 0, 2),
    FullCaseEntry("շ", 1, 2),
    FullCaseEntry("Ἔ", 0, 2),
    FullCaseEntry("ἔ", 1, 2),
    FullCaseEntry("Ⱦ", 0, 2),
    FullCaseEntry("ⱦ", 1, 2),
    FullCaseEntry("Ո", 0, 2),
    FullCaseEntry("ո", 1, 2),
    FullCaseEntry("Ἕ", 0, 2),
    FullCaseEntry("ἕ", 1, 2),
    FullCaseEntry("Ⳋ", 0, 2),
    FullCaseEntry("ⳋ", 1, 2),
    FullCaseEntry("Ꙛ", 0, 2),
    FullCaseEntry("ꙛ", 1, 2),
    FullCaseEntry("Չ", 0, 2),
    FullCaseEntry("չ", 1, 2),
    FullCaseEntry("Պ", 0, 2),
    FullCaseEntry("պ", 1, 2),
    FullCaseEntry("Ⳍ", 0, 2),
    FullCaseEntry("ⳍ", 1, 2),
    FullCaseEntry("Ꙝ", 0, 2),
    FullCaseEntry("ꙝ", 1, 2),
    FullCaseEntry("Ɂ", 0, 2),
    FullCaseEntry("ɂ", 1, 2),
    FullCaseEntry("Ջ", 0, 2),
    FullCaseEntry("ջ", 1, 2),
    FullCaseEntry("Ռ", 0, 2),
    FullCaseEntry("ռ", 1, 2),
    FullCaseEntry("Ⳏ", 0, 2),
    FullCaseEntry("ⳏ", 1, 2),
    FullCaseEntry("Ꙟ", 0, 2),
    FullCaseEntry("ꙟ", 1, 2),
    FullCaseEntry("Ƀ", 0, 2),
    FullCaseEntry("ƀ", 1, 2),
    FullCaseEntry("Ս", 0, 2),
    FullCaseEntry("ս", 1, 2),
    FullCaseEntry("Ʉ", 0, 2),
    FullCaseEntry("ʉ", 1, 2),
    FullCaseEntry("Վ", 0, 2),
    FullCaseEntry("վ", 1, 2),
    FullCaseEntry("Ⳑ", 0, 2),
    FullCaseEntry("ⳑ", 1, 2),
    FullCaseEntry("Ꙡ", 0, 2),
    FullCaseEntry("ꙡ", 1, 2),
    FullCaseEntry("À", 0, 2),
    FullCaseEntry("à", 1, 2),
    FullCaseEntry("Ʌ", 0, 2),
    FullCaseEntry("ʌ", 1, 2),
    FullCaseEntry("Տ", 0, 2),
    FullCaseEntry("տ", 1, 2),
    FullCaseEntry("Á", 0, 2),
    FullCaseEntry("á", 1, 2),
    FullCaseEntry("Ɇ", 0, 2),
    FullCaseEntry("ɇ", 1, 2),
    FullCaseEntry("Ր", 0, 2),
    FullCaseEntry("ր", 1, 2),
    FullCaseEntry("Ⳓ", 0, 2),
    FullCaseEntry("ⳓ", 1, 2),
    FullCaseEntry("Ꙣ", 0, 2),
    FullCaseEntry("ꙣ", 1, 2),
    FullCaseEntry("Â", 0, 2),
    FullCaseEntry("â", 1, 2),
    FullCaseEntry("Ց", 0, 2),
    FullCaseEntry("ց", 1, 2),
    FullCaseEntry("Ã", 0, 2),
    FullCaseEntry("ã", 1, 2),
    FullCaseEntry("Ɉ", 0, 2),
    FullCaseEntry("ɉ", 1, 2),
    FullCaseEntry("Ւ", 0, 2),
    FullCaseEntry("ւ", 1, 2),
    FullCaseEntry("Ⳕ", 0, 2),
    FullCaseEntry("ⳕ", 1, 2),
    FullCaseEntry("Ꙥ", 0, 2),
    FullCaseEntry("ꙥ", 1, 2),
    FullCaseEntry("Ä", 0, 2),
    FullCaseEntry("ä", 1, 2),
    FullCaseEntry("Փ", 0, 2),
    FullCaseEntry("փ", 1, 2),
    FullCaseEntry("Ἠ", 0, 2),
    FullCaseEntry("ἠ", 1, 2),
    FullCaseEntry("Å", 0, 3),
    FullCaseEntry("å", 1, 3),
    FullCaseEntry("Å", 2, 3),
    FullCaseEntry("Ɋ", 0, 2),
    FullCaseEntry("ɋ", 1, 2),
    FullCaseEntry("Ϗ", 0, 2),
    FullCaseEntry("ϗ", 1, 2),
    FullCaseEntry("Ք", 0, 2),
    FullCaseEntry("ք", 1, 2),
    FullCaseEntry("Ἡ", 0, 2),
    FullCaseEntry("ἡ", 1, 2),
    FullCaseEntry("Ⳗ", 0, 2),
    FullCaseEntry("ⳗ", 1, 2),
    FullCaseEntry("Ꙧ", 0, 2),
    FullCaseEntry("ꙧ", 1, 2),
    FullCaseEntry("Æ", 0, 2),
    FullCaseEntry("æ", 1, 2),
    FullCaseEntry("ϐ", 0, 3),
    FullCaseEntry("β", 1, 3),
    FullCaseEntry("Β", 2, 3),
    FullCaseEntry("Օ", 0, 2),
    FullCaseEntry("օ", 1, 2),
    FullCaseEntry("Ἢ", 0, 2),
    FullCaseEntry("ἢ", 1, 2),
    FullCaseEntry("Ç", 0, 2),
    FullCaseEntry("ç", 1, 2),
    FullCaseEntry("Ɍ", 0, 2),
    FullCaseEntry("ɍ", 1, 2),
    FullCaseEntry("ϑ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("Θ", 2, 4),
    FullCaseEntry("ϴ", 3, 4),
    FullCaseEntry("Ֆ", 0, 2),
    FullCaseEntry("ֆ", 1, 2),
    FullCaseEntry("Ἣ", 0, 2),
    FullCaseEntry("ἣ", 1, 2),
    FullCaseEntry("Ⳙ", 0, 2),
    FullCaseEntry("ⳙ", 1, 2),
    FullCaseEntry("Ꙩ", 0, 2),
    FullCaseEntry("ꙩ", 1, 2),
    FullCaseEntry("È", 0, 2),
    FullCaseEntry("è", 1, 2),
    FullCaseEntry("Ἤ", 0, 2),
    FullCaseEntry("ἤ", 1, 2),
    FullCaseEntry("É", 0, 2),
    FullCaseEntry("é", 1, 2),
    FullCaseEntry("Ɏ", 0, 2),
    FullCaseEntry("ɏ", 1, 2),
    FullCaseEntry("Ἥ", 0, 2),
    FullCaseEntry("ἥ", 1, 2),
    FullCaseEntry("Ⳛ", 0, 2),
    FullCaseEntry("ⳛ", 1, 2),
    FullCaseEntry("Ꙫ", 0, 2),
    FullCaseEntry("ꙫ", 1, 2),
    FullCaseEntry("Ê", 0, 2),
    FullCaseEntry("ê", 1, 2),
    FullCaseEntry("Ἦ", 0, 2),
    FullCaseEntry("ἦ", 1, 2),
    FullCaseEntry("Ë", 0, 2),
    FullCaseEntry("ë", 1, 2),
    FullCaseEntry("ϕ", 0, 3),
    FullCaseEntry("φ", 1, 3),
    FullCaseEntry("Φ", 2, 3),
    FullCaseEntry("Ἧ", 0, 2),
    FullCaseEntry("ἧ", 1, 2),
    FullCaseEntry("Ⳝ", 0, 2),
    FullCaseEntry("ⳝ", 1, 2),
    FullCaseEntry("Ꙭ", 0, 2),
    FullCaseEntry("ꙭ", 1, 2),
    FullCaseEntry("Ì", 0, 2),
    FullCaseEntry("ì", 1, 2),
    FullCaseEntry("ϖ", 0, 3),
    FullCaseEntry("π", 1, 3),
    FullCaseEntry("Π", 2, 3),
    FullCaseEntry("Í", 0, 2),
    FullCaseEntry("í", 1, 2),
    FullCaseEntry("Ⳟ", 0, 2),
    FullCaseEntry("ⳟ", 1, 2),
    FullCaseEntry("Î", 0, 2),
    FullCaseEntry("î", 1, 2),
    FullCaseEntry("Ϙ", 0, 2),
    FullCaseEntry("ϙ", 1, 2),
    FullCaseEntry("Ï", 0, 2),
    FullCaseEntry("ï", 1, 2),
    FullCaseEntry("Ⳡ", 0, 2),
    FullCaseEntry("ⳡ", 1, 2),
    FullCaseEntry("Ð", 0, 2),
    FullCaseEntry("ð", 1, 2),
    FullCaseEntry("Ϛ", 0, 2),
    FullCaseEntry("ϛ", 1, 2),
    FullCaseEntry("Ñ", 0, 2),
    FullCaseEntry("ñ", 1, 2),
    FullCaseEntry("Ⳣ", 0, 2),
    FullCaseEntry("ⳣ", 1, 2),
    FullCaseEntry("Ò", 0, 2),
    FullCaseEntry("ò", 1, 2),
    FullCaseEntry("Ϝ", 0, 2),
    FullCaseEntry("ϝ", 1, 2),
    FullCaseEntry("Ó", 0, 2),
    FullCaseEntry("ó", 1, 2),
    FullCaseEntry("Ô", 0, 2),
    FullCaseEntry("ô", 1, 2),
    FullCaseEntry("Ϟ", 0, 2),
    FullCaseEntry("ϟ", 1, 2),
    FullCaseEntry("Ἰ", 0, 2),
    FullCaseEntry("ἰ", 1, 2),
    FullCaseEntry("Õ", 0, 2),
    FullCaseEntry("õ", 1, 2),
    FullCaseEntry("Ἱ", 0, 2),
    FullCaseEntry("ἱ", 1, 2),
    FullCaseEntry("Ö", 0, 2),
    FullCaseEntry("ö", 1, 2),
    FullCaseEntry("Ϡ", 0, 2),
    FullCaseEntry("ϡ", 1, 2),
    FullCaseEntry("Ἲ", 0, 2),
    FullCaseEntry("ἲ", 1, 2),
    FullCaseEntry("Ἳ", 0, 2),
    FullCaseEntry("ἳ", 1, 2),
    FullCaseEntry("Ø", 0, 2),
    FullCaseEntry("ø", 1, 2),
    FullCaseEntry("Ϣ", 0, 2),
    FullCaseEntry("ϣ", 1, 2),
    FullCaseEntry("Ἴ", 0, 2),
    FullCaseEntry("ἴ", 1, 2),
    FullCaseEntry("Ù", 0, 2),
    FullCaseEntry("ù", 1, 2),
    FullCaseEntry("Ἵ", 0, 2),
    FullCaseEntry("ἵ", 1, 2),
    FullCaseEntry("Ú", 0, 2),
    FullCaseEntry("ú", 1, 2),
    FullCaseEntry("Ϥ", 0, 2),
    FullCaseEntry("ϥ", 1, 2),
    FullCaseEntry("Ἶ", 0, 2),
    FullCaseEntry("ἶ", 1, 2),
    FullCaseEntry("Ⳬ", 0, 2),
    FullCaseEntry("ⳬ", 1, 2),
    FullCaseEntry("Û", 0, 2),
    FullCaseEntry("û", 1, 2),
    FullCaseEntry("Ἷ", 0, 2),
    FullCaseEntry("ἷ", 1, 2),
    FullCaseEntry("Ü", 0, 2),
    FullCaseEntry("ü", 1, 2),
    FullCaseEntry("Ϧ", 0, 2),
    FullCaseEntry("ϧ", 1, 2),
    FullCaseEntry("Ⳮ", 0, 2),
    FullCaseEntry("ⳮ", 1, 2),
    FullCaseEntry("Ý", 0, 2),
    FullCaseEntry("ý", 1, 2),
    FullCaseEntry("Þ", 0, 2),
    FullCaseEntry("þ", 1, 2),
    FullCaseEntry("Ϩ", 0, 2),
    FullCaseEntry("ϩ", 1, 2),
    FullCaseEntry("ß", 0, 3),
    FullCaseEntry("ss", 1, 3),
    FullCaseEntry("ẞ", 2, 3),
    FullCaseEntry("Ꚁ", 0, 2),
    FullCaseEntry("ꚁ", 1, 2),
    FullCaseEntry("Ϫ", 0, 2),
    FullCaseEntry("ϫ", 1, 2),
    FullCaseEntry("Ⳳ", 0, 2),
    FullCaseEntry("ⳳ", 1, 2),
    FullCaseEntry("Ꚃ", 0, 2),
    FullCaseEntry("ꚃ", 1, 2),
    FullCaseEntry("Ϭ", 0, 2),
    FullCaseEntry("ϭ", 1, 2),
    FullCaseEntry("Ꚅ", 0, 2),
    FullCaseEntry("ꚅ", 1, 2),
    FullCaseEntry("Ϯ", 0, 2),
    FullCaseEntry("ϯ", 1, 2),
    FullCaseEntry("Ὀ", 0, 2),
    FullCaseEntry("ὀ", 1, 2),
    FullCaseEntry("Ὁ", 0, 2),
    FullCaseEntry("ὁ", 1, 2),
    FullCaseEntry("Ꚇ", 0, 2),
    FullCaseEntry("ꚇ", 1, 2),
    FullCaseEntry("ϰ", 0, 3),
    FullCaseEntry("κ", 1, 3),
    FullCaseEntry("Κ", 2, 3),
    FullCaseEntry("Ὂ", 0, 2),
    FullCaseEntry("ὂ", 1, 2),
    FullCaseEntry("ϱ", 0, 3),
    FullCaseEntry("ρ", 1, 3),
    FullCaseEntry("Ρ", 2, 3),
    FullCaseEntry("Ὃ", 0, 2),
    FullCaseEntry("ὃ", 1, 2),
    FullCaseEntry("Ꚉ", 0, 2),
    FullCaseEntry("ꚉ", 1, 2),
    FullCaseEntry("Ὄ", 0, 2),
    FullCaseEntry("ὄ", 1, 2),
    FullCaseEntry("Ὅ", 0, 2),
    FullCaseEntry("ὅ", 1, 2),
    FullCaseEntry("Ꚋ", 0, 2),
    FullCaseEntry("ꚋ", 1, 2),
    FullCaseEntry("ϴ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("Θ", 2, 4),
    FullCaseEntry("ϑ", 3, 4),
    FullCaseEntry("ϵ", 0, 3),
    FullCaseEntry("ε", 1, 3),
    FullCaseEntry("Ε", 2, 3),
    FullCaseEntry("Ꚍ", 0, 2),
    FullCaseEntry("ꚍ", 1, 2),
    FullCaseEntry("ὐ", 0, 2),
    FullCaseEntry("ὐ", 1, 2),
    FullCaseEntry("Ϸ", 0, 2),
    FullCaseEntry("ϸ", 1, 2),
    FullCaseEntry("Ꚏ", 0, 2),
    FullCaseEntry("ꚏ", 1, 2),
    FullCaseEntry("ὒ", 0, 2),
    FullCaseEntry("ὒ", 1, 2),
    FullCaseEntry("Ϲ", 0, 2),
    FullCaseEntry("ϲ", 1, 2),
    FullCaseEntry("Ꚑ", 0, 2),
    FullCaseEntry("ꚑ", 1, 2),
    FullCaseEntry("Ϻ", 0, 2),
    FullCaseEntry("ϻ", 1, 2),
    FullCaseEntry("ὔ", 0, 2),
    FullCaseEntry("ὔ", 1, 2),
    FullCaseEntry("Ꚓ", 0, 2),
    FullCaseEntry("ꚓ", 1, 2),
    FullCaseEntry("ὖ", 0, 2),
    FullCaseEntry("ὖ", 1, 2),
    FullCaseEntry("Ͻ", 0, 2),
    FullCaseEntry("ͻ", 1, 2),
    FullCaseEntry("Ꚕ", 0, 2),
    FullCaseEntry("ꚕ", 1, 2),
    FullCaseEntry("Ͼ", 0, 2),
    FullCaseEntry("ͼ", 1, 2),
    FullCaseEntry("Ͽ", 0, 2),
    FullCaseEntry("ͽ", 1, 2),
    FullCaseEntry("Ὑ", 0, 2),
    FullCaseEntry("ὑ", 1, 2),
    FullCaseEntry("Ꚗ", 0, 2),
    FullCaseEntry("ꚗ", 1, 2),
    FullCaseEntry("Ѐ", 0, 2),
    FullCaseEntry("ѐ", 1, 2),
    FullCaseEntry("Ё", 0, 2),
    FullCaseEntry("ё", 1, 2),
    FullCaseEntry("Ὓ", 0, 2),
    FullCaseEntry("ὓ", 1, 2),
    FullCaseEntry("Ђ", 0, 2),
    FullCaseEntry("ђ", 1, 2),
    FullCaseEntry("և", 0, 2),
    FullCaseEntry("եւ", 1, 2),
    FullCaseEntry("Ѓ", 0, 2),
    FullCaseEntry("ѓ", 1, 2),
    FullCaseEntry("Ὕ", 0, 2),
    FullCaseEntry("ὕ", 1, 2),
    FullCaseEntry("Є", 0, 2),
    FullCaseEntry("є", 1, 2),
    FullCaseEntry("Ѕ", 0, 2),
    FullCaseEntry("ѕ", 1, 2),
    FullCaseEntry("Ὗ", 0, 2),
    FullCaseEntry("ὗ", 1, 2),
    FullCaseEntry("І", 0, 2),
    FullCaseEntry("і", 1, 2),
    FullCaseEntry("Ї", 0, 2),
    FullCaseEntry("ї", 1, 2),
    FullCaseEntry("Ј", 0, 2),
    FullCaseEntry("ј", 1, 2),
    FullCaseEntry("Љ", 0, 2),
    FullCaseEntry("љ", 1, 2),
    FullCaseEntry("Ā", 0, 2),
    FullCaseEntry("ā", 1, 2),
    FullCaseEntry("Њ", 0, 2),
    FullCaseEntry("њ", 1, 2),
    FullCaseEntry("Ћ", 0, 2),
    FullCaseEntry("ћ", 1, 2),
    FullCaseEntry("Ă", 0, 2),
    FullCaseEntry("ă", 1, 2),
    FullCaseEntry("Ќ", 0, 2),
    FullCaseEntry("ќ", 1, 2),
    FullCaseEntry("Ѝ", 0, 2),
    FullCaseEntry("ѝ", 1, 2),
    FullCaseEntry("Ą", 0, 2),
    FullCaseEntry("ą", 1, 2),
    FullCaseEntry("Ў", 0, 2),
    FullCaseEntry("ў", 1, 2),
    FullCaseEntry("Ὠ", 0, 2),
    FullCaseEntry("ὠ", 1, 2),
    FullCaseEntry("Џ", 0, 2),
    FullCaseEntry("џ", 1, 2),
    FullCaseEntry("Ὡ", 0, 2),
    FullCaseEntry("ὡ", 1, 2),
    FullCaseEntry("Ć", 0, 2),
    FullCaseEntry("ć", 1, 2),
    FullCaseEntry("А", 0, 2),
    FullCaseEntry("а", 1, 2),
    FullCaseEntry("Ὢ", 0, 2),
    FullCaseEntry("ὢ", 1, 2),
    FullCaseEntry("Б", 0, 2),
    FullCaseEntry("б", 1, 2),
    FullCaseEntry("Ὣ", 0, 2),
    FullCaseEntry("ὣ", 1, 2),
    FullCaseEntry("Ĉ", 0, 2),
    FullCaseEntry("ĉ", 1, 2),
    FullCaseEntry("В", 0, 2),
    FullCaseEntry("в", 1, 2),
    FullCaseEntry("Ὤ", 0, 2),
    FullCaseEntry("ὤ", 1, 2),
    FullCaseEntry("Г", 0, 2),
    FullCaseEntry("г", 1, 2),
    FullCaseEntry("Ὥ", 0, 2),
    FullCaseEntry("ὥ", 1, 2),
    FullCaseEntry("Ċ", 0, 2),
    FullCaseEntry("ċ", 1, 2),
    FullCaseEntry("Д", 0, 2),
    FullCaseEntry("д", 1, 2),
    FullCaseEntry("Ὦ", 0, 2),
    FullCaseEntry("ὦ", 1, 2),
    FullCaseEntry("Е", 0, 2),
    FullCaseEntry("е", 1, 2),
    FullCaseEntry("Ὧ", 0, 2),
    FullCaseEntry("ὧ", 1, 2),
    FullCaseEntry("Č", 0, 2),
    FullCaseEntry("č", 1, 2),
    FullCaseEntry("Ж", 0, 2),
    FullCaseEntry("ж", 1, 2),
    FullCaseEntry("З", 0, 2),
    FullCaseEntry("з", 1, 2),
    FullCaseEntry("Ď", 0, 2),
    FullCaseEntry("ď", 1, 2),
    FullCaseEntry("И", 0, 2),
    FullCaseEntry("и", 1, 2),
    FullCaseEntry("Й", 0, 2),
    FullCaseEntry("й", 1, 2),
    FullCaseEntry("Đ", 0, 2),
    FullCaseEntry("đ", 1, 2),
    FullCaseEntry("К", 0, 2),
    FullCaseEntry("к", 1, 2),
    FullCaseEntry("Л", 0, 2),
    FullCaseEntry("л", 1, 2),
    FullCaseEntry("Ē", 0, 2),
    FullCaseEntry("ē", 1, 2),
    FullCaseEntry("М", 0, 2),
    FullCaseEntry("м", 1, 2),
    FullCaseEntry("Н", 0, 2),
    FullCaseEntry("н", 1, 2),
    FullCaseEntry("Ĕ", 0, 2),
    FullCaseEntry("ĕ", 1, 2),
    FullCaseEntry("О", 0, 2),
    FullCaseEntry("о", 1, 2),
    FullCaseEntry("П", 0, 2),
    FullCaseEntry("п", 1, 2),
    FullCaseEntry("Ė", 0, 2),
    FullCaseEntry("ė", 1, 2),
    FullCaseEntry("Р", 0, 2),
    FullCaseEntry("р", 1, 2),
    FullCaseEntry("С", 0, 2),
    FullCaseEntry("с", 1, 2),
    FullCaseEntry("Ę", 0, 2),
    FullCaseEntry("ę", 1, 2),
    FullCaseEntry("Т", 0, 2),
    FullCaseEntry("т", 1, 2),
    FullCaseEntry("У", 0, 2),
    FullCaseEntry("у", 1, 2),
    FullCaseEntry("Ě", 0, 2),
    FullCaseEntry("ě", 1, 2),
    FullCaseEntry("Ф", 0, 2),
    FullCaseEntry("ф", 1, 2),
    FullCaseEntry("Х", 0, 2),
    FullCaseEntry("х", 1, 2),
    FullCaseEntry("Ĝ", 0, 2),
    FullCaseEntry("ĝ", 1, 2),
    FullCaseEntry("Ц", 0, 2),
    FullCaseEntry("ц", 1, 2),
    FullCaseEntry("ᾀ", 0, 3),
    FullCaseEntry("ἀι", 1, 3),
    FullCaseEntry("ᾈ", 2, 3),
    FullCaseEntry("Ч", 0, 2),
    FullCaseEntry("ч", 1, 2),
    FullCaseEntry("ᾁ", 0, 3),
    FullCaseEntry("ἁι", 1, 3),
    FullCaseEntry("ᾉ", 2, 3),
    FullCaseEntry("Ğ", 0, 2),
    FullCaseEntry("ğ", 1, 2),
    FullCaseEntry("Ш", 0, 2),
    FullCaseEntry("ш", 1, 2),
    FullCaseEntry("ᾂ", 0, 3),
    FullCaseEntry("ἂι", 1, 3),
    FullCaseEntry("ᾊ", 2, 3),
    FullCaseEntry("Щ", 0, 2),
    FullCaseEntry("щ", 1, 2),
    FullCaseEntry("ᾃ", 0, 3),
    FullCaseEntry("ἃι", 1, 3),
    FullCaseEntry("ᾋ", 2, 3),
    FullCaseEntry("Ġ", 0, 2),
    FullCaseEntry("ġ", 1, 2),
    FullCaseEntry("Ъ", 0, 2),
    FullCaseEntry("ъ", 1, 2),
    FullCaseEntry("ᾄ", 0, 3),
    FullCaseEntry("ἄι", 1, 3),
    FullCaseEntry("ᾌ", 2, 3),
    FullCaseEntry("Ы", 0, 2),
    FullCaseEntry("ы", 1, 2),
    FullCaseEntry("Ḁ", 0, 2),
    FullCaseEntry("ḁ", 1, 2),
    FullCaseEntry("ᾅ", 0, 3),
    FullCaseEntry("ἅι", 1, 3),
    FullCaseEntry("ᾍ", 2, 3),
    FullCaseEntry("Ģ", 0, 2),
    FullCaseEntry("ģ", 1, 2),
    FullCaseEntry("Ь", 0, 2),
    FullCaseEntry("ь", 1, 2),
    FullCaseEntry("ᾆ", 0, 3),
    FullCaseEntry("ἆι", 1, 3),
    FullCaseEntry("ᾎ", 2, 3),
    FullCaseEntry("Э", 0, 2),
    FullCaseEntry("э", 1, 2),
    FullCaseEntry("Ḃ", 0, 2),
    FullCaseEntry("ḃ", 1, 2),
    FullCaseEntry("ᾇ", 0, 3),
    FullCaseEntry("ἇι", 1, 3),
    FullCaseEntry("ᾏ", 2, 3),
    FullCaseEntry("Ĥ", 0, 2),
    FullCaseEntry("ĥ", 1, 2),
    FullCaseEntry("Ю", 0, 2),
    FullCaseEntry("ю", 1, 2),
    FullCaseEntry("ᾈ", 0, 3),
    FullCaseEntry("ἀι", 1, 3),
    FullCaseEntry("ᾀ", 2, 3),
    FullCaseEntry("Я", 0, 2),
    FullCaseEntry("я", 1, 2),
    FullCaseEntry("Ḅ", 0, 2),
    FullCaseEntry("ḅ", 1, 2),
    FullCaseEntry("ᾉ", 0, 3),
    FullCaseEntry("ἁι", 1, 3),
    FullCaseEntry("ᾁ", 2, 3),
    FullCaseEntry("Ħ", 0, 2),
    FullCaseEntry("ħ", 1, 2),
    FullCaseEntry("ᾊ", 0, 3),
    FullCaseEntry("ἂι", 1, 3),
    FullCaseEntry("ᾂ", 2, 3),
    FullCaseEntry("Ḇ", 0, 2),
    FullCaseEntry("ḇ", 1, 2),
    FullCaseEntry("ᾋ", 0, 3),
    FullCaseEntry("ἃι", 1, 3),
    FullCaseEntry("ᾃ", 2, 3),
    FullCaseEntry("Ĩ", 0, 2),
    FullCaseEntry("ĩ", 1, 2),
    FullCaseEntry("ᾌ", 0, 3),
    FullCaseEntry("ἄι", 1, 3),
    FullCaseEntry("ᾄ", 2, 3),
    FullCaseEntry("Ḉ", 0, 2),
    FullCaseEntry("ḉ", 1, 2),
    FullCaseEntry("ᾍ", 0, 3),
    FullCaseEntry("ἅι", 1, 3),
    FullCaseEntry("ᾅ", 2, 3),
    FullCaseEntry("Ī", 0, 2),
    FullCaseEntry("ī", 1, 2),
    FullCaseEntry("ᾎ", 0, 3),
    FullCaseEntry("ἆι", 1, 3),
    FullCaseEntry("ᾆ", 2, 3),
    FullCaseEntry("Ḋ", 0, 2),
    FullCaseEntry("ḋ", 1, 2),
    FullCaseEntry("ᾏ", 0, 3),
    FullCaseEntry("ἇι", 1, 3),
    FullCaseEntry("ᾇ", 2, 3),
    FullCaseEntry("Ĭ", 0, 2),
    FullCaseEntry("ĭ", 1, 2),
    FullCaseEntry("ᾐ", 0, 3),
    FullCaseEntry("ἠι", 1, 3),
    FullCaseEntry("ᾘ", 2, 3),
    FullCaseEntry("Ḍ", 0, 2),
    FullCaseEntry("ḍ", 1, 2),
    FullCaseEntry("ᾑ", 0, 3),
    FullCaseEntry("ἡι", 1, 3),
    FullCaseEntry("ᾙ", 2, 3),
    FullCaseEntry("Į", 0, 2),
    FullCaseEntry("į", 1, 2),
    FullCaseEntry("ᾒ", 0, 3),
    FullCaseEntry("ἢι", 1, 3),
    FullCaseEntry("ᾚ", 2, 3),
    FullCaseEntry("Ḏ", 0, 2),
    FullCaseEntry("ḏ", 1, 2),
    FullCaseEntry("ᾓ", 0, 3),
    FullCaseEntry("ἣι", 1, 3),
    FullCaseEntry("ᾛ", 2, 3),
    FullCaseEntry("İ", 0, 2),
    FullCaseEntry("i̇", 1, 2),
    FullCaseEntry("ᾔ", 0, 3),
    FullCaseEntry("ἤι", 1, 3),
    FullCaseEntry("ᾜ", 2, 3),
    FullCaseEntry("Ḑ", 0, 2),
    FullCaseEntry("ḑ", 1, 2),
    FullCaseEntry("ᾕ", 0, 3),
    FullCaseEntry("ἥι", 1, 3),
    FullCaseEntry("ᾝ", 2, 3),
    FullCaseEntry("Ĳ", 0, 2),
    FullCaseEntry("ĳ", 1, 2),
    FullCaseEntry("ᾖ", 0, 3),
    FullCaseEntry("ἦι", 1, 3),
    FullCaseEntry("ᾞ", 2, 3),
    FullCaseEntry("Ḓ", 0, 2),
    FullCaseEntry("ḓ", 1, 2),
    FullCaseEntry("ᾗ", 0, 3),
    FullCaseEntry("ἧι", 1, 3),
    FullCaseEntry("ᾟ", 2, 3),
    FullCaseEntry("Ĵ", 0, 2),
    FullCaseEntry("ĵ", 1, 2),
    FullCaseEntry("ᾘ", 0, 3),
    FullCaseEntry("ἠι", 1, 3),
    FullCaseEntry("ᾐ", 2, 3),
    FullCaseEntry("Ḕ", 0, 2),
    FullCaseEntry("ḕ", 1, 2),
    FullCaseEntry("ᾙ", 0, 3),
    FullCaseEntry("ἡι", 1, 3),
    FullCaseEntry("ᾑ", 2, 3),
    FullCaseEntry("Ķ", 0, 2),
    FullCaseEntry("ķ", 1, 2),
    FullCaseEntry("ᾚ", 0, 3),
    FullCaseEntry("ἢι", 1, 3),
    FullCaseEntry("ᾒ", 2, 3),
    FullCaseEntry("Ḗ", 0, 2),
    FullCaseEntry("ḗ", 1, 2),
    FullCaseEntry("ᾛ", 0, 3),
    FullCaseEntry("ἣι", 1, 3),
    FullCaseEntry("ᾓ", 2, 3),
    FullCaseEntry("ᾜ", 0, 3),
    FullCaseEntry("ἤι", 1, 3),
    FullCaseEntry("ᾔ", 2, 3),
    FullCaseEntry("Ĺ", 0, 2),
    FullCaseEntry("ĺ", 1, 2),
    FullCaseEntry("Ḙ", 0, 2),
    FullCaseEntry("ḙ", 1, 2),
    FullCaseEntry("ᾝ", 0, 3),
    FullCaseEntry("ἥι", 1, 3),
    FullCaseEntry("ᾕ", 2, 3),
    FullCaseEntry("ᾞ", 0, 3),
    FullCaseEntry("ἦι", 1, 3),
    FullCaseEntry("ᾖ", 2, 3),
    FullCaseEntry("Ļ", 0, 2),
    FullCaseEntry("ļ", 1, 2),
    FullCaseEntry("Ḛ", 0, 2),
    FullCaseEntry("ḛ", 1, 2),
    FullCaseEntry("ᾟ", 0, 3),
    FullCaseEntry("ἧι", 1, 3),
    FullCaseEntry("ᾗ", 2, 3),
    FullCaseEntry("ᾠ", 0, 3),
    FullCaseEntry("ὠι", 1, 3),
    FullCaseEntry("ᾨ", 2, 3),
    FullCaseEntry("Ľ", 0, 2),
    FullCaseEntry("ľ", 1, 2),
    FullCaseEntry("Ḝ", 0, 2),
    FullCaseEntry("ḝ", 1, 2),
    FullCaseEntry("ᾡ", 0, 3),
    FullCaseEntry("ὡι", 1, 3),
    FullCaseEntry("ᾩ", 2, 3),
    FullCaseEntry("Ω", 0, 3),
    FullCaseEntry("ω", 1, 3),
    FullCaseEntry("Ω", 2, 3),
    FullCaseEntry("ᾢ", 0, 3),
    FullCaseEntry("ὢι", 1, 3),
    FullCaseEntry("ᾪ", 2, 3),
    FullCaseEntry("Ŀ", 0, 2),
    FullCaseEntry("ŀ", 1, 2),
    FullCaseEntry("Ḟ", 0, 2),
    FullCaseEntry("ḟ", 1, 2),
    FullCaseEntry("ᾣ", 0, 3),
    FullCaseEntry("ὣι", 1, 3),
    FullCaseEntry("ᾫ", 2, 3),
    FullCaseEntry("ᾤ", 0, 3),
    FullCaseEntry("ὤι", 1, 3),
    FullCaseEntry("ᾬ", 2, 3),
    FullCaseEntry("Ł", 0, 2),
    FullCaseEntry("ł", 1, 2),
    FullCaseEntry("Ḡ", 0, 2),
    FullCaseEntry("ḡ", 1, 2),
    FullCaseEntry("ᾥ", 0, 3),
    FullCaseEntry("ὥι", 1, 3),
    FullCaseEntry("ᾭ", 2, 3),
    FullCaseEntry("K", 0, 3),
    FullCaseEntry("k", 1, 3),
    FullCaseEntry("K", 2, 3),
    FullCaseEntry("ᾦ", 0, 3),
    FullCaseEntry("ὦι", 1, 3),
    FullCaseEntry("ᾮ", 2, 3),
    FullCaseEntry("Å", 0, 3),
    FullCaseEntry("å", 1, 3),
    FullCaseEntry("Å", 2, 3),
    FullCaseEntry("Ń", 0, 2),
    FullCaseEntry("ń", 1, 2),
    FullCaseEntry("Ḣ", 0, 2),
    FullCaseEntry("ḣ", 1, 2),
    FullCaseEntry("ᾧ", 0, 3),
    FullCaseEntry("ὧι", 1, 3),
    FullCaseEntry("ᾯ", 2, 3),
    FullCaseEntry("ᾨ", 0, 3),
    FullCaseEntry("ὠι", 1, 3),
    FullCaseEntry("ᾠ", 2, 3),
    FullCaseEntry("Ņ", 0, 2),
    FullCaseEntry("ņ", 1, 2),
    FullCaseEntry("Ḥ", 0, 2),
    FullCaseEntry("ḥ", 1, 2),
    FullCaseEntry("ᾩ", 0, 3),
    FullCaseEntry("ὡι", 1, 3),
    FullCaseEntry("ᾡ", 2, 3),
    FullCaseEntry("ᾪ", 0, 3),
    FullCaseEntry("ὢι", 1, 3),
    FullCaseEntry("ᾢ", 2, 3),
    FullCaseEntry("Ň", 0, 2),
    FullCaseEntry("ň", 1, 2),
    FullCaseEntry("Ḧ", 0, 2),
    FullCaseEntry("ḧ", 1, 2),
    FullCaseEntry("ᾫ", 0, 3),
    FullCaseEntry("ὣι", 1, 3),
    FullCaseEntry("ᾣ", 2, 3),
    FullCaseEntry("ᾬ", 0, 3),
    FullCaseEntry("ὤι", 1, 3),
    FullCaseEntry("ᾤ", 2, 3),
    FullCaseEntry("ŉ", 0, 2),
    FullCaseEntry("ʼn", 1, 2),
    FullCaseEntry("Ḩ", 0, 2),
    FullCaseEntry("ḩ", 1, 2),
    FullCaseEntry("ᾭ", 0, 3),
    FullCaseEntry("ὥι", 1, 3),
    FullCaseEntry("ᾥ", 2, 3),
    FullCaseEntry("Ⅎ", 0, 2),
    FullCaseEntry("ⅎ", 1, 2),
    FullCaseEntry("Ŋ", 0, 2),
    FullCaseEntry("ŋ", 1, 2),
    FullCaseEntry("ᾮ", 0, 3),
    FullCaseEntry("ὦι", 1, 3),
    FullCaseEntry("ᾦ", 2, 3),
    FullCaseEntry("Ḫ", 0, 2),
    FullCaseEntry("ḫ", 1, 2),
    FullCaseEntry("ᾯ", 0, 3),
    FullCaseEntry("ὧι", 1, 3),
    FullCaseEntry("ᾧ", 2, 3),
    FullCaseEntry("Ō", 0, 2),
    FullCaseEntry("ō", 1, 2),
    FullCaseEntry("Ḭ", 0, 2),
    FullCaseEntry("ḭ", 1, 2),
    FullCaseEntry("Ŏ", 0, 2),
    FullCaseEntry("ŏ", 1, 2),
    FullCaseEntry("ᾲ", 0, 2),
    FullCaseEntry("ὰι", 1, 2),
    FullCaseEntry("Ḯ", 0, 2),
    FullCaseEntry("ḯ", 1, 2),
    FullCaseEntry("ᾳ", 0, 3),
    FullCaseEntry("αι", 1, 3),
    FullCaseEntry("ᾼ", 2, 3),
    FullCaseEntry("Ő", 0, 2),
    FullCaseEntry("ő", 1, 2),
    FullCaseEntry("ᾴ", 0, 2),
    FullCaseEntry("άι", 1, 2),
    FullCaseEntry("Ḱ", 0, 2),
    FullCaseEntry("ḱ", 1, 2),
    FullCaseEntry("Œ", 0, 2),
    FullCaseEntry("œ", 1, 2),
    FullCaseEntry("ᾶ", 0, 2),
    FullCaseEntry("ᾶ", 1, 2),
    FullCaseEntry("Ḳ", 0, 2),
    FullCaseEntry("ḳ", 1, 2),
    FullCaseEntry("ᾷ", 0, 2),
    FullCaseEntry("ᾶι", 1, 2),
    FullCaseEntry("Ŕ", 0, 2),
    FullCaseEntry("ŕ", 1, 2),
    FullCaseEntry("Ᾰ", 0, 2),
    FullCaseEntry("ᾰ", 1, 2),
    FullCaseEntry("Ḵ", 0, 2),
    FullCaseEntry("ḵ", 1, 2),
    FullCaseEntry("Ᾱ", 0, 2),
    FullCaseEntry("ᾱ", 1, 2),
    FullCaseEntry("Ŗ", 0, 2),
    FullCaseEntry("ŗ", 1, 2),
    FullCaseEntry("Ѡ", 0, 2),
    FullCaseEntry("ѡ", 1, 2),
    FullCaseEntry("Ὰ", 0, 2),
    FullCaseEntry("ὰ", 1, 2),
    FullCaseEntry("Ḷ", 0, 2),
    FullCaseEntry("ḷ", 1, 2),
    FullCaseEntry("Ά", 0, 2),
    FullCaseEntry("ά", 1, 2),
    FullCaseEntry("Ř", 0, 2),
    FullCaseEntry("ř", 1, 2),
    FullCaseEntry("Ѣ", 0, 2),
    FullCaseEntry("ѣ", 1, 2),
    FullCaseEntry("ᾼ", 0, 3),
    FullCaseEntry("αι", 1, 3),
    FullCaseEntry("ᾳ", 2, 3),
    FullCaseEntry("Ḹ", 0, 2),
    FullCaseEntry("ḹ", 1, 2),
    FullCaseEntry("Ś", 0, 2),
    FullCaseEntry("ś", 1, 2),
    FullCaseEntry("Ѥ", 0, 2),
    FullCaseEntry("ѥ", 1, 2),
    FullCaseEntry("ι", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("ͅ", 2, 4),
    FullCaseEntry("Ι", 3, 4),
    FullCaseEntry("Ḻ", 0, 2),
    FullCaseEntry("ḻ", 1, 2),
    FullCaseEntry("Ŝ", 0, 2),
    FullCaseEntry("ŝ", 1, 2),
    FullCaseEntry("Ѧ", 0, 2),
    FullCaseEntry("ѧ", 1, 2),
    FullCaseEntry("Ḽ", 0, 2),
    FullCaseEntry("ḽ", 1, 2),
    FullCaseEntry("Ş", 0, 2),
    FullCaseEntry("ş", 1, 2),
    FullCaseEntry("Ѩ", 0, 2),
    FullCaseEntry("ѩ", 1, 2),
    FullCaseEntry("ῂ", 0, 2),
    FullCaseEntry("ὴι", 1, 2),
    FullCaseEntry("Ａ", 0, 2),
    FullCaseEntry("ａ", 1, 2),
    FullCaseEntry("Ḿ", 0, 2),
    FullCaseEntry("ḿ", 1, 2),
    FullCaseEntry("ῃ", 0, 3),
    FullCaseEntry("ηι", 1, 3),
    FullCaseEntry("ῌ", 2, 3),
    FullCaseEntry("Ｂ", 0, 2),
    FullCaseEntry("ｂ", 1, 2),
    FullCaseEntry("Š", 0, 2),
    FullCaseEntry("š", 1, 2),
    FullCaseEntry("Ѫ", 0, 2),
    FullCaseEntry("ѫ", 1, 2),
    FullCaseEntry("ῄ", 0, 2),
    FullCaseEntry("ήι", 1, 2),
    FullCaseEntry("Ｃ", 0, 2),
    FullCaseEntry("ｃ", 1, 2),
    FullCaseEntry("Ṁ", 0, 2),
    FullCaseEntry("ṁ", 1, 2),
    FullCaseEntry("Ｄ", 0, 2),
    FullCaseEntry("ｄ", 1, 2),
    FullCaseEntry("Ţ", 0, 2),
    FullCaseEntry("ţ", 1, 2),
    FullCaseEntry("Ѭ", 0, 2),
    FullCaseEntry("ѭ", 1, 2),
    FullCaseEntry("ῆ", 0, 2),
    FullCaseEntry("ῆ", 1, 2),
    FullCaseEntry("Ｅ", 0, 2),
    FullCaseEntry("ｅ", 1, 2),
    FullCaseEntry("Ṃ", 0, 2),
    FullCaseEntry("ṃ", 1, 2),
    FullCaseEntry("ῇ", 0, 2),
    FullCaseEntry("ῆι", 1, 2),
    FullCaseEntry("Ｆ", 0, 2),
    FullCaseEntry("ｆ", 1, 2),
    FullCaseEntry("Ť", 0, 2),
    FullCaseEntry("ť", 1, 2),
    FullCaseEntry("Ѯ", 0, 2),
    FullCaseEntry("ѯ", 1, 2),
    FullCaseEntry("Ὲ", 0, 2),
    FullCaseEntry("ὲ", 1, 2),
    FullCaseEntry("Ｇ", 0, 2),
    FullCaseEntry("ｇ", 1, 2),
    FullCaseEntry("Ṅ", 0, 2),
    FullCaseEntry("ṅ", 1, 2),
    FullCaseEntry("Έ", 0, 2),
    FullCaseEntry("έ", 1, 2),
    FullCaseEntry("Ｈ", 0, 2),
    FullCaseEntry("ｈ", 1, 2),
    FullCaseEntry("Ŧ", 0, 2),
    FullCaseEntry("ŧ", 1, 2),
    FullCaseEntry("Ѱ", 0, 2),
    FullCaseEntry("ѱ", 1, 2),
    FullCaseEntry("Ὴ", 0, 2),
    FullCaseEntry("ὴ", 1, 2),
    FullCaseEntry("Ｉ", 0, 2),
    FullCaseEntry("ｉ", 1, 2),
    FullCaseEntry("Ṇ", 0, 2),
    FullCaseEntry("ṇ", 1, 2),
    FullCaseEntry("Ή", 0, 2),
    FullCaseEntry("ή", 1, 2),
    FullCaseEntry("Ｊ", 0, 2),
    FullCaseEntry("ｊ", 1, 2),
    FullCaseEntry("Ũ", 0, 2),
    FullCaseEntry("ũ", 1, 2),
    FullCaseEntry("Ѳ", 0, 2),
    FullCaseEntry("ѳ", 1, 2),
    FullCaseEntry("ῌ", 0, 3),
    FullCaseEntry("ηι", 1, 3),
    FullCaseEntry("ῃ", 2, 3),
    FullCaseEntry("Ｋ", 0, 2),
    FullCaseEntry("ｋ", 1, 2),
    FullCaseEntry("Ṉ", 0, 2),
    FullCaseEntry("ṉ", 1, 2),
    FullCaseEntry("Ｌ", 0, 2),
    FullCaseEntry("ｌ", 1, 2),
    FullCaseEntry("Ū", 0, 2),
    FullCaseEntry("ū", 1, 2),
    FullCaseEntry("Ѵ", 0, 2),
    FullCaseEntry("ѵ", 1, 2),
    FullCaseEntry("Ｍ", 0, 2),
    FullCaseEntry("ｍ", 1, 2),
    FullCaseEntry("Ṋ", 0, 2),
    FullCaseEntry("ṋ", 1, 2),
    FullCaseEntry("Ｎ", 0, 2),
    FullCaseEntry("ｎ", 1, 2),
    FullCaseEntry("Ŭ", 0, 2),
    FullCaseEntry("ŭ", 1, 2),
    FullCaseEntry("Ѷ", 0, 2),
    FullCaseEntry("ѷ", 1, 2),
    FullCaseEntry("Ｏ", 0, 2),
    FullCaseEntry("ｏ", 1, 2),
    FullCaseEntry("Ṍ", 0, 2),
    FullCaseEntry("ṍ", 1, 2),
    FullCaseEntry("Ｐ", 0, 2),
    FullCaseEntry("ｐ", 1, 2),
    FullCaseEntry("Ů", 0, 2),
    FullCaseEntry("ů", 1, 2),
    FullCaseEntry("Ѹ", 0, 2),
    FullCaseEntry("ѹ", 1, 2),
    FullCaseEntry("Ⴀ", 0, 2),
    FullCaseEntry("ⴀ", 1, 2),
    FullCaseEntry("ῒ", 0, 2),
    FullCaseEntry("ῒ", 1, 2),
    FullCaseEntry("Ｑ", 0, 2),
    FullCaseEntry("ｑ", 1, 2),
    FullCaseEntry("Ⴁ", 0, 2),
    FullCaseEntry("ⴁ", 1, 2),
    FullCaseEntry("Ṏ", 0, 2),
    FullCaseEntry("ṏ", 1, 2),
    FullCaseEntry("ΐ", 0, 3),
    FullCaseEntry("ΐ", 1, 3),
    FullCaseEntry("ΐ", 2, 3),
    FullCaseEntry("Ｒ", 0, 2),
    FullCaseEntry("ｒ", 1, 2),
    FullCaseEntry("Ű", 0, 2),
    FullCaseEntry("ű", 1, 2),
    FullCaseEntry("Ѻ", 0, 2),
    FullCaseEntry("ѻ", 1, 2),
    FullCaseEntry("Ⴂ", 0, 2),
    FullCaseEntry("ⴂ", 1, 2),
    FullCaseEntry("Ｓ", 0, 2),
    FullCaseEntry("ｓ", 1, 2),
    FullCaseEntry("Ⴃ", 0, 2),
    FullCaseEntry("ⴃ", 1, 2),
    FullCaseEntry("Ṑ", 0, 2),
    FullCaseEntry("ṑ", 1, 2),
    FullCaseEntry("Ｔ", 0, 2),
    FullCaseEntry("ｔ", 1, 2),
    FullCaseEntry("Ų", 0, 2),
    FullCaseEntry("ų", 1, 2),
    FullCaseEntry("Ѽ", 0, 2),
    FullCaseEntry("ѽ", 1, 2),
    FullCaseEntry("Ⴄ", 0, 2),
    FullCaseEntry("ⴄ", 1, 2),
    FullCaseEntry("ῖ", 0, 2),
    FullCaseEntry("ῖ", 1, 2),
    FullCaseEntry("Ｕ", 0, 2),
    FullCaseEntry("ｕ", 1, 2),
    FullCaseEntry("Ⴅ", 0, 2),
    FullCaseEntry("ⴅ", 1, 2),
    FullCaseEntry("Ṓ", 0, 2),
    FullCaseEntry("ṓ", 1, 2),
    FullCaseEntry("ῗ", 0, 2),
    FullCaseEntry("ῗ", 1, 2),
    FullCaseEntry("Ｖ", 0, 2),
    FullCaseEntry("ｖ", 1, 2),
    FullCaseEntry("Ŵ", 0, 2),
    FullCaseEntry("ŵ", 1, 2),
    FullCaseEntry("Ѿ", 0, 2),
    FullCaseEntry("ѿ", 1, 2),
    FullCaseEntry("Ⴆ", 0, 2),
    FullCaseEntry("ⴆ", 1, 2),
    FullCaseEntry("Ῐ", 0, 2),
    FullCaseEntry("ῐ", 1, 2),
    FullCaseEntry("Ⰰ", 0, 2),
    FullCaseEntry("ⰰ", 1, 2),
    FullCaseEntry("Ｗ", 0, 2),
    FullCaseEntry("ｗ", 1, 2),
    FullCaseEntry("Ⴇ", 0, 2),
    FullCaseEntry("ⴇ", 1, 2),
    FullCaseEntry("Ṕ", 0, 2),
    FullCaseEntry("ṕ", 1, 2),
    FullCaseEntry("Ῑ", 0, 2),
    FullCaseEntry("ῑ", 1, 2),
    FullCaseEntry("Ⰱ", 0, 2),
    FullCaseEntry("ⰱ", 1, 2),
    FullCaseEntry("Ｘ", 0, 2),
    FullCaseEntry("ｘ", 1, 2),
    FullCaseEntry("Ŷ", 0, 2),
    FullCaseEntry("ŷ", 1, 2),
    FullCaseEntry("Ҁ", 0, 2),
    FullCaseEntry("ҁ", 1, 2),
    FullCaseEntry("Ⴈ", 0, 2),
    FullCaseEntry("ⴈ", 1, 2),
    FullCaseEntry("Ὶ", 0, 2),
    FullCaseEntry("ὶ", 1, 2),
    FullCaseEntry("Ⰲ", 0, 2),
    FullCaseEntry("ⰲ", 1, 2),
    FullCaseEntry("Ｙ", 0, 2),
    FullCaseEntry("ｙ", 1, 2),
    FullCaseEntry("Ⴉ", 0, 2),
    FullCaseEntry("ⴉ", 1, 2),
    FullCaseEntry("Ṗ", 0, 2),
    FullCaseEntry("ṗ", 1, 2),
    FullCaseEntry("Ί", 0, 2),
    FullCaseEntry("ί", 1, 2),
    FullCaseEntry("Ⅰ", 0, 2),
    FullCaseEntry("ⅰ", 1, 2),
    FullCaseEntry("Ⰳ", 0, 2),
    FullCaseEntry("ⰳ", 1, 2),
    FullCaseEntry("Ｚ", 0, 2),
    FullCaseEntry("ｚ", 1, 2),
    FullCaseEntry("Ÿ", 0, 2),
    FullCaseEntry("ÿ", 1, 2),
    FullCaseEntry("Ⴊ", 0, 2),
    FullCaseEntry("ⴊ", 1, 2),
    FullCaseEntry("Ⅱ", 0, 2),
    FullCaseEntry("ⅱ", 1, 2),
    FullCaseEntry("Ⰴ", 0, 2),
    FullCaseEntry("ⰴ", 1, 2),
    FullCaseEntry("Ź", 0, 2),
    FullCaseEntry("ź", 1, 2),
    FullCaseEntry("Ⴋ", 0, 2),
    FullCaseEntry("ⴋ", 1, 2),
    FullCaseEntry("Ṙ", 0, 2),
    FullCaseEntry("ṙ", 1, 2),
    FullCaseEntry("Ⅲ", 0, 2),
    FullCaseEntry("ⅲ", 1, 2),
    FullCaseEntry("Ⰵ", 0, 2),
    FullCaseEntry("ⰵ", 1, 2),
    FullCaseEntry("Ⴌ", 0, 2),
    FullCaseEntry("ⴌ", 1, 2),
    FullCaseEntry("Ⅳ", 0, 2),
    FullCaseEntry("ⅳ", 1, 2),
    FullCaseEntry("Ⰶ", 0, 2),
    FullCaseEntry("ⰶ", 1, 2),
    FullCaseEntry("Ż", 0, 2),
    FullCaseEntry("ż", 1, 2),
    FullCaseEntry("Ⴍ", 0, 2),
    FullCaseEntry("ⴍ", 1, 2),
    FullCaseEntry("Ṛ", 0, 2),
    FullCaseEntry("ṛ", 1, 2),
    FullCaseEntry("Ⅴ", 0, 2),
    FullCaseEntry("ⅴ", 1, 2),
    FullCaseEntry("Ⰷ", 0, 2),
    FullCaseEntry("ⰷ", 1, 2),
    FullCaseEntry("Ⴎ", 0, 2),
    FullCaseEntry("ⴎ", 1, 2),
    FullCaseEntry("Ⅵ", 0, 2),
    FullCaseEntry("ⅵ", 1, 2),
    FullCaseEntry("Ⰸ", 0, 2),
    FullCaseEntry("ⰸ", 1, 2),
    FullCaseEntry("Ž", 0, 2),
    FullCaseEntry("ž", 1, 2),
    FullCaseEntry("Ⴏ", 0, 2),
    FullCaseEntry("ⴏ", 1, 2),
    FullCaseEntry("Ṝ", 0, 2),
    FullCaseEntry("ṝ", 1, 2),
    FullCaseEntry("Ⅶ", 0, 2),
    FullCaseEntry("ⅶ", 1, 2),
    FullCaseEntry("Ⰹ", 0, 2),
    FullCaseEntry("ⰹ", 1, 2),
    FullCaseEntry("Ⴐ", 0, 2),
    FullCaseEntry("ⴐ", 1, 2),
    FullCaseEntry("ῢ", 0, 2),
    FullCaseEntry("ῢ", 1, 2),
    FullCaseEntry("Ⅷ", 0, 2),
    FullCaseEntry("ⅷ", 1, 2),
    FullCaseEntry("Ⰺ", 0, 2),
    FullCaseEntry("ⰺ", 1, 2),
    FullCaseEntry("ſ", 0, 3),
    FullCaseEntry("s", 1, 3),
    FullCaseEntry("S", 2, 3),
    FullCaseEntry("Ⴑ", 0, 2),
    FullCaseEntry("ⴑ", 1, 2),
    FullCaseEntry("Ṟ", 0, 2),
    FullCaseEntry("ṟ", 1, 2),
    FullCaseEntry("ΰ", 0, 3),
    FullCaseEntry("ΰ", 1, 3),
    FullCaseEntry("ΰ", 2, 3),
    FullCaseEntry("Ⅸ", 0, 2),
    FullCaseEntry("ⅸ", 1, 2),
    FullCaseEntry("Ⰻ", 0, 2),
    FullCaseEntry("ⰻ", 1, 2),
    FullCaseEntry("Ҋ", 0, 2),
    FullCaseEntry("ҋ", 1, 2),
    FullCaseEntry("Ⴒ", 0, 2),
    FullCaseEntry("ⴒ", 1, 2),
    FullCaseEntry("ῤ", 0, 2),
    FullCaseEntry("ῤ", 1, 2),
    FullCaseEntry("Ⅹ", 0, 2),
    FullCaseEntry("ⅹ", 1, 2),
    FullCaseEntry("Ⰼ", 0, 2),
    FullCaseEntry("ⰼ", 1, 2),
    FullCaseEntry("Ɓ", 0, 2),
    FullCaseEntry("ɓ", 1, 2),
    FullCaseEntry("Ⴓ", 0, 2),
    FullCaseEntry("ⴓ", 1, 2),
    FullCaseEntry("Ṡ", 0, 3),
    FullCaseEntry("ṡ", 1, 3),
    FullCaseEntry("ẛ", 2, 3),
    FullCaseEntry("Ⅺ", 0, 2),
    FullCaseEntry("ⅺ", 1, 2),
    FullCaseEntry("Ⰽ", 0, 2),
    FullCaseEntry("ⰽ", 1, 2),
    FullCaseEntry("Ꜣ", 0, 2),
    FullCaseEntry("ꜣ", 1, 2),
    FullCaseEntry("Ƃ", 0, 2),
    FullCaseEntry("ƃ", 1, 2),
    FullCaseEntry("Ҍ", 0, 2),
    FullCaseEntry("ҍ", 1, 2),
    FullCaseEntry("Ⴔ", 0, 2),
    FullCaseEntry("ⴔ", 1, 2),
    FullCaseEntry("ῦ", 0, 2),
    FullCaseEntry("ῦ", 1, 2),
    FullCaseEntry("Ⅻ", 0, 2),
    FullCaseEntry("ⅻ", 1, 2),
    FullCaseEntry("Ⰾ", 0, 2),
    FullCaseEntry("ⰾ", 1, 2),
    FullCaseEntry("Ⴕ", 0, 2),
    FullCaseEntry("ⴕ", 1, 2),
    FullCaseEntry("Ṣ", 0, 2),
    FullCaseEntry("ṣ", 1, 2),
    FullCaseEntry("ῧ", 0, 2),
    FullCaseEntry("ῧ", 1, 2),
    FullCaseEntry("Ⅼ", 0, 2),
    FullCaseEntry("ⅼ", 1, 2),
    FullCaseEntry("Ⰿ", 0, 2),
    FullCaseEntry("ⰿ", 1, 2),
    FullCaseEntry("Ꜥ", 0, 2),
    FullCaseEntry("ꜥ", 1, 2),
    FullCaseEntry("Ƅ", 0, 2),
    FullCaseEntry("ƅ", 1, 2),
    FullCaseEntry("Ҏ", 0, 2),
    FullCaseEntry("ҏ", 1, 2),
    FullCaseEntry("Ⴖ", 0, 2),
    FullCaseEntry("ⴖ", 1, 2),
    FullCaseEntry("Ῠ", 0, 2),
    FullCaseEntry("ῠ", 1, 2),
    FullCaseEntry("Ⅽ", 0, 2),
    FullCaseEntry("ⅽ", 1, 2),
    FullCaseEntry("Ⱀ", 0, 2),
    FullCaseEntry("ⱀ", 1, 2),
];
immutable ubyte[] unicodeUnified_Ideograph = [0xa0, 0x34, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0xa0, 0x5a, 0x41, 0x2, 0x1, 0x1, 0x1, 0x2, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0xa1, 0x5, 0xd6, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde];
immutable ubyte[] unicodeInHigh_Surrogates = [0xa0, 0xd8, 0x0, 0x83, 0x80];
immutable ubyte[] unicodeInGreek_and_Coptic = [0x83, 0x70, 0x80, 0x90];
immutable ubyte[] unicodeInSyriac = [0x87, 0x0, 0x50];
immutable ubyte[] unicodeID_Continue = [0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x2, 0x4, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x1, 0x5, 0x2, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x81, 0x4d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0x80, 0xe7, 0x15, 0x81, 0x1a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x8a, 0x77, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x82, 0x5, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x7, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x84, 0x8d, 0x43, 0x2e, 0x2, 0x81, 0xd, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x81, 0x6b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x4, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x20, 0x5, 0x1, 0x80, 0x87, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x80, 0x88, 0x1, 0x80, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x80, 0x9e, 0x2, 0xa, 0x83, 0x56, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xb7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x84, 0xa6, 0x38, 0x8, 0xa, 0x89, 0x36, 0x83, 0x6f, 0x80, 0x91, 0x63, 0x8b, 0x9d, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0xa0, 0x40, 0x60, 0x2, 0xa0, 0x21, 0x63, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x80, 0x94, 0x3, 0x81, 0xbb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e, 0xab, 0x6, 0xe2, 0x80, 0xf0];
immutable ubyte[] unicodeCuneiform = [0xa1, 0x20, 0x0, 0x83, 0x6f, 0x80, 0x91, 0x63, 0xd, 0x4];
immutable ubyte[] unicodeInJavanese = [0xa0, 0xa9, 0x80, 0x60];
immutable ubyte[] unicodeInLetterlike_Symbols = [0xa0, 0x21, 0x0, 0x50];
immutable ubyte[] unicodeInTifinagh = [0xa0, 0x2d, 0x30, 0x50];
immutable ubyte[] unicodeRunic = [0x96, 0xa0, 0x4b, 0x3, 0x3];
immutable ubyte[] unicodeInYi_Radicals = [0xa0, 0xa4, 0x90, 0x40];
immutable ubyte[] unicodeOld_Italic = [0xa1, 0x3, 0x0, 0x1f, 0x1, 0x4];
immutable ubyte[] unicodeInLydian = [0xa1, 0x9, 0x20, 0x20];
immutable ubyte[] unicodeInSmall_Form_Variants = [0xa0, 0xfe, 0x50, 0x20];
immutable ubyte[] unicodeGrapheme_Base = [0x20, 0x5f, 0x21, 0xd, 0x1, 0x82, 0x52, 0x70, 0x8, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0x80, 0xe0, 0x7, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x2e, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x9, 0x1b, 0x5, 0x5, 0x11, 0xa, 0xb, 0x1, 0x2, 0x2d, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0x6, 0x2, 0x2, 0x1, 0x4, 0x20, 0x2, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0xe, 0x2b, 0x9, 0x7, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x7, 0xf, 0x1, 0x19, 0x5, 0x1, 0x41, 0x1, 0x1, 0xb, 0x56, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x14, 0x1, 0x7, 0x2, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x1, 0x2, 0x6, 0x2, 0x2, 0x2, 0x1, 0x1, 0xd, 0x2, 0x1, 0x3, 0x4, 0x16, 0x7, 0x1, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x3, 0x18, 0x4, 0x1, 0x1, 0x7, 0xa, 0x2, 0x3, 0xe, 0x1, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x4, 0x8, 0x1, 0x1, 0x2, 0x3, 0x1, 0xf, 0x2, 0x4, 0xc, 0x10, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x2, 0x1, 0x6, 0x2, 0x2, 0x2, 0xf, 0x2, 0x1, 0x3, 0x4, 0x12, 0xb, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x5, 0x1, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x15, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x3, 0x4, 0x13, 0x2, 0x6, 0x2, 0x4, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x2, 0x1, 0x2, 0x12, 0x1, 0x1, 0x2, 0x4, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x1, 0x2, 0x5, 0x3, 0x1, 0x3, 0x1, 0x1, 0x11, 0x2, 0x4, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x9, 0x2, 0x6, 0x7, 0x13, 0x3, 0xc, 0x30, 0x1, 0x2, 0xb, 0x8, 0x8, 0xd, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x9, 0xa, 0x2, 0x4, 0x20, 0x18, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0xe, 0x1, 0x24, 0x12, 0x1, 0x5, 0x1, 0x2, 0x5, 0x31, 0x8, 0x1, 0x6, 0x1, 0xd, 0x25, 0x2d, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x28, 0x1, 0x1, 0x5, 0x1, 0x2, 0x81, 0x79, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x5, 0x1d, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x82, 0x9d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0x3, 0x2, 0x9, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x3, 0xa, 0x6, 0xa, 0x6, 0xb, 0x3, 0x1, 0x1, 0xa, 0x6, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x6, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x7, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x39, 0x2, 0x3, 0x2, 0x38, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0xd, 0xa, 0x6, 0xa, 0x6, 0xe, 0x56, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x9, 0x4, 0x1b, 0x9, 0x9, 0x5, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x8, 0x30, 0x8, 0x2, 0x5, 0xf, 0x3, 0x33, 0x40, 0x8, 0xb, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0x80, 0xc0, 0x40, 0x81, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0xb, 0x5, 0x18, 0x7, 0x31, 0x10, 0x2, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1b, 0x45, 0x80, 0x8a, 0x6, 0x82, 0x64, 0xc, 0x27, 0x19, 0xb, 0x15, 0x82, 0xa0, 0x1, 0x84, 0x4c, 0x3, 0xa, 0x80, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x8f, 0x3, 0x2, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xf, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x21, 0x3c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0x80, 0xd6, 0x1a, 0xc, 0x4, 0x2a, 0x6, 0x10, 0x1, 0x56, 0x4, 0x65, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0x80, 0xdf, 0x1, 0x9a, 0xb6, 0xa, 0xa0, 0x52, 0xd, 0x33, 0x84, 0x8d, 0x3, 0x37, 0x9, 0x81, 0x5c, 0x14, 0x2f, 0x4, 0x1, 0xa, 0x1a, 0x8, 0x50, 0x2, 0x6, 0x8, 0x80, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x5, 0x4, 0xa, 0x6, 0x38, 0x8, 0x44, 0xa, 0xc, 0x18, 0xa, 0x4, 0x26, 0x8, 0x19, 0xb, 0x2, 0xb, 0x1e, 0x6, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x11, 0x1, 0xb, 0x4, 0x2, 0x20, 0x29, 0x6, 0x2, 0x2, 0x2, 0xb, 0x3, 0x1, 0x8, 0x1, 0x1, 0x2, 0xa, 0x2, 0x20, 0x4, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x11, 0x2, 0x8, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x25, 0x1, 0x2, 0x1, 0x4, 0x3, 0xa, 0x6, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0x18, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x81, 0x6d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x80, 0x87, 0x4, 0x80, 0x9d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xd, 0x2, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2d, 0x80, 0x83, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x80, 0x9e, 0x2, 0xa, 0x83, 0x56, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0x80, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0xc, 0x8, 0x8, 0x9, 0x7, 0x20, 0x80, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x80, 0x49, 0x82, 0x17, 0x1f, 0x81, 0x81, 0x1, 0x1, 0x36, 0xf, 0x7, 0x4, 0x1e, 0x12, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x4, 0xe, 0x19, 0x7, 0xa, 0x9, 0x24, 0x5, 0x1, 0x9, 0xe, 0x3e, 0x34, 0x9, 0xa, 0x7, 0xa, 0x84, 0xa6, 0x2b, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x9, 0xa, 0x89, 0x36, 0x83, 0x6f, 0x80, 0x91, 0x63, 0xd, 0x4, 0x8b, 0x8c, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0xa0, 0x40, 0x60, 0x2, 0x9f, 0xfe, 0x80, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x1, 0x1, 0x3, 0x4, 0x15, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0x80, 0xba, 0x57, 0x9, 0x12, 0x80, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x81, 0x24, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x81, 0xe, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0x80, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0x80, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x80, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88, 0x8c, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeTai_Tham = [0x9a, 0x20, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe];
immutable ubyte[] unicodeLinear_B = [0xa1, 0x0, 0x0, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b];
immutable ubyte[] unicodeVariation_Selector = [0x98, 0xb, 0x3, 0xa0, 0xe5, 0xf2, 0x10, 0xad, 0x2, 0xf0, 0x80, 0xf0];
immutable ubyte[] unicodeLowercase = [0x61, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x24, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2b, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x4, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0x97, 0x78, 0x80, 0xc0, 0x41, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0x79, 0x1, 0xd, 0x1, 0x10, 0xd, 0x6d, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x21, 0x10, 0x4, 0x1, 0x83, 0x4b, 0x1a, 0x87, 0x46, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xa0, 0x79, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4e, 0x3, 0xa0, 0x53, 0x5, 0x7, 0xc, 0x5, 0x84, 0x29, 0x1a, 0x84, 0xcd, 0x28, 0xa0, 0xcf, 0xca, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1];
immutable ubyte[] unicodeArmenian = [0x85, 0x31, 0x26, 0x2, 0x7, 0x1, 0x27, 0x2, 0x1, 0x4, 0x1, 0xa0, 0xf5, 0x83, 0x5];
immutable ubyte[] unicodeCyrillic = [0x84, 0x0, 0x80, 0x85, 0x2, 0x80, 0xa1, 0x98, 0x3, 0x1, 0x4c, 0x1, 0x90, 0x67, 0x20, 0xa0, 0x78, 0x40, 0x58, 0x7, 0x1];
immutable ubyte[] unicodeBidi_Control = [0xa0, 0x20, 0xe, 0x2, 0x1a, 0x5];
immutable ubyte[] unicodeBatak = [0x9b, 0xc0, 0x34, 0x8, 0x4];
immutable ubyte[] unicodeCherokee = [0x93, 0xa0, 0x55];
immutable ubyte[] unicodeHiragana = [0xa0, 0x30, 0x41, 0x56, 0x6, 0x3, 0xa1, 0x7f, 0x61, 0x1, 0xa0, 0x41, 0xfe, 0x1];
immutable ubyte[] unicodeSora_Sompeng = [0xa1, 0x10, 0xd0, 0x19, 0x7, 0xa];
immutable ubyte[] unicodeSaurashtra = [0xa0, 0xa8, 0x80, 0x45, 0x9, 0xc];
immutable ubyte[] unicodeInBraille_Patterns = [0xa0, 0x28, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInEmoticons = [0xa1, 0xf6, 0x0, 0x50];
immutable ubyte[] unicodeInherited = [0x83, 0x0, 0x70, 0x81, 0x15, 0x2, 0x81, 0xc4, 0xb, 0x1a, 0x1, 0x82, 0xe0, 0x2, 0x93, 0x7d, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x80, 0xcb, 0x27, 0x15, 0x4, 0x82, 0xc, 0x2, 0x80, 0xc2, 0x21, 0x8f, 0x39, 0x4, 0x6b, 0x2, 0xa0, 0xcd, 0x65, 0x10, 0x10, 0x7, 0x83, 0xd6, 0x1, 0xa0, 0xcf, 0x69, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0xac, 0x2f, 0x52, 0x80, 0xf0];
immutable ubyte[] unicodeOther_Lowercase = [0x80, 0xaa, 0x1, 0xf, 0x1, 0x81, 0xf5, 0x9, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x34, 0x1, 0x99, 0xb1, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x82, 0xb1, 0x1, 0xd, 0x1, 0x10, 0xd, 0x80, 0xd3, 0x10, 0x83, 0x50, 0x1a, 0x87, 0x92, 0x2, 0xa0, 0x7a, 0xf2, 0x1, 0x80, 0x87, 0x2];
immutable ubyte[] unicodeCanadian_Aboriginal = [0x94, 0x0, 0x82, 0x80, 0x82, 0x30, 0x46];
immutable ubyte[] unicodeArabic = [0x86, 0x0, 0x5, 0x1, 0x6, 0x1, 0xe, 0x3, 0x1, 0x1, 0x20, 0x1, 0xa, 0xb, 0xa, 0xa, 0x6, 0x1, 0x6c, 0x1, 0x22, 0x50, 0x30, 0x81, 0x20, 0x1, 0x1, 0xb, 0x37, 0x1b, 0xa0, 0xf2, 0x51, 0x72, 0x11, 0x81, 0x6b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xd, 0x73, 0x5, 0x1, 0x80, 0x87, 0x8f, 0x63, 0x1f, 0xa0, 0xdf, 0x81, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2];
immutable ubyte[] unicodeInBamum_Supplement = [0xa1, 0x68, 0x0, 0x82, 0x40];
immutable ubyte[] unicodeBrahmi = [0xa1, 0x10, 0x0, 0x4e, 0x4, 0x1e];
immutable ubyte[] unicodeInPhonetic_Extensions_Supplement = [0x9d, 0x80, 0x40];
immutable ubyte[] unicodeInEnclosed_Alphanumeric_Supplement = [0xa1, 0xf1, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeLogical_Order_Exception = [0x8e, 0x40, 0x5, 0x7b, 0x5, 0xa0, 0x9b, 0xf0, 0x2, 0x2, 0x1, 0x1, 0x2];
immutable ubyte[] unicodeInMongolian = [0x98, 0x0, 0x80, 0xb0];
immutable ubyte[] unicodeTai_Le = [0x99, 0x50, 0x1e, 0x2, 0x5];
immutable ubyte[] unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended = [0x98, 0xb0, 0x50];
immutable ubyte[] unicodeCc = [0x0, 0x20, 0x5f, 0x21];
immutable ubyte[] unicodeCoptic = [0x83, 0xe2, 0xe, 0xa0, 0x28, 0x90, 0x74, 0x5, 0x7];
immutable ubyte[] unicodeMiao = [0xa1, 0x6f, 0x0, 0x45, 0xb, 0x2f, 0x10, 0x11];
immutable ubyte[] unicodeCf = [0x80, 0xad, 0x1, 0x85, 0x52, 0x5, 0x80, 0xd8, 0x1, 0x31, 0x1, 0x98, 0xfb, 0x5, 0x1a, 0x5, 0x31, 0x5, 0x5, 0x6, 0xa0, 0xde, 0x8f, 0x1, 0x80, 0xf9, 0x3, 0x90, 0xc1, 0x1, 0xa0, 0xc0, 0xb5, 0x8, 0xac, 0x2e, 0x86, 0x1, 0x1e, 0x60];
immutable ubyte[] unicodeGothic = [0xa1, 0x3, 0x30, 0x1b];
immutable ubyte[] unicodeInModifier_Tone_Letters = [0xa0, 0xa7, 0x0, 0x20];
immutable ubyte[] unicodeInCommon_Indic_Number_Forms = [0xa0, 0xa8, 0x30, 0x10];
immutable ubyte[] unicodeInOptical_Character_Recognition = [0xa0, 0x24, 0x40, 0x20];
immutable ubyte[] unicodeDefault_Ignorable_Code_Point = [0x80, 0xad, 0x1, 0x82, 0xa1, 0x1, 0x8e, 0xf, 0x2, 0x86, 0x53, 0x2, 0x55, 0x3, 0x87, 0xfd, 0x5, 0x1a, 0x5, 0x31, 0x10, 0x90, 0xf4, 0x1, 0xa0, 0xcc, 0x9b, 0x10, 0x80, 0xef, 0x1, 0x80, 0xa0, 0x1, 0x4f, 0x9, 0xa0, 0xd1, 0x7a, 0x8, 0xac, 0x2e, 0x85, 0x90, 0x0];
immutable ubyte[] unicodeOgham = [0x96, 0x80, 0x1d];
immutable ubyte[] unicodeKharoshthi = [0xa1, 0xa, 0x0, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9];
immutable ubyte[] unicodeInscriptional_Pahlavi = [0xa1, 0xb, 0x60, 0x13, 0x5, 0x8];
immutable ubyte[] unicodeInVariation_Selectors_Supplement = [0xae, 0x1, 0x0, 0x80, 0xf0];
immutable ubyte[] unicodeCn = [0x83, 0x78, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0x81, 0x85, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x1, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xb, 0x5, 0x1, 0x16, 0x2, 0x80, 0xf0, 0x1, 0x3c, 0x2, 0x65, 0xe, 0x3b, 0x5, 0x2e, 0x2, 0xf, 0x1, 0x1c, 0x2, 0x1, 0x41, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x78, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16, 0x5, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc, 0xf, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12, 0xa, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3, 0xc, 0x3a, 0x4, 0x1d, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0xd, 0x25, 0x80, 0xc6, 0x1, 0x1, 0x5, 0x1, 0x2, 0x81, 0x79, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x82, 0x9d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x7, 0xb, 0x17, 0x9, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x6, 0xf, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x3e, 0x2, 0x41, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe, 0x52, 0x4c, 0x4, 0x2d, 0x3, 0x74, 0x8, 0x3c, 0x3, 0xf, 0x3, 0x33, 0x40, 0x8, 0x8, 0x27, 0x9, 0x80, 0xe7, 0x15, 0x81, 0x1a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0x65, 0x5, 0x8, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1b, 0x15, 0x21, 0xf, 0x80, 0x8a, 0x6, 0x82, 0x64, 0xc, 0x27, 0x19, 0xb, 0x15, 0x82, 0xa0, 0x1, 0x84, 0x4c, 0x3, 0xa, 0x80, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x94, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xe, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x5c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0x80, 0xd6, 0x1a, 0xc, 0x4, 0x40, 0x1, 0x56, 0x2, 0x67, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0x80, 0xdf, 0x1, 0x9a, 0xb6, 0xa, 0xa0, 0x52, 0xd, 0x33, 0x84, 0x8d, 0x3, 0x37, 0x9, 0x81, 0x5c, 0x14, 0x58, 0x7, 0x59, 0x8, 0x80, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x34, 0x4, 0xa, 0x6, 0x38, 0x8, 0x45, 0x9, 0xc, 0x6, 0x1c, 0x4, 0x54, 0xb, 0x1e, 0x3, 0x4e, 0x1, 0xb, 0x4, 0x2, 0x20, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x20, 0x4, 0x43, 0x18, 0x1c, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x2e, 0x2, 0xa, 0x6, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0x4, 0xa0, 0x22, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x81, 0x6d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x2, 0x1a, 0x6, 0x7, 0x9, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x80, 0x87, 0x2, 0x1, 0x1, 0x80, 0xbe, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xa, 0x5, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2e, 0x80, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x80, 0x9e, 0x2, 0xa, 0x83, 0x56, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0x80, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9, 0x7, 0x20, 0x80, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x80, 0x49, 0x82, 0x17, 0x1f, 0x81, 0x81, 0x4e, 0x4, 0x1e, 0x10, 0x42, 0xe, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xe, 0x3c, 0x49, 0x7, 0xa, 0x84, 0xa6, 0x38, 0x8, 0xa, 0x89, 0x36, 0x83, 0x6f, 0x80, 0x91, 0x63, 0xd, 0x4, 0x8b, 0x8c, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0xa0, 0x40, 0x60, 0x2, 0x9f, 0xfe, 0x80, 0xf6, 0xa, 0x27, 0x2, 0x80, 0xb5, 0x22, 0x46, 0x80, 0xba, 0x57, 0x9, 0x12, 0x80, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x81, 0x24, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x81, 0xe, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0x80, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0x80, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x80, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88, 0x8c, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e, 0xab, 0x5, 0xe3, 0x1, 0x1e, 0x60, 0x80, 0x80, 0x80, 0xf0, 0xa0, 0xfe, 0x10, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe];
immutable ubyte[] unicodeCo = [0xa0, 0xe0, 0x0, 0x99, 0x0, 0xae, 0x7, 0x0, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe];
immutable ubyte[] unicodeInHangul_Syllables = [0xa0, 0xac, 0x0, 0xa0, 0x2b, 0xb0];
immutable ubyte[] unicodeMath = [0x2b, 0x1, 0x10, 0x3, 0x1f, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x82, 0xd8, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x3, 0x82, 0xf, 0x3, 0x9a, 0xd, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x3, 0x1, 0xd, 0x1, 0xe, 0x4, 0x15, 0x5, 0xb, 0x5, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0xe, 0x1, 0x1, 0x44, 0x18, 0x1, 0x6, 0x1, 0x2, 0x4, 0x2, 0x4, 0x20, 0x1, 0x1, 0x6, 0x2, 0xe, 0x81, 0xc, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x1b, 0x1, 0x1, 0x18, 0x1, 0xb, 0x7, 0x81, 0xbd, 0x2, 0xc, 0xa, 0x4, 0x6, 0x4, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0xb, 0x8, 0x5, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x3, 0x81, 0x50, 0x40, 0x81, 0x0, 0x82, 0x0, 0x30, 0x15, 0x2, 0x6, 0xa0, 0xcf, 0xdc, 0x1, 0x83, 0x37, 0x6, 0x1, 0x1, 0x80, 0xa2, 0x1, 0x10, 0x3, 0x1d, 0x1, 0x1, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x80, 0x83, 0x1, 0x6, 0x4, 0xa0, 0xd4, 0x13, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x81, 0x24, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2];
immutable ubyte[] unicodeInSharada = [0xa1, 0x11, 0x80, 0x60];
immutable ubyte[] unicodeInYi_Syllables = [0xa0, 0xa0, 0x0, 0x84, 0x90];
immutable ubyte[] unicodeInCombining_Diacritical_Marks_Supplement = [0x9d, 0xc0, 0x40];
immutable ubyte[] unicodeCs = [0xa0, 0xd8, 0x0, 0x88, 0x0];
immutable ubyte[] unicodeL = [0x91, 0x0, 0x60, 0xa0, 0x98, 0x0, 0x1d];
immutable ubyte[] unicodeBopomofo = [0x82, 0xea, 0x2, 0xa0, 0x2e, 0x19, 0x29, 0x72, 0x1b];
immutable ubyte[] unicodeInBamum = [0xa0, 0xa6, 0xa0, 0x60];
immutable ubyte[] unicodeInArabic = [0x86, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInBrahmi = [0xa1, 0x10, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInAlphabetic_Presentation_Forms = [0xa0, 0xfb, 0x0, 0x50];
immutable ubyte[] unicodeT = [0x91, 0xa8, 0x58, 0xa0, 0xc5, 0xcb, 0x31];
immutable ubyte[] unicodeInMiao = [0xa1, 0x6f, 0x0, 0x80, 0xa0];
immutable ubyte[] unicodeInCJK_Symbols_and_Punctuation = [0xa0, 0x30, 0x0, 0x40];
immutable ubyte[] unicodeV = [0x91, 0x60, 0x48, 0xa0, 0xc6, 0x8, 0x17];
immutable ubyte[] unicodeSharada = [0xa1, 0x11, 0x80, 0x49, 0x7, 0xa];
immutable ubyte[] unicodeTakri = [0xa1, 0x16, 0x80, 0x38, 0x8, 0xa];
immutable ubyte[] unicodeInSundanese_Supplement = [0x9c, 0xc0, 0x10];
immutable ubyte[] unicodeXID_Continue = [0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x3, 0x3, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x1, 0x5, 0x2, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x81, 0x4d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0x80, 0xe7, 0x15, 0x81, 0x1a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x8a, 0x77, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x82, 0x5, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x2, 0x2, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x84, 0x8d, 0x43, 0x2e, 0x2, 0x81, 0xd, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x80, 0x8b, 0x6, 0x80, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x6, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x21, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x80, 0x88, 0x1, 0x80, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x80, 0x9e, 0x2, 0xa, 0x83, 0x56, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xb7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x84, 0xa6, 0x38, 0x8, 0xa, 0x89, 0x36, 0x83, 0x6f, 0x80, 0x91, 0x63, 0x8b, 0x9d, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0xa0, 0x40, 0x60, 0x2, 0xa0, 0x21, 0x63, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x80, 0x94, 0x3, 0x81, 0xbb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e, 0xab, 0x6, 0xe2, 0x80, 0xf0];
immutable ubyte[] unicodeInCoptic = [0xa0, 0x2c, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInHalfwidth_and_Fullwidth_Forms = [0xa0, 0xff, 0x0, 0x80, 0xf0];
immutable ubyte[] unicodeInAncient_Symbols = [0xa1, 0x1, 0x90, 0x40];
immutable ubyte[] unicodeInSundanese = [0x9b, 0x80, 0x40];
immutable ubyte[] unicodeInMathematical_Operators = [0xa0, 0x22, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInGothic = [0xa1, 0x3, 0x30, 0x20];
immutable ubyte[] unicodeDevanagari = [0x89, 0x0, 0x51, 0x2, 0x11, 0x2, 0x12, 0x1, 0x7, 0xa0, 0x9f, 0x60, 0x1c];
immutable ubyte[] unicodeSTerm = [0x21, 0x1, 0xc, 0x1, 0x10, 0x1, 0x85, 0x1c, 0x1, 0x1, 0x1, 0x2a, 0x1, 0x80, 0x95, 0x1, 0x80, 0xb4, 0x1, 0x2b, 0x3, 0x80, 0xf6, 0x1, 0x81, 0x6a, 0x2, 0x86, 0xe4, 0x2, 0x83, 0x16, 0x1, 0x4, 0x2, 0x83, 0x5, 0x1, 0x80, 0xc6, 0x2, 0x80, 0xcc, 0x1, 0x5, 0x1, 0x81, 0x3a, 0x2, 0x81, 0x62, 0x4, 0x80, 0xae, 0x2, 0x2, 0x2, 0x80, 0xdb, 0x2, 0x41, 0x2, 0x83, 0xbc, 0x2, 0x9, 0x3, 0x8d, 0xe4, 0x1, 0x81, 0xd3, 0x1, 0xa0, 0x74, 0xfc, 0x1, 0x81, 0xe, 0x2, 0x80, 0xe3, 0x1, 0x3, 0x1, 0x81, 0x7e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x80, 0x98, 0x2, 0x80, 0x93, 0x3, 0x80, 0x90, 0x2, 0x80, 0xf9, 0x1, 0xa0, 0x52, 0x66, 0x1, 0x3, 0x2, 0x80, 0xa9, 0x1, 0xc, 0x1, 0x10, 0x1, 0x41, 0x1, 0x8a, 0xf4, 0x2, 0x85, 0xef, 0x2, 0x75, 0x4, 0x7f, 0x3, 0x80, 0x81, 0x2];
immutable ubyte[] unicodeOther_ID_Start = [0xa0, 0x21, 0x18, 0x1, 0x15, 0x1, 0x8f, 0x6c, 0x2];
immutable ubyte[] unicodeHebrew = [0x85, 0x91, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xa0, 0xf5, 0x28, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0xa];
immutable ubyte[] unicodeLisu = [0xa0, 0xa4, 0xd0, 0x30];
immutable ubyte[] unicodeInBlock_Elements = [0xa0, 0x25, 0x80, 0x20];
immutable ubyte[] unicodeUgaritic = [0xa1, 0x3, 0x80, 0x1e, 0x1, 0x1];
immutable ubyte[] unicodeGlagolitic = [0xa0, 0x2c, 0x0, 0x2f, 0x1, 0x2f];
immutable ubyte[] unicodeInMusical_Symbols = [0xa1, 0xd1, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeEgyptian_Hieroglyphs = [0xa1, 0x30, 0x0, 0x84, 0x2f];
immutable ubyte[] unicodeLVT = [0xa0, 0xac, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b];
immutable ubyte[] unicodeInAncient_Greek_Musical_Notation = [0xa1, 0xd2, 0x0, 0x50];
immutable ubyte[] unicodeInArabic_Mathematical_Alphabetic_Symbols = [0xa1, 0xee, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInMeetei_Mayek = [0xa0, 0xab, 0xc0, 0x40];
immutable ubyte[] unicodeMeetei_Mayek = [0xa0, 0xaa, 0xe0, 0x17, 0x80, 0xc9, 0x2e, 0x2, 0xa];
immutable ubyte[] unicodeInGeneral_Punctuation = [0xa0, 0x20, 0x0, 0x70];
immutable ubyte[] unicodeInShavian = [0xa1, 0x4, 0x50, 0x30];
immutable ubyte[] unicodeOther_ID_Continue = [0x80, 0xb7, 0x1, 0x82, 0xcf, 0x1, 0x8f, 0xe1, 0x9, 0x86, 0x68, 0x1];
immutable ubyte[] unicodeInControl_Pictures = [0xa0, 0x24, 0x0, 0x40];
immutable ubyte[] unicodeInGurmukhi = [0x8a, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInLisu = [0xa0, 0xa4, 0xd0, 0x30];
immutable ubyte[] unicodeInDingbats = [0xa0, 0x27, 0x0, 0x80, 0xc0];
immutable ubyte[] unicodeQuotation_Mark = [0x22, 0x1, 0x4, 0x1, 0x80, 0x83, 0x1, 0xf, 0x1, 0x9f, 0x5c, 0x8, 0x19, 0x2, 0x8f, 0xd1, 0x4, 0xd, 0x3, 0xa0, 0xce, 0x21, 0x4, 0x80, 0xbd, 0x1, 0x4, 0x1, 0x5a, 0x2];
immutable ubyte[] unicodeInBuginese = [0x9a, 0x0, 0x20];
immutable ubyte[] unicodeInSyloti_Nagri = [0xa0, 0xa8, 0x0, 0x30];
immutable ubyte[] unicodeInTamil = [0x8b, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeKatakana = [0xa0, 0x30, 0xa1, 0x5a, 0x2, 0x3, 0x80, 0xf0, 0x10, 0x80, 0xd0, 0x2f, 0x1, 0x58, 0xa0, 0xcc, 0xe, 0xa, 0x1, 0x2d, 0xa0, 0xb0, 0x62, 0x1];
immutable ubyte[] unicodeSyloti_Nagri = [0xa0, 0xa8, 0x0, 0x2c];
immutable ubyte[] unicodeInMeetei_Mayek_Extensions = [0xa0, 0xaa, 0xe0, 0x20];
immutable ubyte[] unicodeInKanbun = [0xa0, 0x31, 0x90, 0x10];
immutable ubyte[] unicodeInHebrew = [0x85, 0x90, 0x70];
immutable ubyte[] unicodeInByzantine_Musical_Symbols = [0xa1, 0xd0, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeMalayalam = [0x8d, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7];
immutable ubyte[] unicodeTai_Viet = [0xa0, 0xaa, 0x80, 0x43, 0x18, 0x5];
immutable ubyte[] unicodeShavian = [0xa1, 0x4, 0x50, 0x30];
immutable ubyte[] unicodeOld_Persian = [0xa1, 0x3, 0xa0, 0x24, 0x4, 0xe];
immutable ubyte[] unicodeInTibetan = [0x8f, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInBox_Drawing = [0xa0, 0x25, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInCuneiform = [0xa1, 0x20, 0x0, 0x84, 0x0];
immutable ubyte[] unicodeDash = [0x2d, 0x1, 0x85, 0x5c, 0x1, 0x33, 0x1, 0x8e, 0x41, 0x1, 0x84, 0x5, 0x1, 0x88, 0x9, 0x6, 0x3d, 0x1, 0x27, 0x1, 0xf, 0x1, 0x81, 0x86, 0x1, 0x8c, 0x4, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x81, 0xe0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xa0, 0xcd, 0x90, 0x2, 0x25, 0x1, 0xa, 0x1, 0x80, 0xa9, 0x1];
immutable ubyte[] unicodeAlphabetic = [0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x56, 0x1, 0x2a, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x8, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x28, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x38, 0x1, 0x7, 0xe, 0x66, 0x1, 0x8, 0x4, 0x8, 0x4, 0x3, 0xa, 0x3, 0x2, 0x1, 0x10, 0x30, 0xd, 0x65, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x18, 0x2, 0x13, 0x13, 0x19, 0x47, 0x1, 0x1, 0xb, 0x37, 0x6, 0x6, 0xf, 0x1, 0x3c, 0x1, 0x10, 0x1, 0x3, 0x4, 0xf, 0xd, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0xc, 0x2, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x7, 0x4, 0x1, 0x1, 0x11, 0x6, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x9, 0x1, 0x3, 0x1, 0x2, 0x3, 0x1, 0xf, 0x4, 0x1d, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0x4, 0x2, 0x1, 0x5, 0xd, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x6, 0x1, 0x29, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x1, 0x2, 0x6, 0x4, 0x1e, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x7, 0x1, 0x1, 0x4, 0xd, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x3, 0x1, 0x1, 0x8, 0x1, 0x8, 0x4, 0x16, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x8, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0x7, 0x6, 0x1, 0x33, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x6, 0x1, 0xe, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x4, 0x11, 0x6, 0x10, 0x1, 0x24, 0x43, 0x37, 0x1, 0x1, 0x2, 0x5, 0x10, 0x13, 0x2, 0x4, 0x5, 0x19, 0x7, 0x1, 0xd, 0x2, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x81, 0x4d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x4, 0x1, 0x20, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x6, 0xc, 0x14, 0xc, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x34, 0x2, 0x13, 0xe, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0x9, 0x17, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x36, 0x1c, 0x4, 0x3f, 0x2, 0x14, 0x32, 0x1, 0x58, 0x34, 0x1, 0xf, 0x1, 0x7, 0x34, 0x2a, 0x2, 0x4, 0xa, 0x2c, 0x1, 0xb, 0xe, 0x36, 0x17, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0x80, 0xc0, 0x40, 0x81, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x83, 0x2d, 0x34, 0x87, 0x16, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x2f, 0x1, 0x81, 0xd5, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x84, 0x8d, 0x43, 0x2e, 0x2, 0x81, 0xd, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x5, 0x8, 0x3, 0x19, 0x7, 0x51, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x1c, 0x18, 0x34, 0xc, 0x44, 0x2e, 0x6, 0x3, 0x1, 0xe, 0x21, 0x5, 0x23, 0xd, 0x1d, 0x3, 0x33, 0x1, 0xc, 0xf, 0x1, 0x30, 0x37, 0x9, 0xe, 0x12, 0x17, 0x3, 0x1, 0x5, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0x10, 0x2, 0x4, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x2b, 0x15, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x81, 0x6b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x80, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x81, 0xb, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x80, 0x9e, 0x83, 0x62, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xb7, 0x46, 0x3c, 0x37, 0x17, 0x19, 0x17, 0x33, 0x4d, 0x40, 0x1, 0x4, 0x84, 0xbb, 0x36, 0x89, 0x4a, 0x83, 0x6f, 0x80, 0x91, 0x63, 0x8b, 0x9d, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0xa0, 0x40, 0x60, 0x2, 0xa0, 0x23, 0xfe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x96, 0x34, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeKaithi = [0xa1, 0x10, 0x80, 0x42];
immutable ubyte[] unicodeInSupplementary_Private_Use_Area_A = [0xaf, 0x0, 0x0, 0xa1, 0x0, 0x0];
immutable ubyte[] unicodeInPhonetic_Extensions = [0x9d, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInSupplementary_Private_Use_Area_B = [0xb0, 0x0, 0x0];
immutable ubyte[] unicodeLV = [0xa0, 0xac, 0x0, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1, 0x1b, 0x1];
immutable ubyte[] unicodeOther_Grapheme_Extend = [0x89, 0xbe, 0x1, 0x18, 0x1, 0x81, 0x66, 0x1, 0x18, 0x1, 0x66, 0x1, 0x18, 0x1, 0x80, 0xea, 0x1, 0x12, 0x2, 0x67, 0x1, 0x18, 0x1, 0x77, 0x1, 0xf, 0x1, 0x92, 0x2c, 0x2, 0x90, 0x20, 0x2, 0xa0, 0xcf, 0x6e, 0x2, 0xa0, 0xd1, 0xc5, 0x1, 0x8, 0x5];
immutable ubyte[] unicodeInEnclosed_Alphanumerics = [0xa0, 0x24, 0x60, 0x80, 0xa0];
immutable ubyte[] unicodeInNumber_Forms = [0xa0, 0x21, 0x50, 0x40];
immutable ubyte[] unicodeInCombining_Diacritical_Marks_for_Symbols = [0xa0, 0x20, 0xd0, 0x30];
immutable ubyte[] unicodeInDeseret = [0xa1, 0x4, 0x0, 0x50];
immutable ubyte[] unicodeXID_Start = [0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x80, 0x81, 0x5, 0x1, 0x2, 0x3, 0x3, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x8, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x1, 0xd, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x1, 0xa, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x81, 0x4d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0x80, 0xc0, 0x40, 0x81, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x8a, 0x77, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x82, 0x26, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x84, 0x8d, 0x43, 0x2e, 0x2, 0x81, 0xd, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x23, 0x1d, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x80, 0x8b, 0x6, 0x80, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x77, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x38, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x81, 0xb, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x80, 0x9e, 0x83, 0x62, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x84, 0xbb, 0x2b, 0x89, 0x55, 0x83, 0x6f, 0x80, 0x91, 0x63, 0x8b, 0x9d, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x1, 0x42, 0xd, 0xa0, 0x40, 0x60, 0x2, 0xa0, 0x23, 0xfe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x96, 0x34, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeTibetan = [0x8f, 0x0, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0x7, 0x4, 0x2];
immutable ubyte[] unicodeInInscriptional_Pahlavi = [0xa1, 0xb, 0x60, 0x20];
immutable ubyte[] unicodeInHangul_Jamo = [0x91, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeImperial_Aramaic = [0xa1, 0x8, 0x40, 0x16, 0x1, 0x9];
immutable ubyte[] unicodeInMahjong_Tiles = [0xa1, 0xf0, 0x0, 0x30];
immutable ubyte[] unicodeHan = [0xa0, 0x2e, 0x80, 0x1a, 0x1, 0x59, 0xc, 0x80, 0xd6, 0x2f, 0x1, 0x1, 0x1, 0x19, 0x9, 0xe, 0x4, 0x83, 0xc4, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0xa0, 0x59, 0x33, 0x81, 0x6e, 0x2, 0x6a, 0xa1, 0x5, 0x26, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeDeseret = [0xa1, 0x4, 0x0, 0x50];
immutable ubyte[] unicodeInEthiopic = [0x92, 0x0, 0x81, 0x80];
immutable ubyte[] unicodeLl = [0x61, 0x1a, 0x3a, 0x1, 0x29, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x1b, 0x80, 0xc1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x3, 0x3, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0x97, 0x78, 0x2c, 0x3f, 0xd, 0x1, 0x22, 0x66, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0x81, 0x12, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x35, 0x1, 0x8a, 0xab, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x6, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xa0, 0x79, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0xa0, 0x53, 0x5, 0x7, 0xc, 0x5, 0x84, 0x29, 0x1a, 0x84, 0xcd, 0x28, 0xa0, 0xcf, 0xca, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1];
immutable ubyte[] unicodeLm = [0x82, 0xb0, 0x12, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x80, 0x85, 0x1, 0x5, 0x1, 0x81, 0xde, 0x1, 0x80, 0xe6, 0x1, 0x80, 0xa4, 0x2, 0x81, 0xd, 0x2, 0x4, 0x1, 0x1f, 0x1, 0x9, 0x1, 0x3, 0x1, 0x81, 0x48, 0x1, 0x84, 0xd4, 0x1, 0x7f, 0x1, 0x82, 0x35, 0x1, 0x86, 0xda, 0x1, 0x6b, 0x1, 0x82, 0x63, 0x1, 0x81, 0xd0, 0x6, 0x80, 0xae, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x82, 0xb1, 0x1, 0xd, 0x1, 0x10, 0xd, 0x8b, 0xdf, 0x2, 0x80, 0xf1, 0x1, 0x80, 0xbf, 0x1, 0x81, 0xd5, 0x1, 0x2b, 0x5, 0x5, 0x1, 0x61, 0x2, 0x5d, 0x3, 0xa0, 0x6f, 0x16, 0x1, 0x84, 0xe2, 0x6, 0x81, 0xe, 0x1, 0x72, 0x1, 0x80, 0x97, 0x9, 0x50, 0x1, 0x17, 0x1, 0x6f, 0x2, 0x81, 0xd5, 0x1, 0x80, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0xa0, 0x54, 0x7b, 0x1, 0x2d, 0x2, 0xa0, 0x6f, 0xf3, 0xd];
immutable ubyte[] unicodeInLimbu = [0x99, 0x0, 0x50];
immutable ubyte[] unicodeMc = [0x89, 0x3, 0x1, 0x37, 0x1, 0x2, 0x3, 0x8, 0x4, 0x1, 0x2, 0x32, 0x2, 0x3a, 0x3, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x2b, 0x1, 0x3a, 0x3, 0x42, 0x1, 0x3a, 0x3, 0x8, 0x1, 0x1, 0x2, 0x35, 0x2, 0x3a, 0x1, 0x1, 0x1, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x66, 0x2, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3d, 0x4, 0x3d, 0x2, 0x3a, 0x1, 0x1, 0x5, 0x2, 0x2, 0x1, 0x2, 0x9, 0x2, 0x2b, 0x2, 0x3a, 0x3, 0x5, 0x3, 0x1, 0x3, 0xa, 0x1, 0x2a, 0x2, 0x4b, 0x3, 0x6, 0x8, 0x12, 0x2, 0x81, 0x4a, 0x2, 0x3f, 0x1, 0x80, 0xab, 0x2, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x19, 0x2, 0xa, 0x3, 0x2, 0x7, 0x15, 0x2, 0x2, 0x6, 0x2, 0x1, 0xa, 0x3, 0x87, 0x19, 0x1, 0x7, 0x8, 0x1, 0x2, 0x81, 0x5a, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x77, 0x11, 0x7, 0x2, 0x4f, 0x3, 0x39, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0x80, 0x91, 0x1, 0x30, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x2, 0x3d, 0x1, 0x1e, 0x1, 0x4, 0x2, 0x2, 0x1, 0x1, 0x2, 0x39, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x30, 0x8, 0x8, 0x2, 0x80, 0xab, 0x1, 0x10, 0x2, 0x93, 0x3a, 0x2, 0xa0, 0x77, 0xf3, 0x2, 0x2, 0x1, 0x58, 0x2, 0x32, 0x10, 0x80, 0x8e, 0x2, 0x2f, 0x1, 0x30, 0x2, 0x4, 0x2, 0x1, 0x4, 0x6e, 0x2, 0x2, 0x2, 0x18, 0x1, 0x2d, 0x1, 0x6f, 0x1, 0x2, 0x2, 0x5, 0x1, 0x80, 0xed, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0xa0, 0x64, 0x13, 0x1, 0x1, 0x1, 0x7f, 0x1, 0x2d, 0x3, 0x4, 0x2, 0x73, 0x1, 0x55, 0x1, 0x30, 0x3, 0x9, 0x2, 0x84, 0xeb, 0x1, 0x1, 0x2, 0x6, 0x1, 0xa0, 0x58, 0x9a, 0x2e, 0xa0, 0x61, 0xe6, 0x2, 0x6, 0x6];
immutable ubyte[] unicodeLo = [0x80, 0xaa, 0x1, 0xf, 0x1, 0x81, 0x0, 0x1, 0x4, 0x4, 0x80, 0xd0, 0x1, 0x83, 0x3b, 0x1b, 0x5, 0x3, 0x2d, 0x20, 0x1, 0xa, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0x18, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x15, 0x16, 0x2a, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0x10, 0x6, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x6, 0x3b, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x17, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x41, 0x2b, 0x2, 0x81, 0x4c, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x15, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x28, 0x1, 0x43, 0x23, 0x1, 0x34, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x80, 0xb0, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x1e, 0x71, 0x4, 0x1, 0x4, 0x3, 0x2, 0x84, 0x3e, 0x4, 0x8b, 0xf7, 0x38, 0x18, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x82, 0x27, 0x1, 0x35, 0x1, 0x4, 0x56, 0x8, 0x1, 0x1, 0x5a, 0x4, 0x1, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x15, 0x1, 0x84, 0x77, 0x43, 0x28, 0x8, 0x81, 0xc, 0x4, 0x10, 0xa, 0x2, 0x42, 0x1, 0x31, 0x46, 0x81, 0x15, 0x7, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x4d, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x10, 0x1, 0x6, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x2, 0x3, 0xb, 0x7, 0x1, 0xe, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x23, 0x1d, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x43, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x81, 0x6b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x80, 0x87, 0x69, 0xa, 0x1, 0x2d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x81, 0x85, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x11, 0x1, 0x8, 0x36, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x80, 0x80, 0x4e, 0x83, 0x62, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x84, 0xbb, 0x2b, 0x89, 0x55, 0x83, 0x6f, 0x8c, 0x91, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x1, 0xa0, 0x40, 0xaf, 0x2, 0xa0, 0x3d, 0xfe, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeMe = [0x84, 0x88, 0x2, 0x9c, 0x53, 0x4, 0x1, 0x3, 0xa0, 0x85, 0x8b, 0x3];
immutable ubyte[] unicodeIDS_Binary_Operator = [0xa0, 0x2f, 0xf0, 0x2, 0x2, 0x8];
immutable ubyte[] unicodePattern_Syntax = [0x21, 0xf, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x4, 0x22, 0x7, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x4, 0x1, 0x4, 0x1, 0x3, 0x1, 0x17, 0x1, 0x1f, 0x1, 0x9f, 0x18, 0x18, 0x8, 0xf, 0x2, 0x13, 0x1, 0xa, 0x81, 0x31, 0x82, 0xd0, 0x80, 0xa0, 0x82, 0x76, 0x1e, 0x84, 0x6c, 0x82, 0x0, 0x80, 0x80, 0x81, 0x81, 0x3, 0x4, 0x19, 0xf, 0x1, 0xa0, 0xcd, 0xd, 0x2, 0x81, 0x5, 0x2];
immutable ubyte[] unicodeLt = [0x81, 0xc5, 0x1, 0x2, 0x1, 0x2, 0x1, 0x26, 0x1, 0x9d, 0x95, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x1, 0xf, 0x1, 0x2f, 0x1];
immutable ubyte[] unicodeInKhmer = [0x97, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeNoncharacter_Code_Point = [0xa0, 0xfd, 0xd0, 0x20, 0x82, 0xe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe, 0x2, 0xa0, 0xff, 0xfe];
immutable ubyte[] unicodeLu = [0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0x21, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0x8b, 0x49, 0x26, 0x1, 0x1, 0x5, 0x1, 0x8d, 0x32, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0x81, 0x6, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x3d, 0x1, 0x8a, 0x7c, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xa0, 0x79, 0x4d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa0, 0x57, 0x76, 0x1a, 0x84, 0xc5, 0x28, 0xa0, 0xcf, 0xd8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1];
immutable ubyte[] unicodeCarian = [0xa1, 0x2, 0xa0, 0x31];
immutable ubyte[] unicodeInOld_Turkic = [0xa1, 0xc, 0x0, 0x50];
immutable ubyte[] unicodeInKaithi = [0xa1, 0x10, 0x80, 0x50];
immutable ubyte[] unicodeMeroitic_Cursive = [0xa1, 0x9, 0xa0, 0x18, 0x6, 0x2];
immutable ubyte[] unicodeInSupplemental_Arrows_A = [0xa0, 0x27, 0xf0, 0x10];
immutable ubyte[] unicodeInSupplemental_Arrows_B = [0xa0, 0x29, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInLinear_B_Ideograms = [0xa1, 0x0, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInTagbanwa = [0x97, 0x60, 0x20];
immutable ubyte[] unicodeMn = [0x83, 0x0, 0x70, 0x81, 0x13, 0x5, 0x81, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x80, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x82, 0xbf, 0x3, 0x83, 0xb2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x80, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0x80, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x80, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x80, 0xcb, 0x27, 0x15, 0x4, 0x82, 0xd0, 0xd, 0x4, 0x1, 0x3, 0xc, 0x8b, 0xfe, 0x3, 0x80, 0x8d, 0x1, 0x60, 0x20, 0x82, 0x2a, 0x4, 0x6b, 0x2, 0xa0, 0x75, 0xd4, 0x1, 0x4, 0xa, 0x21, 0x1, 0x50, 0x2, 0x81, 0x10, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x80, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0x80, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0xa0, 0x4f, 0x30, 0x1, 0x82, 0xe1, 0x10, 0x10, 0x7, 0x83, 0xd6, 0x1, 0x88, 0x3, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x85, 0xc1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x84, 0xec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0xa0, 0x58, 0xd7, 0x4, 0xa0, 0x61, 0xd4, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x80, 0x94, 0x3, 0xac, 0x2e, 0xbb, 0x80, 0xf0];
immutable ubyte[] unicodeNd = [0x30, 0xa, 0x86, 0x26, 0xa, 0x80, 0x86, 0xa, 0x80, 0xc6, 0xa, 0x81, 0x9c, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x80, 0xe0, 0xa, 0x76, 0xa, 0x46, 0xa, 0x81, 0x16, 0xa, 0x46, 0xa, 0x87, 0x46, 0xa, 0x26, 0xa, 0x81, 0x2c, 0xa, 0x80, 0x80, 0xa, 0x80, 0xa6, 0xa, 0x6, 0xa, 0x80, 0xb6, 0xa, 0x56, 0xa, 0x80, 0x86, 0xa, 0x6, 0xa, 0xa0, 0x89, 0xc6, 0xa, 0x82, 0xa6, 0xa, 0x26, 0xa, 0x80, 0xc6, 0xa, 0x76, 0xa, 0x81, 0x96, 0xa, 0xa0, 0x53, 0x16, 0xa, 0x85, 0x86, 0xa, 0x8b, 0xbc, 0xa, 0x80, 0x80, 0xa, 0x3c, 0xa, 0x80, 0x90, 0xa, 0x84, 0xe6, 0xa, 0xa0, 0xc1, 0x4, 0x32];
immutable ubyte[] unicodeBamum = [0xa0, 0xa6, 0xa0, 0x58, 0xa0, 0xc1, 0x8, 0x82, 0x39];
immutable ubyte[] unicodeJavanese = [0xa0, 0xa9, 0x80, 0x4e, 0x1, 0xb, 0x4, 0x2];
immutable ubyte[] unicodeTifinagh = [0xa0, 0x2d, 0x30, 0x38, 0x7, 0x2, 0xe, 0x1];
immutable ubyte[] unicodeInTai_Tham = [0x9a, 0x20, 0x80, 0x90];
immutable ubyte[] unicodeDeprecated = [0x81, 0x49, 0x1, 0x85, 0x29, 0x1, 0x89, 0x3, 0x1, 0x1, 0x1, 0x88, 0x29, 0x2, 0x88, 0xc5, 0x6, 0x82, 0xb9, 0x2, 0xad, 0xdc, 0xd6, 0x1, 0x1e, 0x60];
immutable ubyte[] unicodeInHanunoo = [0x97, 0x20, 0x20];
immutable ubyte[] unicodeNl = [0x96, 0xee, 0x3, 0x8a, 0x6f, 0x23, 0x2, 0x4, 0x8e, 0x7e, 0x1, 0x19, 0x9, 0xe, 0x3, 0xa0, 0x76, 0xab, 0xa, 0xa0, 0x5a, 0x50, 0x35, 0x81, 0xcc, 0x1, 0x8, 0x1, 0x80, 0x86, 0x5, 0xa0, 0x20, 0x2a, 0x63];
immutable ubyte[] unicodeNo = [0x80, 0xb2, 0x2, 0x5, 0x1, 0x2, 0x3, 0x89, 0x35, 0x6, 0x81, 0x78, 0x6, 0x78, 0x3, 0x80, 0x85, 0x7, 0x80, 0xf1, 0x6, 0x81, 0xb4, 0xa, 0x84, 0x35, 0x14, 0x84, 0x73, 0xa, 0x81, 0xe0, 0x1, 0x86, 0x95, 0x1, 0x3, 0x6, 0x6, 0xa, 0x80, 0xc6, 0x10, 0x29, 0x1, 0x82, 0xd6, 0x3c, 0x4e, 0x16, 0x82, 0x76, 0x1e, 0x85, 0x69, 0x1, 0x84, 0x94, 0x4, 0x80, 0x8a, 0xa, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0xa0, 0x75, 0x70, 0x6, 0xa0, 0x58, 0xd1, 0x2d, 0x41, 0x4, 0x11, 0x1, 0x81, 0x95, 0x4, 0x85, 0x34, 0x8, 0x80, 0xb6, 0x6, 0x81, 0x24, 0x8, 0x35, 0x2, 0x80, 0xd9, 0x8, 0x18, 0x8, 0x82, 0xe0, 0x1f, 0x81, 0xd3, 0x14, 0xa0, 0xc2, 0xfa, 0x12, 0x9d, 0x8e, 0xb];
immutable ubyte[] unicodeInOriya = [0x8b, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeCased = [0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x80, 0xc3, 0x1, 0x4, 0x4, 0x80, 0xd0, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2a, 0x4, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x8, 0x80, 0x9e, 0x9, 0x26, 0xa, 0x27, 0x8b, 0x18, 0x26, 0x1, 0x1, 0x5, 0x1, 0x8c, 0x32, 0x80, 0xc0, 0x40, 0x81, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x6, 0x4, 0x1, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x20, 0x3, 0x2, 0x83, 0x31, 0x34, 0x87, 0x16, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xa0, 0x79, 0x12, 0x2e, 0x12, 0x18, 0x80, 0x8a, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x3, 0xa0, 0x53, 0x5, 0x7, 0xc, 0x5, 0x84, 0x9, 0x1a, 0x6, 0x1a, 0x84, 0xa5, 0x50, 0xa0, 0xcf, 0xb0, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8];
immutable ubyte[] unicodeInSinhala = [0x8d, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInGeorgian = [0x90, 0xa0, 0x60];
immutable ubyte[] unicodeInEthiopic_Extended = [0xa0, 0x2d, 0x80, 0x60];
immutable ubyte[] unicodeInEnclosed_Ideographic_Supplement = [0xa1, 0xf2, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInPhags_pa = [0xa0, 0xa8, 0x40, 0x40];
immutable ubyte[] unicodeInMiscellaneous_Symbols = [0xa0, 0x26, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInDevanagari_Extended = [0xa0, 0xa8, 0xe0, 0x20];
immutable ubyte[] unicodeCase_Ignorable = [0x27, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x47, 0x1, 0x4, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x2, 0x81, 0xf7, 0x80, 0xc0, 0x4, 0x2, 0x4, 0x1, 0x9, 0x2, 0x1, 0x1, 0x80, 0xfb, 0x7, 0x80, 0xcf, 0x1, 0x37, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2c, 0x1, 0xb, 0x5, 0xb, 0xb, 0x25, 0x1, 0xa, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0xa, 0x1, 0x4, 0x21, 0x1, 0x1, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x4, 0x1, 0x1b, 0x18, 0x2b, 0x3, 0x80, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0xd, 0x1, 0xf, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xb, 0x9, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0x9, 0x1, 0x1, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x5e, 0x1, 0x82, 0x60, 0x3, 0x83, 0xb2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x3, 0x1, 0x5, 0x1, 0x2d, 0x3, 0x35, 0x1, 0x65, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0x80, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x27, 0x1, 0x58, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x40, 0x6, 0x52, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0xd, 0x1, 0x22, 0x4c, 0x15, 0x4, 0x81, 0xbd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0xc, 0x5, 0x8, 0x2, 0xa, 0x1, 0x2, 0x1, 0x2, 0x5, 0x31, 0x5, 0x5, 0x6, 0x1, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0x21, 0x8b, 0x8b, 0x2, 0x71, 0x3, 0x7d, 0x1, 0xf, 0x1, 0x60, 0x20, 0x2f, 0x1, 0x81, 0xd5, 0x1, 0x24, 0x4, 0x3, 0x5, 0x5, 0x1, 0x5d, 0x6, 0x5d, 0x3, 0xa0, 0x6f, 0x16, 0x1, 0x84, 0xe2, 0x6, 0x81, 0xe, 0x1, 0x62, 0x4, 0x1, 0xa, 0x1, 0x1, 0x1f, 0x1, 0x50, 0x2, 0xe, 0x22, 0x4e, 0x1, 0x17, 0x3, 0x6d, 0x2, 0x8, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x80, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x12, 0x1, 0x59, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x23, 0x1, 0x3f, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1b, 0x1, 0xe, 0x2, 0x5, 0x2, 0x1, 0x1, 0x80, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0xa0, 0x4f, 0x30, 0x1, 0x80, 0x93, 0x10, 0x82, 0x3e, 0x10, 0x3, 0x1, 0xc, 0x7, 0x2b, 0x1, 0x2, 0x1, 0x80, 0xa9, 0x1, 0x7, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x15, 0x3, 0x82, 0x1, 0x1, 0x88, 0x3, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x85, 0xc1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x42, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x84, 0xec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0xa0, 0x58, 0xd7, 0x11, 0xa0, 0x61, 0xc7, 0x3, 0x9, 0x10, 0x2, 0x7, 0x1e, 0x4, 0x80, 0x94, 0x3, 0xac, 0x2d, 0xbc, 0x1, 0x1e, 0x60, 0x80, 0x80, 0x80, 0xf0];
immutable ubyte[] unicodePc = [0x5f, 0x1, 0x9f, 0xdf, 0x2, 0x13, 0x1, 0xa0, 0xdd, 0xde, 0x2, 0x18, 0x3, 0x80, 0xef, 0x1];
immutable ubyte[] unicodeInCyrillic_Supplement = [0x85, 0x0, 0x30];
immutable ubyte[] unicodePd = [0x2d, 0x1, 0x85, 0x5c, 0x1, 0x33, 0x1, 0x8e, 0x41, 0x1, 0x84, 0x5, 0x1, 0x88, 0x9, 0x6, 0x8e, 0x1, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x81, 0xe0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xa0, 0xcd, 0x90, 0x2, 0x25, 0x1, 0xa, 0x1, 0x80, 0xa9, 0x1];
immutable ubyte[] unicodePe = [0x29, 0x1, 0x33, 0x1, 0x1f, 0x1, 0x8e, 0xbd, 0x1, 0x1, 0x1, 0x87, 0x5e, 0x1, 0x89, 0xa9, 0x1, 0x37, 0x1, 0xf, 0x1, 0x82, 0x9b, 0x1, 0x84, 0x3e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0x94, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x84, 0x25, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0xdf, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0xa0, 0xcd, 0x1f, 0x1, 0x80, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0xaa, 0x1, 0x33, 0x1, 0x1f, 0x1, 0x2, 0x1, 0x2, 0x1];
immutable ubyte[] unicodeHanunoo = [0x97, 0x20, 0x15];
immutable ubyte[] unicodePf = [0x80, 0xbb, 0x1, 0x9f, 0x5d, 0x1, 0x3, 0x1, 0x1c, 0x1, 0x8d, 0xc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1];
immutable ubyte[] unicodeInGujarati = [0x8a, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInCurrency_Symbols = [0xa0, 0x20, 0xa0, 0x30];
immutable ubyte[] unicodePi = [0x80, 0xab, 0x1, 0x9f, 0x6c, 0x1, 0x2, 0x2, 0x2, 0x1, 0x19, 0x1, 0x8d, 0xc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1];
immutable ubyte[] unicodeInTransport_And_Map_Symbols = [0xa1, 0xf6, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeSinhala = [0x8d, 0x82, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3];
immutable ubyte[] unicodeSamaritan = [0x88, 0x0, 0x2e, 0x2, 0xf];
immutable ubyte[] unicodeInLatin_1_Supplement = [0x80, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInCarian = [0xa1, 0x2, 0xa0, 0x40];
immutable ubyte[] unicodeInMeroitic_Hieroglyphs = [0xa1, 0x9, 0x80, 0x20];
immutable ubyte[] unicodeLycian = [0xa1, 0x2, 0x80, 0x1d];
immutable ubyte[] unicodePo = [0x21, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x44, 0x1, 0x5, 0x1, 0xe, 0x2, 0x7, 0x1, 0x82, 0xbe, 0x1, 0x8, 0x1, 0x81, 0xd2, 0x6, 0x29, 0x1, 0x36, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2c, 0x2, 0x14, 0x2, 0x1, 0x2, 0xd, 0x1, 0x2, 0x2, 0x4a, 0x4, 0x66, 0x1, 0x2b, 0xe, 0x80, 0xe9, 0x3, 0x36, 0xf, 0x1f, 0x1, 0x81, 0x5, 0x2, 0xa, 0x1, 0x81, 0x7f, 0x1, 0x83, 0x3, 0x1, 0x5a, 0x1, 0xa, 0x2, 0x80, 0xa8, 0xf, 0x1, 0x1, 0x70, 0x1, 0x4a, 0x5, 0x4, 0x2, 0x6f, 0x6, 0x80, 0xab, 0x1, 0x82, 0x64, 0x9, 0x83, 0x4, 0x2, 0x7c, 0x3, 0x47, 0x2, 0x80, 0x9d, 0x3, 0x1, 0x3, 0x25, 0x6, 0x1, 0x4, 0x81, 0x39, 0x2, 0x80, 0xd8, 0x2, 0x80, 0x80, 0x7, 0x1, 0x6, 0x80, 0xac, 0x7, 0x80, 0x9b, 0x4, 0x3b, 0x5, 0x3e, 0x2, 0x40, 0x8, 0xb, 0x1, 0x83, 0x42, 0x2, 0x8, 0x8, 0x8, 0x9, 0x2, 0x4, 0x2, 0x3, 0x3, 0xb, 0x1, 0x1, 0x1, 0xa, 0x8c, 0x9a, 0x4, 0x1, 0x2, 0x70, 0x1, 0x80, 0x8f, 0x2, 0x4, 0x3, 0x2, 0x1, 0x2, 0x9, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0xa, 0x5, 0x1, 0xa, 0x81, 0xc7, 0x3, 0x39, 0x1, 0x80, 0xbd, 0x1, 0xa0, 0x74, 0x2, 0x2, 0x81, 0xd, 0x3, 0x63, 0x1, 0xa, 0x1, 0x73, 0x6, 0x81, 0x7c, 0x4, 0x56, 0x2, 0x28, 0x3, 0x33, 0x2, 0x2f, 0x1, 0x61, 0xd, 0x10, 0x2, 0x7c, 0x4, 0x7e, 0x2, 0x10, 0x2, 0x80, 0xf9, 0x1, 0xa0, 0x52, 0x24, 0x7, 0x2, 0x1, 0x16, 0x1, 0x14, 0x2, 0x2, 0x4, 0x3, 0x3, 0x1, 0x4, 0x7, 0x3, 0x6, 0x1, 0x1, 0x2, 0x80, 0x95, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x24, 0x1, 0x2, 0x2, 0x81, 0x9a, 0x3, 0x82, 0x9c, 0x1, 0x30, 0x1, 0x84, 0x86, 0x1, 0x80, 0xc7, 0x1, 0x1f, 0x1, 0x81, 0x10, 0x9, 0x26, 0x1, 0x80, 0xb9, 0x7, 0x85, 0x7, 0x7, 0x6d, 0x2, 0x1, 0x4, 0x7e, 0x4, 0x80, 0x81, 0x4, 0x92, 0xa7, 0x4];
immutable ubyte[] unicodeInKayah_Li = [0xa0, 0xa9, 0x0, 0x30];
immutable ubyte[] unicodeInDomino_Tiles = [0xa1, 0xf0, 0x30, 0x70];
immutable ubyte[] unicodePs = [0x28, 0x1, 0x32, 0x1, 0x1f, 0x1, 0x8e, 0xbe, 0x1, 0x1, 0x1, 0x87, 0x5e, 0x1, 0x89, 0x7e, 0x1, 0x3, 0x1, 0x26, 0x1, 0x37, 0x1, 0xf, 0x1, 0x82, 0x9b, 0x1, 0x84, 0x3e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0x94, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x84, 0x25, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0xdf, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0xa0, 0xcd, 0x20, 0x1, 0x80, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0xaa, 0x1, 0x32, 0x1, 0x1f, 0x1, 0x3, 0x1, 0x2, 0x1];
immutable ubyte[] unicodeInMyanmar = [0x90, 0x0, 0x80, 0xa0];
immutable ubyte[] unicodeInKannada = [0x8c, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInBalinese = [0x9b, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeLepcha = [0x9c, 0x0, 0x38, 0x3, 0xf, 0x3, 0x3];
immutable ubyte[] unicodeKayah_Li = [0xa0, 0xa9, 0x0, 0x30];
immutable ubyte[] unicodeNko = [0x87, 0xc0, 0x3b];
immutable ubyte[] unicodeInHangul_Jamo_Extended_A = [0xa0, 0xa9, 0x60, 0x20];
immutable ubyte[] unicodeInCuneiform_Numbers_and_Punctuation = [0xa1, 0x24, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInLao = [0x8e, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInNKo = [0x87, 0xc0, 0x40];
immutable ubyte[] unicodeInHangul_Jamo_Extended_B = [0xa0, 0xd7, 0xb0, 0x50];
immutable ubyte[] unicodePhags_Pa = [0xa0, 0xa8, 0x40, 0x38];
immutable ubyte[] unicodeJoin_Control = [0xa0, 0x20, 0xc, 0x2];
immutable ubyte[] unicodeOther_Math = [0x5e, 0x1, 0x83, 0x71, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x2, 0x9c, 0x20, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x20, 0x4, 0x18, 0x2, 0xe, 0x2, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0x4, 0x5, 0x5, 0x4b, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x5, 0x2, 0x2, 0x4, 0x2, 0x4, 0x12, 0x2, 0x2, 0x1, 0x1, 0x1, 0x7, 0x1, 0x1, 0x6, 0x2, 0x81, 0xce, 0x2, 0x1, 0x1, 0x18, 0x1, 0x11, 0x1, 0x81, 0xbd, 0x2, 0xc, 0x9, 0x5, 0x5, 0x5, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0x18, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x2, 0x81, 0x56, 0x2, 0x1f, 0xa, 0x81, 0x93, 0x16, 0x3f, 0x4, 0x20, 0x2, 0xa0, 0xd4, 0x63, 0x1, 0x1, 0x1, 0x4, 0x1, 0x80, 0xd3, 0x1, 0x1, 0x1, 0xa0, 0xd4, 0xc1, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x96, 0x0, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11];
immutable ubyte[] unicodeCypriot = [0xa1, 0x8, 0x0, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x1];
immutable ubyte[] unicodeTamil = [0x8b, 0x82, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15];
immutable ubyte[] unicodeMyanmar = [0x90, 0x0, 0x80, 0xa0, 0xa0, 0x99, 0xc0, 0x1c];
immutable ubyte[] unicodeInLatin_Extended_A = [0x81, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInAegean_Numbers = [0xa1, 0x1, 0x0, 0x40];
immutable ubyte[] unicodeUppercase = [0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x81, 0x21, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0x8b, 0x49, 0x26, 0x1, 0x1, 0x5, 0x1, 0x8d, 0x32, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0x81, 0x6, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x1a, 0x10, 0x13, 0x1, 0x83, 0x32, 0x1a, 0x87, 0x30, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xa0, 0x79, 0x4d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa0, 0x57, 0x76, 0x1a, 0x84, 0xc5, 0x28, 0xa0, 0xcf, 0xd8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1];
immutable ubyte[] unicodeSc = [0x24, 0x1, 0x7d, 0x4, 0x84, 0xe9, 0x1, 0x7b, 0x1, 0x83, 0xe6, 0x2, 0x7, 0x1, 0x80, 0xf5, 0x1, 0x81, 0x7, 0x1, 0x82, 0x45, 0x1, 0x89, 0x9b, 0x1, 0x88, 0xc4, 0x1b, 0xa0, 0x87, 0x7d, 0x1, 0xa0, 0x55, 0xc3, 0x1, 0x6c, 0x1, 0x80, 0x9a, 0x1, 0x80, 0xdb, 0x2, 0x3, 0x2];
immutable ubyte[] unicodeInLatin_Extended_B = [0x81, 0x80, 0x80, 0xd0];
immutable ubyte[] unicodeKannada = [0x8c, 0x82, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2];
immutable ubyte[] unicodeInLatin_Extended_C = [0xa0, 0x2c, 0x60, 0x20];
immutable ubyte[] unicodeInLatin_Extended_D = [0xa0, 0xa7, 0x20, 0x80, 0xe0];
immutable ubyte[] unicodeTelugu = [0x8c, 0x1, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8];
immutable ubyte[] unicodeInPhoenician = [0xa1, 0x9, 0x0, 0x20];
immutable ubyte[] unicodeInCyrillic_Extended_A = [0xa0, 0x2d, 0xe0, 0x20];
immutable ubyte[] unicodeInCyrillic_Extended_B = [0xa0, 0xa6, 0x40, 0x60];
immutable ubyte[] unicodeCham = [0xa0, 0xaa, 0x0, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x4];
immutable ubyte[] unicodeSk = [0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x3, 0x1, 0x82, 0x9, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0xe, 0x2, 0x9c, 0x37, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0x90, 0x9c, 0x2, 0xa0, 0x76, 0x63, 0x17, 0x9, 0x2, 0x67, 0x2, 0xa0, 0x54, 0x27, 0x10, 0x83, 0x7c, 0x1, 0x1, 0x1, 0x80, 0xa2, 0x1];
immutable ubyte[] unicodeSm = [0x2b, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x82, 0xfe, 0x1, 0x82, 0xf, 0x3, 0x9a, 0x3b, 0x1, 0xd, 0x1, 0x27, 0x3, 0xd, 0x3, 0x80, 0x8b, 0x1, 0x27, 0x5, 0x6, 0x1, 0x44, 0x5, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x81, 0xc, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x81, 0xd5, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x81, 0x50, 0x5, 0x2, 0x1f, 0xa, 0x10, 0x81, 0x0, 0x80, 0x83, 0x16, 0x3f, 0x4, 0x20, 0x2, 0x81, 0x2, 0x30, 0x15, 0x2, 0x6, 0xa0, 0xcf, 0xdc, 0x1, 0x83, 0x38, 0x1, 0x1, 0x3, 0x80, 0xa4, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x80, 0x83, 0x1, 0x6, 0x4, 0xa0, 0xd6, 0xd4, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x97, 0x2c, 0x2];
immutable ubyte[] unicodeInLycian = [0xa1, 0x2, 0x80, 0x20];
immutable ubyte[] unicodePattern_White_Space = [0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x9f, 0x88, 0x2, 0x18, 0x2];
immutable ubyte[] unicodeInCJK_Strokes = [0xa0, 0x31, 0xc0, 0x30];
immutable ubyte[] unicodeInAncient_Greek_Numbers = [0xa1, 0x1, 0x40, 0x50];
immutable ubyte[] unicodeInCypriot_Syllabary = [0xa1, 0x8, 0x0, 0x40];
immutable ubyte[] unicodeSo = [0x80, 0xa6, 0x1, 0x2, 0x1, 0x4, 0x1, 0x1, 0x1, 0x83, 0xd1, 0x1, 0x81, 0x8b, 0x2, 0x80, 0xce, 0x1, 0xa, 0x1, 0x13, 0x2, 0x80, 0xf7, 0x1, 0x82, 0x3, 0x1, 0x81, 0x75, 0x1, 0x80, 0x82, 0x6, 0x1, 0x1, 0x80, 0x84, 0x1, 0x80, 0xf9, 0x1, 0x81, 0x87, 0x3, 0xf, 0x1, 0x1, 0x3, 0x2, 0x6, 0x14, 0x1, 0x1, 0x1, 0x1, 0x1, 0x80, 0x85, 0x8, 0x1, 0x6, 0x1, 0x2, 0x5, 0x4, 0x80, 0xc5, 0x2, 0x82, 0xf0, 0xa, 0x85, 0xa6, 0x1, 0x80, 0x9d, 0x22, 0x81, 0x61, 0xa, 0x9, 0x9, 0x85, 0x83, 0x2, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0xe, 0x1, 0x1, 0x2, 0x1, 0x1, 0x45, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x81, 0xc, 0x8, 0x4, 0x14, 0x2, 0x7, 0x2, 0x51, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x12, 0xc, 0x27, 0x19, 0xb, 0x51, 0x4e, 0x16, 0x80, 0xb7, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x80, 0x90, 0x1, 0x67, 0x2c, 0x2c, 0x40, 0x81, 0x0, 0x82, 0x0, 0x30, 0x15, 0x2, 0x9, 0xa, 0x81, 0x8b, 0x6, 0x81, 0x95, 0x1a, 0x1, 0x59, 0xc, 0x80, 0xd6, 0x1a, 0xc, 0x8, 0x1, 0xd, 0x2, 0xc, 0x1, 0x15, 0x2, 0x6, 0x2, 0x81, 0x50, 0x2, 0x4, 0xa, 0x20, 0x24, 0x1c, 0x1f, 0xb, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0x3f, 0x1, 0x81, 0x0, 0x99, 0xc0, 0x40, 0xa0, 0x56, 0x90, 0x37, 0x83, 0x61, 0x4, 0xa, 0x2, 0x1, 0x1, 0x82, 0x3d, 0x3, 0xa0, 0x53, 0x83, 0x1, 0x81, 0xe6, 0x1, 0x3, 0x1, 0x4, 0x2, 0xd, 0x2, 0x81, 0x39, 0x9, 0x39, 0x11, 0x6, 0xc, 0x34, 0x2d, 0xa0, 0xce, 0x3, 0x80, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x5, 0x3, 0x16, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0x80, 0xba, 0x57, 0x9c, 0xa9, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x30, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0x80, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0x80, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x80, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74];
immutable ubyte[] unicodeInTai_Le = [0x99, 0x50, 0x30];
immutable ubyte[] unicodeInCJK_Unified_Ideographs = [0xa0, 0x4e, 0x0, 0xa0, 0x52, 0x0];
immutable ubyte[] unicodeInKhmer_Symbols = [0x99, 0xe0, 0x20];
immutable ubyte[] unicodeGrapheme_Link = [0x89, 0x4d, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x6f, 0x1, 0x81, 0x49, 0x1, 0x80, 0xb4, 0x2, 0x86, 0xd9, 0x1, 0x1f, 0x1, 0x80, 0x9d, 0x1, 0x82, 0x8d, 0x1, 0x80, 0xe3, 0x1, 0x65, 0x2, 0x46, 0x2, 0x91, 0x8b, 0x1, 0xa0, 0x7a, 0x86, 0x1, 0x80, 0xbd, 0x1, 0x80, 0x8e, 0x1, 0x6c, 0x1, 0x81, 0x35, 0x1, 0x80, 0xf6, 0x1, 0xa0, 0x5e, 0x51, 0x1, 0x86, 0x6, 0x1, 0x72, 0x1, 0x79, 0x2, 0x80, 0x8b, 0x1, 0x84, 0xf5, 0x1];
immutable ubyte[] unicodeInOl_Chiki = [0x9c, 0x50, 0x30];
immutable ubyte[] unicodeInArmenian = [0x85, 0x30, 0x60];
immutable ubyte[] unicodeInBengali = [0x89, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInCyrillic = [0x84, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInTagalog = [0x97, 0x0, 0x20];
immutable ubyte[] unicodeInSpacing_Modifier_Letters = [0x82, 0xb0, 0x50];
immutable ubyte[] unicodeOther_Uppercase = [0xa0, 0x21, 0x60, 0x10, 0x83, 0x46, 0x1a];
immutable ubyte[] unicodeGrapheme_Extend = [0x83, 0x0, 0x70, 0x81, 0x13, 0x7, 0x81, 0x7, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x80, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x1, 0x4, 0x8, 0x1, 0x8, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x1, 0x1, 0x1, 0xc, 0x1, 0x9, 0x1, 0x66, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x2, 0x1, 0x3, 0x1, 0x5, 0x2, 0x7, 0x2, 0xb, 0x2, 0x5a, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x66, 0x1, 0x4, 0x1, 0x2, 0x3, 0x1, 0x1, 0x8, 0x1, 0x51, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x82, 0xbf, 0x3, 0x83, 0xb2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x80, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0x80, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x80, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x80, 0xcb, 0x27, 0x15, 0x4, 0x82, 0xc, 0x2, 0x80, 0xc2, 0x21, 0x8b, 0xfe, 0x3, 0x80, 0x8d, 0x1, 0x60, 0x20, 0x82, 0x2a, 0x6, 0x69, 0x2, 0xa0, 0x75, 0xd4, 0x4, 0x1, 0xa, 0x21, 0x1, 0x50, 0x2, 0x81, 0x10, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x80, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0x80, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0xa0, 0x4f, 0x30, 0x1, 0x82, 0xe1, 0x10, 0x10, 0x7, 0x81, 0x77, 0x2, 0x82, 0x5d, 0x1, 0x88, 0x3, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x85, 0xc1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x84, 0xec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0xa0, 0x58, 0xd7, 0x4, 0xa0, 0x61, 0xd2, 0x1, 0x1, 0x3, 0x4, 0x5, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x80, 0x94, 0x3, 0xac, 0x2e, 0xbb, 0x80, 0xf0];
immutable ubyte[] unicodeInCJK_Compatibility = [0xa0, 0x33, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInAvestan = [0xa1, 0xb, 0x0, 0x40];
immutable ubyte[] unicodeInCherokee = [0x93, 0xa0, 0x60];
immutable ubyte[] unicodeInLepcha = [0x9c, 0x0, 0x50];
immutable ubyte[] unicodeIdeographic = [0xa0, 0x30, 0x6, 0x2, 0x19, 0x9, 0xe, 0x3, 0x83, 0xc5, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0xa0, 0x59, 0x33, 0x81, 0x6e, 0x2, 0x6a, 0xa1, 0x5, 0x26, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeInHiragana = [0xa0, 0x30, 0x40, 0x60];
immutable ubyte[] unicodeInCounting_Rod_Numerals = [0xa1, 0xd3, 0x60, 0x20];
immutable ubyte[] unicodeInKatakana_Phonetic_Extensions = [0xa0, 0x31, 0xf0, 0x10];
immutable ubyte[] unicodeInMiscellaneous_Mathematical_Symbols_A = [0xa0, 0x27, 0xc0, 0x30];
immutable ubyte[] unicodeLao = [0x8e, 0x81, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4];
immutable ubyte[] unicodeInMiscellaneous_Mathematical_Symbols_B = [0xa0, 0x29, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInSupplemental_Punctuation = [0xa0, 0x2e, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeChakma = [0xa1, 0x11, 0x0, 0x35, 0x1, 0xe];
immutable ubyte[] unicodeRadical = [0xa0, 0x2e, 0x80, 0x1a, 0x1, 0x59, 0xc, 0x80, 0xd6];
immutable ubyte[] unicodeInVai = [0xa0, 0xa5, 0x0, 0x81, 0x40];
immutable ubyte[] unicodeInMalayalam = [0x8d, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeBengali = [0x89, 0x81, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16];
immutable ubyte[] unicodeLatin = [0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xc1, 0x27, 0x5, 0x9a, 0x1b, 0x26, 0x6, 0x31, 0x5, 0x4, 0x5, 0xd, 0x1, 0x46, 0x41, 0x81, 0x0, 0x81, 0x71, 0x1, 0xd, 0x1, 0x10, 0xd, 0x80, 0x8d, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0x8a, 0xd7, 0x20, 0xa0, 0x7a, 0xa2, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x8, 0xa0, 0x53, 0x0, 0x7, 0x84, 0x1a, 0x1a, 0x6, 0x1a];
immutable ubyte[] unicodeTagalog = [0x97, 0x0, 0xd, 0x1, 0x7];
immutable ubyte[] unicodeRejang = [0xa0, 0xa9, 0x30, 0x24, 0xb, 0x1];
immutable ubyte[] unicodeInPhaistos_Disc = [0xa1, 0x1, 0xd0, 0x30];
immutable ubyte[] unicodeOld_Turkic = [0xa1, 0xc, 0x0, 0x49];
immutable ubyte[] unicodeInGreek_Extended = [0x9f, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInCham = [0xa0, 0xaa, 0x0, 0x60];
immutable ubyte[] unicodeAvestan = [0xa1, 0xb, 0x0, 0x36, 0x3, 0x7];
immutable ubyte[] unicodeInBasic_Latin = [0x0, 0x80, 0x80];
immutable ubyte[] unicodeInSupplemental_Mathematical_Operators = [0xa0, 0x2a, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInMiscellaneous_Technical = [0xa0, 0x23, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInTelugu = [0x8c, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeLimbu = [0x99, 0x0, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0xc];
immutable ubyte[] unicodeInEthiopic_Supplement = [0x93, 0x80, 0x20];
immutable ubyte[] unicodeInSpecials = [0xa0, 0xff, 0xf0, 0x10];
immutable ubyte[] unicodeInCJK_Unified_Ideographs_Extension_A = [0xa0, 0x34, 0x0, 0x99, 0xc0];
immutable ubyte[] unicodeInCJK_Unified_Ideographs_Extension_B = [0xa2, 0x0, 0x0, 0xa0, 0xa6, 0xe0];
immutable ubyte[] unicodeInBuhid = [0x97, 0x40, 0x20];
immutable ubyte[] unicodeInCJK_Unified_Ideographs_Extension_C = [0xa2, 0xa7, 0x0, 0x90, 0x40];
immutable ubyte[] unicodeKhmer = [0x97, 0x80, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x81, 0xe6, 0x20];
immutable ubyte[] unicodeInYijing_Hexagram_Symbols = [0xa0, 0x4d, 0xc0, 0x40];
immutable ubyte[] unicodeInMyanmar_Extended_A = [0xa0, 0xaa, 0x60, 0x20];
immutable ubyte[] unicodeInCJK_Unified_Ideographs_Extension_D = [0xa2, 0xb7, 0x40, 0x80, 0xe0];
immutable ubyte[] unicodeInIPA_Extensions = [0x82, 0x50, 0x60];
immutable ubyte[] unicodeWhite_Space = [0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x1a, 0x1, 0x95, 0xdf, 0x1, 0x81, 0x8d, 0x1, 0x87, 0xf1, 0xb, 0x1d, 0x2, 0x5, 0x1, 0x2f, 0x1, 0x8f, 0xa0, 0x1];
immutable ubyte[] unicodeInLinear_B_Syllabary = [0xa1, 0x0, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeOld_South_Arabian = [0xa1, 0xa, 0x60, 0x20];
immutable ubyte[] unicodeInImperial_Aramaic = [0xa1, 0x8, 0x40, 0x20];
immutable ubyte[] unicodeGurmukhi = [0x8a, 0x1, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10];
immutable ubyte[] unicodeInVertical_Forms = [0xa0, 0xfe, 0x10, 0x10];
immutable ubyte[] unicodeInTai_Viet = [0xa0, 0xaa, 0x80, 0x60];
immutable ubyte[] unicodeOriya = [0x8b, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12];
immutable ubyte[] unicodeBuginese = [0x9a, 0x0, 0x1c, 0x2, 0x2];
immutable ubyte[] unicodeInChakma = [0xa1, 0x11, 0x0, 0x50];
immutable ubyte[] unicodeSoft_Dotted = [0x69, 0x2, 0x80, 0xc4, 0x1, 0x81, 0x19, 0x1, 0x1e, 0x1, 0x34, 0x1, 0x14, 0x1, 0x81, 0x40, 0x1, 0x62, 0x1, 0x1, 0x1, 0x99, 0x9, 0x1, 0x33, 0x1, 0xd, 0x1, 0x3, 0x1, 0x80, 0x84, 0x1, 0x80, 0x9d, 0x1, 0x81, 0xa5, 0x1, 0x80, 0xd6, 0x2, 0x8b, 0x32, 0x1, 0xa1, 0xa7, 0xa5, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2];
immutable ubyte[] unicodeVai = [0xa0, 0xa5, 0x0, 0x81, 0x2c];
immutable ubyte[] unicodeInCJK_Compatibility_Ideographs_Supplement = [0xa2, 0xf8, 0x0, 0x82, 0x20];
immutable ubyte[] unicodeHangul = [0x91, 0x0, 0x81, 0x0, 0x9e, 0x2e, 0x2, 0x81, 0x1, 0x5e, 0x71, 0x1f, 0x41, 0x1f, 0xa0, 0x76, 0xe1, 0x1d, 0x82, 0x83, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x27, 0xa4, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3];
immutable ubyte[] unicodeInRejang = [0xa0, 0xa9, 0x30, 0x30];
immutable ubyte[] unicodeInBopomofo = [0xa0, 0x31, 0x0, 0x30];
immutable ubyte[] unicodeInSaurashtra = [0xa0, 0xa8, 0x80, 0x60];
immutable ubyte[] unicodeInCJK_Compatibility_Ideographs = [0xa0, 0xf9, 0x0, 0x82, 0x0];
immutable ubyte[] unicodeHyphen = [0x2d, 0x1, 0x7f, 0x1, 0x84, 0xdc, 0x1, 0x92, 0x7b, 0x1, 0x88, 0x9, 0x2, 0x8e, 0x5, 0x1, 0x82, 0xe3, 0x1, 0xa0, 0xcd, 0x67, 0x1, 0x80, 0xa9, 0x1, 0x57, 0x1];
immutable ubyte[] unicodeThai = [0x8e, 0x1, 0x3a, 0x5, 0x1c];
immutable ubyte[] unicodeInRunic = [0x96, 0xa0, 0x60];
immutable ubyte[] unicodeInMandaic = [0x88, 0x40, 0x20];
immutable ubyte[] unicodeInGeometric_Shapes = [0xa0, 0x25, 0xa0, 0x60];
immutable ubyte[] unicodeInCJK_Compatibility_Forms = [0xa0, 0xfe, 0x30, 0x20];
immutable ubyte[] unicodeInNew_Tai_Lue = [0x99, 0x80, 0x60];
immutable ubyte[] unicodeInMeroitic_Cursive = [0xa1, 0x9, 0xa0, 0x60];
immutable ubyte[] unicodeYi = [0xa0, 0xa0, 0x0, 0x84, 0x8d, 0x3, 0x37];
immutable ubyte[] unicodeInGeorgian_Supplement = [0xa0, 0x2d, 0x0, 0x30];
immutable ubyte[] unicodeInRumi_Numeral_Symbols = [0xa1, 0xe, 0x60, 0x20];
immutable ubyte[] unicodeInVedic_Extensions = [0x9c, 0xd0, 0x30];
immutable ubyte[] unicodeExtender = [0x80, 0xb7, 0x1, 0x82, 0x18, 0x2, 0x83, 0x6e, 0x1, 0x81, 0xb9, 0x1, 0x86, 0x4b, 0x1, 0x7f, 0x1, 0x89, 0x43, 0x1, 0x38, 0x1, 0x82, 0x63, 0x1, 0x81, 0x8e, 0x1, 0x44, 0x1, 0x93, 0x89, 0x1, 0x2b, 0x5, 0x67, 0x2, 0x5d, 0x3, 0xa0, 0x6f, 0x16, 0x1, 0x85, 0xf6, 0x1, 0x83, 0xc2, 0x1, 0x80, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0xa0, 0x54, 0x7b, 0x1];
immutable ubyte[] unicodeInHangul_Compatibility_Jamo = [0xa0, 0x31, 0x30, 0x60];
immutable ubyte[] unicodeInMiscellaneous_Symbols_and_Arrows = [0xa0, 0x2b, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInEthiopic_Extended_A = [0xa0, 0xab, 0x0, 0x30];
immutable ubyte[] unicodeInOld_Persian = [0xa1, 0x3, 0xa0, 0x40];
immutable ubyte[] unicodeInBatak = [0x9b, 0xc0, 0x40];
immutable ubyte[] unicodeThaana = [0x87, 0x80, 0x32];
immutable ubyte[] unicodeMongolian = [0x98, 0x0, 0x2, 0x2, 0x1, 0x1, 0x9, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b];
immutable ubyte[] unicodeBraille = [0xa0, 0x28, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInOld_Italic = [0xa1, 0x3, 0x0, 0x30];
immutable ubyte[] unicodeMandaic = [0x88, 0x40, 0x1c, 0x2, 0x1];
immutable ubyte[] unicodeInLatin_Extended_Additional = [0x9e, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeZl = [0xa0, 0x20, 0x28, 0x1];
immutable ubyte[] unicodeInEnclosed_CJK_Letters_and_Months = [0xa0, 0x32, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInHigh_Private_Use_Surrogates = [0xa0, 0xdb, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeZp = [0xa0, 0x20, 0x29, 0x1];
immutable ubyte[] unicodeInArabic_Supplement = [0x87, 0x50, 0x30];
immutable ubyte[] unicodeInBopomofo_Extended = [0xa0, 0x31, 0xa0, 0x20];
immutable ubyte[] unicodeInUgaritic = [0xa1, 0x3, 0x80, 0x20];
immutable ubyte[] unicodeInInscriptional_Parthian = [0xa1, 0xb, 0x40, 0x20];
immutable ubyte[] unicodeInKharoshthi = [0xa1, 0xa, 0x0, 0x60];
immutable ubyte[] unicodeZs = [0x20, 0x1, 0x7f, 0x1, 0x95, 0xdf, 0x1, 0x81, 0x8d, 0x1, 0x87, 0xf1, 0xb, 0x24, 0x1, 0x2f, 0x1, 0x8f, 0xa0, 0x1];
immutable ubyte[] unicodeInIdeographic_Description_Characters = [0xa0, 0x2f, 0xf0, 0x10];
immutable ubyte[] unicodeInThai = [0x8e, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInEgyptian_Hieroglyphs = [0xa1, 0x30, 0x0, 0x84, 0x30];
immutable ubyte[] unicodeInTai_Xuan_Jing_Symbols = [0xa1, 0xd3, 0x0, 0x60];
immutable ubyte[] unicodeInCombining_Diacritical_Marks = [0x83, 0x0, 0x70];
immutable ubyte[] unicodeInPrivate_Use_Area = [0xa0, 0xe0, 0x0, 0x99, 0x0];
immutable ubyte[] unicodeOther_Alphabetic = [0x83, 0x45, 0x1, 0x82, 0x6a, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0xd, 0x1, 0x7, 0x10, 0x1, 0x65, 0x7, 0x4, 0x4, 0x2, 0x2, 0x4, 0x1, 0x23, 0x1, 0x1e, 0x10, 0x66, 0xb, 0x65, 0x2, 0x3, 0x9, 0x1, 0x3, 0x1, 0x4, 0x80, 0xb7, 0x6, 0x6, 0xf, 0x1, 0x4, 0x36, 0x2, 0x2, 0xf, 0x1, 0x2, 0x5, 0x3, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0xa, 0x1, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x3, 0x3a, 0x8, 0x1, 0x3, 0x1, 0x2, 0x15, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x5, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0xa, 0x1, 0xa, 0x2, 0x1e, 0x2, 0x4b, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0x3d, 0x1, 0x2, 0x7, 0x12, 0x1, 0x63, 0x1, 0x2, 0x6, 0x1, 0x2, 0x10, 0x1, 0x80, 0xa3, 0x11, 0xb, 0xb, 0x1, 0x24, 0x6e, 0xc, 0x1, 0x1, 0x2, 0x4, 0x17, 0x4, 0x4, 0x3, 0x1, 0x1, 0x4, 0x2, 0x8, 0x4, 0xd, 0x5, 0x15, 0x2, 0x82, 0xc1, 0x1, 0x83, 0xb2, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x42, 0x13, 0x80, 0xe0, 0x1, 0x76, 0xc, 0x4, 0x9, 0x77, 0x11, 0x7, 0x2, 0x4d, 0x5, 0x39, 0xa, 0x2, 0x14, 0x80, 0x8b, 0x5, 0x30, 0xf, 0x3c, 0x3, 0x1e, 0x9, 0x2, 0x2, 0x39, 0xb, 0x32, 0x12, 0x80, 0xbc, 0x2, 0x87, 0xc2, 0x34, 0x88, 0xf6, 0x20, 0xa0, 0x78, 0x74, 0x8, 0x23, 0x1, 0x81, 0x83, 0x5, 0x58, 0x2, 0x32, 0x10, 0x62, 0x5, 0x1c, 0xc, 0x2d, 0x4, 0x30, 0xc, 0x69, 0xe, 0xc, 0x1, 0x8, 0x2, 0x62, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x1, 0x2c, 0x5, 0x5, 0x1, 0x80, 0xed, 0x8, 0xa0, 0x4f, 0x33, 0x1, 0x8e, 0xe2, 0x3, 0x1, 0x2, 0x5, 0x4, 0x85, 0xf0, 0x3, 0x35, 0xe, 0x3c, 0x1, 0x2d, 0x9, 0x47, 0x3, 0x24, 0xc, 0x4d, 0x3, 0x30, 0xd, 0x84, 0xeb, 0xb, 0xa0, 0x58, 0x9b, 0x2e];
immutable ubyte[] unicodeInArrows = [0xa0, 0x21, 0x90, 0x70];
immutable ubyte[] unicodeEthiopic = [0x92, 0x0, 0x49, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x99, 0xe6, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0xa0, 0x7d, 0x22, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7];
immutable ubyte[] unicodeInVariation_Selectors = [0xa0, 0xfe, 0x0, 0x10];
immutable ubyte[] unicodeInAlchemical_Symbols = [0xa1, 0xf7, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInPlaying_Cards = [0xa1, 0xf0, 0xa0, 0x60];
immutable ubyte[] unicodeInTags = [0xae, 0x0, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeInSamaritan = [0x88, 0x0, 0x40];
immutable ubyte[] unicodeIDS_Trinary_Operator = [0xa0, 0x2f, 0xf2, 0x2];
immutable ubyte[] unicodeGreek = [0x83, 0x70, 0x4, 0x1, 0x3, 0x2, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x3f, 0xe, 0x10, 0x99, 0x26, 0x5, 0x32, 0x5, 0x4, 0x5, 0x54, 0x1, 0x81, 0x40, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x81, 0x27, 0x1, 0xa0, 0xe0, 0x19, 0x4b, 0xa0, 0xd0, 0x75, 0x46];
immutable ubyte[] unicodeOl_Chiki = [0x9c, 0x50, 0x30];
immutable ubyte[] unicodeInOsmanya = [0xa1, 0x4, 0x80, 0x30];
immutable ubyte[] unicodeDiacritic = [0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x2, 0x2, 0x81, 0xf7, 0x80, 0x9f, 0x1, 0x8, 0x5, 0x6, 0x11, 0x2, 0x4, 0x1, 0x9, 0x2, 0x80, 0xfd, 0x5, 0x80, 0xd1, 0x1, 0x37, 0x11, 0x1, 0x1b, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x80, 0x86, 0x8, 0x4, 0x2, 0x80, 0x86, 0x2, 0x4, 0x2, 0x3, 0x3, 0x43, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x22, 0x2, 0x80, 0xca, 0x1b, 0x3d, 0x1, 0x10, 0x1, 0x3, 0x4, 0x1c, 0x1, 0x4a, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x7c, 0x6, 0x1, 0x1, 0x79, 0x5, 0x4b, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x42, 0x3, 0x1, 0x2, 0x3e, 0x1, 0x70, 0x1, 0x1, 0x2, 0x4c, 0x7, 0x1, 0x1, 0xa, 0x2, 0x87, 0x2d, 0xb, 0x9, 0x1, 0x81, 0x5b, 0x3, 0x81, 0x39, 0x8, 0x2, 0x1, 0x80, 0xb4, 0x1, 0xf, 0x1, 0x26, 0x9, 0x36, 0x2, 0x80, 0x8a, 0x2, 0x40, 0x6, 0x52, 0x19, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0x59, 0xc, 0x2d, 0x3, 0x81, 0xbd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0x8c, 0xf0, 0x3, 0x81, 0x3d, 0x1, 0x81, 0xfa, 0x6, 0x69, 0x4, 0x5f, 0x1, 0xa0, 0x75, 0x72, 0x1, 0xc, 0x2, 0x1, 0x1, 0x70, 0x2, 0x25, 0xb, 0x66, 0x1, 0x6f, 0x2, 0x80, 0xca, 0x1, 0x1b, 0x12, 0x39, 0x4, 0x24, 0x1, 0x5f, 0x1, 0xc, 0x1, 0x80, 0xba, 0x1, 0x43, 0x4, 0x33, 0x1, 0x80, 0xf5, 0x2, 0xa0, 0x4f, 0x30, 0x1, 0x83, 0x1, 0x7, 0x81, 0x17, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x90, 0xd5, 0x2, 0x78, 0x2, 0x80, 0x8b, 0x1, 0x84, 0xf5, 0x2, 0xa0, 0x58, 0xd7, 0x11, 0xa0, 0x61, 0xc7, 0x3, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4];
immutable ubyte[] unicodeID_Start = [0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x80, 0x81, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x80, 0x8b, 0x8, 0x80, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x81, 0x4d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x82, 0x6c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0x80, 0xc0, 0x40, 0x81, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x8a, 0x77, 0x2f, 0x1, 0x2f, 0x1, 0x80, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x82, 0x26, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x4, 0x5, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x82, 0x0, 0x99, 0xb6, 0x4a, 0xa0, 0x51, 0xcd, 0x33, 0x84, 0x8d, 0x43, 0x2e, 0x2, 0x81, 0xd, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x80, 0x91, 0x23, 0x1d, 0xa0, 0x2b, 0xa4, 0xc, 0x17, 0x4, 0x31, 0xa0, 0x21, 0x4, 0x81, 0x6e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x81, 0x6b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x80, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x81, 0xb, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x80, 0x9e, 0x83, 0x62, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x80, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x80, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x80, 0x8d, 0x49, 0x83, 0xba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x84, 0xbb, 0x2b, 0x89, 0x55, 0x83, 0x6f, 0x80, 0x91, 0x63, 0x8b, 0x9d, 0x84, 0x2f, 0xa0, 0x33, 0xd1, 0x82, 0x39, 0x84, 0xc7, 0x45, 0xb, 0x1, 0x42, 0xd, 0xa0, 0x40, 0x60, 0x2, 0xa0, 0x23, 0xfe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x96, 0x34, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x91, 0x44, 0xa0, 0xa6, 0xd7, 0x29, 0x90, 0x35, 0xb, 0x80, 0xde, 0xa0, 0x3f, 0xe2, 0x82, 0x1e];
immutable ubyte[] unicodeTagbanwa = [0x97, 0x60, 0xd, 0x1, 0x3, 0x1, 0x2];
immutable ubyte[] unicodeNew_Tai_Lue = [0x99, 0x80, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x2];
immutable ubyte[] unicodeInOgham = [0x96, 0x80, 0x20];
immutable ubyte[] unicodeInThaana = [0x87, 0x80, 0x40];
immutable ubyte[] unicodeInUnified_Canadian_Aboriginal_Syllabics = [0x94, 0x0, 0x82, 0x80];
immutable ubyte[] unicodeInLow_Surrogates = [0xa0, 0xdc, 0x0, 0x84, 0x0];
immutable ubyte[] unicodeASCII_Hex_Digit = [0x30, 0xa, 0x7, 0x6, 0x1a, 0x6];
immutable ubyte[] unicodeCommon = [0x0, 0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x81, 0xc1, 0x27, 0x5, 0x5, 0x2, 0x14, 0x74, 0x1, 0x9, 0x1, 0x6, 0x1, 0x1, 0x1, 0x82, 0x1, 0x1, 0x80, 0x82, 0x1, 0xe, 0x1, 0x3, 0x1, 0x20, 0x1, 0x1f, 0xa, 0x73, 0x1, 0x82, 0x86, 0x2, 0x84, 0xd9, 0x1, 0x81, 0x95, 0x4, 0x81, 0x22, 0x1, 0x85, 0xef, 0x3, 0x47, 0x2, 0x80, 0xcb, 0x2, 0x1, 0x1, 0x84, 0xcd, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x83, 0x9, 0xc, 0x2, 0x57, 0x5, 0x7, 0x3, 0xb, 0x1, 0xf, 0x11, 0x1b, 0x45, 0x26, 0x1, 0x3, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0x1, 0x6, 0x82, 0x64, 0xc, 0x27, 0x19, 0xb, 0x15, 0x82, 0xa0, 0x1, 0x80, 0xff, 0x81, 0x0, 0x82, 0x4d, 0x3, 0xa, 0x82, 0xa6, 0x3c, 0x81, 0xb4, 0xc, 0x4, 0x5, 0x1, 0x1, 0x1, 0x19, 0xf, 0x8, 0x4, 0x4, 0x5b, 0x2, 0x3, 0x1, 0x5a, 0x2, 0x80, 0x93, 0x10, 0x20, 0x24, 0x3c, 0x40, 0x1f, 0x51, 0x80, 0x88, 0x80, 0xa8, 0x99, 0xc0, 0x40, 0xa0, 0x59, 0x0, 0x22, 0x66, 0x3, 0x80, 0xa5, 0xa, 0xa0, 0x55, 0x4, 0x2, 0x80, 0xbd, 0x1, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x80, 0x93, 0x1, 0x1, 0x20, 0x1a, 0x6, 0x1a, 0xb, 0xa, 0x1, 0x2d, 0x2, 0x40, 0x7, 0x1, 0x7, 0xa, 0x5, 0x81, 0x2, 0x3, 0x4, 0x2d, 0x3, 0x9, 0x50, 0xc, 0x34, 0x2d, 0xa0, 0xce, 0x3, 0x80, 0xf6, 0xa, 0x27, 0x2, 0x3e, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x81, 0x22, 0x57, 0x9, 0x12, 0x80, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x81, 0x54, 0x2, 0x81, 0x24, 0x2, 0x32, 0x98, 0x0, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1a, 0x1, 0x2, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0x80, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0x80, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x80, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0xac, 0x8, 0x8d, 0x1, 0x1e, 0x60];
immutable ubyte[] unicodeInKatakana = [0xa0, 0x30, 0xa0, 0x60];
immutable ubyte[] unicodeSundanese = [0x9b, 0x80, 0x40, 0x81, 0x0, 0x8];
immutable ubyte[] unicodeInSora_Sompeng = [0xa1, 0x10, 0xd0, 0x30];
immutable ubyte[] unicodeInOld_South_Arabian = [0xa1, 0xa, 0x60, 0x20];
immutable ubyte[] unicodeInMathematical_Alphanumeric_Symbols = [0xa1, 0xd4, 0x0, 0x84, 0x0];
immutable ubyte[] unicodeGeorgian = [0x90, 0xa0, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x4, 0x9c, 0x0, 0x26, 0x1, 0x1, 0x5, 0x1];
immutable ubyte[] unicodeOsmanya = [0xa1, 0x4, 0x80, 0x1e, 0x2, 0xa];
immutable ubyte[] unicodeInDevanagari = [0x89, 0x0, 0x80, 0x80];
immutable ubyte[] unicodeSyriac = [0x87, 0x0, 0xe, 0x1, 0x3c, 0x2, 0x3];
immutable ubyte[] unicodeInArabic_Extended_A = [0x88, 0xa0, 0x60];
immutable ubyte[] unicodeInKangxi_Radicals = [0xa0, 0x2f, 0x0, 0x80, 0xe0];
immutable ubyte[] unicodeOther_Default_Ignorable_Code_Point = [0x83, 0x4f, 0x1, 0x8e, 0xf, 0x2, 0x86, 0x53, 0x2, 0x88, 0xaf, 0x5, 0x90, 0xfa, 0x1, 0xa0, 0xce, 0x3b, 0x1, 0x4f, 0x9, 0xad, 0x0, 0x7, 0x1, 0x1, 0x1e, 0x60, 0x80, 0x80, 0x80, 0xf0, 0x8e, 0x10];
immutable ubyte[] unicodePhoenician = [0xa1, 0x9, 0x0, 0x1c, 0x3, 0x1];
immutable ubyte[] unicodeInGlagolitic = [0xa0, 0x2c, 0x0, 0x60];
immutable ubyte[] unicodeInKana_Supplement = [0xa1, 0xb0, 0x0, 0x81, 0x0];
immutable ubyte[] unicodeInCombining_Half_Marks = [0xa0, 0xfe, 0x20, 0x10];
immutable ubyte[] unicodeGujarati = [0x8a, 0x81, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc];
immutable ubyte[] unicodeInArabic_Presentation_Forms_A = [0xa0, 0xfb, 0x50, 0x82, 0xb0];
immutable ubyte[] unicodeInArabic_Presentation_Forms_B = [0xa0, 0xfe, 0x70, 0x80, 0x90];
immutable ubyte[] unicodeInTakri = [0xa1, 0x16, 0x80, 0x50];
immutable ubyte[] unicodeInCJK_Radicals_Supplement = [0xa0, 0x2e, 0x80, 0x80, 0x80];
immutable ubyte[] unicodeInscriptional_Parthian = [0xa1, 0xb, 0x40, 0x16, 0x2, 0x8];
immutable ubyte[] unicodeLydian = [0xa1, 0x9, 0x20, 0x1a, 0x5, 0x1];
immutable ubyte[] unicodeTerminal_Punctuation = [0x21, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x83, 0x3e, 0x1, 0x8, 0x1, 0x82, 0x1, 0x1, 0x39, 0x1, 0x48, 0x1, 0xe, 0x1, 0x3, 0x1, 0x80, 0xb4, 0x1, 0x2b, 0xb, 0x1, 0x1, 0x80, 0xeb, 0x2, 0x36, 0xf, 0x1f, 0x1, 0x81, 0x5, 0x2, 0x84, 0xf4, 0x2, 0x80, 0xac, 0x1, 0x4, 0x6, 0x81, 0x37, 0x2, 0x83, 0x15, 0x8, 0x83, 0x4, 0x2, 0x7c, 0x3, 0x80, 0xe6, 0x3, 0x3, 0x1, 0x27, 0x4, 0x2, 0x2, 0x81, 0x3a, 0x2, 0x81, 0x62, 0x4, 0x80, 0xae, 0x2, 0x1, 0x3, 0x80, 0xdb, 0x5, 0x3e, 0x2, 0x83, 0xbc, 0x2, 0x9, 0x3, 0x8d, 0xe4, 0x1, 0x81, 0xd2, 0x2, 0xa0, 0x74, 0xfb, 0x2, 0x81, 0xd, 0x3, 0x80, 0xe3, 0x5, 0x81, 0x7e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x80, 0x97, 0x3, 0x80, 0x93, 0x3, 0x7f, 0x1, 0x10, 0x2, 0x80, 0xf9, 0x1, 0xa0, 0x52, 0x64, 0x3, 0x1, 0x4, 0x80, 0xa9, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x41, 0x1, 0x2, 0x1, 0x84, 0x3a, 0x1, 0x30, 0x1, 0x84, 0x86, 0x1, 0x80, 0xc7, 0x1, 0x82, 0x1a, 0x6, 0x85, 0x7, 0x7, 0x70, 0x4, 0x7f, 0x3, 0x80, 0x81, 0x2, 0x92, 0xa9, 0x4];
immutable ubyte[] unicodeMeroitic_Hieroglyphs = [0xa1, 0x9, 0x80, 0x20];
immutable ubyte[] unicodeHex_Digit = [0x30, 0xa, 0x7, 0x6, 0x1a, 0x6, 0xa0, 0xfe, 0xa9, 0xa, 0x7, 0x6, 0x1a, 0x6];
immutable ubyte[] unicodeInMiscellaneous_Symbols_And_Pictographs = [0xa1, 0xf3, 0x0, 0x83, 0x0];
immutable ubyte[] unicodeBuhid = [0x97, 0x40, 0x14];
immutable ubyte[] unicodeBalinese = [0x9b, 0x0, 0x4c, 0x4, 0x2d];
immutable ubyte[] unicodeInSuperscripts_and_Subscripts = [0xa0, 0x20, 0x70, 0x30];

immutable immutable(UnicodeProperty)[] unicodeProps = [
immutable(UnicodeProperty)("Alphabetic", unicodeAlphabetic),
immutable(UnicodeProperty)("Arabic", unicodeArabic),
immutable(UnicodeProperty)("Armenian", unicodeArmenian),
immutable(UnicodeProperty)("ASCII_Hex_Digit", unicodeASCII_Hex_Digit),
immutable(UnicodeProperty)("Avestan", unicodeAvestan),
immutable(UnicodeProperty)("Balinese", unicodeBalinese),
immutable(UnicodeProperty)("Bamum", unicodeBamum),
immutable(UnicodeProperty)("Batak", unicodeBatak),
immutable(UnicodeProperty)("Bengali", unicodeBengali),
immutable(UnicodeProperty)("Bidi_Control", unicodeBidi_Control),
immutable(UnicodeProperty)("Bopomofo", unicodeBopomofo),
immutable(UnicodeProperty)("Brahmi", unicodeBrahmi),
immutable(UnicodeProperty)("Braille", unicodeBraille),
immutable(UnicodeProperty)("Buginese", unicodeBuginese),
immutable(UnicodeProperty)("Buhid", unicodeBuhid),
immutable(UnicodeProperty)("Canadian_Aboriginal", unicodeCanadian_Aboriginal),
immutable(UnicodeProperty)("Carian", unicodeCarian),
immutable(UnicodeProperty)("Cased", unicodeCased),
immutable(UnicodeProperty)("Case_Ignorable", unicodeCase_Ignorable),
immutable(UnicodeProperty)("Cc", unicodeCc),
immutable(UnicodeProperty)("Cf", unicodeCf),
immutable(UnicodeProperty)("Chakma", unicodeChakma),
immutable(UnicodeProperty)("Cham", unicodeCham),
immutable(UnicodeProperty)("Cherokee", unicodeCherokee),
immutable(UnicodeProperty)("Close_Punctuation", unicodePe),
immutable(UnicodeProperty)("Cn", unicodeCn),
immutable(UnicodeProperty)("Co", unicodeCo),
immutable(UnicodeProperty)("Common", unicodeCommon),
immutable(UnicodeProperty)("Connector_Punctuation", unicodePc),
immutable(UnicodeProperty)("Control", unicodeCc),
immutable(UnicodeProperty)("Coptic", unicodeCoptic),
immutable(UnicodeProperty)("Cs", unicodeCs),
immutable(UnicodeProperty)("Cuneiform", unicodeCuneiform),
immutable(UnicodeProperty)("Currency_Symbol", unicodeSc),
immutable(UnicodeProperty)("Cypriot", unicodeCypriot),
immutable(UnicodeProperty)("Cyrillic", unicodeCyrillic),
immutable(UnicodeProperty)("Dash", unicodeDash),
immutable(UnicodeProperty)("Dash_Punctuation", unicodePd),
immutable(UnicodeProperty)("Decimal_Number", unicodeNd),
immutable(UnicodeProperty)("Default_Ignorable_Code_Point", unicodeDefault_Ignorable_Code_Point),
immutable(UnicodeProperty)("Deprecated", unicodeDeprecated),
immutable(UnicodeProperty)("Deseret", unicodeDeseret),
immutable(UnicodeProperty)("Devanagari", unicodeDevanagari),
immutable(UnicodeProperty)("Diacritic", unicodeDiacritic),
immutable(UnicodeProperty)("Egyptian_Hieroglyphs", unicodeEgyptian_Hieroglyphs),
immutable(UnicodeProperty)("Enclosing_Mark", unicodeMe),
immutable(UnicodeProperty)("Ethiopic", unicodeEthiopic),
immutable(UnicodeProperty)("Extender", unicodeExtender),
immutable(UnicodeProperty)("Final_Punctuation", unicodePf),
immutable(UnicodeProperty)("Format", unicodeCf),
immutable(UnicodeProperty)("Georgian", unicodeGeorgian),
immutable(UnicodeProperty)("Glagolitic", unicodeGlagolitic),
immutable(UnicodeProperty)("Gothic", unicodeGothic),
immutable(UnicodeProperty)("Grapheme_Base", unicodeGrapheme_Base),
immutable(UnicodeProperty)("Grapheme_Extend", unicodeGrapheme_Extend),
immutable(UnicodeProperty)("Grapheme_Link", unicodeGrapheme_Link),
immutable(UnicodeProperty)("Greek", unicodeGreek),
immutable(UnicodeProperty)("Gujarati", unicodeGujarati),
immutable(UnicodeProperty)("Gurmukhi", unicodeGurmukhi),
immutable(UnicodeProperty)("Han", unicodeHan),
immutable(UnicodeProperty)("Hangul", unicodeHangul),
immutable(UnicodeProperty)("Hanunoo", unicodeHanunoo),
immutable(UnicodeProperty)("Hebrew", unicodeHebrew),
immutable(UnicodeProperty)("Hex_Digit", unicodeHex_Digit),
immutable(UnicodeProperty)("Hiragana", unicodeHiragana),
immutable(UnicodeProperty)("Hyphen", unicodeHyphen),
immutable(UnicodeProperty)("ID_Continue", unicodeID_Continue),
immutable(UnicodeProperty)("Ideographic", unicodeIdeographic),
immutable(UnicodeProperty)("IDS_Binary_Operator", unicodeIDS_Binary_Operator),
immutable(UnicodeProperty)("ID_Start", unicodeID_Start),
immutable(UnicodeProperty)("IDS_Trinary_Operator", unicodeIDS_Trinary_Operator),
immutable(UnicodeProperty)("Imperial_Aramaic", unicodeImperial_Aramaic),
immutable(UnicodeProperty)("InAegean Numbers", unicodeInAegean_Numbers),
immutable(UnicodeProperty)("InAlchemical Symbols", unicodeInAlchemical_Symbols),
immutable(UnicodeProperty)("InAlphabetic Presentation Forms", unicodeInAlphabetic_Presentation_Forms),
immutable(UnicodeProperty)("InAncient Greek Musical Notation", unicodeInAncient_Greek_Musical_Notation),
immutable(UnicodeProperty)("InAncient Greek Numbers", unicodeInAncient_Greek_Numbers),
immutable(UnicodeProperty)("InAncient Symbols", unicodeInAncient_Symbols),
immutable(UnicodeProperty)("InArabic", unicodeInArabic),
immutable(UnicodeProperty)("InArabic Extended-A", unicodeInArabic_Extended_A),
immutable(UnicodeProperty)("InArabic Mathematical Alphabetic Symbols", unicodeInArabic_Mathematical_Alphabetic_Symbols),
immutable(UnicodeProperty)("InArabic Presentation Forms-A", unicodeInArabic_Presentation_Forms_A),
immutable(UnicodeProperty)("InArabic Presentation Forms-B", unicodeInArabic_Presentation_Forms_B),
immutable(UnicodeProperty)("InArabic Supplement", unicodeInArabic_Supplement),
immutable(UnicodeProperty)("InArmenian", unicodeInArmenian),
immutable(UnicodeProperty)("InArrows", unicodeInArrows),
immutable(UnicodeProperty)("InAvestan", unicodeInAvestan),
immutable(UnicodeProperty)("InBalinese", unicodeInBalinese),
immutable(UnicodeProperty)("InBamum", unicodeInBamum),
immutable(UnicodeProperty)("InBamum Supplement", unicodeInBamum_Supplement),
immutable(UnicodeProperty)("InBasic Latin", unicodeInBasic_Latin),
immutable(UnicodeProperty)("InBatak", unicodeInBatak),
immutable(UnicodeProperty)("InBengali", unicodeInBengali),
immutable(UnicodeProperty)("InBlock Elements", unicodeInBlock_Elements),
immutable(UnicodeProperty)("InBopomofo", unicodeInBopomofo),
immutable(UnicodeProperty)("InBopomofo Extended", unicodeInBopomofo_Extended),
immutable(UnicodeProperty)("InBox Drawing", unicodeInBox_Drawing),
immutable(UnicodeProperty)("InBrahmi", unicodeInBrahmi),
immutable(UnicodeProperty)("InBraille Patterns", unicodeInBraille_Patterns),
immutable(UnicodeProperty)("InBuginese", unicodeInBuginese),
immutable(UnicodeProperty)("InBuhid", unicodeInBuhid),
immutable(UnicodeProperty)("InByzantine Musical Symbols", unicodeInByzantine_Musical_Symbols),
immutable(UnicodeProperty)("InCarian", unicodeInCarian),
immutable(UnicodeProperty)("InChakma", unicodeInChakma),
immutable(UnicodeProperty)("InCham", unicodeInCham),
immutable(UnicodeProperty)("InCherokee", unicodeInCherokee),
immutable(UnicodeProperty)("InCJK Compatibility", unicodeInCJK_Compatibility),
immutable(UnicodeProperty)("InCJK Compatibility Forms", unicodeInCJK_Compatibility_Forms),
immutable(UnicodeProperty)("InCJK Compatibility Ideographs", unicodeInCJK_Compatibility_Ideographs),
immutable(UnicodeProperty)("InCJK Compatibility Ideographs Supplement", unicodeInCJK_Compatibility_Ideographs_Supplement),
immutable(UnicodeProperty)("InCJK Radicals Supplement", unicodeInCJK_Radicals_Supplement),
immutable(UnicodeProperty)("InCJK Strokes", unicodeInCJK_Strokes),
immutable(UnicodeProperty)("InCJK Symbols and Punctuation", unicodeInCJK_Symbols_and_Punctuation),
immutable(UnicodeProperty)("InCJK Unified Ideographs", unicodeInCJK_Unified_Ideographs),
immutable(UnicodeProperty)("InCJK Unified Ideographs Extension A", unicodeInCJK_Unified_Ideographs_Extension_A),
immutable(UnicodeProperty)("InCJK Unified Ideographs Extension B", unicodeInCJK_Unified_Ideographs_Extension_B),
immutable(UnicodeProperty)("InCJK Unified Ideographs Extension C", unicodeInCJK_Unified_Ideographs_Extension_C),
immutable(UnicodeProperty)("InCJK Unified Ideographs Extension D", unicodeInCJK_Unified_Ideographs_Extension_D),
immutable(UnicodeProperty)("InCombining Diacritical Marks", unicodeInCombining_Diacritical_Marks),
immutable(UnicodeProperty)("InCombining Diacritical Marks for Symbols", unicodeInCombining_Diacritical_Marks_for_Symbols),
immutable(UnicodeProperty)("InCombining Diacritical Marks Supplement", unicodeInCombining_Diacritical_Marks_Supplement),
immutable(UnicodeProperty)("InCombining Half Marks", unicodeInCombining_Half_Marks),
immutable(UnicodeProperty)("InCommon Indic Number Forms", unicodeInCommon_Indic_Number_Forms),
immutable(UnicodeProperty)("InControl Pictures", unicodeInControl_Pictures),
immutable(UnicodeProperty)("InCoptic", unicodeInCoptic),
immutable(UnicodeProperty)("InCounting Rod Numerals", unicodeInCounting_Rod_Numerals),
immutable(UnicodeProperty)("InCuneiform", unicodeInCuneiform),
immutable(UnicodeProperty)("InCuneiform Numbers and Punctuation", unicodeInCuneiform_Numbers_and_Punctuation),
immutable(UnicodeProperty)("InCurrency Symbols", unicodeInCurrency_Symbols),
immutable(UnicodeProperty)("InCypriot Syllabary", unicodeInCypriot_Syllabary),
immutable(UnicodeProperty)("InCyrillic", unicodeInCyrillic),
immutable(UnicodeProperty)("InCyrillic Extended-A", unicodeInCyrillic_Extended_A),
immutable(UnicodeProperty)("InCyrillic Extended-B", unicodeInCyrillic_Extended_B),
immutable(UnicodeProperty)("InCyrillic Supplement", unicodeInCyrillic_Supplement),
immutable(UnicodeProperty)("InDeseret", unicodeInDeseret),
immutable(UnicodeProperty)("InDevanagari", unicodeInDevanagari),
immutable(UnicodeProperty)("InDevanagari Extended", unicodeInDevanagari_Extended),
immutable(UnicodeProperty)("InDingbats", unicodeInDingbats),
immutable(UnicodeProperty)("InDomino Tiles", unicodeInDomino_Tiles),
immutable(UnicodeProperty)("InEgyptian Hieroglyphs", unicodeInEgyptian_Hieroglyphs),
immutable(UnicodeProperty)("InEmoticons", unicodeInEmoticons),
immutable(UnicodeProperty)("InEnclosed Alphanumerics", unicodeInEnclosed_Alphanumerics),
immutable(UnicodeProperty)("InEnclosed Alphanumeric Supplement", unicodeInEnclosed_Alphanumeric_Supplement),
immutable(UnicodeProperty)("InEnclosed CJK Letters and Months", unicodeInEnclosed_CJK_Letters_and_Months),
immutable(UnicodeProperty)("InEnclosed Ideographic Supplement", unicodeInEnclosed_Ideographic_Supplement),
immutable(UnicodeProperty)("InEthiopic", unicodeInEthiopic),
immutable(UnicodeProperty)("InEthiopic Extended", unicodeInEthiopic_Extended),
immutable(UnicodeProperty)("InEthiopic Extended-A", unicodeInEthiopic_Extended_A),
immutable(UnicodeProperty)("InEthiopic Supplement", unicodeInEthiopic_Supplement),
immutable(UnicodeProperty)("InGeneral Punctuation", unicodeInGeneral_Punctuation),
immutable(UnicodeProperty)("InGeometric Shapes", unicodeInGeometric_Shapes),
immutable(UnicodeProperty)("InGeorgian", unicodeInGeorgian),
immutable(UnicodeProperty)("InGeorgian Supplement", unicodeInGeorgian_Supplement),
immutable(UnicodeProperty)("InGlagolitic", unicodeInGlagolitic),
immutable(UnicodeProperty)("InGothic", unicodeInGothic),
immutable(UnicodeProperty)("InGreek and Coptic", unicodeInGreek_and_Coptic),
immutable(UnicodeProperty)("InGreek Extended", unicodeInGreek_Extended),
immutable(UnicodeProperty)("InGujarati", unicodeInGujarati),
immutable(UnicodeProperty)("InGurmukhi", unicodeInGurmukhi),
immutable(UnicodeProperty)("InHalfwidth and Fullwidth Forms", unicodeInHalfwidth_and_Fullwidth_Forms),
immutable(UnicodeProperty)("InHangul Compatibility Jamo", unicodeInHangul_Compatibility_Jamo),
immutable(UnicodeProperty)("InHangul Jamo", unicodeInHangul_Jamo),
immutable(UnicodeProperty)("InHangul Jamo Extended-A", unicodeInHangul_Jamo_Extended_A),
immutable(UnicodeProperty)("InHangul Jamo Extended-B", unicodeInHangul_Jamo_Extended_B),
immutable(UnicodeProperty)("InHangul Syllables", unicodeInHangul_Syllables),
immutable(UnicodeProperty)("InHanunoo", unicodeInHanunoo),
immutable(UnicodeProperty)("InHebrew", unicodeInHebrew),
immutable(UnicodeProperty)("Inherited", unicodeInherited),
immutable(UnicodeProperty)("InHigh Private Use Surrogates", unicodeInHigh_Private_Use_Surrogates),
immutable(UnicodeProperty)("InHigh Surrogates", unicodeInHigh_Surrogates),
immutable(UnicodeProperty)("InHiragana", unicodeInHiragana),
immutable(UnicodeProperty)("InIdeographic Description Characters", unicodeInIdeographic_Description_Characters),
immutable(UnicodeProperty)("InImperial Aramaic", unicodeInImperial_Aramaic),
immutable(UnicodeProperty)("InInscriptional Pahlavi", unicodeInInscriptional_Pahlavi),
immutable(UnicodeProperty)("InInscriptional Parthian", unicodeInInscriptional_Parthian),
immutable(UnicodeProperty)("InIPA Extensions", unicodeInIPA_Extensions),
immutable(UnicodeProperty)("Initial_Punctuation", unicodePi),
immutable(UnicodeProperty)("InJavanese", unicodeInJavanese),
immutable(UnicodeProperty)("InKaithi", unicodeInKaithi),
immutable(UnicodeProperty)("InKana Supplement", unicodeInKana_Supplement),
immutable(UnicodeProperty)("InKanbun", unicodeInKanbun),
immutable(UnicodeProperty)("InKangxi Radicals", unicodeInKangxi_Radicals),
immutable(UnicodeProperty)("InKannada", unicodeInKannada),
immutable(UnicodeProperty)("InKatakana", unicodeInKatakana),
immutable(UnicodeProperty)("InKatakana Phonetic Extensions", unicodeInKatakana_Phonetic_Extensions),
immutable(UnicodeProperty)("InKayah Li", unicodeInKayah_Li),
immutable(UnicodeProperty)("InKharoshthi", unicodeInKharoshthi),
immutable(UnicodeProperty)("InKhmer", unicodeInKhmer),
immutable(UnicodeProperty)("InKhmer Symbols", unicodeInKhmer_Symbols),
immutable(UnicodeProperty)("InLao", unicodeInLao),
immutable(UnicodeProperty)("InLatin-1 Supplement", unicodeInLatin_1_Supplement),
immutable(UnicodeProperty)("InLatin Extended-A", unicodeInLatin_Extended_A),
immutable(UnicodeProperty)("InLatin Extended Additional", unicodeInLatin_Extended_Additional),
immutable(UnicodeProperty)("InLatin Extended-B", unicodeInLatin_Extended_B),
immutable(UnicodeProperty)("InLatin Extended-C", unicodeInLatin_Extended_C),
immutable(UnicodeProperty)("InLatin Extended-D", unicodeInLatin_Extended_D),
immutable(UnicodeProperty)("InLepcha", unicodeInLepcha),
immutable(UnicodeProperty)("InLetterlike Symbols", unicodeInLetterlike_Symbols),
immutable(UnicodeProperty)("InLimbu", unicodeInLimbu),
immutable(UnicodeProperty)("InLinear B Ideograms", unicodeInLinear_B_Ideograms),
immutable(UnicodeProperty)("InLinear B Syllabary", unicodeInLinear_B_Syllabary),
immutable(UnicodeProperty)("InLisu", unicodeInLisu),
immutable(UnicodeProperty)("InLow Surrogates", unicodeInLow_Surrogates),
immutable(UnicodeProperty)("InLycian", unicodeInLycian),
immutable(UnicodeProperty)("InLydian", unicodeInLydian),
immutable(UnicodeProperty)("InMahjong Tiles", unicodeInMahjong_Tiles),
immutable(UnicodeProperty)("InMalayalam", unicodeInMalayalam),
immutable(UnicodeProperty)("InMandaic", unicodeInMandaic),
immutable(UnicodeProperty)("InMathematical Alphanumeric Symbols", unicodeInMathematical_Alphanumeric_Symbols),
immutable(UnicodeProperty)("InMathematical Operators", unicodeInMathematical_Operators),
immutable(UnicodeProperty)("InMeetei Mayek", unicodeInMeetei_Mayek),
immutable(UnicodeProperty)("InMeetei Mayek Extensions", unicodeInMeetei_Mayek_Extensions),
immutable(UnicodeProperty)("InMeroitic Cursive", unicodeInMeroitic_Cursive),
immutable(UnicodeProperty)("InMeroitic Hieroglyphs", unicodeInMeroitic_Hieroglyphs),
immutable(UnicodeProperty)("InMiao", unicodeInMiao),
immutable(UnicodeProperty)("InMiscellaneous Mathematical Symbols-A", unicodeInMiscellaneous_Mathematical_Symbols_A),
immutable(UnicodeProperty)("InMiscellaneous Mathematical Symbols-B", unicodeInMiscellaneous_Mathematical_Symbols_B),
immutable(UnicodeProperty)("InMiscellaneous Symbols", unicodeInMiscellaneous_Symbols),
immutable(UnicodeProperty)("InMiscellaneous Symbols and Arrows", unicodeInMiscellaneous_Symbols_and_Arrows),
immutable(UnicodeProperty)("InMiscellaneous Symbols And Pictographs", unicodeInMiscellaneous_Symbols_And_Pictographs),
immutable(UnicodeProperty)("InMiscellaneous Technical", unicodeInMiscellaneous_Technical),
immutable(UnicodeProperty)("InModifier Tone Letters", unicodeInModifier_Tone_Letters),
immutable(UnicodeProperty)("InMongolian", unicodeInMongolian),
immutable(UnicodeProperty)("InMusical Symbols", unicodeInMusical_Symbols),
immutable(UnicodeProperty)("InMyanmar", unicodeInMyanmar),
immutable(UnicodeProperty)("InMyanmar Extended-A", unicodeInMyanmar_Extended_A),
immutable(UnicodeProperty)("InNew Tai Lue", unicodeInNew_Tai_Lue),
immutable(UnicodeProperty)("InNKo", unicodeInNKo),
immutable(UnicodeProperty)("InNumber Forms", unicodeInNumber_Forms),
immutable(UnicodeProperty)("InOgham", unicodeInOgham),
immutable(UnicodeProperty)("InOl Chiki", unicodeInOl_Chiki),
immutable(UnicodeProperty)("InOld Italic", unicodeInOld_Italic),
immutable(UnicodeProperty)("InOld Persian", unicodeInOld_Persian),
immutable(UnicodeProperty)("InOld South Arabian", unicodeInOld_South_Arabian),
immutable(UnicodeProperty)("InOld Turkic", unicodeInOld_Turkic),
immutable(UnicodeProperty)("InOptical Character Recognition", unicodeInOptical_Character_Recognition),
immutable(UnicodeProperty)("InOriya", unicodeInOriya),
immutable(UnicodeProperty)("InOsmanya", unicodeInOsmanya),
immutable(UnicodeProperty)("InPhags-pa", unicodeInPhags_pa),
immutable(UnicodeProperty)("InPhaistos Disc", unicodeInPhaistos_Disc),
immutable(UnicodeProperty)("InPhoenician", unicodeInPhoenician),
immutable(UnicodeProperty)("InPhonetic Extensions", unicodeInPhonetic_Extensions),
immutable(UnicodeProperty)("InPhonetic Extensions Supplement", unicodeInPhonetic_Extensions_Supplement),
immutable(UnicodeProperty)("InPlaying Cards", unicodeInPlaying_Cards),
immutable(UnicodeProperty)("InPrivate Use Area", unicodeInPrivate_Use_Area),
immutable(UnicodeProperty)("InRejang", unicodeInRejang),
immutable(UnicodeProperty)("InRumi Numeral Symbols", unicodeInRumi_Numeral_Symbols),
immutable(UnicodeProperty)("InRunic", unicodeInRunic),
immutable(UnicodeProperty)("InSamaritan", unicodeInSamaritan),
immutable(UnicodeProperty)("InSaurashtra", unicodeInSaurashtra),
immutable(UnicodeProperty)("Inscriptional_Pahlavi", unicodeInscriptional_Pahlavi),
immutable(UnicodeProperty)("Inscriptional_Parthian", unicodeInscriptional_Parthian),
immutable(UnicodeProperty)("InSharada", unicodeInSharada),
immutable(UnicodeProperty)("InShavian", unicodeInShavian),
immutable(UnicodeProperty)("InSinhala", unicodeInSinhala),
immutable(UnicodeProperty)("InSmall Form Variants", unicodeInSmall_Form_Variants),
immutable(UnicodeProperty)("InSora Sompeng", unicodeInSora_Sompeng),
immutable(UnicodeProperty)("InSpacing Modifier Letters", unicodeInSpacing_Modifier_Letters),
immutable(UnicodeProperty)("InSpecials", unicodeInSpecials),
immutable(UnicodeProperty)("InSundanese", unicodeInSundanese),
immutable(UnicodeProperty)("InSundanese Supplement", unicodeInSundanese_Supplement),
immutable(UnicodeProperty)("InSuperscripts and Subscripts", unicodeInSuperscripts_and_Subscripts),
immutable(UnicodeProperty)("InSupplemental Arrows-A", unicodeInSupplemental_Arrows_A),
immutable(UnicodeProperty)("InSupplemental Arrows-B", unicodeInSupplemental_Arrows_B),
immutable(UnicodeProperty)("InSupplemental Mathematical Operators", unicodeInSupplemental_Mathematical_Operators),
immutable(UnicodeProperty)("InSupplemental Punctuation", unicodeInSupplemental_Punctuation),
immutable(UnicodeProperty)("InSupplementary Private Use Area-A", unicodeInSupplementary_Private_Use_Area_A),
immutable(UnicodeProperty)("InSupplementary Private Use Area-B", unicodeInSupplementary_Private_Use_Area_B),
immutable(UnicodeProperty)("InSyloti Nagri", unicodeInSyloti_Nagri),
immutable(UnicodeProperty)("InSyriac", unicodeInSyriac),
immutable(UnicodeProperty)("InTagalog", unicodeInTagalog),
immutable(UnicodeProperty)("InTagbanwa", unicodeInTagbanwa),
immutable(UnicodeProperty)("InTags", unicodeInTags),
immutable(UnicodeProperty)("InTai Le", unicodeInTai_Le),
immutable(UnicodeProperty)("InTai Tham", unicodeInTai_Tham),
immutable(UnicodeProperty)("InTai Viet", unicodeInTai_Viet),
immutable(UnicodeProperty)("InTai Xuan Jing Symbols", unicodeInTai_Xuan_Jing_Symbols),
immutable(UnicodeProperty)("InTakri", unicodeInTakri),
immutable(UnicodeProperty)("InTamil", unicodeInTamil),
immutable(UnicodeProperty)("InTelugu", unicodeInTelugu),
immutable(UnicodeProperty)("InThaana", unicodeInThaana),
immutable(UnicodeProperty)("InThai", unicodeInThai),
immutable(UnicodeProperty)("InTibetan", unicodeInTibetan),
immutable(UnicodeProperty)("InTifinagh", unicodeInTifinagh),
immutable(UnicodeProperty)("InTransport And Map Symbols", unicodeInTransport_And_Map_Symbols),
immutable(UnicodeProperty)("InUgaritic", unicodeInUgaritic),
immutable(UnicodeProperty)("InUnified Canadian Aboriginal Syllabics", unicodeInUnified_Canadian_Aboriginal_Syllabics),
immutable(UnicodeProperty)("InUnified Canadian Aboriginal Syllabics Extended", unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended),
immutable(UnicodeProperty)("InVai", unicodeInVai),
immutable(UnicodeProperty)("InVariation Selectors", unicodeInVariation_Selectors),
immutable(UnicodeProperty)("InVariation Selectors Supplement", unicodeInVariation_Selectors_Supplement),
immutable(UnicodeProperty)("InVedic Extensions", unicodeInVedic_Extensions),
immutable(UnicodeProperty)("InVertical Forms", unicodeInVertical_Forms),
immutable(UnicodeProperty)("InYijing Hexagram Symbols", unicodeInYijing_Hexagram_Symbols),
immutable(UnicodeProperty)("InYi Radicals", unicodeInYi_Radicals),
immutable(UnicodeProperty)("InYi Syllables", unicodeInYi_Syllables),
immutable(UnicodeProperty)("Javanese", unicodeJavanese),
immutable(UnicodeProperty)("Join_Control", unicodeJoin_Control),
immutable(UnicodeProperty)("Kaithi", unicodeKaithi),
immutable(UnicodeProperty)("Kannada", unicodeKannada),
immutable(UnicodeProperty)("Katakana", unicodeKatakana),
immutable(UnicodeProperty)("Kayah_Li", unicodeKayah_Li),
immutable(UnicodeProperty)("Kharoshthi", unicodeKharoshthi),
immutable(UnicodeProperty)("Khmer", unicodeKhmer),
immutable(UnicodeProperty)("L", unicodeL),
immutable(UnicodeProperty)("Lao", unicodeLao),
immutable(UnicodeProperty)("Latin", unicodeLatin),
immutable(UnicodeProperty)("Leading_Jamo", unicodeL),
immutable(UnicodeProperty)("Lepcha", unicodeLepcha),
immutable(UnicodeProperty)("Letter_Number", unicodeNl),
immutable(UnicodeProperty)("Limbu", unicodeLimbu),
immutable(UnicodeProperty)("Linear_B", unicodeLinear_B),
immutable(UnicodeProperty)("Line_Separator", unicodeZl),
immutable(UnicodeProperty)("Lisu", unicodeLisu),
immutable(UnicodeProperty)("Ll", unicodeLl),
immutable(UnicodeProperty)("Lm", unicodeLm),
immutable(UnicodeProperty)("Lo", unicodeLo),
immutable(UnicodeProperty)("Logical_Order_Exception", unicodeLogical_Order_Exception),
immutable(UnicodeProperty)("Lowercase", unicodeLowercase),
immutable(UnicodeProperty)("Lowercase_Letter", unicodeLl),
immutable(UnicodeProperty)("Lt", unicodeLt),
immutable(UnicodeProperty)("Lu", unicodeLu),
immutable(UnicodeProperty)("LV", unicodeLV),
immutable(UnicodeProperty)("LV_Syllable", unicodeLV),
immutable(UnicodeProperty)("LVT", unicodeLVT),
immutable(UnicodeProperty)("LVT_Syllable", unicodeLVT),
immutable(UnicodeProperty)("Lycian", unicodeLycian),
immutable(UnicodeProperty)("Lydian", unicodeLydian),
immutable(UnicodeProperty)("Malayalam", unicodeMalayalam),
immutable(UnicodeProperty)("Mandaic", unicodeMandaic),
immutable(UnicodeProperty)("Math", unicodeMath),
immutable(UnicodeProperty)("Math_Symbol", unicodeSm),
immutable(UnicodeProperty)("Mc", unicodeMc),
immutable(UnicodeProperty)("Me", unicodeMe),
immutable(UnicodeProperty)("Meetei_Mayek", unicodeMeetei_Mayek),
immutable(UnicodeProperty)("Meroitic_Cursive", unicodeMeroitic_Cursive),
immutable(UnicodeProperty)("Meroitic_Hieroglyphs", unicodeMeroitic_Hieroglyphs),
immutable(UnicodeProperty)("Miao", unicodeMiao),
immutable(UnicodeProperty)("Mn", unicodeMn),
immutable(UnicodeProperty)("Modifier_Letter", unicodeLm),
immutable(UnicodeProperty)("Modifier_Symbol", unicodeSk),
immutable(UnicodeProperty)("Mongolian", unicodeMongolian),
immutable(UnicodeProperty)("Myanmar", unicodeMyanmar),
immutable(UnicodeProperty)("Nd", unicodeNd),
immutable(UnicodeProperty)("New_Tai_Lue", unicodeNew_Tai_Lue),
immutable(UnicodeProperty)("Nko", unicodeNko),
immutable(UnicodeProperty)("Nl", unicodeNl),
immutable(UnicodeProperty)("No", unicodeNo),
immutable(UnicodeProperty)("Noncharacter_Code_Point", unicodeNoncharacter_Code_Point),
immutable(UnicodeProperty)("Nonspacing_Mark", unicodeMn),
immutable(UnicodeProperty)("Ogham", unicodeOgham),
immutable(UnicodeProperty)("Ol_Chiki", unicodeOl_Chiki),
immutable(UnicodeProperty)("Old_Italic", unicodeOld_Italic),
immutable(UnicodeProperty)("Old_Persian", unicodeOld_Persian),
immutable(UnicodeProperty)("Old_South_Arabian", unicodeOld_South_Arabian),
immutable(UnicodeProperty)("Old_Turkic", unicodeOld_Turkic),
immutable(UnicodeProperty)("Open_Punctuation", unicodePs),
immutable(UnicodeProperty)("Oriya", unicodeOriya),
immutable(UnicodeProperty)("Osmanya", unicodeOsmanya),
immutable(UnicodeProperty)("Other_Alphabetic", unicodeOther_Alphabetic),
immutable(UnicodeProperty)("Other_Default_Ignorable_Code_Point", unicodeOther_Default_Ignorable_Code_Point),
immutable(UnicodeProperty)("Other_Grapheme_Extend", unicodeOther_Grapheme_Extend),
immutable(UnicodeProperty)("Other_ID_Continue", unicodeOther_ID_Continue),
immutable(UnicodeProperty)("Other_ID_Start", unicodeOther_ID_Start),
immutable(UnicodeProperty)("Other_Letter", unicodeLo),
immutable(UnicodeProperty)("Other_Lowercase", unicodeOther_Lowercase),
immutable(UnicodeProperty)("Other_Math", unicodeOther_Math),
immutable(UnicodeProperty)("Other_Number", unicodeNo),
immutable(UnicodeProperty)("Other_Punctuation", unicodePo),
immutable(UnicodeProperty)("Other_Symbol", unicodeSo),
immutable(UnicodeProperty)("Other_Uppercase", unicodeOther_Uppercase),
immutable(UnicodeProperty)("Paragraph_Separator", unicodeZp),
immutable(UnicodeProperty)("Pattern_Syntax", unicodePattern_Syntax),
immutable(UnicodeProperty)("Pattern_White_Space", unicodePattern_White_Space),
immutable(UnicodeProperty)("Pc", unicodePc),
immutable(UnicodeProperty)("Pd", unicodePd),
immutable(UnicodeProperty)("Pe", unicodePe),
immutable(UnicodeProperty)("Pf", unicodePf),
immutable(UnicodeProperty)("Phags_Pa", unicodePhags_Pa),
immutable(UnicodeProperty)("Phoenician", unicodePhoenician),
immutable(UnicodeProperty)("Pi", unicodePi),
immutable(UnicodeProperty)("Po", unicodePo),
immutable(UnicodeProperty)("Private_Use", unicodeCo),
immutable(UnicodeProperty)("Ps", unicodePs),
immutable(UnicodeProperty)("Quotation_Mark", unicodeQuotation_Mark),
immutable(UnicodeProperty)("Radical", unicodeRadical),
immutable(UnicodeProperty)("Rejang", unicodeRejang),
immutable(UnicodeProperty)("Runic", unicodeRunic),
immutable(UnicodeProperty)("Samaritan", unicodeSamaritan),
immutable(UnicodeProperty)("Saurashtra", unicodeSaurashtra),
immutable(UnicodeProperty)("Sc", unicodeSc),
immutable(UnicodeProperty)("Sharada", unicodeSharada),
immutable(UnicodeProperty)("Shavian", unicodeShavian),
immutable(UnicodeProperty)("Sinhala", unicodeSinhala),
immutable(UnicodeProperty)("Sk", unicodeSk),
immutable(UnicodeProperty)("Sm", unicodeSm),
immutable(UnicodeProperty)("So", unicodeSo),
immutable(UnicodeProperty)("Soft_Dotted", unicodeSoft_Dotted),
immutable(UnicodeProperty)("Sora_Sompeng", unicodeSora_Sompeng),
immutable(UnicodeProperty)("Space_Separator", unicodeZs),
immutable(UnicodeProperty)("Spacing_Mark", unicodeMc),
immutable(UnicodeProperty)("STerm", unicodeSTerm),
immutable(UnicodeProperty)("Sundanese", unicodeSundanese),
immutable(UnicodeProperty)("Surrogate", unicodeCs),
immutable(UnicodeProperty)("Syloti_Nagri", unicodeSyloti_Nagri),
immutable(UnicodeProperty)("Syriac", unicodeSyriac),
immutable(UnicodeProperty)("T", unicodeT),
immutable(UnicodeProperty)("Tagalog", unicodeTagalog),
immutable(UnicodeProperty)("Tagbanwa", unicodeTagbanwa),
immutable(UnicodeProperty)("Tai_Le", unicodeTai_Le),
immutable(UnicodeProperty)("Tai_Tham", unicodeTai_Tham),
immutable(UnicodeProperty)("Tai_Viet", unicodeTai_Viet),
immutable(UnicodeProperty)("Takri", unicodeTakri),
immutable(UnicodeProperty)("Tamil", unicodeTamil),
immutable(UnicodeProperty)("Telugu", unicodeTelugu),
immutable(UnicodeProperty)("Terminal_Punctuation", unicodeTerminal_Punctuation),
immutable(UnicodeProperty)("Thaana", unicodeThaana),
immutable(UnicodeProperty)("Thai", unicodeThai),
immutable(UnicodeProperty)("Tibetan", unicodeTibetan),
immutable(UnicodeProperty)("Tifinagh", unicodeTifinagh),
immutable(UnicodeProperty)("Titlecase_Letter", unicodeLt),
immutable(UnicodeProperty)("Trailing_Jamo", unicodeT),
immutable(UnicodeProperty)("Ugaritic", unicodeUgaritic),
immutable(UnicodeProperty)("Unassigned", unicodeCn),
immutable(UnicodeProperty)("Unified_Ideograph", unicodeUnified_Ideograph),
immutable(UnicodeProperty)("Uppercase", unicodeUppercase),
immutable(UnicodeProperty)("Uppercase_Letter", unicodeLu),
immutable(UnicodeProperty)("V", unicodeV),
immutable(UnicodeProperty)("Vai", unicodeVai),
immutable(UnicodeProperty)("Variation_Selector", unicodeVariation_Selector),
immutable(UnicodeProperty)("Vowel_Jamo", unicodeV),
immutable(UnicodeProperty)("White_Space", unicodeWhite_Space),
immutable(UnicodeProperty)("XID_Continue", unicodeXID_Continue),
immutable(UnicodeProperty)("XID_Start", unicodeXID_Start),
immutable(UnicodeProperty)("Yi", unicodeYi),
immutable(UnicodeProperty)("Zl", unicodeZl),
immutable(UnicodeProperty)("Zp", unicodeZp),
immutable(UnicodeProperty)("Zs", unicodeZs),
];
version (LittleEndian)
{
    static if(size_t.sizeof == 8)
    {

//1536 bytes
immutable lowerCaseTrieEntries = TrieEntry!(bool, 8, 4, 9)([ 0x0,  0x20,  0x40], [ 0x100,  0x80,  0x2000], [ 0x402030202020100,  0x206020202020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x3000300030003,  0x3000300030003,  0x5000400030003,  0x3000700030006,  0x3000800030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x9000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0xb0003000a0003,  0x3000c00030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0xe000d00030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x0,  0x7fffffe00000000,  0x420040000000000,  0xff7fffff80000000,  0x55aaaaaaaaaaaaaa,  0xd4aaaaaaaaaaab55,  0xe6512d2a4e243129,  0xaa29aaaab5555240,  0x93faaaaaaaaaaaaa,  0xffffffffffffaa85,  0x1ffffffffefffff,  0x1f00000003,  0x0,  0x3c8a000000000020,  0xfffff00000010000,  0x192faaaaaae37fff,  0xffff000000000000,  0xaaaaaaaaffffffff,  0xaaaaaaaaaaaaa802,  0xaaaaaaaaaaaad554,  0xaaaaaaaaaa,  0xfffffffe00000000,  0xff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xaaaaaaaaaaaaaaaa,  0xaaaaaaaaaaaaaaaa,  0xaaaaaaaabfeaaaaa,  0xaaaaaaaaaaaaaaaa,  0xff00ff003f00ff,  0x3fff00ff00ff003f,  0x40df00ff00ff00ff,  0xdc00ff00cf00dc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0x321080000008c400,  0xffff0000000043c0,  0x10,  0x0,  0x0,  0x0,  0x0,  0x3ffffff0000,  0x0,  0x0,  0x0,  0x0,  0xffff000000000000,  0x3fda15627fffffff,  0xaaaaaaaaaaaaaaaa,  0x8501aaaaaaaaa,  0x20bfffffffff,  0x0,  0x0,  0x0,  0x0,  0x2aaaaaaaaaaa,  0xaaaaaa,  0x0,  0xaaabaaa800000000,  0x95ffaaaaaaaaaaaa,  0x2aa000a50aa,  0x700000000000000,  0x0,  0x0,  0x0,  0x0,  0xf8007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x0,  0x0,  0xffffff0000000000,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffc000000,  0xffffdfc000,  0xebc000000ffffffc,  0xfffffc000000ffef,  0xffffffc000000f,  0xffffffc0000,  0xfc000000ffffffc0,  0xffffc000000fffff,  0xffffffc000000ff,  0xffffffc00000,  0x3ffffffc00,  0xf0000003f7fffffc,  0xffc000000fdfffff,  0xffff0000003f7fff,  0xfffffc000000fdff,  0xbf7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//1472 bytes
immutable upperCaseTrieEntries = TrieEntry!(bool, 8, 4, 9)([ 0x0,  0x20,  0x40], [ 0x100,  0x80,  0x1e00], [ 0x402030202020100,  0x206020202020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x3000300030003,  0x3000300030004,  0x5000300030003,  0x3000700030006,  0x3000800030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x9000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0xa000300030003,  0x3000b00030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0xd000c00030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x3000300030003,  0x0,  0x7fffffe,  0x0,  0x7f7fffff,  0xaa55555555555555,  0x2b555555555554aa,  0x11aed2d5b1dbced6,  0x55d255554aaaa490,  0x6c05555555555555,  0x557a,  0x0,  0x0,  0x0,  0x45000000000000,  0xffbfffed740,  0xe6905555551c8000,  0xffffffffffff,  0x5555555500000000,  0x5555555555555401,  0x5555555555552aab,  0xfffe005555555555,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0x20bf,  0x0,  0x0,  0x0,  0x0,  0x5555555555555555,  0x5555555555555555,  0x5555555540155555,  0x5555555555555555,  0xff00ff003f00ff00,  0xff00aa003f00,  0xf00000000000000,  0xf001f000f000f00,  0x0,  0x0,  0x0,  0x0,  0xc00f3d503e273884,  0xffff00000020,  0x8,  0x0,  0x0,  0x0,  0xffc0000000000000,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x7fffffffffff,  0xc025ea9d00000000,  0x5555555555555555,  0x4280555555555,  0x0,  0x0,  0x0,  0x0,  0x0,  0x155555555555,  0x555555,  0x0,  0x5554555400000000,  0x6a00555555555555,  0x55500052855,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe00000000,  0x0,  0x0,  0x0,  0xffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0000003ffffff,  0xffffff0000003fff,  0x3fde64d0000003,  0x3ffffff0000,  0x7b0000001fdfe7b0,  0xfffff0000001fc5f,  0x3ffffff0000003f,  0x3ffffff00000,  0xf0000003ffffff00,  0xffff0000003fffff,  0xffffff00000003ff,  0x7fffffc00000001,  0x1ffffff0000000,  0x7fffffc00000,  0x1ffffff0000,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//8704 bytes
immutable simpleCaseTrieEntries = TrieEntry!(ushort, 8, 7, 6)([ 0x0,  0x20,  0x100], [ 0x100,  0x380,  0xd00], [ 0x402030202020100,  0x202020202020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x3000200010000,  0x7000600050004,  0xa00090008,  0xd000c000b0000,  0x110010000f000e,  0x1400130012,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x16001500000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x170000,  0x1b001a00190018,  0x1f001e001d001c,  0x0,  0x2200210020,  0x0,  0x0,  0x24002300000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x28002700260025,  0x29,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2b002a0000,  0x2e002d002c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30002f,  0x0,  0x0,  0x0,  0x0,  0x320031,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1ca01bd01b5ffff,  0x1f701ea01df01d5,  0x6e00213020b01ff,  0x242023802300226,  0x82e025e0256024c,  0x28d0283027b0273,  0xffff02a3029d0295,  0xffffffffffffffff,  0x1cb01be01b6ffff,  0x1f801eb01e001d6,  0x6df0214020c0200,  0x243023902310227,  0x82d025f0257024d,  0x28e0284027c0274,  0xffff02a4029e0296,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0494ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x4f404f004e604e0,  0x51c051306e304fe,  0x53e053a0530052c,  0x5560552054e0549,  0x5660562055e055a,  0xffff0572056e0568,  0x58c05840580057a,  0x184059805960590,  0x4f504f104e704e1,  0x51d051406e204ff,  0x53f053b0531052d,  0x5570553054f054a,  0x5670563055f055b,  0xffff0573056f0569,  0x58d05850581057b,  0x7f5059905970591,  0x604060305fe05fd,  0x6140613060a0609,  0x6280627061e061d,  0x638063706320631,  0x6440643063e063d,  0x650064f064a0649,  0x65c065b06560655,  0x668066706620661,  0x6760675066e066d,  0x68a0689067e067d,  0x69a069906920691,  0x6a606a506a206a1,  0x6ac06abffffffff,  0x6b806b706b006af,  0x6c906c206c1ffff,  0x6d606d006cf06ca,  0x6e406db06da06d7,  0x6f206eb06ea06e5,  0x7010700ffff06f3,  0x70d070c07090708,  0x715071407110710,  0x721072007190718,  0x7330732072b072a,  0x7430742073d073c,  0x7570756074d074c,  0x76f076e07610760,  0x7890788077d077c,  0x79d079c07930792,  0x7b907b807ab07aa,  0x7dd07dc07c707c6,  0x80c07fd07fc07f4,  0x82c081d081c080d,  0x84d084c083f04d5,  0x18000c08610860,  0x3e0036002c0019,  0x5e0056ffff003f,  0x7e006f006e0066,  0xa2009a03160088,  0xffff04b000ad00ac,  0xda040900ce00c8,  0xef00ee00e300e2,  0x104010000f900f8,  0xffffffff010c0105,  0x126012001190118,  0x140013a01320127,  0x158014d014c0141,  0xffffffff01610160,  0x31cffff01730172,  0xffffffffffffffff,  0x1ce01ab01aa01ac,  0x1ec01ee01cd01cc,  0x2150202020101ed,  0x23a022902280216,  0x260024f024e023b,  0x285027602750261,  0x2a0029f00570286,  0x2b602b502ac02ab,  0x2cc02cb02c202c1,  0x2dc02db02d402d3,  0x2f002ef02e602e5,  0x30303020304ffff,  0x31b0315030e030d,  0x32803270320031f,  0x33803370330032f,  0x34e034d03420341,  0x3680367035a0359,  0x380037f03740373,  0x3970396038a0389,  0x3b003af03a303a2,  0x3cd03cc03be03bd,  0x3e603e503da03d9,  0x3fe03fd03f303f2,  0x4120411ffff0408,  0x4250424041a0419,  0x43b043a042f042e,  0x457045604490448,  0x471047004650464,  0xffffffffffffffff,  0x4a10497ffffffff,  0x30804b804af04a2,  0x4d404cb04ca030c,  0x4e904e804e204d8,  0x508050704f704f6,  0x5330532051f051e,  0x84002c602b202be,  0x37002dffff000d,  0x67ffff005fffff,  0xffffffffffffffff,  0x89ffffffff007f,  0xffff037e02eaffff,  0x25dffff009b00a3,  0xc9ffffffffffff,  0xffff00cf02baffff,  0xffffffff00dbffff,  0xffffffffffffffff,  0xffffffff0270ffff,  0x10dffffffff0101,  0xffffffffffffffff,  0x13b013304d90121,  0xffffffffffff04e3,  0xffff0159ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0738ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x2ec02eb02e202e1,  0x2fd02fcffffffff,  0x5d8ffffffffffff,  0xffffffff05de05dc,  0xffffffffffffffff,  0xffff0347ffffffff,  0xffff0361035b0353,  0x3810379ffff036d,  0x3980517038bffff,  0x3b103ab05c8039e,  0x3ce05b2073905c4,  0x3e703e103db0496,  0x4b3ffff05b7054d,  0x4130542040a0404,  0x426042206d50417,  0x362035c03540348,  0x3990516038cffff,  0x3b203ac05c7039f,  0x3cf05b1073705c3,  0x3e803e203dc0495,  0x4b204b105b6054c,  0x4140541040b0405,  0x427042306d40418,  0x5090382037a036e,  0xffffffff05c50515,  0x50a054b0540ffff,  0x55d055c05550554,  0x56b056a05650564,  0x57d057c05750574,  0x593059205870586,  0x59f059e059b059a,  0x5a905a805a505a4,  0xffff05d005b505b0,  0x5cbffff05c605c2,  0x5d405d305cf05cc,  0x5dd05db05d7ffff,  0x5eb05e905e505e3,  0x5f705f505f105ef,  0x60105ff05fb05f9,  0x60f060b06070605,  0x623061f06190615,  0x6350633062d0629,  0x641063f063b0639,  0x64d064b06470645,  0x659065706530651,  0x6650663065f065d,  0x671066f066b0669,  0x683067f06790677,  0x6240620061a0616,  0x6360634062e062a,  0x6420640063c063a,  0x64e064c06480646,  0x65a065806540652,  0x66606640660065e,  0x6720670066c066a,  0x6840680067a0678,  0x5ec05ea05e605e4,  0x5f805f605f205f0,  0x602060005fc05fa,  0x610060c06080606,  0x72d072c07230722,  0x73f073e07350734,  0x74f074e07450744,  0x763076207590758,  0x77f077e07710770,  0x7950794078b078a,  0x7ad07ac079f079e,  0x7c907c807bb07ba,  0xffffffff07df07de,  0xffffffffffffffff,  0x8380837ffffffff,  0x8630862084f084e,  0x250024000f000e,  0x49004800390038,  0x69006800590058,  0x8b008a00790078,  0xaf00ae009d009c,  0xcb00ca00bb00ba,  0xe500e400d700d6,  0xfb00fa00f100f0,  0x10b010a01030102,  0x11b011a01130112,  0x12f012e01230122,  0x1490148013d013c,  0x164015b015a0154,  0x179016d016c0165,  0x18f01820181017a,  0x155019a01990190,  0x1d001cf01b801b7,  0x1fa01f901e501e4,  0x2210220020e020d,  0x245024402330232,  0x26c026b02590258,  0x290028f027e027d,  0x2ae02ad02a202a1,  0x2c402c302b802b7,  0x2d602d502ce02cd,  0x2e802e702de02dd,  0x2f802f702f202f1,  0x310030f03060305,  0x322032103180317,  0x3320331032a0329,  0x3440343033a0339,  0x35e035d0350034f,  0x3760375036a0369,  0x38e038d03840383,  0x3a803a7039b039a,  0x3c403c303b403b3,  0x3de03dd03d103d0,  0x3f803f703ea03e9,  0xffffffffffffffff,  0xffffffffffffffff,  0x4360430042cffff,  0x452044a0444043c,  0x46e046604600458,  0x480047a04780472,  0x490048a04880482,  0x4b404a704a30499,  0x4cc04c404c204ba,  0x4e404da04d604ce,  0x50004f804f204ea,  0xffff05240518050b,  0xffffffffffffffff,  0xffffffffffffffff,  0x4370431042dffff,  0x453044b0445043d,  0x46f046704610459,  0x481047b04790473,  0x491048b04890483,  0x4b504a804a4049a,  0x4cd04c504c304bb,  0x4e504db04d704cf,  0x50104f904f304eb,  0xffff05250519050c,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7b207ae07a407a0,  0x7d207ca07c007bc,  0x7fe07f607e807e0,  0x81e0816080e0806,  0x8410839082f0826,  0x86408560850,  0x2e0026001a0010,  0x4e004a0040003a,  0x70006a0060005a,  0x90ffff0080007a,  0xffffffffffffffff,  0xffffffff00c0ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0294ffff,  0xffffffff0267ffff,  0x67c067b06740673,  0x68e068d06860685,  0x69e069d06960695,  0x6a806a706a406a3,  0x6ae06ad06aa06a9,  0x6bc06bb06b406b3,  0x6cc06cb06c406c3,  0x6d906d806d206d1,  0x6e706e606dd06dc,  0x6f506f406ed06ec,  0x705070406fb06fa,  0x70f070e070b070a,  0x717071607130712,  0x7270726071d071c,  0x73b073a07310730,  0x749074807410740,  0x75d075c07530752,  0x777077607690768,  0x78f078e07850784,  0x7a707a607990798,  0x7c307c207b507b4,  0x7eb07ea07d507d4,  0x811081008010800,  0x832083108210820,  0x859085808440843,  0x1d001c00030002,  0x43004200310030,  0x63006200510050,  0x83008200730072,  0xa500a400930092,  0xc300c200b500b4,  0xdd00dc00d100d0,  0xf500f400e900e8,  0x107010600fd00fc,  0x1150114010f010e,  0x1290128011d011c,  0x143014201350134,  0xffffffff014f014e,  0x845ffffffffffff,  0xffff0183ffffffff,  0x19c019b01920191,  0x1c301c201ae01ad,  0x1f001ef01d801d7,  0x218021702040203,  0x23d023c022b022a,  0x263026202510250,  0x288028702780277,  0x2a602a502980297,  0x2bc02bb02b002af,  0x2d202d102c802c7,  0x2e402e302d802d7,  0x2f402f302ee02ed,  0x30a030902ff02fe,  0x31e031d03140313,  0x32e032d03260325,  0x33e033d03360335,  0x3560355034a0349,  0x370036f03640363,  0x3880387037c037b,  0x3a103a003950394,  0x3bc03bb03ae03ad,  0x3d803d703cb03ca,  0x3f103f003e403e3,  0x407040603fc03fb,  0x44d0447043f0439,  0x4690463045b0455,  0x44c0446043e0438,  0x4680462045a0454,  0x4aa04a6049c0493,  0xffffffff04bd04b7,  0x4a904a5049b0492,  0xffffffff04bc04b6,  0x527051b050e0503,  0x544053d0535052f,  0x526051a050d0502,  0x543053c0534052e,  0x57905770571056d,  0x58f05890583057f,  0x57805760570056c,  0x58e05880582057e,  0x5b905b405ad05ab,  0xffffffff05bf05bd,  0x5b805b305ac05aa,  0xffffffff05be05bc,  0x5e8ffff05e0ffff,  0x5f4ffff05eeffff,  0x5e7ffff05dfffff,  0x5f3ffff05edffff,  0x61c06180612060e,  0x630062c06260622,  0x61b06170611060d,  0x62f062b06250621,  0x76b076507290725,  0x7ed07e307790773,  0x1f00130095008d,  0xffffffff00a7009f,  0x690068c06880682,  0x6a0069c06980694,  0x68f068b06870681,  0x69f069b06970693,  0x6be06ba06b606b2,  0x6ce06c806c606c0,  0x6bd06b906b506b1,  0x6cd06c706c506bf,  0x6f706f106ef06e9,  0x707070306fd06f9,  0x6f606f006ee06e8,  0x706070206fc06f8,  0x72fffff071f071b,  0xffffffffffffffff,  0x7280724071e071a,  0xffff0736ffff072e,  0x781ffffffffffff,  0xffffffffffffffff,  0x7780772076a0764,  0xffffffffffff0780,  0xffffffff07d707cd,  0xffffffffffffffff,  0x7ec07e207d607cc,  0xffffffffffffffff,  0xffffffff00050867,  0xffffffff0029ffff,  0x1e001200040866,  0xffffffffffff0028,  0xb1ffffffffffff,  0xffffffffffffffff,  0xa6009e0094008c,  0xffffffffffff00b0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff06d3ffffffff,  0x6e106deffffffff,  0xffffffffffffffff,  0xffff06feffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff06ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x808080207f807ee,  0x828082208180812,  0x8520846083b0833,  0x1400060868085a,  0x809080307f907ef,  0x829082308190813,  0x8530847083c0834,  0x1500070869085b,  0xbcffffffffffff,  0xffffffffffff00bd,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1a6019dffffffff,  0x1d101c401b901af,  0x1fb01f101e601d9,  0x2220219020f0205,  0x246023e0234022c,  0x26d0264025a0252,  0x2910289027f0279,  0x1ba01b001a7019e,  0x1e701da01d201c5,  0x210020601fc01f2,  0x235022d0223021a,  0x25b02530247023f,  0x280027a026e0265,  0xffffffff0292028a,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7f007e407d807ce,  0x814080a080407fa,  0x835082a0824081a,  0x85c08540848083d,  0x2000160008086a,  0x44003c0032002a,  0x64005c0052004c,  0x84007c0074006c,  0xa800a00096008e,  0xc400be00b600b2,  0xde00d800d200cc,  0xffff00f200ea00e6,  0x7f107e507d907cf,  0x815080b080507fb,  0x836082b0825081b,  0x85d08550849083e,  0x2100170009086b,  0x45003d0033002b,  0x65005d0053004d,  0x85007d0075006d,  0xa900a10097008f,  0xc500bf00b700b3,  0xdf00d900d300cd,  0xffff00f300eb00e7,  0x266025c02490248,  0x28b04b90498026f,  0x2a7029a0299028c,  0x2bd02b902b102a8,  0x2d002cfffff02c5,  0xffff02da02d9ffff,  0xffffffffffffffff,  0x30b0307ffffffff,  0x31a031903120311,  0x32c032b03240323,  0x33c033b03340333,  0x352035103460345,  0x36c036b0360035f,  0x386038503780377,  0x39d039c0390038f,  0x3b603b503aa03a9,  0x3d303d203c603c5,  0x3ec03eb03e003df,  0x403040203fa03f9,  0x4160415040d040c,  0x4290428041f041e,  0x441044004330432,  0x45d045c044f044e,  0x4750474046b046a,  0x4850484047d047c,  0x49e049d048d048c,  0x4bf04be04ac04ab,  0x4d104d004c704c6,  0x4ed04ec04dd04dc,  0x510050f04fb04fa,  0x537053605290528,  0x551055005460545,  0x561056005590558,  0xffffffffffffffff,  0x58affffffffffff,  0xffff05950594058b,  0x5a105a0ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7b307af07a507a1,  0x7d307cb07c107bd,  0x7ff07f707e907e1,  0x81f0817080f0807,  0x842083a08300827,  0x1086508570851,  0x2f0027001b0011,  0x4f004b0041003b,  0x71006b0061005b,  0x91ffff0081007b,  0xffffffffffffffff,  0xffffffff00c1ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x42b042a04210420,  0x443044204350434,  0x45f045e04510450,  0x4770476046d046c,  0x4870486047f047e,  0x4a0049f048f048e,  0x4c104c004ae04ad,  0x4d304d204c904c8,  0x4ef04ee04df04de,  0x512051104fd04fc,  0x5390538052b052a,  0xffffffff05480547,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x5a305a2059d059c,  0x5af05ae05a705a6,  0x5c105c005bb05ba,  0x5ce05cd05ca05c9,  0x5d605d505d205d1,  0x5e205e105da05d9,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x84b084affffffff,  0xb000a085f085e,  0x35003400230022,  0x55005400470046,  0x770076ffffffff,  0x99009800870086,  0xb900b800ab00aa,  0xd500d400c700c6,  0xed00ec00e100e0,  0xff00fe00f700f6,  0x111011001090108,  0x11f011e01170116,  0x1370136012b012a,  0x151015001450144,  0x1670166015d015c,  0x17c017b016f016e,  0x194019301860185,  0x1b201b101a0019f,  0x1dc01db01c701c6,  0x208020701f401f3,  0xffffffffffffffff,  0xffffffffffffffff,  0x28102720271ffff,  0x29c029b02930282,  0x2b402b302aa02a9,  0x2ca02c902c002bf,  0x2dfffffffffffff,  0xffffffff02e902e0,  0x301030002f602f5,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x34c034b0340033f,  0x366036503580357,  0xffff037d03720371,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x750074a0746ffff,  0x766075e075a0754,  0x782077a0774076c,  0x7960790078c0786,  0x7b007a807a2079a,  0x7d007c407be07b6,  0xffff07f207e607da,  0xffffffffffffffff,  0x751074b0747ffff,  0x767075f075b0755,  0x783077b0775076d,  0x7970791078d0787,  0x7b107a907a3079b,  0x7d107c507bf07b7,  0xffff07f307e707db,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1380130012c0124,  0x152014a0146013e,  0x1680162015e0156,  0x17d01770170016a,  0x195018d0187017f,  0x1b301a801a10197,  0x1dd01d301c801bb,  0x20901fd01f501e8,  0x22e0224021b0211,  0x254024a02400236,  0x1390131012d0125,  0x153014b0147013f,  0x1690163015f0157,  0x17e01780171016b,  0x196018e01880180,  0x1b401a901a20198,  0x1de01d401c901bc,  0x20a01fe01f601e9,  0x22f0225021c0212,  0x255024b02410237,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff]);
//8832 bytes
immutable fullCaseTrieEntries = TrieEntry!(ushort, 8, 7, 6)([ 0x0,  0x20,  0x100], [ 0x100,  0x380,  0xd40], [ 0x402030202020100,  0x202020202020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x3000200010000,  0x7000600050004,  0xa00090008,  0xd000c000b0000,  0x110010000f000e,  0x1400130012,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x16001500000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x170000,  0x1b001a00190018,  0x1f001e001d001c,  0x0,  0x2200210020,  0x0,  0x0,  0x24002300000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x28002700260025,  0x29,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2b002a0000,  0x2e002d002c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2f,  0x0,  0x0,  0x0,  0x310030,  0x0,  0x0,  0x0,  0x0,  0x330032,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1e101d401ccffff,  0x20e020101f601ec,  0x77a023002260218,  0x269025f02540247,  0x8fb0285027d0273,  0x2b402aa02a2029a,  0xffff02ca02c402bc,  0xffffffffffffffff,  0x1e201d501cdffff,  0x20f020201f701ed,  0x779023102270219,  0x26a026002550248,  0x8fa0286027e0274,  0x2b502ab02a3029b,  0xffff02cb02c502bd,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff04cdffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x52d0529051f0519,  0x555054c07800537,  0x577057305690565,  0x58f058b05870582,  0x59f059b05970593,  0xffff05ab05a705a1,  0x5c505bd05b905b3,  0x5d505d105cf05c9,  0x52e052a0520051a,  0x556054d077f0538,  0x5780574056a0566,  0x590058c05880583,  0x5a0059c05980594,  0xffff05ac05a805a2,  0x5c605be05ba05b4,  0x8c005d205d005ca,  0x64a064906440643,  0x65a06590650064f,  0x66e066d06640663,  0x67e067d06780677,  0x68a068906840683,  0x69606950690068f,  0x6a206a1069c069b,  0x6b406b306a806a7,  0x6ce06cd06c006bf,  0x6ea06e906dc06db,  0x6fe06fd06f406f3,  0x712071107080707,  0x7260725ffff071b,  0x73a07390730072f,  0x75007470746ffff,  0x767075b075a0751,  0x781077207710768,  0x795078c078b0782,  0x7a907a8079f0796,  0x7b707b607b307b2,  0x7c607c507c007bf,  0x7d607d507ce07cd,  0x7e907e807e007df,  0x7f907f807f307f2,  0x814081308080807,  0x830082f08220821,  0x84b084a083e083d,  0x85f085e08550854,  0x880087f08720871,  0x8a808a708920891,  0x8d708c808c708bf,  0x8f908e808e708d8,  0x91f091e0911050e,  0x18000c09370936,  0x3e0036002c0019,  0x600056ffff003f,  0x8700760075006b,  0xad00a503490093,  0xffff04e900b800b7,  0xe6043f00da00d4,  0xfb00fa00ef00ee,  0x110010c01050104,  0xffffffff01180111,  0x132012c01250124,  0x14c0146013e0133,  0x16401590158014d,  0xffffffff016f016e,  0x34fffff01890188,  0xffffffffffffffff,  0x1e501c201c101c3,  0x203020501e401e3,  0x232021b021a0204,  0x261024a02490233,  0x287027602750262,  0x2ac029d029c0288,  0x2c702c6005702ad,  0x2e302e202d502d4,  0x2fd02fc02f302f2,  0x30d030c03050304,  0x321032003170316,  0x336033503370328,  0x34e034803410340,  0x35b035a03530352,  0x36b036a03630362,  0x381038003750374,  0x39b039a038d038c,  0x3b303b203a703a6,  0x3cd03cc03c003bf,  0x3e603e503d903d8,  0x403040203f403f3,  0x41c041b0410040f,  0x434043304290428,  0x4480447ffff043e,  0x45b045a0450044f,  0x471047004650464,  0x490048f04820481,  0x4aa04a9049e049d,  0xffffffffffffffff,  0x4da04d0ffffffff,  0x33b04f104e804db,  0x50d05040503033f,  0x5220521051b0511,  0x54105400530052f,  0x56c056b05580557,  0x91202f702dd02ed,  0x37002dffff000d,  0x6cffff0061ffff,  0xffffffffffffffff,  0x94ffffffff0088,  0xffff03b1031bffff,  0x284ffff00a600ae,  0xd5ffffffffffff,  0xffff00db02e7ffff,  0xffffffff00e7ffff,  0xffffffffffffffff,  0xffffffff0297ffff,  0x119ffffffff010d,  0xffffffffffffffff,  0x147013f0512012d,  0xffffffffffff051c,  0xffff0165ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff07eeffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x31d031c03130312,  0x330032fffffffff,  0x61cffffffffffff,  0xffffffff06220620,  0xffffffffffffffff,  0xffff037affffffff,  0xffff0394038e0386,  0x3b403acffff03a0,  0x3ce055003c1086e,  0x3e703e1060403d4,  0x40405ee07ef0600,  0x41d0417041104cf,  0x4ecffff05f30586,  0x449057b0440043a,  0x45c04580763044d,  0x395038f0387037b,  0x3cf054f03c20902,  0x3e803e2060303d5,  0x40505ed07ed05ff,  0x41e0418041204ce,  0x4eb04ea05f20585,  0x44a057a0441043b,  0x45d04590762044e,  0x54203b503ad03a1,  0xffffffff0601054e,  0x54305840579ffff,  0x5960595058e058d,  0x5a405a3059e059d,  0x5b605b505ae05ad,  0x5cc05cb05c005bf,  0x5db05da05d405d3,  0x5e505e405e105e0,  0xffff061005f105ec,  0x609ffff060205fe,  0x6140613060f060a,  0x621061f061bffff,  0x631062d06290627,  0x63d063b06370635,  0x64706450641063f,  0x6550651064d064b,  0x6690665065f065b,  0x67b06790673066f,  0x68706850681067f,  0x6930691068d068b,  0x69f069d06990697,  0x6ae06a906a506a3,  0x6c606c106ba06b5,  0x6e206dd06d406cf,  0x66a06660660065c,  0x67c067a06740670,  0x688068606820680,  0x6940692068e068c,  0x6a0069e069a0698,  0x6af06aa06a606a4,  0x6c706c206bb06b6,  0x6e306de06d506d0,  0x632062e062a0628,  0x63e063c06380636,  0x648064606420640,  0x6560652064e064c,  0x7e207e107d807d7,  0x7f507f407eb07ea,  0x80a080907fb07fa,  0x824082308160815,  0x840083f08320831,  0x8570856084d084c,  0x874087308610860,  0x894089308820881,  0xffffffff08aa08a9,  0xffffffffffffffff,  0x9080907ffffffff,  0x939093809210920,  0x250024000f000e,  0x49004800390038,  0x6e006d00590058,  0x9600950080007f,  0xba00b900a800a7,  0xd700d600c700c6,  0xf100f000e300e2,  0x107010600fd00fc,  0x1170116010f010e,  0x1270126011f011e,  0x13b013a012f012e,  0x155015401490148,  0x174016701660160,  0x18f018101800175,  0x1a6019801970190,  0x16101b101b001a7,  0x1e701e601cf01ce,  0x211021001fc01fb,  0x240023f02290228,  0x26c026b02570256,  0x29302920280027f,  0x2b702b602a502a4,  0x2d702d602c902c8,  0x2f502f402e502e4,  0x307030602ff02fe,  0x3190318030f030e,  0x32b032a03230322,  0x343034203390338,  0x3550354034b034a,  0x3650364035d035c,  0x3770376036d036c,  0x391039003830382,  0x3a903a8039d039c,  0x3c403c303b703b6,  0x3de03dd03d103d0,  0x3fa03f903ea03e9,  0x414041304070406,  0x42e042d0420041f,  0xffffffffffffffff,  0xffffffffffffffff,  0x46c04660462ffff,  0x48b0483047d0472,  0x4a7049f04990491,  0x4b904b304b104ab,  0x4c904c304c104bb,  0x4ed04e004dc04d2,  0x50504fd04fb04f3,  0x51d0513050f0507,  0x5390531052b0523,  0xffff055d05510544,  0xffffffffffffffff,  0xffffffffffffffff,  0x46d04670463ffff,  0x48c0484047e0473,  0x4a804a0049a0492,  0x4ba04b404b204ac,  0x4ca04c404c204bc,  0x4ee04e104dd04d3,  0x50604fe04fc04f4,  0x51e051405100508,  0x53a0532052c0524,  0x62f055e05520545,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x879087508680862,  0x89d089508890883,  0x8c908c108b308ab,  0x8e908e108d908d1,  0x913090908fc08f1,  0x93a092a0922,  0x2e0026001a0010,  0x4e004a0040003a,  0x77006f0062005a,  0x9bffff00890081,  0xffffffffffffffff,  0xffffffff00ccffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff02bbffff,  0xffffffff028effff,  0x6d706d606c906c8,  0x6ef06ee06e506e4,  0x703070206f906f8,  0x7170716070d070c,  0x72b072a07210720,  0x73f073e07350734,  0x753075207490748,  0x76a0769075d075c,  0x784078307740773,  0x7980797078e078d,  0x7ae07ad07a207a1,  0x7bb07ba07b507b4,  0x7ca07c907c407c3,  0x7dc07db07d207d1,  0x7f107f007e707e6,  0x801080007f707f6,  0x81c081b0810080f,  0x8380837082a0829,  0x851085008470846,  0x86b086a085b085a,  0x88c088b087c087b,  0x8b608b508a0089f,  0x8dc08db08cc08cb,  0x8ff08fe08ec08eb,  0x92d092c09160915,  0x1d001c00030002,  0x43004200310030,  0x65006400510050,  0x8c008b007a0079,  0xb000af009e009d,  0xcf00ce00c100c0,  0xe900e800dd00dc,  0x101010000f500f4,  0x113011201090108,  0x1210120011b011a,  0x135013401290128,  0x14f014e01410140,  0x1700168015b015a,  0x9170182017c0176,  0xffff05d7ffffffff,  0x1b301b201a901a8,  0x1da01d901c501c4,  0x207020601ef01ee,  0x2350234021d021c,  0x2640263024c024b,  0x28a028902780277,  0x2af02ae029f029e,  0x2cd02cc02bf02be,  0x2eb02ea02db02da,  0x303030202f902f8,  0x315031403090308,  0x3250324031f031e,  0x33d033c03320331,  0x351035003470346,  0x361036003590358,  0x371037003690368,  0x3890388037d037c,  0x3a303a203970396,  0x3be03bd03af03ae,  0x3d703d603cb03ca,  0x3f203f103e403e3,  0x40e040d04010400,  0x4270426041a0419,  0x43d043c04320431,  0x48604800475046f,  0x4a2049c0494048e,  0x485047f0474046e,  0x4a1049b0493048d,  0x4e304df04d504cc,  0xffffffff04f604f0,  0x4e204de04d404cb,  0xffffffff04f504ef,  0x56005540547053c,  0x57d0576056e0568,  0x55f05530546053b,  0x57c0575056d0567,  0x5b205b005aa05a6,  0x5c805c205bc05b8,  0x5b105af05a905a5,  0x5c705c105bb05b7,  0x5f505f005e905e7,  0xffffffff05fb05f9,  0x5f405ef05e805e6,  0xffffffff05fa05f8,  0x62c060d06240607,  0x63a061906340615,  0x62bffff0623ffff,  0x639ffff0633ffff,  0x662065e06580654,  0x6760672066c0668,  0x661065d06570653,  0x6750671066b0667,  0x82c082607de07da,  0x8b808ae083a0834,  0x1f001300a00098,  0xffffffff00b200aa,  0x6f206ed06e806e1,  0x706070106fc06f7,  0x6f006eb06e606df,  0x70406ff06fa06f5,  0x742073d07380733,  0x756074f074c0745,  0x740073b07360731,  0x754074d074a0743,  0x79b07940791078a,  0x7b107ac07a5079e,  0x7990792078f0788,  0x7af07aa07a3079c,  0x7e507b807d407d0,  0x7cb07c7ffff07c1,  0x7dd07d907d307cf,  0xffff07ecffff07e3,  0x84307fcffffffff,  0x81d0817ffff080b,  0x8390833082b0825,  0xffffffffffff0841,  0x86c086408a20898,  0x88d0885ffffffff,  0x8b708ad08a10897,  0xffffffffffffffff,  0x90008f30005093d,  0x92e09240029090b,  0x1e00120004093c,  0xffffffffffff0028,  0xbd005cffffffff,  0x8d0083ffff0071,  0xb100a9009f0097,  0xffffffffffff00bb,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0761ffffffff,  0x77e0778ffffffff,  0xffffffffffffffff,  0xffff07a6ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff07a7ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x8d308cd08c308b9,  0x8f508ed08e308dd,  0x9260918090d0903,  0x140006093e0930,  0x8d408ce08c408ba,  0x8f608ee08e408de,  0x9270919090e0904,  0x150007093f0931,  0xc8ffffffffffff,  0xffffffffffff00c9,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1bd01b4ffffffff,  0x1e801db01d001c6,  0x212020801fd01f0,  0x2410236022a021e,  0x26d02650258024d,  0x294028b02810279,  0x2b802b002a602a0,  0x1d101c701be01b5,  0x1fe01f101e901dc,  0x22b021f02130209,  0x259024e02420237,  0x282027a026e0266,  0x2a702a10295028c,  0xffffffff02b902b1,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x8bb08af08a30899,  0x8df08d508cf08c5,  0x90508f708ef08e5,  0x9320928091a090f,  0x20001600080940,  0x44003c0032002a,  0x69005e0052004c,  0x8f0085007b0073,  0xb300ab00a10099,  0xd000ca00c200be,  0xea00e400de00d8,  0xffff00fe00f600f2,  0x8bc08b008a4089a,  0x8e008d608d008c6,  0x90608f808f008e6,  0x9330929091b0910,  0x21001700090941,  0x45003d0033002b,  0x6a005f0053004d,  0x900086007c0074,  0xb400ac00a2009a,  0xd100cb00c300bf,  0xeb00e500df00d9,  0xffff00ff00f700f3,  0x28d02830270026f,  0x2b204f204d10296,  0x2ce02c102c002b3,  0x2ec02e602dc02cf,  0x3010300ffff02f6,  0xffff030b030affff,  0xffffffffffffffff,  0x33e033affffffff,  0x34d034c03450344,  0x35f035e03570356,  0x36f036e03670366,  0x385038403790378,  0x39f039e03930392,  0x3b903b803ab03aa,  0x3d303d203c603c5,  0x3ec03eb03e003df,  0x409040803fc03fb,  0x422042104160415,  0x43904380430042f,  0x44c044b04430442,  0x45f045e04550454,  0x477047604690468,  0x496049504880487,  0x4ae04ad04a404a3,  0x4be04bd04b604b5,  0x4d704d604c604c5,  0x4f804f704e504e4,  0x50a0509050004ff,  0x526052505160515,  0x549054805340533,  0x570056f05620561,  0x58a0589057f057e,  0x59a059905920591,  0xffffffffffffffff,  0x5c3ffffffffffff,  0xffff05ce05cd05c4,  0x5dd05dcffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x87a087608690863,  0x89e0896088a0884,  0x8ca08c208b408ac,  0x8ea08e208da08d2,  0x914090a08fd08f2,  0x1093b092b0923,  0x2f0027001b0011,  0x4f004b0041003b,  0x7800700063005b,  0x9cffff008a0082,  0xffffffffffffffff,  0xffffffff00cdffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x461046004570456,  0x4790478046b046a,  0x4980497048a0489,  0x4b004af04a604a5,  0x4c004bf04b804b7,  0x4d904d804c804c7,  0x4fa04f904e704e6,  0x50c050b05020501,  0x528052705180517,  0x54b054a05360535,  0x572057105640563,  0xffffffff05810580,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x5df05de05d905d8,  0x5eb05ea05e305e2,  0x5fd05fc05f705f6,  0x60c060b06060605,  0x618061706120611,  0x6260625061e061d,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x91d091cffffffff,  0xb000a09350934,  0x35003400230022,  0x55005400470046,  0x7e007dffffffff,  0xa400a300920091,  0xc500c400b600b5,  0xe100e000d300d2,  0xf900f800ed00ec,  0x10b010a01030102,  0x11d011c01150114,  0x12b012a01230122,  0x143014201370136,  0x15d015c01510150,  0x1790178016b016a,  0x192019101850184,  0x1ab01aa019d019c,  0x1c901c801b701b6,  0x1f301f201de01dd,  0x2210220020b020a,  0xffffffffffffffff,  0xffffffffffffffff,  0x2a802990298ffff,  0x2c302c202ba02a9,  0x2df02de02d102d0,  0x2fb02fa02ef02ee,  0x310ffffffffffff,  0xffffffff031a0311,  0x334033303270326,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x37f037e03730372,  0x3990398038b038a,  0xffff03b003a503a4,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x238022c02220214,  0xffff025a025c0243,  0xffffffffffffffff,  0xffffffffffffffff,  0x2d2ffffffffffff,  0x2f002e802e002d8,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x80d080507feffff,  0x827081f08190811,  0x844083b0835082d,  0x8580852084e0848,  0x877086f0866085c,  0x89b088f0887087d,  0xffff08bd08b108a5,  0xffffffffffffffff,  0x80e080607ffffff,  0x8280820081a0812,  0x845083c0836082e,  0x8590853084f0849,  0x87808700867085d,  0x89c08900888087e,  0xffff08be08b208a6,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x144013c01380130,  0x15e01560152014a,  0x17a0172016c0162,  0x193018d0186017e,  0x1ac01a4019e0195,  0x1ca01bf01b801ae,  0x1f401ea01df01d2,  0x2240216020c01ff,  0x2520245023a022e,  0x27b02710267025d,  0x145013d01390131,  0x15f01570153014b,  0x17b0173016d0163,  0x194018e0187017f,  0x1ad01a5019f0196,  0x1cb01c001b901af,  0x1f501eb01e001d3,  0x2250217020d0200,  0x2530246023b022f,  0x27c02720268025e,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff]);
//4000 bytes
immutable alphaTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0xb0], [ 0x100,  0x240,  0x5100], [ 0x706050403020100,  0xe0d0c0a0b0a0908,  0x100a0f0303030303,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x7000600050004,  0xb000a00090008,  0xf000e000d000c,  0x12001100010010,  0x15001400010013,  0x19001800170016,  0x1c0001001b001a,  0x1f001f001e001d,  0x1f001f001f0020,  0x1f001f001f001f,  0x1f002300220021,  0x1f001f00250024,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100260001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x27000100010001,  0x1000100010001,  0x2a002900010028,  0x2e002d002c002b,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x2f000100010001,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x3100300001001f,  0x34003300320001,  0x38003700360035,  0x1f001f001f0039,  0x3d003c003b003a,  0x1f001f001f003e,  0x1f001f0040003f,  0x1f0041001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x42000100010001,  0x1f001f001f0043,  0x1f001f001f001f,  0x1f001f001f001f,  0x1000100010001,  0x1f001f001f0044,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f004500010001,  0x46001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f0047,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x4b004a00490048,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f004c001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1000100010001,  0x1004d00010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x4e000100010001,  0x1f001f001f004f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f004f00010001,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x1f001f001f001f,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x0,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0x3fffffffffff0000,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x0,  0x0,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x0,  0x0,  0x3fffffffffffff,  0x7ffff003fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0x0,  0x0,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//2304 bytes
immutable markTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x70], [ 0x100,  0x140,  0x2c00], [ 0x402030202020100,  0x207020206020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020208,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x5000400030002,  0x9000800070006,  0xd000c000b000a,  0xf00000000000e,  0x10000000000000,  0x14001300120011,  0x160015,  0x17,  0x0,  0x0,  0x190018,  0x1a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1b00000000,  0x1f001e001d001c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000000000,  0x2100000000,  0x220000,  0x0,  0x2300000000,  0x0,  0x250024,  0x2600000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x27000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2900280000,  0x0,  0x0,  0x0,  0x2a0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0x0,  0x0,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x0,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x0,  0x0,  0x37f800000000,  0x40000000,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0x0,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0x0,  0x0,  0xfff80000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
//2384 bytes
immutable numberTrieEntries = TrieEntry!(bool, 8, 6, 7)([ 0x0,  0x20,  0xc0], [ 0x100,  0x280,  0x1a80], [ 0x402030202020100,  0x807020202020605,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000200010000,  0x2000200020002,  0x2000200020002,  0x5000200040003,  0x7000600020002,  0x9000800060006,  0x2000b0006000a,  0x2000d000c000c,  0x20002000e0005,  0x2000f00020002,  0x2000200020002,  0x11000200100002,  0x1300120002000e,  0xc00140002,  0x2000200020015,  0x2000200020002,  0x19001800170016,  0x2000200020002,  0x20002001b001a,  0x1d001c00020002,  0x2000200020002,  0x2000200020002,  0x20002001e0002,  0x2000200020002,  0x2000020002001f,  0x2000200220021,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200060023,  0xc0017000c0024,  0x400020002000c,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000e00020002,  0x26002500020002,  0x28002700020002,  0x2000200230002,  0x2000200020002,  0x2002a00020029,  0x2002c0002002b,  0x2000200020002,  0x200020002002d,  0xc002f0004002e,  0x2000200020002,  0x2000200020002,  0x2000200050002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020030,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2003100020002,  0x2000200020002,  0x32000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2003300020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x2000200020002,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x3ff000000000000,  0x0,  0x3ff,  0x0,  0xffc000000000,  0x0,  0x3f0ffc000000000,  0x0,  0xfcffc000000000,  0x0,  0x7ffc000000000,  0x0,  0x7f00ffc000000000,  0x0,  0x3fffc000000000,  0x0,  0x3ff0000,  0xfffff00000000,  0x0,  0x3ff0000,  0x0,  0x0,  0x1ffffe0000000000,  0x0,  0x1c00000000000,  0x0,  0x3ff03ff00000000,  0x0,  0xffc0,  0x0,  0x7ff0000,  0x3ff03ff,  0x0,  0x0,  0x3ff03ff,  0x0,  0x3f1000000000000,  0x3ff,  0x0,  0x0,  0xffffffffffff0000,  0x3e7,  0x0,  0x0,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0x0,  0xffc0000000000000,  0xfffff,  0x0,  0x0,  0x2000000000000000,  0x70003fe00000080,  0x0,  0x3c0000,  0x0,  0x3ff00000000,  0xfffeff00,  0xfffe0000000003ff,  0x0,  0x3ff00000000,  0x0,  0x3f000000000000,  0x0,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0x0,  0xf00000000,  0x402,  0x0,  0x3e0000,  0x0,  0xff000000,  0xfc00000,  0x0,  0x0,  0x60000000000000ff,  0x0,  0xff000000ff000000,  0x0,  0x7fffffff00000000,  0x0,  0xfffffffc0000,  0xffc0000000000000,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x3ffff00000000,  0x0,  0xffffffffffffc000,  0x7ff,  0x0,  0x0,  0x0]);
//2336 bytes
immutable punctuationTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x60], [ 0x100,  0x100,  0x3100], [ 0x402030202020100,  0x202020202020605,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000100010000,  0x5000400030001,  0x1000800070006,  0xb000a00090001,  0xd00010001000c,  0x10000f0001000e,  0x14001300120011,  0x1000100010015,  0x17000100010016,  0x18000100010001,  0x1000100190001,  0x1001c001b001a,  0x100010001001d,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1001f0001001e,  0x23002200210020,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x26002500240001,  0x28000100270001,  0x1000100010001,  0x2c002b002a0029,  0x1000100010001,  0x10001002e002d,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x100010001002f,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000000000000000,  0x80,  0x0,  0x0,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x0,  0x100000,  0x3fff,  0x0,  0x0,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x0,  0x0,  0x0,  0x1003000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x10000000000000,  0x0,  0xc008000,  0x0,  0x0,  0x3c0000000017fff0,  0x0,  0x20,  0x61f0000,  0x0,  0xfc00,  0x0,  0x800000000000000,  0x0,  0x1ff00000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x0,  0x0,  0x7700000,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0xc0000000,  0x0,  0x3f7f00000000,  0x0,  0x0,  0x1fc000000,  0x0,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x0,  0x800ff,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x3fff0000000000,  0x0,  0xffc000000060,  0x0,  0x0,  0x1fffff8,  0x300000000f000000,  0x0,  0x0,  0x0,  0xde00000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0xfff7fffffffffff,  0x0,  0x0,  0x0,  0x20010000fff3ff0e,  0x0,  0x100000000,  0x800000000000000,  0x0,  0x0,  0x0,  0xc000000000000000,  0xe000,  0x4008000000000000,  0x0,  0xfc000000000000,  0x0,  0xf0000000000000,  0x0,  0x70000000000c000,  0xc00000000000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0x30000c0000000,  0x0,  0x0,  0x0,  0x80000000000,  0xc000000000000000,  0x0,  0x0,  0x0,  0xffff000003ff0000,  0xd0bfff7ffff,  0x0,  0x0,  0xb80000018c00f7ee,  0x3fa8000000,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x10000,  0x0,  0x800000,  0x0,  0x0,  0x8000000080000000,  0x0,  0x0,  0x0,  0x0,  0x8000000001ff0000,  0x0,  0x0,  0xfe00000000000000,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0xd800000000000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0xf000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//2848 bytes
immutable symbolTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x70], [ 0x100,  0x140,  0x3d00], [ 0x503040303020100,  0x807030303030306,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x303030303030303,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x7000600050004,  0xa000900080001,  0xe000d000c000b,  0x1000010001000f,  0x11000100010001,  0x13000100120001,  0x14000100010001,  0x18001700160015,  0x1a001700170019,  0x1c0017001b0017,  0x1f001e0001001d,  0x17002200210020,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100230001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x25000100010024,  0x1002700010026,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x28000100010001,  0x2b002a00290001,  0x10001002c0001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x30002f002e002d,  0x32003100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1003300010001,  0x37003600350034,  0x3b003a00390038,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffafe0fffc003c,  0x0,  0x20000000000000,  0x30,  0x40000000000000,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x0,  0x6000020040000000,  0x0,  0x0,  0x0,  0x40000000000000,  0x0,  0x0,  0x0,  0xc0c000000000000,  0x0,  0x0,  0x0,  0x2000000000000,  0x0,  0x1000000000000,  0x0,  0x7f8000000000000,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x200000000000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x1500000fce8000e,  0x0,  0xc000000000000000,  0x1e0dfbf,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x1,  0x0,  0xffffffffc0000000,  0x0,  0x1ff007fe00000000,  0x0,  0x0,  0x0,  0x0,  0xa000000000000000,  0x6000e000e000e003,  0x0,  0x1c00000000040010,  0x7ffffff00001c00,  0x0,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffe000007,  0xcffffffff0ffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7e000000000,  0x0,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x0,  0x0,  0xffffffffffff0000,  0x7f,  0x3007fffff,  0x0,  0x600,  0x0,  0x3c00f0000000000,  0x0,  0x0,  0x0,  0x0,  0x380000000000000,  0x0,  0x0,  0x20000000000,  0x0,  0xfffc000000000000,  0x3,  0x0,  0x0,  0x0,  0x3000000000000000,  0x0,  0x27400000000,  0x0,  0x0,  0x4000000070000810,  0x50000001,  0x0,  0x30007f7f00000000,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0xffffffffffffffff,  0x23,  0x0,  0x0,  0xffffffffffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x0,  0x0,  0x0,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//4576 bytes
immutable graphicalTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0xb8], [ 0x100,  0x260,  0x6100], [ 0x706050403020100,  0xe0d0c0a0b0a0908,  0x100a0f0303030303,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a11,  0xa0a0a0a0a0a0a0a,  0xa0a0a0a0a0a0a0a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000100010000,  0x5000400030001,  0x9000800070006,  0xd000c000b000a,  0x10000f0001000e,  0x12001100010001,  0x16001500140013,  0x19000100180017,  0x1c0001001b001a,  0x1e00010001001d,  0x1f000100010001,  0x23002200210020,  0x1002600250024,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100270001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x28000100010001,  0x1000100010001,  0x2b002a00010029,  0x2f002e002d002c,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x30000100010001,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x33003200010031,  0x36003500340001,  0x3a003900380037,  0x3100310031003b,  0x3f003e003d003c,  0x31004100310040,  0x31003100430042,  0x31004400310031,  0x31003100310031,  0x31003100310031,  0x45000100010001,  0x31003100310046,  0x31003100310031,  0x31003100310031,  0x1000100010001,  0x31003100310047,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31004800010001,  0x49003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x3100310031004a,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x4e004d004c004b,  0x5200510050004f,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31005300310031,  0x57005600550054,  0x5b005a00590058,  0x31003100310031,  0x31003100310031,  0x1000100010001,  0x1005c00010001,  0x1000100010001,  0x1000100010001,  0x1000100010001,  0x5d000100010001,  0x3100310031005e,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31005e00010001,  0x31003100310031,  0x310031005f0031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0x31003100310031,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xffffffffffffffff,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xffffffffffffffff,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0xffffffffffffffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0xffffffffffffffff,  0x1fffffffffff0fff,  0xffffffffffffffff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x0,  0x7fffffffff00ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf000007fffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x7ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff03ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xfffffffffe7fffff,  0xffffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffffffff7fff,  0xffff000fffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xfffffffffff,  0xffffffffffffffff,  0xffffffff80ffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xfffffff03ffc01f,  0xffffffffffffffff,  0x1fffffff800fffff,  0xffffffffffffffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0xffffffffffffffff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x0,  0x0,  0x3ff3fffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xffffffffffffffff,  0xfffffffffff80003,  0xffffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0xff8fffffffffff87,  0xffffffffffffffff,  0xfff07ff,  0x3fffffffffff0000,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff3fffffff,  0x0,  0x91bffffffffffd3f,  0xffbfffff,  0x0,  0x0,  0x83ffffff8fffffff,  0x0,  0xc0ffffffffffffff,  0x0,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0x0,  0x0,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0xffffffffffffffff,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xffdfffffffffffff,  0xf,  0xffffffffffffffff,  0x3ff01ff,  0x0,  0x0,  0xffffffffffffff,  0x3ff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xf0007ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0xffffffffffffffff,  0x3f,  0x0,  0x0,  0xffffffffffffffff,  0x3ffff007fffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
//3664 bytes
immutable nonCharacterTrieEntries = TrieEntry!(bool, 7, 4, 4, 6)([ 0x0,  0x10,  0x4c,  0x104], [ 0x80,  0xf0,  0x2e0,  0x3180], [ 0x706050403020100,  0xb0b0b0b0a090808,  0xb0b0b0b0b0b0b0b,  0xb0b0b0b0b0b0b0b,  0xb0b0b0b0b0b0b0b,  0xb0b0b0b0b0b0b0b,  0xb0b0b0b0b0b0b0b,  0xd0808080b0b0b0c,  0xd080808,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x7000600050004,  0xb000a00090008,  0xd000d000d000c,  0xe000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xf000d000d000d,  0xd00110010000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d0012000d,  0xd000d000d000d,  0x140013000d000d,  0x18001700160015,  0x1b001b001a0019,  0x1b001b001d001c,  0x1b001b001e000d,  0x1b001b001b001b,  0x1b001b001b001b,  0x20001f001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b0021,  0x1b001b001b001b,  0x1b001b00230022,  0x24001b001b001b,  0x1b001b00260025,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d0027000d,  0x1b00290028000d,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b002a001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b002b,  0x1b001b001b001b,  0x1b001b001b001b,  0x1b001b001b001b,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0x2c000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0xd000d000d000d,  0x2c000d000d000d,  0x0,  0x0,  0x0,  0x200010000,  0x0,  0x6000500040003,  0x7,  0xb000a00090008,  0xf000e000d000c,  0x12001100100000,  0x16001500140013,  0x1a001900180017,  0x1e001d001c001b,  0x2200210020001f,  0x26002500240023,  0x29002800270000,  0x2a000000000000,  0x0,  0x2d002c002b0000,  0x310030002f002e,  0x0,  0x0,  0x33003200000000,  0x36000000350034,  0x3a003900380037,  0x3e003d003c003b,  0x4200410040003f,  0x44000000430000,  0x47004200460045,  0x48000000000000,  0x0,  0x4c004b004a0049,  0x4f004e004d0000,  0x5000000000,  0x0,  0x51000000000000,  0x530052,  0x0,  0x0,  0x54,  0x0,  0x0,  0x0,  0x42004200550000,  0x58000000570056,  0x5c005b005a0059,  0x51005e0042005d,  0x5f000000000000,  0x6000540000,  0x63006200000061,  0x64000000000057,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x65000000000000,  0x67006600000000,  0x0,  0x38006900000068,  0x6b006a00000000,  0x6d00000038006c,  0x6f0000006e0000,  0x72000000710070,  0x74004200420073,  0x0,  0x0,  0x0,  0x75006300000000,  0x0,  0x0,  0x77000000760000,  0x7a000000790078,  0x0,  0x7d007c007b0000,  0x800000007f007e,  0x81006400000054,  0xb000000830082,  0x86008500000084,  0x87003200420042,  0x8b008a00890088,  0x42008c00000000,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x420042008e008d,  0x4200900042008f,  0x42004200920091,  0x42004200940093,  0x42004200950000,  0x42004200420042,  0x42004200960042,  0x42004200420042,  0x98000000970000,  0x9a00000099004b,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x9b003800420042,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x0,  0x0,  0x0,  0x420042009c0000,  0x420042009d0000,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x4200420042009c,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x0,  0x0,  0x4200420042009e,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x4200a0009f0000,  0x420042004200a1,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x3a000000000000,  0xa30000000000a2,  0x42004200a40000,  0x42004200a50000,  0xa800a700a60000,  0xaa00a9,  0xab00000000,  0xac000000000000,  0x42004200420042,  0x42004200420042,  0xb000af00ae00ad,  0x42004200420042,  0xb200b10000003d,  0xb500b4003d00b3,  0x42004200b700b6,  0xbb00ba00b900b8,  0xbd000000bc0064,  0xc0004200bf00be,  0xa4000000c10000,  0x42004200510000,  0x0,  0x0,  0xc2000000000000,  0x0,  0x0,  0x0,  0x0,  0x31,  0x420042004200a3,  0x42004200420042,  0x42004200420042,  0x42004200420042,  0x0,  0x0,  0x420042004200a3,  0x42004200420042,  0x420042000000c3,  0xc4000000000000,  0x42004200420042,  0x42004200420042,  0x0,  0x0,  0x0,  0xbe000000000000,  0x0,  0x0,  0x0,  0xbe000000000000,  0x0,  0x8300000000000000,  0x40000280f,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0xdf40,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0xe00000000000f000,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xff8000000000ff00,  0xfffff8000000000,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0xc03e000000000,  0xf8000000e0008000,  0xfffe00000000ffff,  0xfc00,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x1,  0xfffffffffc00e000,  0x800000000000,  0x80000000,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0x4000000,  0xf000ffffffc00000,  0x1800000,  0x1c0000000001f,  0xf800000000008000,  0xfff000000000,  0x8000000000000000,  0xffffffffffffe000,  0xe000,  0xff80,  0xfffff00000000000,  0x7f000000,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xf0000000fc003fe0,  0xe00000007ff00000,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0xff80000007fffff8,  0xffff8080ff818181,  0xfc00c00000000000,  0xf000000000000780,  0xc00000000000,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x7fffc,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x6000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x70000000000078,  0xfffffffff000f800,  0xc00000000000ffff,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0xfffffc00c0000000,  0x6e400000000002c0,  0xffffffff00400000,  0x7c00000070000000,  0x3f00000000000000,  0x78f0000001100f90,  0xfe00ff00,  0x1c0000000000000,  0xf8000000c00000,  0xfffffffffffffe00,  0x80000000ffffffff,  0xffff00000003c000,  0xfc00fe000000fffc,  0xfffffffffffffff0,  0xfffffffffc00fe00,  0xfffffffffffffc00,  0xffff800000000000,  0xfff0fff800000000,  0xfe00000000000000,  0x800000000000ffe0,  0xffffffff00007fff,  0xfffffffffffffffc,  0x18000000000,  0xffffffffc0000000,  0xffffffffffffffc0,  0xfffc0000ff800000,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0xc000000000,  0x3000,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x2,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0x7ffffffffffffff,  0xffffffffffff001e,  0xffffffffff800000,  0xfffffffd,  0xffff000000000000,  0xc000000000000000]);
//1600 bytes
immutable nfcQCTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x60], [ 0x100,  0x100,  0x1a00], [ 0x302020202020100,  0x205020202020204,  0x602020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x200000000,  0x5000400030000,  0x8000000070006,  0xa0009,  0x0,  0xb000000000000,  0xc000000000000,  0xf0000000e000d,  0x0,  0x1000000000,  0x0,  0x11,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x14001300120000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x160015,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x170000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1800120012,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10361f8081a9fdf,  0x401000000000003f,  0x80,  0x0,  0x0,  0x380000,  0x0,  0x0,  0x1000000000000000,  0xff000000,  0x4000000000000000,  0xb0800000,  0x48000000000000,  0x4e000000,  0x0,  0x0,  0x4000000000000000,  0x30c00000,  0x4000000000000000,  0x800000,  0x0,  0x400000,  0x0,  0x600004,  0x4000000000000000,  0x800000,  0x0,  0x80008400,  0x0,  0x168020010842008,  0x200108420080002,  0x0,  0x400000000000,  0x0,  0x0,  0x0,  0x0,  0x3ffffe00000000,  0xffffff0000000000,  0x7,  0x20000000000000,  0x0,  0x0,  0x0,  0x0,  0x2aaa000000000000,  0x4800000000000000,  0x2a00c80808080a00,  0x3,  0x0,  0x0,  0x0,  0xc4000000000,  0x0,  0x0,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000000,  0x0,  0x0,  0x6000000,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffc657fe53fff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffc00a0000000,  0x7fdb,  0x0,  0x0,  0x0,  0x0,  0x400000000000000,  0x0,  0x8000000000,  0x0,  0x0,  0x0,  0x0,  0x1fc0000000,  0xf800000000000000,  0x1,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//1920 bytes
immutable nfdQCTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x70], [ 0x100,  0x140,  0x2000], [ 0x504030202020100,  0x207020202020206,  0x802020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x5000600050004,  0x9000800070005,  0xc0005000b000a,  0x500050005000d,  0x5000500050005,  0xe000500050005,  0x10000f00050005,  0x14001300120011,  0x5000500050005,  0x5001500050005,  0x5000500050005,  0x5000500050016,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x17001700170017,  0x18001700170017,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x1a001900170005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x50005001c001b,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x50005001d0005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5001e00170017,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x5000500050005,  0x0,  0x0,  0x0,  0xbe7effbf3e7effbf,  0x7ef1ff3ffffcffff,  0x7fffff3ffff3f1f8,  0x1800300000000,  0xff31ffcfdfffe000,  0xfffc0cfffffff,  0x0,  0x0,  0x0,  0x0,  0x401000000000001b,  0x1fc000001d7e0,  0x187c00,  0x20000000200708b,  0xc00000708b0000,  0x0,  0x33ffcfcfccf0006,  0x0,  0x0,  0x0,  0x0,  0x7c00000000,  0x0,  0x0,  0x80005,  0x12020000000000,  0xff000000,  0x0,  0xb0001800,  0x48000000000000,  0x4e000000,  0x0,  0x0,  0x0,  0x30001900,  0x100000,  0x1c00,  0x0,  0x100,  0x0,  0xd81,  0x0,  0x1c00,  0x0,  0x74000000,  0x0,  0x168020010842008,  0x200108420080002,  0x0,  0x4000000000,  0x0,  0x0,  0x0,  0x2800000000045540,  0xb,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0bffffff,  0x3ffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x3fdcffffefcfffde,  0x3,  0x0,  0x0,  0x0,  0xc4000000000,  0x0,  0x40000c000000,  0xe000,  0x5000001210,  0x333e00500000292,  0xf00000000333,  0x3c0f00000000,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000000,  0x0,  0x36db02a555555000,  0x5555500040100000,  0x4790000036db02a5,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffff,  0x0,  0xfffffc657fe53fff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffc00a0000000,  0x7fdb,  0x0,  0x0,  0x0,  0x0,  0x80014000000,  0x0,  0xc00000000000,  0x0,  0x0,  0x0,  0x0,  0x1fc0000000,  0xf800000000000000,  0x1,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//2560 bytes
immutable nfkcQCTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x70], [ 0x100,  0x140,  0x3400], [ 0x402030202020100,  0x706020202020205,  0x802020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x4000600050004,  0x9000800070004,  0xd000c000b000a,  0x40004000f000e,  0x4000400040004,  0x10000400040004,  0x13001200110004,  0x17001600150014,  0x4000400040018,  0x4001900040004,  0x1d001c001b001a,  0x210020001f001e,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x22000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x24002300210004,  0x27002600250021,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400290028,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x40004002a0004,  0x2e002d002c002b,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4002f00040004,  0x4003100300004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4003200210021,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x4000400040004,  0x0,  0x0,  0x773c850100000000,  0x0,  0x800c000000000000,  0x8000000000000201,  0x0,  0xe000000001ff0,  0x0,  0x0,  0x1ff000000000000,  0x1f3f000000,  0x10361f8081a9fdf,  0x441000000000003f,  0xb0,  0x2370000007f0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80,  0x0,  0x0,  0x1e0000000380000,  0x0,  0x0,  0x1000000000000000,  0xff000000,  0x4000000000000000,  0xb0800000,  0x48000000000000,  0x4e000000,  0x0,  0x0,  0x4000000000000000,  0x30c00000,  0x4000000000000000,  0x800000,  0x0,  0x400000,  0x0,  0x600004,  0x4000000000000000,  0x800000,  0x0,  0x80008400,  0x8000000000000,  0x0,  0x8000000000000,  0x30000000,  0x1000,  0x3e8020010842008,  0x200108420080002,  0x0,  0x400000000000,  0x0,  0x0,  0x1000000000000000,  0x0,  0x3ffffe00000000,  0xffffff0000000000,  0x7,  0x20000000000000,  0x0,  0x0,  0x0,  0xf7ff700000000000,  0x10007ffffffbfff,  0xfffffffff8000000,  0x0,  0x0,  0x0,  0xc000000,  0x0,  0x0,  0x2aaa000000000000,  0xe800000000000000,  0x6a00e808e808ea03,  0x50d88070008207ff,  0xfff3000080800380,  0x1001fff7fff,  0x0,  0xfbfbbd573e6ffeef,  0xffffffffffff03e1,  0x200,  0x0,  0x1b00000000000,  0x0,  0x0,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0xffffffffffffffff,  0x7ffffffffff,  0x1000,  0x70000000000000,  0x0,  0x10000000,  0x0,  0x3000000000000000,  0x0,  0x0,  0x0,  0x800000000000,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x8000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffff,  0x740000000000001,  0x0,  0x9e000000,  0x8000000000000000,  0xfffe000000000000,  0xffffffffffffffff,  0xfffc7fff,  0x0,  0xffffffff7fffffff,  0x7fffffffffff00ff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x1000000000000,  0x0,  0x300000000000000,  0xfffffc657fe53fff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffa0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x1fff0000000000ff,  0xffff000003ff0000,  0xffd70f7ffff7ff9f,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x7f7f1cfcfcfc,  0x0,  0x0,  0x400000000000000,  0x0,  0x8000000000,  0x0,  0x0,  0x0,  0x0,  0x1fc0000000,  0xf800000000000000,  0x1,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffff7fffffff07ff,  0xc000000ffff,  0x10000,  0x0,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//2656 bytes
immutable nfkdQCTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x78], [ 0x100,  0x160,  0x3500], [ 0x504030202020100,  0x807020202020206,  0x902020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x7000600050004,  0xa000900080007,  0xe000d000c000b,  0x700070007000f,  0x7000700070007,  0x10000700070007,  0x13001200110007,  0x17001600150014,  0x7000700070018,  0x7001900070007,  0x1d001c001b001a,  0x210020001f001e,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x22000700070007,  0x7000700070007,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x21002100210021,  0x23002100210021,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x25002400210007,  0x28002700260021,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x70007002a0029,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x70007002b0007,  0x2f002e002d002c,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7003000070007,  0x7003200310007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7003300210021,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x0,  0x0,  0x773c850100000000,  0xbe7effbf3e7effbf,  0xfefdff3ffffcffff,  0xffffff3ffff3f3f9,  0x1800300000000,  0xff3fffcfdffffff0,  0xfffc0cfffffff,  0x0,  0x1ff000000000000,  0x1f3f000000,  0x0,  0x441000000000001b,  0x1fc000001d7f0,  0x2370000007f7c00,  0x20000000200708b,  0xc00000708b0000,  0x0,  0x33ffcfcfccf0006,  0x0,  0x0,  0x80,  0x0,  0x7c00000000,  0x1e0000000000000,  0x0,  0x80005,  0x0,  0x0,  0x0,  0x0,  0x12020000000000,  0xff000000,  0x0,  0xb0001800,  0x48000000000000,  0x4e000000,  0x0,  0x0,  0x0,  0x30001900,  0x100000,  0x1c00,  0x0,  0x100,  0x0,  0xd81,  0x0,  0x1c00,  0x0,  0x74000000,  0x8000000000000,  0x0,  0x8000000000000,  0x30000000,  0x1000,  0x3e8020010842008,  0x200108420080002,  0x0,  0x4000000000,  0x0,  0x0,  0x1000000000000000,  0x2800000000045540,  0xb,  0x0,  0x0,  0xf7ff700000000000,  0x10007ffffffbfff,  0xfffffffff8000000,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0fffffff,  0x3ffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0x50d88070008207ff,  0xfff3000080800380,  0x1001fff7fff,  0x0,  0xfbfbbd573e6ffeef,  0xffffffffffff03e1,  0x40000c000200,  0xe000,  0x1b05000001210,  0x333e00500000292,  0xf00000000333,  0x3c0f00000000,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0xffffffffffffffff,  0x7ffffffffff,  0x1000,  0x70000000000000,  0x0,  0x10000000,  0x0,  0x3000000000000000,  0x0,  0x0,  0x0,  0x800000000000,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x8000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffff,  0x740000000000001,  0x36db02a555555000,  0x55555000d8100000,  0xc790000036db02a5,  0xfffe000000000000,  0xffffffffffffffff,  0xfffc7fff,  0x0,  0xffffffff7fffffff,  0x7fffffffffff00ff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x1000000000000,  0x0,  0x300000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffff,  0x0,  0xfffffc657fe53fff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffa0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x1fff0000000000ff,  0xffff000003ff0000,  0xffd70f7ffff7ff9f,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x7f7f1cfcfcfc,  0x0,  0x0,  0x80014000000,  0x0,  0xc00000000000,  0x0,  0x0,  0x0,  0x0,  0x1fc0000000,  0xf800000000000000,  0x1,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffff7fffffff07ff,  0xc000000ffff,  0x10000,  0x0,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//1536 bytes
immutable mcTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x60], [ 0x100,  0x100,  0x1800], [ 0x202030202020100,  0x206020205020204,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000200010000,  0x6000000050004,  0x7,  0x8000000000000,  0xb000a00090000,  0xc,  0x0,  0x0,  0x0,  0x0,  0xd,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x110010000f000e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x130012,  0x1400000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x15000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x160000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc800000000000008,  0xde01,  0xc00000000000000c,  0x801981,  0xc000000000000008,  0x1,  0xc000000000000008,  0x1a01,  0x400000000000000c,  0x801981,  0xc000000000000000,  0x801dc6,  0xe,  0x1e,  0x400000000000000c,  0x600d9f,  0xc00000000000000c,  0x801dc1,  0xc,  0xc0000ff038000,  0xc000000000000000,  0x8000000000000000,  0x0,  0x0,  0x1902180000000000,  0x3f9c00c00000,  0x1c009f98,  0x0,  0x0,  0x0,  0xc040000000000000,  0x1bf,  0x1fb0e7800000000,  0x0,  0xffff000000000000,  0x301,  0xe000000,  0x7e01a00a00000,  0x0,  0x0,  0xe820000000000010,  0x1b,  0x34c200000004,  0xc5c8000000000,  0x300ff000000000,  0x0,  0x0,  0xc000200000000,  0xc00000000000,  0x0,  0x0,  0x0,  0x9800000000,  0x0,  0xfff0000000000003,  0xf,  0x0,  0xc0000,  0xec30000000000008,  0x1,  0x19800000000000,  0x800000000002000,  0x0,  0x20c80000000000,  0x0,  0x0,  0x0,  0x16d800000000,  0x5,  0x0,  0x187000000000004,  0x0,  0x100000000000,  0x0,  0x8038000000000004,  0x1,  0x0,  0x0,  0x40d00000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x0,  0x0,  0x0,  0x7e06000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//2336 bytes
immutable graphemeExtendTrieEntries = TrieEntry!(bool, 8, 5, 8)([ 0x0,  0x20,  0x70], [ 0x100,  0x140,  0x2d00], [ 0x402030202020100,  0x207020206020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020208,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x5000400030002,  0x9000800070006,  0xd000c000b000a,  0xf00000000000e,  0x10000000000000,  0x14001300120011,  0x160015,  0x17,  0x0,  0x0,  0x190018,  0x1a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1b00000000,  0x1f001e001d001c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000000000,  0x22002100000000,  0x230000,  0x0,  0x2400000000,  0x0,  0x260025,  0x2700000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x28000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2a00290000,  0x0,  0x0,  0x0,  0x2b0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0x1400000000000007,  0xc00fe21fe,  0x5000000000000002,  0xc0080201e,  0x1000000000000006,  0x23000000023986,  0x1000000000000006,  0xc000021be,  0xd000000000000002,  0xc00c0201e,  0x4000000000000004,  0x802001,  0xc000000000000000,  0xc00603dc1,  0x9000000000000000,  0xc00603044,  0x4000000000000000,  0xc0080201e,  0x0,  0x805c8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0x2a0000003000000,  0x7ffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x66fde00000000000,  0x1e0001c3000000,  0x20002064,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0x3fb0000000000000,  0x200ffe40,  0x3800,  0x0,  0x20000000000,  0x0,  0xe04018700000000,  0x0,  0x0,  0x0,  0x1800000,  0x9ff81fe57f400000,  0x0,  0x0,  0x17d000000000000f,  0xff80000000004,  0xb3c00000003,  0x3a34000000000,  0xcff00000000000,  0x0,  0x0,  0x1021fdfff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x3000,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0x6000000844,  0x0,  0x0,  0x3ffff00000010,  0x3fc000000000,  0x3ff80,  0x13c8000000000007,  0x0,  0x667e0000000000,  0x1008,  0xc19d000000000000,  0x40300000000002,  0x0,  0x0,  0x0,  0x212000000000,  0x40000000,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0x0,  0x0,  0xff00000000000002,  0x7f,  0x678000000000003,  0x0,  0x1fef8000000007,  0x0,  0x7fc0000000000003,  0x0,  0x0,  0x0,  0xbf280000000000,  0x0,  0x0,  0x0,  0x78000,  0x0,  0x0,  0xf807c3a000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
//6976 bytes
immutable combiningClassTrieEntries = TrieEntry!(ubyte, 8, 7, 6)([ 0x0,  0x20,  0x120], [ 0x100,  0x400,  0x1240], [ 0x402030202020100,  0x206020202020205,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x0,  0x0,  0x20001,  0x300000000,  0x5000400000000,  0x8000000070006,  0xb0000000a0009,  0xe0000000d000c,  0x11000f0010000f,  0x11000f0011000f,  0x1100000011000f,  0x11000f00120000,  0x13000000110000,  0x17001600150014,  0x1b001a00190018,  0x1d0000001c,  0x0,  0x0,  0x1e0000,  0x0,  0x0,  0x0,  0x2000000000001f,  0x2100000000,  0x22,  0x240023,  0x28002700260025,  0x2a000000000029,  0x2b000000000000,  0x0,  0x0,  0x2c000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2d000000000000,  0x2f0000002e0000,  0x0,  0x0,  0x3100000030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x34003300320000,  0x0,  0x36000000000035,  0x3a003900380037,  0x3c003b00000000,  0x3d000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3e,  0x0,  0x0,  0x3f,  0x0,  0x0,  0x40000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x41,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4200350000,  0x3a000000000043,  0x0,  0x0,  0x0,  0x0,  0x4400000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4600450000,  0x470000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6e6,  0xdcdce8e6e6e6e6e6,  0xdcdcdcdcd8e8dcdc,  0xcadcdcdcdccacadc,  0xdcdcdcdcdcdcdcca,  0x1010101dcdcdcdc,  0xe6e6e6dcdcdcdc01,  0xdce6f0e6e6e6e6e6,  0xdcdce6e6e6dcdc,  0xe6dcdcdcdce6e6e6,  0xe9eaeae9e6dcdce8,  0xe6e6e6e6e6e9eaea,  0xe6e6e6e6e6e6e6e6,  0x0,  0x0,  0xe6e6e6e6e6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6dce6e6e6e6dc00,  0xe6e6e6e6dcdee6e6,  0xdcdcdcdcdcdce6e6,  0xe6e4dee6e6dce6e6,  0x11100f0e0d0c0b0a,  0x1700161514131312,  0x1200dce600191800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6e6e6e6e6e6,  0x201f1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f1e1d1c1b000000,  0xe6dcdce6e6222120,  0xdce6e6dce6e6e6e6,  0x0,  0x0,  0x23,  0x0,  0x0,  0x0,  0xe6e6000000000000,  0xe60000e6e6e6e6e6,  0xe60000e6dce6e6e6,  0xdce6e6dc00e6,  0x0,  0x0,  0x0,  0x0,  0x2400,  0x0,  0x0,  0x0,  0xdce6e6dce6e6dce6,  0xe6dce6dcdce6dcdc,  0xe6dce6dce6dce6e6,  0xe6e6dc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6e6e6000000,  0xe6dce6e6,  0x0,  0x0,  0x0,  0xe6e6000000000000,  0xe6e6e6e6e600e6e6,  0xe6e6e600e6e6e6e6,  0xe6e6e6e6e600,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdcdcdc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6dce6e600000000,  0xdcdcdce6e6e6dce6,  0xe6dce6e6e61d1c1b,  0xe6e6e6e6dcdce6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x700000000,  0x0,  0x90000000000,  0xe6e6dce600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x90000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x90000000000,  0x5b540000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x90000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x96767,  0x0,  0x6b6b6b6b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7676,  0x0,  0x7a7a7a7a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdcdc,  0x0,  0x0,  0xdc00dc0000000000,  0xd800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8400828100,  0x828282820000,  0xe6e60009e6e60082,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdc000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x700000000000000,  0x90900,  0x0,  0xdc0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6e60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x900000000,  0x0,  0x0,  0x0,  0x900000000,  0x0,  0x0,  0x0,  0x90000,  0xe60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe400,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdce6de00,  0x0,  0x0,  0xe600000000000000,  0xdc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9,  0x0,  0xe6e6e60000000000,  0xdc0000e6e6e6e6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x700000000,  0x0,  0x900000000,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6dce6000000,  0xe6e6e6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9090000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7000000000000,  0x0,  0x9090000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x700000000000000,  0x0,  0x0,  0x0,  0xdcdcdc0100e6e6e6,  0xdcdcdcdce6e6dcdc,  0x1010101010100e6,  0xdc0000000001,  0xe600000000,  0x0,  0xe6e6e6e6e6dce6e6,  0xdcd6eae6e6dce6e6,  0xe6e6e6e6e6e6e6ca,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6,  0x0,  0x0,  0xdce6dce900000000,  0x0,  0x0,  0xe6e6e6e60101e6e6,  0xe6e6010101,  0xe60101000000e600,  0xdcdcdcdc0101e6dc,  0xe6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe600000000000000,  0xe6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x900000000000000,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0e0dee8e4da0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe600000000000000,  0xe6e6e6e600000000,  0xe6e6e6e6e6e6,  0x0,  0x0,  0x0,  0xe600000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6,  0x0,  0x9000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x900000000,  0x0,  0x0,  0x0,  0xe6e6e6e6e6e6e6e6,  0xe6e6e6e6e6e6e6e6,  0xe6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdcdcdc000000,  0x0,  0x0,  0x0,  0x0,  0x9000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7000000,  0x0,  0x9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe60000dce6e600e6,  0xe6e60000000000e6,  0xe600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x90000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1a000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe6e6e6e6e6e6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdc0000000000,  0x0,  0xe600dc0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x900000000dc01e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x70900,  0xe6e6e6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x909000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x709000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1d8d80000000000,  0xd8d8e20000000101,  0xd8d8d8,  0xdcdcdcdcdc000000,  0xe6e6e60000dcdcdc,  0xdcdce6e6,  0x0,  0x0,  0x0,  0xe6e6e6e60000,  0x0,  0x0,  0xe6e6e60000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//22656 bytes
immutable compatMappingTrieEntries = TrieEntry!(ushort, 8, 8, 5)([ 0x0,  0x20,  0x2a0], [ 0x100,  0xa00,  0x21c0], [ 0x402030202020100,  0x706020202020205,  0x802020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x0,  0x3000200010000,  0x7000600050004,  0xa000900080000,  0xc000b,  0xf000e000d0000,  0x11001000000000,  0x15001400130012,  0x19001800170016,  0x1b001a00000000,  0x0,  0x1c,  0x1e0000001d0000,  0x1f00000000,  0x0,  0x0,  0x0,  0x0,  0x2100200000,  0x2200000000,  0x2400230000,  0x0,  0x2500000000,  0x2700000026,  0x2800000000,  0x2900000000,  0x2a00000000,  0x2b00000000,  0x2c0000,  0x2e002d0000,  0x3100300000002f,  0x330032,  0x340000,  0x35000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800370036,  0x0,  0x0,  0x0,  0x3b003a00390000,  0x3d003c,  0x410040003f003e,  0x45004400430042,  0x49004800470046,  0x4d004c004b004a,  0x510050004f004e,  0x530052,  0x57005600550054,  0x5a00590058,  0x5e005d005c005b,  0x6100000060005f,  0x620000,  0x0,  0x63000000000000,  0x67006600650064,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x69000000000068,  0x6a00000000,  0x0,  0x0,  0x6b000000000000,  0x0,  0x6c000000000000,  0x0,  0x0,  0x6e00000000006d,  0x7200710070006f,  0x7500740073,  0x79007800770076,  0x7d007c007b007a,  0x80007f007e0000,  0x81,  0x85008400830082,  0x89008800870086,  0x8d008c008b008a,  0x910090008f008e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x92000000000000,  0x93000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x97009600950094,  0x9b009a00990098,  0x9f009e009d009c,  0xa200a100a0,  0xa600a500a400a3,  0xaa00a900a800a7,  0xae00ad00ac00ab,  0xb200b100b000af,  0xb600b500b400b3,  0xba00b900b800b7,  0xbe00bd00bc00bb,  0xc200c100c000bf,  0xc600c500c400c3,  0xca00c900c800c7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xcc00cb,  0xcd0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xcf00ce00000000,  0xd100d00000,  0x0,  0x0,  0x0,  0x0,  0xd500d400d300d2,  0xd900d800d700d6,  0xdd00dc00db00da,  0xdf00d300d200de,  0xe200e100e000d5,  0xe500e400e300d9,  0xe900e800e700e6,  0xed00ec00eb00ea,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf100f000ef00ee,  0xf300f2,  0x0,  0x0,  0x0,  0x0,  0xf700f600f500f4,  0xf8,  0xfb00fa00f9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff00fe00fd00fc,  0x103010201010100,  0x107010601050104,  0x10b010a01090108,  0x10c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x2d700000008,  0x4000000000000,  0x12b010900000000,  0x5650002,  0x3b300ce0016,  0x13a00fe0100,  0x18b018601850184,  0x1ae000001970194,  0x1cb01c001bf01be,  0x20001fb01fa01f9,  0x23b023a02320000,  0x24b0241023c,  0x28e028d028c0000,  0x2c20294,  0x2e302de02dd02dc,  0x30b000002ef02ec,  0x32c03210320031f,  0x361035d035c035b,  0x3b603b503ac0000,  0x3c603bc03b7,  0x408040704060000,  0x43e00000439040e,  0x2e5018d02e4018c,  0x30701aa02f801a0,  0x30901ac030801ab,  0x31701b8030a01ad,  0x32701c600000000,  0x32b01ca032a01c9,  0x32e01cd033501d4,  0x34501e2034301e0,  0x34801e5034601e3,  0x34c01eb,  0x35f01fd035e01fc,  0x3680207036001fe,  0x35701f5000001ff,  0x37d0212036b020a,  0x21d038702190000,  0x2180388021a038b,  0x231000000000386,  0x23403b0023603ab,  0x49203ae,  0x3c3024803c00245,  0x3c9024e,  0x3ed026f03e60268,  0x3f2027603e8026a,  0x3fb027f03f40278,  0x402028803f6027a,  0x3ff0285,  0x40b02910409028f,  0x414029a040d0293,  0x42102a70415029b,  0x43a02c3042d02b7,  0x2cd044302cb02c7,  0x3ef044602ce0445,  0x3cd0252,  0x0,  0x0,  0x29f000000000000,  0x419,  0x0,  0x0,  0x0,  0x0,  0x215031501b601b4,  0x22e022d03810217,  0x20302f1019903a7,  0x29c03ca024f0364,  0x296041102970416,  0x295041202980410,  0x2ed01950000040f,  0x45a045702eb0193,  0x34701e400000000,  0x3d5025a037b0210,  0x48d046503d6025b,  0x31401b501b3036c,  0x34201df,  0x2f0019803aa0230,  0x45c045804590456,  0x2f3019b02f2019a,  0x33001cf032f01ce,  0x366020503650204,  0x3cc025103cb0250,  0x3ea026c03e9026b,  0x418029e0417029d,  0x401028703fa027e,  0x34f01ee00000000,  0x0,  0x2ea019200000000,  0x3c7024c033301d2,  0x3c4024903be0243,  0x43c02c503c5024a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3e2036a04740349,  0x42a048304820481,  0x437,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17000c00070006,  0xd0003,  0x43203ef03800472,  0x48e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x496000004940493,  0x495,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x491,  0x1a00000000,  0x17500000000,  0x0,  0x4540499000a0002,  0x4d104bc04b2,  0x4ff04f2000004e4,  0x558,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4f504d400000000,  0x553053b05300514,  0x587,  0x0,  0x0,  0x0,  0x0,  0x0,  0x585055600000000,  0x59805820572,  0x4f204f00550052b,  0x579059204f5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x57d057a0563,  0x52e04ce,  0x4ee0000,  0x0,  0x5b2000005b505b3,  0x5af000000000000,  0x0,  0x5c005b905bd,  0x0,  0x0,  0x5bb0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5d10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5c8000005cb05c9,  0x5dd000000000000,  0x0,  0x5d705cf05d3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5df05de00000000,  0x0,  0x0,  0x5cc05b60000,  0x0,  0x0,  0x0,  0x5c705b105c605b0,  0x5ca05b400000000,  0x5e105e000000000,  0x5ce05b805cd05b7,  0x5d005ba00000000,  0x5d505be05d205bc,  0x5e305e200000000,  0x5d605bf05dc05c5,  0x5d905c205d805c1,  0x5da05c3,  0x5db05c4,  0x0,  0x0,  0x5e4000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x61e061d00000000,  0x745061f0732,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x77b073306200000,  0x757,  0x0,  0x77700000783,  0x0,  0x0,  0x0,  0x782000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x78a0000,  0x0,  0x78d0000,  0x78e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x787078607850784,  0x78c078b07890788,  0x0,  0x0,  0x792000000000000,  0x793,  0x0,  0x0,  0x0,  0x79100000790078f,  0x0,  0x0,  0x0,  0x0,  0x798000000000000,  0x79900000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x796079507940000,  0x79700000000,  0x0,  0x0,  0x79c00000000079d,  0x79e,  0x0,  0x0,  0x0,  0x79b079a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x79f,  0x0,  0x0,  0x0,  0x0,  0x7a207a000000000,  0x7a1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7a3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7a4,  0x7a7000000000000,  0x7a607a5000007a8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ab07a900000000,  0x7aa,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ac00000000,  0x7af07ae07ad,  0x0,  0x0,  0x0,  0x0,  0x7b0000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7b3000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7b207b1,  0x0,  0x0,  0x0,  0x7b4,  0x0,  0x0,  0x0,  0x0,  0x7b6000000000000,  0x0,  0x0,  0x7b70000,  0x7b800000000,  0x7b9000000000000,  0x0,  0x7ba,  0x0,  0x0,  0x7b50000,  0x0,  0x7bb000000000000,  0x7c407c507bc0000,  0x7c607c7,  0x0,  0x7bd0000,  0x0,  0x0,  0x0,  0x7bf000000000000,  0x0,  0x0,  0x7c00000,  0x7c100000000,  0x7c2000000000000,  0x0,  0x7c3,  0x0,  0x0,  0x7be0000,  0x0,  0x0,  0x7c800000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7c9,  0x0,  0x83900000000,  0x83b0000083a,  0x83d0000083c,  0x83e00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x83f000000000000,  0x8400000,  0x843000008420841,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1a204550182,  0x1da046201bd01b1,  0x20b020901f201e6,  0x22c02200214,  0x266025c04660239,  0x2d702b1028b0280,  0x2f9084404690468,  0x46e046d031c030d,  0x36d00000340046f,  0x46b03b30460038e,  0x3fc03d708460845,  0x424047908480405,  0x52d052c052b0849,  0x3e2035405930592,  0x52c052b04240405,  0x5930592057a,  0x0,  0x0,  0x0,  0x5d4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x46a000000000000,  0x46f045b046c02fe,  0x473047104700338,  0x84a047704760475,  0x490084b0478048f,  0x47d047c047a047b,  0x4840480047f047e,  0x487048604640485,  0x442048904880847,  0x550048c048b048a,  0x2fb01a402f7019f,  0x2fd01a602fc01a5,  0x31601b7030c01af,  0x31b01bc031801b9,  0x31a01bb031901ba,  0x32901c8032801c7,  0x33701d6033601d5,  0x33f01d9033401d3,  0x34d01ec034401e1,  0x34e01ed035001ef,  0x35201f1035101f0,  0x362020103690208,  0x37c0211037a020f,  0x389021b037e0213,  0x38d021f038a021c,  0x39d0228038c021e,  0x39f022a039e0229,  0x3af023503ad0233,  0x3b1023703b20238,  0x3bf024403bd0242,  0x3c2024703c10246,  0x3e0026403df0263,  0x3eb026d03e70269,  0x3ee027003ec026e,  0x3f8027c03f50279,  0x3f7027b03f30277,  0x3fd028403f9027d,  0x404028a04000286,  0x42002a604030289,  0x42202a8042302a9,  0x40c0292040a0290,  0x42902af042802ae,  0x42c02b6042b02b5,  0x42e02b8042f02b9,  0x43502be043102ba,  0x43d02c6043602bf,  0x44702cf044402cc,  0x3fe0353044802d0,  0x3f502db04400430,  0x0,  0x2ee019602f4019c,  0x2df018702e00188,  0x2e1018902e2018a,  0x2e7018f02f5019d,  0x2e9019102e6018e,  0x2f6019e02e80190,  0x32d01cc033101d0,  0x32301c2032601c5,  0x32501c4032201c1,  0x33201d1032401c3,  0x367020603630202,  0x3c8024d03d30258,  0x3b8023d03b9023e,  0x3ba023f03bb0240,  0x3cf025403d40259,  0x3d1025603ce0253,  0x3d2025703d00255,  0x4130299041f02a5,  0x41a02a0041b02a1,  0x41c02a2041d02a3,  0x43802c1041e02a4,  0x43f02c8044102c9,  0x43b02c4,  0x0,  0x521051905200518,  0x525051d0523051b,  0x4a5049d04a4049c,  0x4a904a104a7049f,  0x535053205340531,  0x5360533,  0x4b704b404b604b3,  0x4b804b5,  0x546053e0545053d,  0x54a054205480540,  0x4c604be04c504bd,  0x4ca04c204c804c0,  0x55f055b055e055a,  0x561055d0560055c,  0x4da04d604d904d5,  0x4dc04d804db04d7,  0x577057405760573,  0x5780575,  0x4e904e604e804e5,  0x4ea04e7,  0x58e058a058d0589,  0x590058c058f058b,  0x4f7000004f60000,  0x4f9000004f80000,  0x5a3059b05a2059a,  0x5a7059f05a5059d,  0x509050105080500,  0x50d0505050b0503,  0x530052f05140512,  0x5530552053b0539,  0x582058105720571,  0x5980596,  0x522051a0527051f,  0x526051e0524051c,  0x4a6049e04ab04a3,  0x4aa04a204a804a0,  0x547053f054c0544,  0x54b054305490541,  0x4c704bf04cc04c4,  0x4cb04c304c904c1,  0x5a4059c05a905a1,  0x5a805a005a6059e,  0x50a0502050f0507,  0x50e0506050c0504,  0x52a051305160517,  0x529052800000515,  0x4990498049a049b,  0xe0551000e04ac,  0x54f053a000b0019,  0x54e054d0000053c,  0x4bc04bb04b204b1,  0x110010000f04cd,  0x558055705540555,  0x559056200000000,  0x4d104d004d204d3,  0x15001400130000,  0x587058605830584,  0x5880591057c057b,  0x4f204f104f304f4,  0x2d6000a000904ed,  0x5ac059700000000,  0x5ab05aa00000599,  0x4ff04fe04e404e3,  0x1200020510,  0x1000100010001,  0x1000100010001,  0x100010001,  0x0,  0x84c0000,  0x18000000000000,  0x0,  0x0,  0x0,  0xc700c600c5,  0x0,  0x1000000000000,  0x84f000000000000,  0x853085200000850,  0x0,  0x50000002c,  0x0,  0x180000000000000,  0x2d017f,  0x0,  0x0,  0x851000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x0,  0x35400c9,  0x160015a01510140,  0x86500c2016d0167,  0x3a200c000340178,  0x12b010900ce00c9,  0x160015a01510140,  0x86500c2016d0167,  0xc000340178,  0x43203b3031c02d7,  0x380036d0349046d,  0x3ef03d703a2038e,  0x3fc,  0x0,  0x0,  0x267,  0x0,  0x0,  0x0,  0x0,  0x0,  0x45201a702da02d9,  0x463030002ff0000,  0x1e6034004530000,  0x45e034901e601e6,  0x380021401f201f2,  0x22f022c0000,  0x2660265025c0000,  0x2660266,  0x28302810273,  0x4fd000002ca,  0x197020b000002ca,  0x31c000001a701a2,  0x220000001d701bd,  0x5f205ef05ea03b3,  0x1d80000035405f4,  0x4eb04ae052c0579,  0x864,  0x31c030d01b10000,  0x36a0354,  0x0,  0xff00fd01050103,  0x13b012701010126,  0x10401550102014d,  0xfc01630156013c,  0x1f701f401f301f2,  0x2ad02ac02ab02aa,  0x2bd02bc02bb01f8,  0x22001b101a70214,  0x359035603550354,  0x427042604250424,  0x43404330432035a,  0x38e030d02fe0380,  0x0,  0x0,  0xcc0000,  0x0,  0x0,  0x0,  0x859085600000000,  0x0,  0x0,  0x0,  0x0,  0x85b00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x85d085e085c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x860,  0x8620000,  0x863,  0x0,  0x0,  0x0,  0x0,  0x0,  0x86700000866,  0x0,  0x86b000008690868,  0x86c,  0x0,  0x0,  0x0,  0x86d0000,  0x86f00000000086e,  0x8700000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8720000017b,  0x0,  0x0,  0x17d017708710000,  0x8740873,  0x8760875,  0x8780877,  0x0,  0x87a0879,  0x87e087d,  0x880087f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x886088508840883,  0x0,  0x0,  0x0,  0x0,  0x8820881087c087b,  0x0,  0x888088700000000,  0x88a0889,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x89508940000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x140012b010900ce,  0x1670160015a0151,  0xdb00d600d1016d,  0xec00e800e400e0,  0x10c00f800f400f0,  0x43004200400035,  0x47004600450044,  0x38003700360048,  0x3c003b003a0039,  0x41003f003e003d,  0x142012d010b00d0,  0x1690162015c0153,  0xdc00d700d2016f,  0xed00e900e500e1,  0x10d00f900f500f1,  0x66006500640063,  0x6a006900680067,  0x6e006d006c006b,  0x7200710070006f,  0x76007500740073,  0x7a007900780077,  0x1a20182007c007b,  0x1d701bd01b101a7,  0x20901f201e601da,  0x22c02200214020b,  0x2660265025c0239,  0x2aa028b02800271,  0x2ca02c002bb02b1,  0x30d02fe02f902d7,  0x34903400338031c,  0x380036d036a0354,  0x3d703b303a2038e,  0x3fc03ef03e203e1,  0x432042a04240405,  0xc904420437,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x86a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17a01790174,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x890,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2aa036a,  0x0,  0x0,  0x0,  0x891000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb89000000000000,  0x0,  0x0,  0x0,  0x0,  0xda3000000000000,  0x0,  0x0,  0x0,  0x9d309cf09cc09c3,  0x9dc09da09d809d5,  0x9fe09fa09f409df,  0xa120a0a0a060a02,  0xa2b0a210a140a13,  0xa350a320a310a2f,  0xa440a430a3d0a3c,  0xa760a710a4a0a46,  0xa8e0a8d0a8b0a86,  0xaa80aa50a9a0a92,  0xab50ab40ab30ab0,  0xaca0ac70abc0abb,  0xad50ad20ace0acc,  0xae50ae30ae20ad7,  0xaee0aea0ae80ae6,  0xb190b180b130af5,  0xb400b3f0b3a0b39,  0xb490b460b440b42,  0xb7b0b5e0b590b55,  0xb880b850b820b7e,  0xb8d0b8c0b8b0b8a,  0xbd10bce0bbc0b8e,  0xbd60bd40bd30bd2,  0xbe50be30bdc0bd7,  0xbf90bf80bf60bf5,  0xc060c050bfc0bfb,  0xc100c0f0c0e0c0d,  0xc200c1f0c1e0c15,  0xc420c3a0c390c29,  0xc590c500c480c46,  0xc740c710c6c0c6a,  0xc7a0c790c780c76,  0xc8a0c880c810c80,  0xc920c900c8d0c8c,  0xc970c960c940c93,  0xcd20cd10cc40cbf,  0xce30ce10cdf0cd4,  0xcf70cf50cf40ce5,  0xd050d040cf90cf8,  0xd140d0d0d0c0d07,  0xd280d200d170d16,  0xd3a0d2f0d2d0d2c,  0xd4b0d480d3f0d3b,  0xd580d570d550d4f,  0xd5e0d5d0d5a0d59,  0xd690d680d670d60,  0xd770d720d700d6f,  0xd7c0d7b0d790d78,  0xd830d7f0d7e0d7d,  0xd8e0d8d0d8a0d89,  0xd930d920d900d8f,  0xd9b0d990d970d94,  0xda00d9f0d9e0d9c,  0xda40da2,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x89e00000000,  0xa370a360a35,  0x0,  0x0,  0x0,  0x0,  0x8af000008ae,  0x8b1000008b0,  0x8b3000008b2,  0x8b5000008b4,  0x8b7000008b6,  0x8b9000008b8,  0x8bb000008ba0000,  0x8bc0000,  0x0,  0x8bf000008be08bd,  0x8c208c1000008c0,  0x8c408c30000,  0x8c708c6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8ad,  0x29000000000000,  0x8c808cb0000002a,  0x0,  0x0,  0x0,  0x8ea000008e3,  0x8fa000008f4,  0x903000008fd,  0x90a00000907,  0x9100000090c,  0x91500000912,  0x91a000009180000,  0x91d0000,  0x0,  0x92f0000092a0928,  0x938093600000931,  0x93f093d0000,  0x9490947,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9740000000008d8,  0x97b09790977,  0x8ff097f00000000,  0x0,  0x0,  0x0,  0x0,  0x82507cc07ca0000,  0x7cf0827082607cd,  0x829082807d207d1,  0x82d082c082b082a,  0x7d807d607d407f0,  0x7dc07db07d907f5,  0x7e607e307e207df,  0x80807ec07ea07e8,  0x80c080b080a0809,  0x810080f080e080d,  0x814081308120811,  0x818081708160815,  0x81c081b081a0819,  0x82e07ef07ee0807,  0x83208310830082f,  0x83507f108340833,  0x7f407f307f20836,  0x7f907f807f707f6,  0x7fd07fc07fb07fa,  0x801080007ff07fe,  0x838083708030802,  0x81d080608050804,  0x8210820081f081e,  0x82408230822,  0x9da09c300000000,  0x9cd09c70a7209c6,  0x9ca09d50bfd09c8,  0x9df0a770a9409c4,  0x830081007f007d,  0x8b008900870085,  0x9600940092008f,  0x80007e009a0098,  0x88008600840082,  0x930090008c008a,  0x9b009900970095,  0x8e008d0091,  0xac009e00a0009c,  0xa5009d00a600a1,  0xb500b000a8009f,  0xad00bf00b200b4,  0xb800b100b300af,  0xb900bd00b600aa,  0xae00ab00a200a7,  0xa900be00a300b7,  0xbc00bb00a400ba,  0xc4a0b3f0ad60a5f,  0x0,  0x0,  0x116011301100261,  0x120011e011c0119,  0x130012e01240122,  0x135013401330132,  0x7d207cf07cd07ca,  0x7dc07d907d607d4,  0x7e807e607e307df,  0x7ce07cb07ec07ea,  0x7d707d507d307d0,  0x7e407e007dd07da,  0x7ed07eb07e907e7,  0x7de07e107e5,  0xa7209c609da09c3,  0x9fe09c509ff09db,  0xbbc0b590a3509d6,  0xa760d2f0b5e0b8e,  0xc2b0b5a0b6a0b49,  0xc300cfa0bd90a52,  0xa9a0bff0c3c0a24,  0xb960a3e09f30d1c,  0xb7f0a0809e40d61,  0xacb09c809cd09c7,  0xaa70aaa0a330a4f,  0xa3a0cff09e30c13,  0x138013701360a90,  0x145014401430139,  0x149014801470146,  0x154014c014b014a,  0x14f013e01290107,  0x16b0165015e0158,  0xde00d900d40171,  0x216031d031e01e9,  0x8db08d708d308cd,  0x8f308e908e208df,  0x906090208fc08f9,  0x911090f090b0909,  0x91c091909170914,  0x924092309220920,  0x935092e09270925,  0x955094f0946093c,  0x960095e095a0959,  0x969096809670964,  0x9730972096f096c,  0x97a09780976,  0x8d108d008cf08ce,  0x8dc08d908d508d4,  0x8e608e108e008dd,  0x8e508e408e808e7,  0x8ed08ee08ec08eb,  0x8f208f108f008ef,  0x8f808f708f608f5,  0x9040901090008fb,  0x90e090d09080905,  0x91f091e091b0913,  0x92b092d09260921,  0x93309320929092c,  0x93a093909300934,  0x9400944093b0937,  0x943094209450941,  0x94c0948094a093e,  0x950094e094d094b,  0x954095309520951,  0x95b095809570956,  0x9620961095d095c,  0x96d096b096a0965,  0x97509710970096e,  0x13f012a010800cd,  0x166015f01590150,  0xda00d50172016c,  0xeb00e700e300df,  0xfb00f700f300ef,  0x11801150112010f,  0x183030f034a011b,  0x31103dd03b402fa,  0xad301f603130312,  0xb6b0b4a0a930b4d,  0x391056603a303d9,  0x1db0221020c036e,  0x3a403da03730301,  0x3740395056a0567,  0x1dc0224036f01ea,  0x3100397056b0282,  0x56c03a8033e0375,  0x399037603040398,  0x39a0377038f0305,  0x3a0037803900306,  0x2250370026203a1,  0x3e503e403e301dd,  0x39c056d03a903de,  0x392056803a503db,  0x3a603dc02260371,  0x227037203930569,  0x1a302d8022b037f,  0x1a901b003030302,  0x1e7034b01de030e,  0x379020e020d0358,  0x385038403830382,  0x25d039b03960394,  0x3f00260025e03d8,  0x1a102b002b40275,  0x14e013d01280106,  0x16a0164015d0157,  0xdd00d800d30170,  0xee00ea00e600e2,  0x10e00fa00f600f2,  0x11a011701140111,  0x1230121011f011d,  0x3410131012f0125,  0x0,  0x0,  0x0,  0x0,  0xda5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x461045d,  0x0,  0xd000d0d0b560cf6,  0xda20a4b09ce0bae,  0xa640d2f0a970da2,  0xc700c0c0b110a96,  0xd1f0cda0ccd0cbe,  0xbe90bc30b980b75,  0x9d70d740d290cb0,  0xcbd0bcc0b7a0a40,  0xcb90bb60ac10d88,  0xcd00c870b1e0cde,  0xbdf0b9e0b5b0add,  0xa280a0d09e70d22,  0xc140bcb0b780b38,  0xd0a0cc10cbb0c76,  0xc230d870d800d53,  0xd360ca90c610c33,  0xae40a850ceb0d8a,  0xc250bd80c7f0c4f,  0xab80a840d510cfe,  0xc5d0bb00ba30b76,  0xc820a270d410c67,  0xc620c3e0a0f0a10,  0xb1f0cf20d430caf,  0xaad09d10cee0b75,  0xa300c040be40afa,  0x9c90af309eb0c27,  0xa450c5c0b3e0b93,  0xce70cb10c170a80,  0xb230b910d160b86,  0x9de0c030b2b0c9f,  0xc570b6d0a0e09fd,  0xa2a0d2e0cea0c95,  0xb450ae10a9a0a57,  0xd760d3d0c280bb7,  0xb540a210d910d8b,  0xb0b0ad40d130b81,  0xbc60bb30b360b12,  0xc7d0c640c3b0bf2,  0xd370d190cb30d0f,  0xbc20a5c0a220a17,  0xaf80adc0ce70cd5,  0xbe10c4e0b840b29,  0xac60aad0a7309e2,  0xc730bef0be80afb,  0xd540d500d300c7b,  0xd2b0c3809e80d63,  0x9f109d90b010d4a,  0xb750b410ab60aae,  0xd1e0cb60c0b0bc9,  0xa200d400b500da0,  0xbaa0b9c0b660b63,  0xc5b0c220c020beb,  0xd440b1609ff0d66,  0xd100ba40abf09ed,  0xbe40b680b030aef,  0xaba0a530a190d46,  0xb950b700b5f0b4b,  0xcd60c6e0c070bea,  0xa340d4d0d2d0cd9,  0xbf30bca0a540bab,  0xd8c0d820d470cba,  0xc460c890ba20b65,  0xbc00bde0c520c49,  0xa1a0ca309e00cf1,  0xc550b200ad80a16,  0xd120b530b990aa9,  0xadf0ce10d420cd2,  0xa6a09f5,  0xb4f00000a7f,  0xc110be00a110000,  0xc370c320c310c2a,  0xc740c530d56,  0xced00000cbc,  0xd250d1a0000,  0xd6c0d6b00000000,  0xd490d230d860d6d,  0xa2609f709f209e9,  0xa6d0a660a390a29,  0xab90a810a7e0a6f,  0xb0a0b080afe0abb,  0xb510b470b3b0b10,  0xbb20ba60b9f0b6e,  0xc240bec0bcf0bc7,  0xc2e0c2c0c2d0c2b,  0xc360c350c300c2f,  0xc640c4b0c440c3f,  0xc770c6d0c680c66,  0xcb20c980c980c8b,  0xcf00cef0ce20cdc,  0xd1a0d180d020d01,  0xafc0d650d5f0d4e,  0xc910de3,  0x9e609fc0a0c09cb,  0xa2c0a250a0109f6,  0xa6c0a650a610a66,  0xa980a950a830a7f,  0xae00ade0aa30a9f,  0xb060b000af40aec,  0xb100b070b0a0b02,  0xb320b300b2d0b17,  0xb5c0b5b0b4f0b3c,  0xb9c0b860b820b61,  0xbb90bb20bad0baf,  0xbdd0bd00c1d0bc7,  0xc000bf70bf00be0,  0xc120c110c0a0c09,  0xc260c1a0c1b0c16,  0xc5f0c510c4b0c45,  0xca40c770c6b0c64,  0xce00cdd0ccb0cae,  0xce90ced0ce80ce2,  0xcf00cec0cee0cef,  0xd1d0d110d020cf3,  0xd4e0d450d320d2a,  0xd620d5f0d5b0d56,  0xdce0da20d7a0d65,  0x99f09950dd70dcd,  0xe120dfa0df109a0,  0xda10d9d,  0x0,  0x33a033d033c0339,  0x3f103f1033b,  0x0,  0x0,  0x5e8000000000000,  0x5e705e905e605e5,  0x0,  0x617000005fc0000,  0x5f605f405ea0608,  0x60e0604060205ff,  0x614061300c20615,  0x5ec05eb06120611,  0x5f505f305f005ed,  0x5fa05f905f7,  0x60005fe05fd05fb,  0x60500000603,  0x609000006070606,  0x60d060c0000060a,  0x5f806160610060f,  0x5ee060b060105f1,  0x75d075d075a075a,  0x75e075e075d075d,  0x7600760075e075e,  0x75c075c07600760,  0x75f075f075c075c,  0x75b075b075f075f,  0x76c076c075b075b,  0x76d076d076c076c,  0x7620762076d076d,  0x761076107620762,  0x763076307610761,  0x764076407630763,  0x767076707640764,  0x768076807660766,  0x76a076a07650765,  0x76e076e07690769,  0x7700770076e076e,  0x772077207700770,  0x771077107720772,  0x773077307710771,  0x774077407740774,  0x776077607830783,  0x775077507760776,  0x781078107750775,  0x7820782,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x76f000000000000,  0x77a076f076f076f,  0x77c07790779077a,  0x77e077e077b077c,  0x77d077d07780778,  0x780078007800780,  0x746074607340734,  0x74f074f07560756,  0x752075207530753,  0x755075507540754,  0x750075007500755,  0x77f077f077f077f,  0x750074c07480747,  0x625062306220751,  0x630062d062c0629,  0x645063d06370634,  0x64e064b06480646,  0x65c06550651064f,  0x66606650664065e,  0x67b067706750672,  0x6a0069f069a0691,  0x6ab06aa06a606a3,  0x6be06b706b406b2,  0x6d106d006cf06bf,  0x6d806d606d506d3,  0x6e106df06de06da,  0x6e506e406e306e2,  0x6f006ea06e906e6,  0x6fe06fa06f806f4,  0x70c0707070206ff,  0x715071307120710,  0x7260721071e071a,  0x72d072a07290727,  0x73b07390737072e,  0x66b07440743073e,  0x1f001d0735066e,  0x27002500230021,  0x74d074c074b074a,  0x628062707510750,  0x62d062c062a0629,  0x643063d063c063b,  0x64a064906460645,  0x64f064e064c064b,  0x6df06de06d606d5,  0x6e906e606e506e1,  0x6ff06fe06fa06ea,  0x720071f07100701,  0x727072607240721,  0x73e073d073c0735,  0x747074407430741,  0x74e074c07490748,  0x629062506230622,  0x63706340630062b,  0x651064b0644063d,  0x664065e065c0655,  0x677067506720666,  0x69a06940691067b,  0x6a606a306a0069f,  0x6b706b406b206aa,  0x6d006cf06bf06be,  0x6da06d806d306d1,  0x6e506e406e306e2,  0x6f806f406f006e6,  0x707070206fd06fa,  0x71a07150710070c,  0x72907250721071e,  0x7390737072f072a,  0x74c0742073e073b,  0x63d062b0629074e,  0x67b064d064b0644,  0x6e5068d068a067f,  0x725072106fa06e6,  0x6c906c70742073e,  0x6bb06b006af06cb,  0x68006c406c306bc,  0x661068f068e0681,  0x667065a06590662,  0x6a7069d069c0668,  0x6880685068306a8,  0x695067a0689068a,  0x6bb06b006af06a5,  0x68006c406c306bc,  0x661068f068e0681,  0x667065a06590662,  0x6a7069d069c0668,  0x6880685068306a8,  0x695067a0689068a,  0x6880685068306a5,  0x6ab068d067f068a,  0x683067706750672,  0x6b206ab06880685,  0x61c061c,  0x0,  0x0,  0x0,  0x0,  0x636063506350631,  0x640063f063e0638,  0x65f066006560656,  0x67d067406730676,  0x67e067e067c067d,  0x686069b06920692,  0x68b068b06840686,  0x6a406a1068c068c,  0x6ad06ac06ac06a4,  0x6b806b806b506ae,  0x6c106c206c006b9,  0x6dc06db06d206d2,  0x6f106f606f706f5,  0x6fb06f906f906f1,  0x70b0709070806fb,  0x70e070d07050703,  0x72b070400000000,  0x717071c071b072c,  0x722072307180717,  0x6330626073f073f,  0x6420639063a0632,  0x657065206580641,  0x6a2068706930678,  0x738073a06fc06f3,  0x71d06dd07110740,  0x6e806ba06f506db,  0x6e706f2070f0716,  0x65d0653071606f2,  0x6e7062406d40706,  0x7190679069b06b5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x61a061b06d90699,  0x6b6066d0696070a,  0x654069806970731,  0x66f,  0x0,  0x0,  0x0,  0x0,  0x1730893089200c3,  0x8ab017e002b0175,  0xc708ac,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2d5084d084e00c6,  0x44900c0003402d5,  0x89c08aa089f044b,  0x89408970896089d,  0x89a089908980895,  0x2d100000000089b,  0x50005000502d3,  0x2d502d502d50005,  0xc5089200c3,  0x2b017e01730175,  0x44900c00034084e,  0x2f08aa089f044b,  0xc400c200c10032,  0x178017c0176,  0x1810031003002d2,  0x0,  0x1c06c5001b,  0x6c600200000001e,  0x6ca002406c80022,  0x6cd002806cc0026,  0x61e061d061d0618,  0x61f07320732061e,  0x74507450745061f,  0x621061906190745,  0x62e062106210621,  0x62f062f062f062e,  0x64706470647062f,  0x650065006500647,  0x65b065b065b0650,  0x66306630663065b,  0x66a066906690663,  0x670066c066c066a,  0x671067106710670,  0x682068206820671,  0x690069006900682,  0x69e069e069e0690,  0x6a906a906a9069e,  0x6b106b106b106a9,  0x6b306b306b306b1,  0x6bd06bd06bd06b3,  0x6ce06ce06ce06bd,  0x6d706d706d706ce,  0x6e006e006e006d7,  0x6eb06eb06eb06e0,  0x7000700070006eb,  0x714071407140700,  0x728072807280714,  0x734073007300728,  0x736073607360734,  0x6ee06ed06ed0736,  0x6ec06ef06ef06ee,  0x6ec,  0x2f002e002b0000,  0x33003200310030,  0xc200c100c00034,  0xc800c500c400c3,  0x12b010900ce00c9,  0x160015a01510140,  0x1750173016d0167,  0x17e017c01780176,  0x1a701a201820181,  0x1da01d701bd01b1,  0x20b020901f201e6,  0x239022c02200214,  0x27102660265025c,  0x2b102aa028b0280,  0x2d102ca02c002bb,  0x2d502d402d302d2,  0x2fe02f902d702d6,  0x3400338031c030d,  0x36d036a03540349,  0x3b303a2038e0380,  0x3ef03e203e103d7,  0x42a0424040503fc,  0x449044204370432,  0x88e044c044b044a,  0x89908980893088f,  0x8cc097a097d0892,  0x8de08da08d608d2,  0x91609660963095f,  0x8d708d308cd097e,  0x8e908e208df08db,  0x90208fc08f908f3,  0x90f090b09090906,  0x919091709140911,  0x92309220920091c,  0x92e092709250924,  0x94f0946093c0935,  0x95e095a09590955,  0x968096709640960,  0x972096f096c0969,  0x8ca08c9097c0973,  0x82507cc07ca0807,  0x7cf0827082607cd,  0x829082807d207d1,  0x82d082c082b082a,  0x7d807d607d407f0,  0x7dc07db07d907f5,  0x7e607e307e207df,  0x7ec07ea07e8,  0x809080800000000,  0x80d080c080b080a,  0x80f080e00000000,  0x813081208110810,  0x815081400000000,  0x819081808170816,  0x81b081a00000000,  0x81c,  0x40451044e044d,  0x854044f0450,  0x85808570855088b,  0x88d088c085a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xda600000000,  0xda7,  0x0,  0x0,  0xda8000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdaa0da900000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdac0dab00000000,  0xdb00daf0dae0dad,  0xdb1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdb2000000000000,  0xdb40db60db30db5,  0xdb7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035400000340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a700000182,  0x1da00000000,  0x20b02090000,  0x25c0239022c0000,  0x280027100000265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x3380000030d02fe,  0x36a035403490000,  0x3a2038e0380036d,  0x3e203e103d70000,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b1000001a20182,  0x1da01d701bd,  0x214020b02090000,  0x25c0239022c0220,  0x280027100000265,  0x2bb02b102aa028b,  0x2f902d7000002c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b1000001a20182,  0x1da01d701bd,  0x214020b020901f2,  0x23900000220,  0x280027100000000,  0x2bb02b102aa028b,  0x2f902d7000002c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x2f902d702ca02c0,  0x338031c030d02fe,  0x36a035403490340,  0x3a2038e0380036d,  0x3e203e103d703b3,  0x424040503fc03ef,  0x44204370432042a,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x44204370432042a,  0x467045f,  0x4af04ae04ad0497,  0x4ce04ba04b904b0,  0x4df04de04dd04cf,  0x4eb04e204e104e0,  0x4ef04ee04ce04ec,  0x4fc04fb04fa04f0,  0x52b0511086104fd,  0x537052e052d052c,  0x563055105500538,  0x56f056e05650564,  0x57d057a05790570,  0x5920580057f057e,  0x85f059505940593,  0x59205630550052e,  0x4ad04970579057a,  0x4b904b004af04ae,  0x4dd04cf04ce04ba,  0x4e104e004df04de,  0x4ce04ec04eb04e2,  0x4fa04f004ef04ee,  0x86104fd04fc04fb,  0x52d052c052b0511,  0x55005380537052e,  0x565056405630551,  0x5790570056f056e,  0x57f057e057d057a,  0x594059305920580,  0x550052e085f0595,  0x579057a05920563,  0x4af04ae04ad0497,  0x4ce04ba04b904b0,  0x4df04de04dd04cf,  0x4eb04e204e104e0,  0x4ef04ee04ce04ec,  0x4fc04fb04fa04f0,  0x52b0511086104fd,  0x537052e052d052c,  0x563055105500538,  0x56f056e05650564,  0x57d057a05790570,  0x5920580057f057e,  0x85f059505940593,  0x59205630550052e,  0x4ad04970579057a,  0x4b904b004af04ae,  0x4dd04cf04ce04ba,  0x4e104e004df04de,  0x4ce04ec04eb04e2,  0x4fa04f004ef04ee,  0x86104fd04fc04fb,  0x52d052c052b0511,  0x55005380537052e,  0x565056405630551,  0x5790570056f056e,  0x57f057e057d057a,  0x594059305920580,  0x550052e085f0595,  0x579057a05920563,  0x4af04ae04ad0497,  0x4ce04ba04b904b0,  0x4df04de04dd04cf,  0x4eb04e204e104e0,  0x4ef04ee04ce04ec,  0x4fc04fb04fa04f0,  0x52b0511086104fd,  0x537052e052d052c,  0x563055105500538,  0x56f056e05650564,  0x57d057a05790570,  0x5920580057f057e,  0x85f059505940593,  0x59205630550052e,  0x5ae05ad0579057a,  0xce00c900000000,  0x1510140012b0109,  0x16d01670160015a,  0x12b010900ce00c9,  0x160015a01510140,  0xce00c9016d0167,  0x1510140012b0109,  0x16d01670160015a,  0x12b010900ce00c9,  0x160015a01510140,  0xce00c9016d0167,  0x1510140012b0109,  0x16d01670160015a,  0x669065006210619,  0x65b067007300000,  0x6eb06e0073606a9,  0x6b3067107140700,  0x66c06d7069006ce,  0x6630647062f0682,  0x6bd06b1069e066a,  0x759076b07730758,  0x65006210000,  0x65b000000000728,  0x6eb06e007360000,  0x6b3067107140700,  0x6d7069006ce,  0x6630647062f0682,  0x6bd0000069e0000,  0x0,  0x65000000000,  0x65b000000000000,  0x6eb000007360000,  0x6b3067107140000,  0x6d706900000,  0x663000000000682,  0x6bd0000069e0000,  0x759000007730000,  0x65006210000,  0x65b000000000728,  0x6e0073606a9,  0x6b3067107140700,  0x6d7069006ce,  0x6630647062f0682,  0x6bd06b1069e0000,  0x76b00000758,  0x669065006210619,  0x65b067007300728,  0x6eb0000073606a9,  0x6b3067107140700,  0x66c06d7069006ce,  0x6630647062f0682,  0x6bd06b1069e066a,  0x0,  0x669065006210000,  0x65b067007300000,  0x6eb0000073606a9,  0x6b3067107140700,  0x66c06d7069006ce,  0x6630647062f0682,  0x6bd06b1069e066a,  0x0,  0x10a00cf00ca00cb,  0x15b01520141012c,  0x16e01680161,  0x0,  0x4c004b004a0049,  0x50004f004e004d,  0x54005300520051,  0x58005700560055,  0x5c005b005a0059,  0x60005f005e005d,  0x1a708a000620061,  0x2b301a80266,  0x1b101a701a20182,  0x1e601da01d701bd,  0x214020b020901f2,  0x25c0239022c0220,  0x280027102660265,  0x2bb02b102aa028b,  0x22601e802ca02c0,  0x2b2025f02740272,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x223022200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1b2,  0x0,  0x0,  0x0,  0x90208fe08c5,  0x0,  0x0,  0x0,  0x91a0a480aa60b19,  0xa940ce40a8f09da,  0xb410bc40b4c09dd,  0xb430a030af00a1d,  0xcfb0bf90c5e0a18,  0xb1c0bb10a560a88,  0xd1b09c609c30b27,  0xb240a4f09cd0acb,  0xc430c340b1a0d05,  0xb590b5a0ba90a51,  0xa690a1e0bfe,  0x0,  0x8a408a208a108a7,  0x8a308a908a508a8,  0x8a6,  0x0,  0xa4d0af1,  0x0,  0x0,  0x0,  0xdb809d409d009d2,  0x9ec09ea09e909e5,  0x9f009f209ef09ee,  0x9f809f70dbc0980,  0x9810db90a0009f9,  0xa070dbb0a0309fb,  0xa0c0a0b09e10a09,  0x9830a150a130e1a,  0xa1f0a1e0a1c0a1b,  0xa290a260a250984,  0xa300a2e0a2d0a2c,  0xa3f0a3b0a390a38,  0xa420a420a420a41,  0xa490a470bbd0dbf,  0xa500a4e0a4c0dc0,  0xa590a580a550a5a,  0xa600a5e0a5d0a5b,  0xa650a630a630a62,  0xa740a6b0a680a67,  0xa700a6e0a750a6d,  0xa7a0a790a870a16,  0xa7c0a7d0a780a7b,  0xa8a0a890dc10a82,  0xa990a910a8f0a8c,  0xa9d0a9c0dc30dc2,  0x9850aa00a9b0a9e,  0xaa40aa40aa20986,  0xaad0aac0aab0dc4,  0xab20ab10dc50aaf,  0xab709870ab40ae9,  0xdc70abd0abe0abb,  0xac20ac30dc80ac0,  0x9880ac90ac80ac4,  0xad10ad00acf0acd,  0xad9098a0dc90989,  0xe240add0adb0ada,  0xc8e0dcb0dcb0ae3,  0xdd2098b0ae70ae7,  0x98c0aed0aeb0dfc,  0xaf90af70af60af2,  0xafe098d098e0afd,  0xb050b040aff0dcc,  0xb0a0b090b050b06,  0xb0f0b0d0b0c0b0e,  0xb150b140b110b10,  0xb260b210b1d0b1b,  0xb280b220b250dcf,  0xb310dd00b2f0b2a,  0xb33098f0b2c0b2e,  0x9900b340b370b35,  0xb480dd10b3d0b3b,  0xb5109930b4e0b57,  0xa050a0409910992,  0x9ac0c830b520b58,  0xb620b5d0b5c0b5b,  0xb6709940dd60b60,  0xdd80b6e0b6c0b64,  0x9950b710b690b6f,  0xb770b740b730b72,  0xb7c09960b790dd9,  0xb8009970b7d0dda,  0xddb0b870b860b83,  0xddd0b8f0ddc0dc6,  0xb970b900b940b92,  0xb9d0b9c0b9f0b9b,  0xb9a0dde0ba10ba0,  0xbad09980ba80ba7,  0xbb40ba50ddf0bac,  0xbba0bb50de10de0,  0xbbb09990bb80bb9,  0xdba0bc10bbe0bbf,  0xde40bc80de20bc5,  0xde50bd50bd00bcd,  0xde70de60bdb0bda,  0xbe7099a0be60be2,  0xbee0bed099b099b,  0x99c0bf40bf10bf0,  0xde90c010de80bfa,  0xdea0c080dca0c04,  0x99e099d0dec0deb,  0xdef0ded0dee0c16,  0xc190c190c180df0,  0x9a10c1c09a00c1b,  0xc230c210df209a2,  0xc2f0df309a30c26,  0xc3d0c370df50df4,  0xc410c400c3f09a4,  0xc470df70df70df6,  0xc4d0c4c0df809a5,  0x9a70c540df909a6,  0xdfb0c5a0c560c58,  0xc650c6309a80c60,  0xdfe0dfd09a90c69,  0xe000c6f0dff09aa,  0xe010c770c750c72,  0xc7e0e030c7c0e02,  0xc850c8409ab0dd3,  0xe040aa10c8609ad,  0xc8e0dd50dd40e05,  0xc9a09ae0d150c8f,  0xc9c0a230c9b0c99,  0xe060ca00c9e0c9d,  0xca70ca60ca10c9f,  0xcb20cad0ca80ca2,  0xcac0cab0caa0ca5,  0x9af0e080e090e07,  0xe0d0cb70cb50cb4,  0x9b109b00e0a0cb8,  0xcc009b20e0c0e0b,  0xcc60cc30cc20cc1,  0xccb0cc70cc80cc5,  0x9b30ccc0cca0cc9,  0xcd309b40ccf0cce,  0xcd80cd70e0e0cd4,  0xe0f09820cdb09b5,  0xce609b709b60e10,  0xe110cf70cf30cec,  0xd060d030cfd0cfc,  0xd080d090dbd0e13,  0xd110d0e0dbe0d0b,  0xd240d210e150e14,  0xd310d270e160d26,  0xd380d330d350d34,  0x9b80d3c0e170d39,  0xd4c09b90e180d3e,  0xe1b0e190d520ac5,  0xe1c0d5c09bb09ba,  0xd620d620e1d09bc,  0x9bd0d6a0e1e0d64,  0xd750d730d710d6e,  0xd810d7a0e1f09be,  0xd8509c009bf0d84,  0xe220e2109c10e20,  0xd9309c20d8e0e23,  0xd9a0d980d960d95,  0xe250d9c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
//12288 bytes
immutable canonMappingTrieEntries = TrieEntry!(ushort, 8, 7, 6)([ 0x0,  0x20,  0x120], [ 0x100,  0x400,  0x1380], [ 0x302020202020100,  0x205020202020204,  0x602020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x202020202020202,  0x1000000000000,  0x5000400030002,  0x6,  0x9000800070000,  0xc0000000b000a,  0x0,  0xe00000000000d,  0x0,  0x0,  0x1100000010000f,  0x130012,  0x16001500140000,  0x18000000170000,  0x1a000000190000,  0x0,  0x1c001b0000,  0x1d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f001e,  0x0,  0x0,  0x23002200210020,  0x27002600250024,  0x28,  0x2b002a00000029,  0x2f002e002d002c,  0x30,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x31000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x34003300320000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x38003700360035,  0x3c003b003a0039,  0x3e003d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f00000000,  0x40,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x43004200410000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x47004600450044,  0x4b004a00490048,  0x4c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000700060005,  0x29000000180015,  0x3e003300320031,  0x60005b005a0059,  0x840083007c0000,  0x94008a0085,  0xc300c200c10000,  0xea00c9,  0x10000fb00fa00f9,  0x11d0000010c0109,  0x132012701260125,  0x1540150014f014e,  0x178017701700000,  0x188017e0179,  0x1b801b701b60000,  0x1e5000001e001be,  0x102000e0101000d,  0x119002501150021,  0x11b0027011a0026,  0x120002c011c0028,  0x12d003900000000,  0x131003d0130003c,  0x1340040013b0047,  0x142004e0140004c,  0x14500510143004f,  0x1460052,  0x152005d0151005c,  0x15b00670153005e,  0x5f,  0x162006e015d0069,  0x74016400700000,  0x16500710168,  0x7b000000000000,  0x7e01740080016f,  0x172,  0x18500910182008e,  0x18b0097,  0x1a200ae019b00a7,  0x1a400b0019d00a9,  0x1ad00b901a600b2,  0x1b300be01a800b4,  0x1b000bb,  0x1bb00c601b900c4,  0x1c400cf01bd00c8,  0x1d100dc01c500d0,  0x1e100eb01d800e3,  0xf401e900f200ef,  0x1ec00f501eb,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x18f009b,  0x0,  0x0,  0xd4000000000000,  0x1c9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x63010e001a0000,  0xd1018c00980157,  0xcb01c100cc01c6,  0xca01c200cd01c0,  0x10a0016000001bf,  0x1f801f501080014,  0x144005000000000,  0x19700a30160006c,  0x1fc01fb019800a4,  0x15e,  0x13f004b,  0x10d0019016e007a,  0x1f901f601f701f4,  0x110001c010f001b,  0x136004201350041,  0x159006501580064,  0x18e009a018d0099,  0x19f00ab019e00aa,  0x1c800d301c700d2,  0x1b200bd01ac00b8,  0x149005500000000,  0x0,  0x107001300000000,  0x189009501390045,  0x18600920180008c,  0x1e300ed01870093,  0x0,  0x0,  0x0,  0x201000001ff01fe,  0x200,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fd,  0x0,  0x100000000,  0x0,  0x1f3020301f00000,  0x23302200218,  0x253024900000240,  0x2a4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x24c023600000000,  0x29f0288027f0267,  0x2bf,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2bd02a200000000,  0x2cc02ba02b0,  0x2e1000000000000,  0x2e2,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2e6000002e902e7,  0x2e3000000000000,  0x0,  0x2f402ed02f1,  0x0,  0x0,  0x2ef0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3050000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2fc000002ff02fd,  0x310000000000000,  0x0,  0x30a03030307,  0x0,  0x0,  0x0,  0x0,  0x0,  0x312031100000000,  0x0,  0x0,  0x30002ea0000,  0x0,  0x0,  0x0,  0x2fb02e502fa02e4,  0x2fe02e800000000,  0x314031300000000,  0x30202ec030102eb,  0x30402ee00000000,  0x30802f2030602f0,  0x316031500000000,  0x30902f3030f02f9,  0x30c02f6030b02f5,  0x30d02f7,  0x30e02f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x33a033900000000,  0x33d033b033c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x33e00000340,  0x0,  0x0,  0x0,  0x33f000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3470000,  0x0,  0x34a0000,  0x34b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x344034303420341,  0x349034803460345,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x34f000000000000,  0x350,  0x0,  0x0,  0x0,  0x34e0000034d034c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x355000000000000,  0x35600000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x353035203510000,  0x35400000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x35900000000035a,  0x35b,  0x0,  0x0,  0x0,  0x3580357,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x35c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x35f035d00000000,  0x35e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x360,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x361,  0x364000000000000,  0x363036200000365,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x368036600000000,  0x367,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x36900000000,  0x36c036b036a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x36e000000000000,  0x0,  0x0,  0x36f0000,  0x37000000000,  0x371000000000000,  0x0,  0x372,  0x0,  0x0,  0x36d0000,  0x0,  0x373000000000000,  0x37c03740000,  0x37d,  0x0,  0x3750000,  0x0,  0x0,  0x0,  0x377000000000000,  0x0,  0x0,  0x3780000,  0x37900000000,  0x37a000000000000,  0x0,  0x37b,  0x0,  0x0,  0x3760000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37e00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37f00000000,  0x38100000380,  0x38300000382,  0x38400000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x385000000000000,  0x3860000,  0x389000003880387,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x116002201140020,  0x118002401170023,  0x11f002b011e002a,  0x12400300121002d,  0x123002f0122002e,  0x12f003b012e003a,  0x13d0049013c0048,  0x13e004a013a0046,  0x14700530141004d,  0x1480054014a0056,  0x14c0058014b0057,  0x1550061015c0068,  0x161006d015f006b,  0x16600720163006f,  0x16a007601670073,  0x16b007701690075,  0x16d0079016c0078,  0x173007f0171007d,  0x175008101760082,  0x181008d017f008b,  0x18400900183008f,  0x19a00a6019900a5,  0x1a000ac019c00a8,  0x1a300af01a100ad,  0x1aa00b601a700b3,  0x1a900b501a500b1,  0x1ae00ba01ab00b7,  0x1b500c001b100bc,  0x1d000db01b400bf,  0x1d200dd01d300de,  0x1bc00c701ba00c5,  0x1d500e001d400df,  0x1d700e201d600e1,  0x1d900e401da00e5,  0x1dd00e701dc00e6,  0x1e400ee01de00e8,  0x1ed00f601ea00f3,  0x1af014d01ee00f7,  0x1fa000001e701db,  0x0,  0x10b00170111001d,  0xfc000800fd0009,  0xfe000a00ff000b,  0x10400100112001e,  0x10600120103000f,  0x113001f01050011,  0x133003f01370043,  0x1290035012c0038,  0x12b003701280034,  0x1380044012a0036,  0x15a006601560062,  0x18a0096019500a1,  0x17a0086017b0087,  0x17c0088017d0089,  0x191009d019600a2,  0x193009f0190009c,  0x19400a00192009e,  0x1c300ce01cf00da,  0x1ca00d501cb00d6,  0x1cc00d701cd00d8,  0x1df00e901ce00d9,  0x1e600f001e800f1,  0x1e200ec,  0x0,  0x274026c0273026b,  0x27802700276026e,  0x20f0207020e0206,  0x213020b02110209,  0x284028102830280,  0x2850282,  0x21d021a021c0219,  0x21e021b,  0x293028b0292028a,  0x297028f0295028d,  0x22a022202290221,  0x22e0226022c0224,  0x2ab02a702aa02a6,  0x2ad02a902ac02a8,  0x23c0238023b0237,  0x23e023a023d0239,  0x2b502b202b402b1,  0x2b602b3,  0x245024202440241,  0x2460243,  0x2c602c202c502c1,  0x2c802c402c702c3,  0x24e0000024d0000,  0x2500000024f0000,  0x2d702cf02d602ce,  0x2db02d302d902d1,  0x25d0255025c0254,  0x2610259025f0257,  0x27f027e02670265,  0x29f029e02880286,  0x2ba02b902b002af,  0x2cc02ca,  0x275026d027a0272,  0x27902710277026f,  0x21002080215020d,  0x214020c0212020a,  0x294028c02990291,  0x29802900296028e,  0x22b022302300228,  0x22f0227022d0225,  0x2d802d002dd02d5,  0x2dc02d402da02d2,  0x25e02560263025b,  0x262025a02600258,  0x27d02660269026a,  0x27c027b00000268,  0x203020202040205,  0x29d00000216,  0x29c028701f10000,  0x29b029a00000289,  0x220021f02180217,  0x38c038b038a0231,  0x2a402a302a002a1,  0x2a502ae00000000,  0x233023202340235,  0x38f038e038d0000,  0x2bf02be02bb02bc,  0x2c002c902b802b7,  0x2490248024a024b,  0xf801f001ef0247,  0x2e002cb00000000,  0x2df02de000002cd,  0x25302520240023f,  0x1f20264,  0x3910390,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x25100000000,  0x18006a00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x393039200000000,  0x0,  0x0,  0x0,  0x0,  0x39400000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x396039703950000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x398,  0x3990000,  0x39a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x39c0000039b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x39d0000,  0x39f00000000039e,  0x3a00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a200000003,  0x0,  0x0,  0x4000203a10000,  0x3a403a3,  0x3a603a5,  0x3a803a7,  0x0,  0x3aa03a9,  0x3ae03ad,  0x3b003af,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3b603b503b403b3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3b203b103ac03ab,  0x0,  0x3b803b700000000,  0x3ba03b9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3bd03bc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3bb,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3c0000003bf,  0x3c2000003c1,  0x3c4000003c3,  0x3c6000003c5,  0x3c8000003c7,  0x3ca000003c9,  0x3cc000003cb0000,  0x3cd0000,  0x0,  0x3d0000003cf03ce,  0x3d303d2000003d1,  0x3d503d40000,  0x3d703d6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3be,  0x0,  0x3d800000000,  0x0,  0x0,  0x0,  0x3db000003da,  0x3dd000003dc,  0x3df000003de,  0x3e1000003e0,  0x3e3000003e2,  0x3e5000003e4,  0x3e7000003e60000,  0x3e80000,  0x0,  0x3eb000003ea03e9,  0x3ee03ed000003ec,  0x3f003ef0000,  0x3f203f1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f30000000003d9,  0x3f603f503f4,  0x3f700000000,  0x6a106aa0557069c,  0x70f0490043d059d,  0x4a306c504c8070f,  0x62f05e2052604c7,  0x6b80686067a066d,  0x5ca05b005880571,  0x44206f506c0065f,  0x66c05b80576048a,  0x66805a404e90700,  0x67d0640052e068a,  0x5c2058e055a04fb,  0x47e0468044a06ba,  0x5e505b705740546,  0x6a8066f066a0634,  0x5f006ff06f906e3,  0x6cc0658062205ff,  0x50104bf06930701,  0x5f205bd063a0613,  0x4e104be06e106a0,  0x61f059f05930572,  0x63b047d06d40628,  0x6230606046a046b,  0x52f069a06d6065e,  0x4d9043f06960571,  0x48405dc05c6050f,  0x43b0509044e05f4,  0x48d061e054a0584,  0x68f066005e704ba,  0x533058206b2057e,  0x44405db0539064e,  0x61a05690469045d,  0x48006c406920646,  0x54c04ff04cb0497,  0x6f706d105f505a5,  0x556047807050702,  0x52004f506b0057a,  0x5b205a105440527,  0x6380625060405d3,  0x6cd06b4066206ac,  0x5af049c04790470,  0x50d04fa068f0681,  0x5c40612057d0537,  0x4ee04d904af0447,  0x63105d005c90510,  0x6e406e006c60636,  0x6c20603044b06ea,  0x4540443051606dc,  0x571054b04df04da,  0x6b7066505e105b5,  0x47706d30552070d,  0x599058c05640561,  0x61d05ef05da05cc,  0x6d7052a045e06ed,  0x6ad059404e70450,  0x5c6056605180507,  0x4e30494047106d9,  0x586056c055d054f,  0x682062d05dd05cb,  0x48506de06c30685,  0x5d405b60495059a,  0x70306fb06da0669,  0x60c064105920563,  0x5ad05c10615060e,  0x472065204450699,  0x618053004f6046f,  0x6af0555058904d6,  0x4fd068c06d5067e,  0x4a80456,  0x551000004b9,  0x5e305c3046c0000,  0x60205fe05fd05f6,  0x632061606e5,  0x6950000066b,  0x6bd06b50000,  0x6f006ef00000000,  0x6db06bb06fe06f1,  0x47c04580455044c,  0x4ab04a50487047f,  0x4e204bb04b804ad,  0x51f051d051304e4,  0x553054d05470525,  0x5a00596058f056a,  0x5f105cd05ba05b3,  0x5fa05f805f905f7,  0x601060005fc05fb,  0x625060f060a0607,  0x635062c06290627,  0x661064706470642,  0x6980697068d0688,  0x6b506b306a306a2,  0x51106ec06e806df,  0x645074d,  0x449045c0467043c,  0x481047b04600457,  0x4aa04a404a004a5,  0x4c904c604bd04b9,  0x4fe04fc04d404d0,  0x51b0515050a0505,  0x525051c051f0517,  0x540053e053b052b,  0x55b055a05510548,  0x58c057e057b055f,  0x5a705a0059c059e,  0x5c005bb05ed05b3,  0x5d805d605d105c3,  0x5e405e305e005df,  0x5f305ea05eb05e6,  0x6200614060f060b,  0x6530635062b0625,  0x68b06890678065d,  0x69106950690068d,  0x698069406960697,  0x6b606ae06a3069b,  0x6df06d806c806c1,  0x6e906e806e606e5,  0x738070f06f806ec,  0x417040d07410737,  0x77c0764075b0418,  0x70e070c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x338000003230000,  0x0,  0x0,  0x336033500000000,  0x318031703340333,  0x31d031c031a0319,  0x3210320031e,  0x326032503240322,  0x32900000328,  0x32c0000032b032a,  0x330032f0000032d,  0x31f033703320331,  0x32e0327031b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x71000000000,  0x711,  0x0,  0x0,  0x712000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x714071300000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x716071500000000,  0x71a071907180717,  0x71b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x71c000000000000,  0x71e0720071d071f,  0x721,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7220441043e0440,  0x44f044d044c0448,  0x453045504520451,  0x4590458072603f8,  0x3f90723045f045a,  0x46407250461045b,  0x467046604460465,  0x3fb046e046d0784,  0x476047504740473,  0x47f047c047b03fc,  0x484048304820481,  0x489048804870486,  0x48c048c048c048b,  0x48f048e05aa0729,  0x49304920491072a,  0x49904980496049a,  0x49f049e049d049b,  0x4a404a204a204a1,  0x4b004a904a704a6,  0x4ae04ac04b104ab,  0x4b404b304c0046f,  0x4b604b704b204b5,  0x4c204c1072b04bc,  0x4ca04c504c404c3,  0x4ce04cd072d072c,  0x3fd04d104cc04cf,  0x4d504d504d303fe,  0x4d904d804d7072e,  0x4dd04dc072f04db,  0x4e003ff04de0503,  0x73104e504e604e4,  0x4ea04eb073204e8,  0x40004f004ef04ec,  0x4f404f304f204f1,  0x4f7040207330401,  0x78e04fb04f904f8,  0x643073507350500,  0x73c040305020502,  0x404050605040766,  0x50e050c050b0508,  0x513040504060512,  0x51a051905140736,  0x51f051e051a051b,  0x524052205210523,  0x529052805260525,  0x5350531052d052c,  0x536053205340739,  0x53f073a053d0538,  0x5410407053a053c,  0x408054205450543,  0x54e073b05490547,  0x553040b05500558,  0x46304620409040a,  0x424063c05540559,  0x560055c055b055a,  0x565040c0740055e,  0x742056a05680562,  0x40d056d0567056b,  0x5730570056f056e,  0x577040e05750743,  0x579040f05780744,  0x745057f057e057c,  0x747058007460730,  0x587058105850583,  0x58d058c058f058b,  0x58a074805910590,  0x59c041005980597,  0x5a205950749059b,  0x5a805a3074b074a,  0x5a9041105a605a7,  0x72405ae05ab05ac,  0x74e05b4074c05b1,  0x74f05bc05bb05b9,  0x751075005bf05be,  0x5c8041205c705c5,  0x5cf05ce04130413,  0x41405d505d205d1,  0x75305d9075205d7,  0x75405de073405dc,  0x416041507560755,  0x7590757075805e6,  0x5e905e905e8075a,  0x41905ec041805eb,  0x5f005ee075c041a,  0x5fb075d041b05f3,  0x6050602075f075e,  0x60906080607041c,  0x60d076107610760,  0x61106100762041d,  0x41f06170763041e,  0x765061c0619061b,  0x626062404200621,  0x76807670421062a,  0x76a062e07690422,  0x76b063506330630,  0x639076d0637076c,  0x63e063d0423073d,  0x76e04d2063f0425,  0x643073f073e076f,  0x649042606b10644,  0x64b047a064a0648,  0x770064f064d064c,  0x65606550650064e,  0x661065c06570651,  0x65b065a06590654,  0x427077207730771,  0x777066606640663,  0x429042807740667,  0x66e042a07760775,  0x67306710670066f,  0x678067406750672,  0x42b067906770676,  0x67f042c067c067b,  0x684068307780680,  0x77903fa0687042d,  0x68e042f042e077a,  0x77b069d069b0694,  0x6a506a4069f069e,  0x6a606a70727077d,  0x6ae06ab072806a9,  0x6bc06b9077f077e,  0x6c706bf078006be,  0x6ce06c906cb06ca,  0x43006d0078106cf,  0x6dd0431078206d2,  0x785078306e204ed,  0x78606e704330432,  0x6e906e907870434,  0x43506ee078806eb,  0x6f606f406f306f2,  0x6fa06f807890436,  0x6fd0438043706fc,  0x78c078b0439078a,  0x706043a0704078d,  0x70a070907080707,  0x78f070b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
immutable decompCanonTable = ["", ";", "≮", "≠", "≯", "À", "Á", "Â", "Ầ", "Ấ", "Ẫ", "Ẩ", "Ã", "Ā", "Ă", "Ằ", "Ắ", "Ẵ", "Ẳ", "Ȧ", "Ǡ", "Ä", "Ǟ", "Ả", "Å", "Ǻ", "Ǎ", "Ȁ", "Ȃ", "Ạ", "Ậ", "Ặ", "Ḁ", "Ą", "Ḃ", "Ḅ", "Ḇ", "Ć", "Ĉ", "Ċ", "Č", "Ç", "Ḉ", "Ḋ", "Ď", "Ḍ", "Ḑ", "Ḓ", "Ḏ", "È", "É", "Ê", "Ề", "Ế", "Ễ", "Ể", "Ẽ", "Ē", "Ḕ", "Ḗ", "Ĕ", "Ė", "Ë", "Ẻ", "Ě", "Ȅ", "Ȇ", "Ẹ", "Ệ", "Ȩ", "Ḝ", "Ę", "Ḙ", "Ḛ", "Ḟ", "Ǵ", "Ĝ", "Ḡ", "Ğ", "Ġ", "Ǧ", "Ģ", "Ĥ", "Ḣ", "Ḧ", "Ȟ", "Ḥ", "Ḩ", "Ḫ", "Ì", "Í", "Î", "Ĩ", "Ī", "Ĭ", "İ", "Ï", "Ḯ", "Ỉ", "Ǐ", "Ȉ", "Ȋ", "Ị", "Į", "Ḭ", "Ĵ", "K", "Ḱ", "Ǩ", "Ḳ", "Ķ", "Ḵ", "Ĺ", "Ľ", "Ḷ", "Ḹ", "Ļ", "Ḽ", "Ḻ", "Ḿ", "Ṁ", "Ṃ", "Ǹ", "Ń", "Ñ", "Ṅ", "Ň", "Ṇ", "Ņ", "Ṋ", "Ṉ", "Ò", "Ó", "Ô", "Ồ", "Ố", "Ỗ", "Ổ", "Õ", "Ṍ", "Ȭ", "Ṏ", "Ō", "Ṑ", "Ṓ", "Ŏ", "Ȯ", "Ȱ", "Ö", "Ȫ", "Ỏ", "Ő", "Ǒ", "Ȍ", "Ȏ", "Ơ", "Ờ", "Ớ", "Ỡ", "Ở", "Ợ", "Ọ", "Ộ", "Ǫ", "Ǭ", "Ṕ", "Ṗ", "Ŕ", "Ṙ", "Ř", "Ȑ", "Ȓ", "Ṛ", "Ṝ", "Ŗ", "Ṟ", "Ś", "Ṥ", "Ŝ", "Ṡ", "Š", "Ṧ", "Ṣ", "Ṩ", "Ș", "Ş", "Ṫ", "Ť", "Ṭ", "Ț", "Ţ", "Ṱ", "Ṯ", "Ù", "Ú", "Û", "Ũ", "Ṹ", "Ū", "Ṻ", "Ŭ", "Ü", "Ǜ", "Ǘ", "Ǖ", "Ǚ", "Ủ", "Ů", "Ű", "Ǔ", "Ȕ", "Ȗ", "Ư", "Ừ", "Ứ", "Ữ", "Ử", "Ự", "Ụ", "Ṳ", "Ų", "Ṷ", "Ṵ", "Ṽ", "Ṿ", "Ẁ", "Ẃ", "Ŵ", "Ẇ", "Ẅ", "Ẉ", "Ẋ", "Ẍ", "Ỳ", "Ý", "Ŷ", "Ỹ", "Ȳ", "Ẏ", "Ÿ", "Ỷ", "Ỵ", "Ź", "Ẑ", "Ż", "Ž", "Ẓ", "Ẕ", "`", "à", "á", "â", "ầ", "ấ", "ẫ", "ẩ", "ã", "ā", "ă", "ằ", "ắ", "ẵ", "ẳ", "ȧ", "ǡ", "ä", "ǟ", "ả", "å", "ǻ", "ǎ", "ȁ", "ȃ", "ạ", "ậ", "ặ", "ḁ", "ą", "ḃ", "ḅ", "ḇ", "ć", "ĉ", "ċ", "č", "ç", "ḉ", "ḋ", "ď", "ḍ", "ḑ", "ḓ", "ḏ", "è", "é", "ê", "ề", "ế", "ễ", "ể", "ẽ", "ē", "ḕ", "ḗ", "ĕ", "ė", "ë", "ẻ", "ě", "ȅ", "ȇ", "ẹ", "ệ", "ȩ", "ḝ", "ę", "ḙ", "ḛ", "ḟ", "ǵ", "ĝ", "ḡ", "ğ", "ġ", "ǧ", "ģ", "ĥ", "ḣ", "ḧ", "ȟ", "ḥ", "ḩ", "ḫ", "ẖ", "ì", "í", "î", "ĩ", "ī", "ĭ", "ï", "ḯ", "ỉ", "ǐ", "ȉ", "ȋ", "ị", "į", "ḭ", "ĵ", "ǰ", "ḱ", "ǩ", "ḳ", "ķ", "ḵ", "ĺ", "ľ", "ḷ", "ḹ", "ļ", "ḽ", "ḻ", "ḿ", "ṁ", "ṃ", "ǹ", "ń", "ñ", "ṅ", "ň", "ṇ", "ņ", "ṋ", "ṉ", "ò", "ó", "ô", "ồ", "ố", "ỗ", "ổ", "õ", "ṍ", "ȭ", "ṏ", "ō", "ṑ", "ṓ", "ŏ", "ȯ", "ȱ", "ö", "ȫ", "ỏ", "ő", "ǒ", "ȍ", "ȏ", "ơ", "ờ", "ớ", "ỡ", "ở", "ợ", "ọ", "ộ", "ǫ", "ǭ", "ṕ", "ṗ", "ŕ", "ṙ", "ř", "ȑ", "ȓ", "ṛ", "ṝ", "ŗ", "ṟ", "ś", "ṥ", "ŝ", "ṡ", "š", "ṧ", "ṣ", "ṩ", "ș", "ş", "ṫ", "ẗ", "ť", "ṭ", "ț", "ţ", "ṱ", "ṯ", "ù", "ú", "û", "ũ", "ṹ", "ū", "ṻ", "ŭ", "ü", "ǜ", "ǘ", "ǖ", "ǚ", "ủ", "ů", "ű", "ǔ", "ȕ", "ȗ", "ư", "ừ", "ứ", "ữ", "ử", "ự", "ụ", "ṳ", "ų", "ṷ", "ṵ", "ṽ", "ṿ", "ẁ", "ẃ", "ŵ", "ẇ", "ẅ", "ẘ", "ẉ", "ẋ", "ẍ", "ỳ", "ý", "ŷ", "ỹ", "ȳ", "ẏ", "ÿ", "ỷ", "ẙ", "ỵ", "ź", "ẑ", "ż", "ž", "ẓ", "ẕ", "῭", "΅", "῁", "´", "·", "Ǽ", "Ǣ", "Ǿ", "ǽ", "ǣ", "ǿ", "ẛ", "Ǯ", "ǯ", "ʹ", "̀", "́", "̈́", "̓", "Ὰ", "Ά", "Ᾱ", "Ᾰ", "Ἀ", "Ἂ", "ᾊ", "Ἄ", "ᾌ", "Ἆ", "ᾎ", "ᾈ", "Ἁ", "Ἃ", "ᾋ", "Ἅ", "ᾍ", "Ἇ", "ᾏ", "ᾉ", "ᾼ", "Ὲ", "Έ", "Ἐ", "Ἒ", "Ἔ", "Ἑ", "Ἓ", "Ἕ", "Ὴ", "Ή", "Ἠ", "Ἢ", "ᾚ", "Ἤ", "ᾜ", "Ἦ", "ᾞ", "ᾘ", "Ἡ", "Ἣ", "ᾛ", "Ἥ", "ᾝ", "Ἧ", "ᾟ", "ᾙ", "ῌ", "Ὶ", "Ί", "Ῑ", "Ῐ", "Ϊ", "Ἰ", "Ἲ", "Ἴ", "Ἶ", "Ἱ", "Ἳ", "Ἵ", "Ἷ", "Ὸ", "Ό", "Ὀ", "Ὂ", "Ὄ", "Ὁ", "Ὃ", "Ὅ", "Ῥ", "Ὺ", "Ύ", "Ῡ", "Ῠ", "Ϋ", "Ὑ", "Ὓ", "Ὕ", "Ὗ", "Ω", "Ὼ", "Ώ", "Ὠ", "Ὢ", "ᾪ", "Ὤ", "ᾬ", "Ὦ", "ᾮ", "ᾨ", "Ὡ", "Ὣ", "ᾫ", "Ὥ", "ᾭ", "Ὧ", "ᾯ", "ᾩ", "ῼ", "ὰ", "ᾲ", "ά", "ᾴ", "ᾱ", "ᾰ", "ἀ", "ἂ", "ᾂ", "ἄ", "ᾄ", "ἆ", "ᾆ", "ᾀ", "ἁ", "ἃ", "ᾃ", "ἅ", "ᾅ", "ἇ", "ᾇ", "ᾁ", "ᾶ", "ᾷ", "ᾳ", "ὲ", "έ", "ἐ", "ἒ", "ἔ", "ἑ", "ἓ", "ἕ", "ὴ", "ῂ", "ή", "ῄ", "ἠ", "ἢ", "ᾒ", "ἤ", "ᾔ", "ἦ", "ᾖ", "ᾐ", "ἡ", "ἣ", "ᾓ", "ἥ", "ᾕ", "ἧ", "ᾗ", "ᾑ", "ῆ", "ῇ", "ῃ", "ι", "ὶ", "ί", "ῑ", "ῐ", "ϊ", "ῒ", "ΐ", "ῗ", "ἰ", "ἲ", "ἴ", "ἶ", "ἱ", "ἳ", "ἵ", "ἷ", "ῖ", "ὸ", "ό", "ὀ", "ὂ", "ὄ", "ὁ", "ὃ", "ὅ", "ῤ", "ῥ", "ὺ", "ύ", "ῡ", "ῠ", "ϋ", "ῢ", "ΰ", "ῧ", "ὐ", "ὒ", "ὔ", "ὖ", "ὑ", "ὓ", "ὕ", "ὗ", "ῦ", "ὼ", "ῲ", "ώ", "ῴ", "ὠ", "ὢ", "ᾢ", "ὤ", "ᾤ", "ὦ", "ᾦ", "ᾠ", "ὡ", "ὣ", "ᾣ", "ὥ", "ᾥ", "ὧ", "ᾧ", "ᾡ", "ῶ", "ῷ", "ῳ", "ϓ", "ϔ", "Ї", "Ӑ", "Ӓ", "Ѓ", "Ѐ", "Ӗ", "Ё", "Ӂ", "Ӝ", "Ӟ", "Ѝ", "Ӣ", "Й", "Ӥ", "Ќ", "Ӧ", "Ӯ", "Ў", "Ӱ", "Ӳ", "Ӵ", "Ӹ", "Ӭ", "ӑ", "ӓ", "ѓ", "ѐ", "ӗ", "ё", "ӂ", "ӝ", "ӟ", "ѝ", "ӣ", "й", "ӥ", "ќ", "ӧ", "ӯ", "ў", "ӱ", "ӳ", "ӵ", "ӹ", "ӭ", "ї", "Ѷ", "ѷ", "Ӛ", "ӛ", "Ӫ", "ӫ", "אַ", "אָ", "אּ", "בּ", "בֿ", "גּ", "דּ", "הּ", "וֹ", "וּ", "זּ", "טּ", "יִ", "יּ", "ךּ", "כּ", "כֿ", "לּ", "מּ", "נּ", "סּ", "ףּ", "פּ", "פֿ", "צּ", "קּ", "רּ", "שּ", "שּׁ", "שּׂ", "שׁ", "שׂ", "תּ", "ײַ", "آ", "أ", "إ", "ؤ", "ئ", "ۂ", "ۓ", "ۀ", "क़", "ख़", "ग़", "ज़", "ड़", "ढ़", "ऩ", "फ़", "य़", "ऱ", "ऴ", "ড়", "ঢ়", "য়", "ো", "ৌ", "ਖ਼", "ਗ਼", "ਜ਼", "ਫ਼", "ਲ਼", "ਸ਼", "ଡ଼", "ଢ଼", "ୋ", "ୈ", "ୌ", "ஔ", "ொ", "ௌ", "ோ", "ై", "ೀ", "ೊ", "ೋ", "ೇ", "ೈ", "ൊ", "ൌ", "ോ", "ේ", "ො", "ෝ", "ෞ", "ཀྵ", "གྷ", "ཌྷ", "དྷ", "བྷ", "ཛྷ", "ཱི", "ཱུ", "ཱྀ", "ྐྵ", "ྒྷ", "ྜྷ", "ྡྷ", "ྦྷ", "ྫྷ", "ྲྀ", "ླྀ", "ဦ", "ᬆ", "ᬈ", "ᬊ", "ᬌ", "ᬎ", "ᬒ", "ᬻ", "ᬽ", "ᭀ", "ᭁ", "ᭃ", "῍", "῎", "῏", "῝", "῞", "῟", " ", " ", "↚", "↛", "↮", "⇍", "⇏", "⇎", "∄", "∉", "∌", "∤", "∦", "≁", "≄", "≇", "≉", "≭", "≢", "≰", "≱", "≴", "≵", "≸", "≹", "⊀", "⊁", "⋠", "⋡", "⊄", "⊅", "⊈", "⊉", "⋢", "⋣", "⊬", "⊭", "⊮", "⊯", "⋪", "⋫", "⋬", "⋭", "⫝̸", "〈", "〉", "ゔ", "が", "ぎ", "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ", "ぢ", "づ", "で", "ど", "ば", "ぱ", "び", "ぴ", "ぶ", "ぷ", "べ", "ぺ", "ぼ", "ぽ", "ゞ", "ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "パ", "ビ", "ピ", "ブ", "プ", "ベ", "ペ", "ボ", "ポ", "ヷ", "ヸ", "ヹ", "ヺ", "ヾ", "㒞", "㒹", "㒻", "㓟", "㔕", "㛮", "㛼", "㞁", "㠯", "㡢", "㡼", "㣇", "㣣", "㤜", "㤺", "㨮", "㩬", "㫤", "㬈", "㬙", "㭉", "㮝", "㰘", "㱎", "㴳", "㶖", "㺬", "㺸", "㼛", "㿼", "䀈", "䀘", "䀹", "䁆", "䂖", "䃣", "䄯", "䈂", "䈧", "䊠", "䌁", "䌴", "䍙", "䏕", "䏙", "䐋", "䑫", "䔫", "䕝", "䕡", "䕫", "䗗", "䗹", "䘵", "䚾", "䛇", "䦕", "䧦", "䩮", "䩶", "䪲", "䬳", "䯎", "䳎", "䳭", "䳸", "䵖", "不", "並", "串", "丸", "丹", "丽", "乁", "亂", "了", "亮", "什", "仌", "令", "你", "侀", "來", "例", "侮", "侻", "便", "倂", "倫", "偺", "備", "像", "僚", "僧", "兀", "充", "免", "兔", "兤", "內", "全", "兩", "六", "具", "冀", "再", "冒", "冕", "冗", "冤", "冬", "况", "冷", "凉", "凌", "凜", "凞", "凵", "刃", "切", "列", "利", "刺", "刻", "剆", "割", "剷", "劉", "力", "劣", "劳", "勇", "勉", "勒", "勞", "勤", "勵", "勺", "包", "匆", "北", "匿", "卉", "卑", "博", "即", "卵", "卽", "卿", "參", "及", "叟", "句", "叫", "叱", "吆", "吏", "吝", "吸", "呂", "呈", "周", "咞", "咢", "咽", "哶", "唐", "啓", "啕", "啣", "善", "喇", "喙", "喝", "喫", "喳", "嗀", "嗂", "嗢", "嘆", "噑", "器", "噴", "囹", "圖", "圗", "型", "城", "埴", "堍", "報", "堲", "塀", "塚", "塞", "墨", "墬", "墳", "壘", "壟", "壮", "売", "壷", "夆", "多", "夢", "奄", "奈", "契", "奔", "奢", "女", "姘", "姬", "娛", "娧", "婢", "婦", "媵", "嬈", "嬨", "嬾", "宅", "寃", "寘", "寧", "寮", "寳", "寿", "将", "尢", "尿", "屠", "屢", "層", "履", "屮", "岍", "峀", "崙", "嵃", "嵐", "嵫", "嵮", "嵼", "嶲", "嶺", "巡", "巢", "巽", "帨", "帽", "幩", "年", "度", "庰", "庳", "庶", "廉", "廊", "廒", "廓", "廙", "廬", "廾", "弄", "弢", "当", "形", "彩", "彫", "律", "徚", "復", "徭", "忍", "志", "念", "忹", "怒", "怜", "恵", "悁", "悔", "惇", "惘", "惡", "愈", "慄", "慈", "慌", "慎", "慠", "慨", "慺", "憎", "憐", "憤", "憯", "憲", "懞", "懲", "懶", "戀", "成", "戛", "戮", "戴", "扝", "抱", "拉", "拏", "拓", "拔", "拼", "拾", "挽", "捐", "捨", "捻", "掃", "掠", "掩", "揄", "揅", "揤", "搜", "搢", "摒", "摩", "摷", "摾", "撚", "撝", "擄", "敏", "敖", "敬", "數", "料", "旅", "既", "旣", "易", "晉", "晴", "暈", "暑", "暜", "暴", "曆", "更", "書", "最", "朗", "望", "朡", "李", "杓", "杖", "杞", "杻", "枅", "林", "柳", "柺", "栗", "栟", "桒", "梁", "梅", "梎", "梨", "椔", "楂", "榣", "槪", "樂", "樓", "檨", "櫓", "櫛", "欄", "次", "歔", "歲", "歷", "歹", "殟", "殮", "殺", "殻", "汎", "汧", "沈", "沿", "泌", "泍", "泥", "洖", "洛", "洞", "洴", "派", "流", "浩", "浪", "海", "浸", "涅", "淋", "淚", "淪", "淹", "渚", "港", "湮", "溜", "溺", "滇", "滋", "滑", "滛", "漏", "漢", "漣", "潮", "濆", "濫", "濾", "瀛", "瀞", "瀹", "灊", "灰", "灷", "災", "炙", "炭", "烈", "烙", "煅", "煉", "煮", "熜", "燎", "燐", "爐", "爛", "爨", "爫", "爵", "牐", "牢", "犀", "犕", "犯", "狀", "狼", "猪", "獵", "獺", "率", "王", "玥", "玲", "珞", "理", "琉", "琢", "瑇", "瑜", "瑩", "瑱", "璅", "璉", "璘", "瓊", "甆", "甤", "画", "甾", "留", "略", "異", "痢", "瘐", "瘝", "瘟", "療", "癩", "益", "盛", "盧", "直", "省", "眞", "真", "着", "睊", "瞋", "瞧", "硎", "硫", "碌", "碑", "磊", "磌", "磻", "礪", "礼", "社", "祈", "祉", "祐", "祖", "祝", "神", "祥", "祿", "禍", "禎", "福", "禮", "秊", "秫", "稜", "穀", "穊", "穏", "突", "窱", "立", "竮", "笠", "節", "篆", "築", "簾", "籠", "类", "粒", "精", "糒", "糖", "糣", "糧", "糨", "紀", "紐", "索", "累", "絛", "絣", "綠", "綾", "緇", "練", "縂", "縉", "縷", "繁", "繅", "缾", "署", "罹", "罺", "羅", "羕", "羚", "羽", "翺", "老", "者", "聆", "聠", "聯", "聰", "聾", "肋", "肭", "育", "脃", "脾", "臘", "臨", "臭", "舁", "舄", "舘", "良", "艹", "芋", "芑", "芝", "花", "芳", "芽", "若", "苦", "茝", "茣", "茶", "荒", "荓", "荣", "莭", "莽", "菉", "菊", "菌", "菜", "菧", "華", "菱", "落", "葉", "著", "蓮", "蓱", "蓳", "蓼", "蔖", "蕤", "藍", "藺", "蘆", "蘒", "蘭", "蘿", "虐", "虜", "虧", "虩", "蚈", "蚩", "蛢", "蜎", "蜨", "蝫", "蝹", "螆", "螺", "蟡", "蠁", "蠟", "行", "衠", "衣", "裂", "裏", "裗", "裞", "裡", "裸", "裺", "褐", "襁", "襤", "覆", "見", "視", "誠", "說", "調", "請", "諒", "論", "諭", "諸", "諾", "謁", "謹", "識", "讀", "變", "豈", "豕", "貫", "賁", "賂", "賈", "賓", "贈", "贛", "起", "趼", "跋", "路", "跰", "車", "軔", "輦", "輪", "輸", "輻", "轢", "辞", "辰", "辶", "連", "逸", "遲", "遼", "邏", "邔", "郎", "郞", "郱", "都", "鄑", "鄛", "酪", "醙", "醴", "里", "量", "金", "鈴", "鈸", "鉶", "鉼", "鋗", "鋘", "錄", "鍊", "鏹", "鐕", "開", "閭", "閷", "阮", "陋", "降", "陵", "陸", "陼", "隆", "隣", "隷", "隸", "雃", "離", "難", "零", "雷", "霣", "露", "靈", "靖", "韛", "韠", "響", "頋", "領", "頩", "頻", "類", "飢", "飯", "飼", "館", "餩", "馧", "駂", "駱", "駾", "驪", "鬒", "魯", "鱀", "鱗", "鳽", "鵧", "鶴", "鷺", "鸞", "鹿", "麗", "麟", "麻", "黎", "黹", "黾", "鼅", "鼏", "鼖", "鼻", "齃", "龍", "龎", "龜", "\U00011099𑂺", "\U0001109B𑂺", "\U000110A5𑂺", "\U00011131\U00011127", "\U00011132\U00011127", "𝅗𝅥", "𝅘𝅥", "𝅘𝅥𝅮", "𝅘𝅥𝅯", "𝅘𝅥𝅰", "𝅘𝅥𝅱", "𝅘𝅥𝅲", "𝆹𝅥", "𝆹𝅥𝅮", "𝆹𝅥𝅯", "𝆺𝅥", "𝆺𝅥𝅮", "𝆺𝅥𝅯", "𠄢", "𠔜", "𠔥", "𠕋", "𠘺", "𠠄", "𠣞", "𠨬", "𠭣", "𡓤", "𡚨", "𡛪", "𡧈", "𡬘", "𡴋", "𡷤", "𡷦", "𢆃", "𢆟", "𢌱", "𢛔", "𢡄", "𢡊", "𢬌", "𢯱", "𣀊", "𣊸", "𣍟", "𣎓", "𣎜", "𣏃", "𣏕", "𣑭", "𣚣", "𣢧", "𣪍", "𣫺", "𣲼", "𣴞", "𣻑", "𣽞", "𣾎", "𤉣", "𤋮", "𤎫", "𤘈", "𤜵", "𤠔", "𤰶", "𤲒", "𤾡", "𤾸", "𥁄", "𥃲", "𥃳", "𥄙", "𥄳", "𥉉", "𥐝", "𥘦", "𥚚", "𥛅", "𥥼", "𥪧", "𥮫", "𥲀", "𥳐", "𥾆", "𦇚", "𦈨", "𦉇", "𦋙", "𦌾", "𦓚", "𦔣", "𦖨", "𦞧", "𦞵", "𦬼", "𦰶", "𦳕", "𦵫", "𦼬", "𦾱", "𧃒", "𧏊", "𧙧", "𧢮", "𧥦", "𧲨", "𧻓", "𧼯", "𨗒", "𨗭", "𨜮", "𨯺", "𨵷", "𩅅", "𩇟", "𩈚", "𩐊", "𩒖", "𩖶", "𩬰", "𪃎", "𪄅", "𪈎", "𪊑", "𪎒", "𪘀"];
immutable decompCompatTable = ["", " ", " ́", " ̃", " ̄", " ̅", " ̆", " ̇", " ̈", " ̈̀", " ̈́", " ̈͂", " ̊", " ̋", " ̓", " ̓̀", " ̓́", " ̓͂", " ̔", " ̔̀", " ̔́", " ̔͂", " ̧", " ̨", " ̳", " ͂", " ͅ", " ً", " ٌ", " ٌّ", " ٍ", " ٍّ", " َ", " َّ", " ُ", " ُّ", " ِ", " ِّ", " ّ", " ّٰ", " ْ", " ゙", " ゚", "!", "!!", "!?", "\"", "#", "$", "%", "&", "'", "(", "(1)", "(10)", "(11)", "(12)", "(13)", "(14)", "(15)", "(16)", "(17)", "(18)", "(19)", "(2)", "(20)", "(3)", "(4)", "(5)", "(6)", "(7)", "(8)", "(9)", "(A)", "(B)", "(C)", "(D)", "(E)", "(F)", "(G)", "(H)", "(I)", "(J)", "(K)", "(L)", "(M)", "(N)", "(O)", "(P)", "(Q)", "(R)", "(S)", "(T)", "(U)", "(V)", "(W)", "(X)", "(Y)", "(Z)", "(a)", "(b)", "(c)", "(d)", "(e)", "(f)", "(g)", "(h)", "(i)", "(j)", "(k)", "(l)", "(m)", "(n)", "(o)", "(p)", "(q)", "(r)", "(s)", "(t)", "(u)", "(v)", "(w)", "(x)", "(y)", "(z)", "(ᄀ)", "(가)", "(ᄂ)", "(나)", "(ᄃ)", "(다)", "(ᄅ)", "(라)", "(ᄆ)", "(마)", "(ᄇ)", "(바)", "(ᄉ)", "(사)", "(ᄋ)", "(아)", "(오전)", "(오후)", "(ᄌ)", "(자)", "(주)", "(ᄎ)", "(차)", "(ᄏ)", "(카)", "(ᄐ)", "(타)", "(ᄑ)", "(파)", "(ᄒ)", "(하)", "(一)", "(七)", "(三)", "(九)", "(二)", "(五)", "(代)", "(企)", "(休)", "(八)", "(六)", "(労)", "(十)", "(協)", "(名)", "(呼)", "(四)", "(土)", "(学)", "(日)", "(月)", "(有)", "(木)", "(株)", "(水)", "(火)", "(特)", "(監)", "(社)", "(祝)", "(祭)", "(自)", "(至)", "(財)", "(資)", "(金)", ")", "*", "+", ",", "-", ".", "..", "...", "/", "0", "0,", "0.", "0⁄3", "0点", "1", "1,", "1.", "10", "10.", "10日", "10月", "10点", "11", "11.", "11日", "11月", "11点", "12", "12.", "12日", "12月", "12点", "13", "13.", "13日", "13点", "14", "14.", "14日", "14点", "15", "15.", "15日", "15点", "16", "16.", "16日", "16点", "17", "17.", "17日", "17点", "18", "18.", "18日", "18点", "19", "19.", "19日", "19点", "1⁄", "1⁄10", "1⁄2", "1⁄3", "1⁄4", "1⁄5", "1⁄6", "1⁄7", "1⁄8", "1⁄9", "1日", "1月", "1点", "2", "2,", "2.", "20", "20.", "20日", "20点", "21", "21日", "21点", "22", "22日", "22点", "23", "23日", "23点", "24", "24日", "24点", "25", "25日", "26", "26日", "27", "27日", "28", "28日", "29", "29日", "2⁄3", "2⁄5", "2日", "2月", "2点", "3", "3,", "3.", "30", "30日", "31", "31日", "32", "33", "34", "35", "36", "37", "38", "39", "3⁄4", "3⁄5", "3⁄8", "3日", "3月", "3点", "4", "4,", "4.", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4⁄5", "4日", "4月", "4点", "5", "5,", "5.", "50", "5⁄6", "5⁄8", "5日", "5月", "5点", "6", "6,", "6.", "6日", "6月", "6点", "7", "7,", "7.", "7⁄8", "7日", "7月", "7点", "8", "8,", "8.", "8日", "8月", "8点", "9", "9,", "9.", "9日", "9月", "9点", ":", "::=", ";", "<", "≮", "=", "==", "===", "≠", ">", "≯", "?", "?!", "??", "@", "A", "AU", "À", "Á", "Â", "Ầ", "Ấ", "Ẫ", "Ẩ", "Ã", "Ā", "Ă", "Ằ", "Ắ", "Ẵ", "Ẳ", "Ȧ", "Ǡ", "Ä", "Ǟ", "Ả", "Å", "Ǻ", "Ǎ", "Ȁ", "Ȃ", "Ạ", "Ậ", "Ặ", "Ḁ", "Ą", "A∕m", "B", "Bq", "Ḃ", "Ḅ", "Ḇ", "C", "CD", "Co.", "Ć", "Ĉ", "Ċ", "Č", "Ç", "Ḉ", "C∕kg", "D", "DJ", "DZ", "DŽ", "Dz", "Dž", "Ḋ", "Ď", "Ḍ", "Ḑ", "Ḓ", "Ḏ", "E", "È", "É", "Ê", "Ề", "Ế", "Ễ", "Ể", "Ẽ", "Ē", "Ḕ", "Ḗ", "Ĕ", "Ė", "Ë", "Ẻ", "Ě", "Ȅ", "Ȇ", "Ẹ", "Ệ", "Ȩ", "Ḝ", "Ę", "Ḙ", "Ḛ", "F", "FAX", "Ḟ", "G", "GB", "GHz", "GPa", "Gy", "Ǵ", "Ĝ", "Ḡ", "Ğ", "Ġ", "Ǧ", "Ģ", "H", "HP", "HV", "Hg", "Hz", "Ĥ", "Ḣ", "Ḧ", "Ȟ", "Ḥ", "Ḩ", "Ḫ", "I", "II", "III", "IJ", "IU", "IV", "IX", "Ì", "Í", "Î", "Ĩ", "Ī", "Ĭ", "İ", "Ï", "Ḯ", "Ỉ", "Ǐ", "Ȉ", "Ȋ", "Ị", "Į", "Ḭ", "J", "Ĵ", "K", "KB", "KK", "KM", "Ḱ", "Ǩ", "Ḳ", "Ķ", "Ḵ", "L", "LJ", "LTD", "Lj", "L·", "Ĺ", "Ľ", "Ḷ", "Ḹ", "Ļ", "Ḽ", "Ḻ", "M", "MB", "MC", "MD", "MHz", "MPa", "MV", "MW", "Ḿ", "Ṁ", "Ṃ", "MΩ", "N", "NJ", "Nj", "No", "Ǹ", "Ń", "Ñ", "Ṅ", "Ň", "Ṇ", "Ņ", "Ṋ", "Ṉ", "O", "Ò", "Ó", "Ô", "Ồ", "Ố", "Ỗ", "Ổ", "Õ", "Ṍ", "Ȭ", "Ṏ", "Ō", "Ṑ", "Ṓ", "Ŏ", "Ȯ", "Ȱ", "Ö", "Ȫ", "Ỏ", "Ő", "Ǒ", "Ȍ", "Ȏ", "Ơ", "Ờ", "Ớ", "Ỡ", "Ở", "Ợ", "Ọ", "Ộ", "Ǫ", "Ǭ", "P", "PH", "PPM", "PPV", "PR", "PTE", "Pa", "Ṕ", "Ṗ", "Q", "R", "Rs", "Ŕ", "Ṙ", "Ř", "Ȑ", "Ȓ", "Ṛ", "Ṝ", "Ŗ", "Ṟ", "S", "SD", "SM", "SS", "Sv", "Ś", "Ṥ", "Ŝ", "Ṡ", "Š", "Ṧ", "Ṣ", "Ṩ", "Ș", "Ş", "T", "TEL", "THz", "TM", "Ṫ", "Ť", "Ṭ", "Ț", "Ţ", "Ṱ", "Ṯ", "U", "Ù", "Ú", "Û", "Ũ", "Ṹ", "Ū", "Ṻ", "Ŭ", "Ü", "Ǜ", "Ǘ", "Ǖ", "Ǚ", "Ủ", "Ů", "Ű", "Ǔ", "Ȕ", "Ȗ", "Ư", "Ừ", "Ứ", "Ữ", "Ử", "Ự", "Ụ", "Ṳ", "Ų", "Ṷ", "Ṵ", "V", "VI", "VII", "VIII", "Ṽ", "Ṿ", "V∕m", "W", "WC", "WZ", "Wb", "Ẁ", "Ẃ", "Ŵ", "Ẇ", "Ẅ", "Ẉ", "X", "XI", "XII", "Ẋ", "Ẍ", "Y", "Ỳ", "Ý", "Ŷ", "Ỹ", "Ȳ", "Ẏ", "Ÿ", "Ỷ", "Ỵ", "Z", "Ź", "Ẑ", "Ż", "Ž", "Ẓ", "Ẕ", "[", "\\", "]", "^", "_", "`", "a", "a.m.", "a/c", "a/s", "aʾ", "à", "á", "â", "ầ", "ấ", "ẫ", "ẩ", "ã", "ā", "ă", "ằ", "ắ", "ẵ", "ẳ", "ȧ", "ǡ", "ä", "ǟ", "ả", "å", "ǻ", "ǎ", "ȁ", "ȃ", "ạ", "ậ", "ặ", "ḁ", "ą", "b", "bar", "ḃ", "ḅ", "ḇ", "c", "c/o", "c/u", "cal", "cc", "cd", "cm", "cm2", "cm3", "ć", "ĉ", "ċ", "č", "ç", "ḉ", "d", "dB", "da", "dl", "dm", "dm2", "dm3", "dz", "dž", "ḋ", "ď", "ḍ", "ḑ", "ḓ", "ḏ", "e", "eV", "erg", "è", "é", "ê", "ề", "ế", "ễ", "ể", "ẽ", "ē", "ḕ", "ḗ", "ĕ", "ė", "ë", "ẻ", "ě", "ȅ", "ȇ", "ẹ", "ệ", "ȩ", "ḝ", "ę", "ḙ", "ḛ", "f", "ff", "ffi", "ffl", "fi", "fl", "fm", "ḟ", "g", "gal", "ǵ", "ĝ", "ḡ", "ğ", "ġ", "ǧ", "ģ", "h", "hPa", "ha", "ĥ", "ḣ", "ḧ", "ȟ", "ḥ", "ḩ", "ḫ", "ẖ", "i", "ii", "iii", "ij", "in", "iv", "ix", "ì", "í", "î", "ĩ", "ī", "ĭ", "ï", "ḯ", "ỉ", "ǐ", "ȉ", "ȋ", "ị", "į", "ḭ", "j", "ĵ", "ǰ", "k", "kA", "kHz", "kPa", "kV", "kW", "kcal", "kg", "kl", "km", "km2", "km3", "kt", "ḱ", "ǩ", "ḳ", "ķ", "ḵ", "kΩ", "l", "lj", "lm", "ln", "log", "lx", "l·", "ĺ", "ľ", "ḷ", "ḹ", "ļ", "ḽ", "ḻ", "m", "m2", "m3", "mA", "mV", "mW", "mb", "mg", "mil", "ml", "mm", "mm2", "mm3", "mol", "ms", "ḿ", "ṁ", "ṃ", "m∕s", "m∕s2", "n", "nA", "nF", "nV", "nW", "nj", "nm", "ns", "ǹ", "ń", "ñ", "ṅ", "ň", "ṇ", "ņ", "ṋ", "ṉ", "o", "oV", "ò", "ó", "ô", "ồ", "ố", "ỗ", "ổ", "õ", "ṍ", "ȭ", "ṏ", "ō", "ṑ", "ṓ", "ŏ", "ȯ", "ȱ", "ö", "ȫ", "ỏ", "ő", "ǒ", "ȍ", "ȏ", "ơ", "ờ", "ớ", "ỡ", "ở", "ợ", "ọ", "ộ", "ǫ", "ǭ", "p", "p.m.", "pA", "pF", "pV", "pW", "pc", "ps", "ṕ", "ṗ", "q", "r", "rad", "rad∕s", "rad∕s2", "ŕ", "ṙ", "ř", "ȑ", "ȓ", "ṛ", "ṝ", "ŗ", "ṟ", "s", "sr", "st", "ś", "ṥ", "ŝ", "ṡ", "š", "ṧ", "ṣ", "ṩ", "ș", "ş", "t", "ṫ", "ẗ", "ť", "ṭ", "ț", "ţ", "ṱ", "ṯ", "u", "ù", "ú", "û", "ũ", "ṹ", "ū", "ṻ", "ŭ", "ü", "ǜ", "ǘ", "ǖ", "ǚ", "ủ", "ů", "ű", "ǔ", "ȕ", "ȗ", "ư", "ừ", "ứ", "ữ", "ử", "ự", "ụ", "ṳ", "ų", "ṷ", "ṵ", "v", "vi", "vii", "viii", "ṽ", "ṿ", "w", "ẁ", "ẃ", "ŵ", "ẇ", "ẅ", "ẘ", "ẉ", "x", "xi", "xii", "ẋ", "ẍ", "y", "ỳ", "ý", "ŷ", "ỹ", "ȳ", "ẏ", "ÿ", "ỷ", "ẙ", "ỵ", "z", "ź", "ẑ", "ż", "ž", "ẓ", "ẕ", "{", "|", "}", "~", "¢", "£", "¥", "¦", "¬", "°C", "°F", "·", "Æ", "Ǽ", "Ǣ", "Ǿ", "ǽ", "ǣ", "ð", "ǿ", "Ħ", "ħ", "ı", "ŋ", "œ", "Ǝ", "Ɛ", "ƫ", "Ǯ", "Ȣ", "ȷ", "ɐ", "ɑ", "ɒ", "ɔ", "ɕ", "ə", "ɛ", "ɜ", "ɟ", "ɡ", "ɣ", "ɥ", "ɦ", "ɨ", "ɩ", "ɪ", "ɭ", "ɯ", "ɰ", "ɱ", "ɲ", "ɳ", "ɴ", "ɵ", "ɸ", "ɹ", "ɻ", "ʁ", "ʂ", "ʃ", "ʉ", "ʊ", "ʋ", "ʌ", "ʐ", "ʑ", "ʒ", "ǯ", "ʕ", "ʝ", "ʟ", "ʹ", "ʼn", "̀", "́", "̈́", "̓", "Α", "Ὰ", "Ά", "Ᾱ", "Ᾰ", "Ἀ", "Ἂ", "ᾊ", "Ἄ", "ᾌ", "Ἆ", "ᾎ", "ᾈ", "Ἁ", "Ἃ", "ᾋ", "Ἅ", "ᾍ", "Ἇ", "ᾏ", "ᾉ", "ᾼ", "Β", "Γ", "Δ", "Ε", "Ὲ", "Έ", "Ἐ", "Ἒ", "Ἔ", "Ἑ", "Ἓ", "Ἕ", "Ζ", "Η", "Ὴ", "Ή", "Ἠ", "Ἢ", "ᾚ", "Ἤ", "ᾜ", "Ἦ", "ᾞ", "ᾘ", "Ἡ", "Ἣ", "ᾛ", "Ἥ", "ᾝ", "Ἧ", "ᾟ", "ᾙ", "ῌ", "Θ", "Ι", "Ὶ", "Ί", "Ῑ", "Ῐ", "Ϊ", "Ἰ", "Ἲ", "Ἴ", "Ἶ", "Ἱ", "Ἳ", "Ἵ", "Ἷ", "Κ", "Λ", "Μ", "Ν", "Ξ", "Ο", "Ὸ", "Ό", "Ὀ", "Ὂ", "Ὄ", "Ὁ", "Ὃ", "Ὅ", "Π", "Ρ", "Ῥ", "Σ", "Τ", "Υ", "Ὺ", "Ύ", "Ῡ", "Ῠ", "Ϋ", "Ὑ", "Ὓ", "Ὕ", "Ὗ", "Φ", "Χ", "Ψ", "Ω", "Ὼ", "Ώ", "Ὠ", "Ὢ", "ᾪ", "Ὤ", "ᾬ", "Ὦ", "ᾮ", "ᾨ", "Ὡ", "Ὣ", "ᾫ", "Ὥ", "ᾭ", "Ὧ", "ᾯ", "ᾩ", "ῼ", "α", "ὰ", "ᾲ", "ά", "ᾴ", "ᾱ", "ᾰ", "ἀ", "ἂ", "ᾂ", "ἄ", "ᾄ", "ἆ", "ᾆ", "ᾀ", "ἁ", "ἃ", "ᾃ", "ἅ", "ᾅ", "ἇ", "ᾇ", "ᾁ", "ᾶ", "ᾷ", "ᾳ", "β", "γ", "δ", "ε", "ὲ", "έ", "ἐ", "ἒ", "ἔ", "ἑ", "ἓ", "ἕ", "ζ", "η", "ὴ", "ῂ", "ή", "ῄ", "ἠ", "ἢ", "ᾒ", "ἤ", "ᾔ", "ἦ", "ᾖ", "ᾐ", "ἡ", "ἣ", "ᾓ", "ἥ", "ᾕ", "ἧ", "ᾗ", "ᾑ", "ῆ", "ῇ", "ῃ", "θ", "ι", "ὶ", "ί", "ῑ", "ῐ", "ϊ", "ῒ", "ΐ", "ῗ", "ἰ", "ἲ", "ἴ", "ἶ", "ἱ", "ἳ", "ἵ", "ἷ", "ῖ", "κ", "λ", "μ", "μA", "μF", "μV", "μW", "μg", "μl", "μm", "μs", "ν", "ξ", "ο", "ὸ", "ό", "ὀ", "ὂ", "ὄ", "ὁ", "ὃ", "ὅ", "π", "ρ", "ῤ", "ῥ", "ς", "σ", "τ", "υ", "ὺ", "ύ", "ῡ", "ῠ", "ϋ", "ῢ", "ΰ", "ῧ", "ὐ", "ὒ", "ὔ", "ὖ", "ὑ", "ὓ", "ὕ", "ὗ", "ῦ", "φ", "χ", "ψ", "ω", "ὼ", "ῲ", "ώ", "ῴ", "ὠ", "ὢ", "ᾢ", "ὤ", "ᾤ", "ὦ", "ᾦ", "ᾠ", "ὡ", "ὣ", "ᾣ", "ὥ", "ᾥ", "ὧ", "ᾧ", "ᾡ", "ῶ", "ῷ", "ῳ", "Ϝ", "ϝ", "Ї", "Ӑ", "Ӓ", "Ѓ", "Ѐ", "Ӗ", "Ё", "Ӂ", "Ӝ", "Ӟ", "Ѝ", "Ӣ", "Й", "Ӥ", "Ќ", "Ӧ", "Ӯ", "Ў", "Ӱ", "Ӳ", "Ӵ", "Ӹ", "Ӭ", "ӑ", "ӓ", "ѓ", "ѐ", "ӗ", "ё", "ӂ", "ӝ", "ӟ", "ѝ", "ӣ", "й", "ӥ", "ќ", "н", "ӧ", "ӯ", "ў", "ӱ", "ӳ", "ӵ", "ӹ", "ӭ", "ї", "Ѷ", "ѷ", "Ӛ", "ӛ", "Ӫ", "ӫ", "եւ", "մե", "մի", "մխ", "մն", "վն", "א", "אַ", "אָ", "אּ", "אל", "ב", "בּ", "בֿ", "ג", "גּ", "ד", "דּ", "ה", "הּ", "וֹ", "וּ", "זּ", "טּ", "יִ", "יּ", "ךּ", "כ", "כּ", "כֿ", "ל", "לּ", "ם", "מּ", "נּ", "סּ", "ע", "ףּ", "פּ", "פֿ", "צּ", "קּ", "ר", "רּ", "שּ", "שּׁ", "שּׂ", "שׁ", "שׂ", "ת", "תּ", "ײַ", "ء", "ا", "اكبر", "الله", "اً", "آ", "أ", "إ", "اٴ", "ب", "بج", "بح", "بحي", "بخ", "بخي", "بر", "بز", "بم", "بن", "به", "بى", "بي", "ة", "ت", "تج", "تجم", "تجى", "تجي", "تح", "تحج", "تحم", "تخ", "تخم", "تخى", "تخي", "تر", "تز", "تم", "تمج", "تمح", "تمخ", "تمى", "تمي", "تن", "ته", "تى", "تي", "ث", "ثج", "ثر", "ثز", "ثم", "ثن", "ثه", "ثى", "ثي", "ج", "جح", "جحى", "جحي", "جل جلاله", "جم", "جمح", "جمى", "جمي", "جى", "جي", "ح", "حج", "حجي", "حم", "حمى", "حمي", "حى", "حي", "خ", "خج", "خح", "خم", "خى", "خي", "د", "ذ", "ذٰ", "ر", "رسول", "رٰ", "ریال", "ز", "س", "سج", "سجح", "سجى", "سح", "سحج", "سخ", "سخى", "سخي", "سر", "سم", "سمج", "سمح", "سمم", "سه", "سى", "سي", "ش", "شج", "شجي", "شح", "شحم", "شحي", "شخ", "شر", "شم", "شمخ", "شمم", "شه", "شى", "شي", "ص", "صح", "صحح", "صحي", "صخ", "صر", "صلعم", "صلى", "صلى الله عليه وسلم", "صلے", "صم", "صمم", "صى", "صي", "ض", "ضج", "ضح", "ضحى", "ضحي", "ضخ", "ضخم", "ضر", "ضم", "ضى", "ضي", "ط", "طح", "طم", "طمح", "طمم", "طمي", "طى", "طي", "ظ", "ظم", "ع", "عج", "عجم", "عليه", "عم", "عمم", "عمى", "عمي", "عى", "عي", "غ", "غج", "غم", "غمم", "غمى", "غمي", "غى", "غي", "ـً", "ـَ", "ـَّ", "ـُ", "ـُّ", "ـِ", "ـِّ", "ـّ", "ـْ", "ف", "فج", "فح", "فخ", "فخم", "فم", "فمي", "فى", "في", "ق", "قح", "قلے", "قم", "قمح", "قمم", "قمي", "قى", "قي", "ك", "كا", "كج", "كح", "كخ", "كل", "كم", "كمم", "كمي", "كى", "كي", "ل", "لا", "لآ", "لأ", "لإ", "لج", "لجج", "لجم", "لجي", "لح", "لحم", "لحى", "لحي", "لخ", "لخم", "لم", "لمح", "لمي", "له", "لى", "لي", "م", "ما", "مج", "مجح", "مجخ", "مجم", "مجي", "مح", "محج", "محم", "محمد", "محي", "مخ", "مخج", "مخم", "مخي", "مم", "ممي", "مى", "مي", "ن", "نج", "نجح", "نجم", "نجى", "نجي", "نح", "نحم", "نحى", "نحي", "نخ", "نر", "نز", "نم", "نمى", "نمي", "نن", "نه", "نى", "ني", "ه", "هج", "هم", "همج", "همم", "هى", "هي", "هٰ", "و", "وسلم", "ؤ", "وٴ", "ى", "ىٰ", "ي", "يج", "يجي", "يح", "يحي", "يخ", "ير", "يز", "يم", "يمم", "يمي", "ين", "يه", "يى", "يي", "ئ", "ئا", "ئج", "ئح", "ئخ", "ئر", "ئز", "ئم", "ئن", "ئه", "ئو", "ئى", "ئي", "ئۆ", "ئۇ", "ئۈ", "ئې", "ئە", "يٴ", "ٮ", "ٯ", "ٱ", "ٹ", "ٺ", "ٻ", "پ", "ٿ", "ڀ", "ڃ", "ڄ", "چ", "ڇ", "ڈ", "ڌ", "ڍ", "ڎ", "ڑ", "ژ", "ڡ", "ڤ", "ڦ", "ک", "ڭ", "گ", "ڱ", "ڳ", "ں", "ڻ", "ھ", "ہ", "ۂ", "ۅ", "ۆ", "ۇ", "ۇٴ", "ۈ", "ۉ", "ۋ", "ی", "ې", "ے", "ۓ", "ۀ", "क़", "ख़", "ग़", "ज़", "ड़", "ढ़", "ऩ", "फ़", "य़", "ऱ", "ऴ", "ড়", "ঢ়", "য়", "ো", "ৌ", "ਖ਼", "ਗ਼", "ਜ਼", "ਫ਼", "ਲ਼", "ਸ਼", "ଡ଼", "ଢ଼", "ୋ", "ୈ", "ୌ", "ஔ", "ொ", "ௌ", "ோ", "ై", "ೀ", "ೊ", "ೋ", "ೇ", "ೈ", "ൊ", "ൌ", "ോ", "ේ", "ො", "ෝ", "ෞ", "ํา", "ຫນ", "ຫມ", "ໍາ", "་", "ཀྵ", "གྷ", "ཌྷ", "དྷ", "བྷ", "ཛྷ", "ཱི", "ཱུ", "ཱྀ", "ྐྵ", "ྒྷ", "ྜྷ", "ྡྷ", "ྦྷ", "ྫྷ", "ྲཱྀ", "ྲྀ", "ླཱྀ", "ླྀ", "ဦ", "ნ", "ᄀ", "가", "ᄁ", "ᄂ", "나", "ᄃ", "다", "ᄄ", "ᄅ", "라", "ᄆ", "마", "ᄇ", "바", "ᄈ", "ᄉ", "사", "ᄊ", "ᄋ", "아", "우", "ᄌ", "자", "주의", "ᄍ", "ᄎ", "차", "참고", "ᄏ", "카", "ᄐ", "타", "ᄑ", "파", "ᄒ", "하", "ᄔ", "ᄕ", "ᄚ", "ᄜ", "ᄝ", "ᄞ", "ᄠ", "ᄡ", "ᄢ", "ᄣ", "ᄧ", "ᄩ", "ᄫ", "ᄬ", "ᄭ", "ᄮ", "ᄯ", "ᄲ", "ᄶ", "ᅀ", "ᅇ", "ᅌ", "ᅗ", "ᅘ", "ᅙ", "ᅠ", "ᅡ", "ᅢ", "ᅣ", "ᅤ", "ᅥ", "ᅦ", "ᅧ", "ᅨ", "ᅩ", "ᅪ", "ᅫ", "ᅬ", "ᅭ", "ᅮ", "ᅯ", "ᅰ", "ᅱ", "ᅲ", "ᅳ", "ᅴ", "ᅵ", "ᆄ", "ᆅ", "ᆈ", "ᆑ", "ᆒ", "ᆔ", "ᆞ", "ᆡ", "ᆪ", "ᆬ", "ᆭ", "ᆰ", "ᆱ", "ᆲ", "ᆳ", "ᆴ", "ᆵ", "ᇇ", "ᇈ", "ᇌ", "ᇎ", "ᇓ", "ᇗ", "ᇙ", "ᇝ", "ᇟ", "ᇱ", "ᇲ", "ᬆ", "ᬈ", "ᬊ", "ᬌ", "ᬎ", "ᬒ", "ᬻ", "ᬽ", "ᭀ", "ᭁ", "ᭃ", "ᴂ", "ᴖ", "ᴗ", "ᴜ", "ᴝ", "ᴥ", "ᵻ", "ᶅ", "‐", "–", "—", "′′", "′′′", "′′′′", "‵‵", "‵‵‵", "₩", "←", "↚", "↑", "→", "↛", "↓", "↮", "⇍", "⇏", "⇎", "∂", "∄", "∇", "∉", "∌", "∑", "−", "∤", "∦", "∫∫", "∫∫∫", "∫∫∫∫", "∮∮", "∮∮∮", "≁", "≄", "≇", "≉", "≭", "≢", "≰", "≱", "≴", "≵", "≸", "≹", "⊀", "⊁", "⋠", "⋡", "⊄", "⊅", "⊈", "⊉", "⋢", "⋣", "⊬", "⊭", "⊮", "⊯", "⋪", "⋫", "⋬", "⋭", "│", "■", "○", "⦅", "⦆", "⫝̸", "ⵡ", "、", "。", "〈", "〉", "《", "》", "「", "」", "『", "』", "【", "】", "〒", "〔", "〔S〕", "〔三〕", "〔二〕", "〔勝〕", "〔安〕", "〔打〕", "〔敗〕", "〔本〕", "〔点〕", "〔盗〕", "〕", "〖", "〗", "ゔ", "が", "ぎ", "ぐ", "げ", "ご", "ざ", "じ", "ず", "ぜ", "ぞ", "だ", "ぢ", "づ", "で", "ど", "ば", "ぱ", "び", "ぴ", "ぶ", "ぷ", "べ", "ぺ", "ほか", "ぼ", "ぽ", "より", "゙", "゚", "ゞ", "ァ", "ア", "アパート", "アルファ", "アンペア", "アール", "ィ", "イ", "イニング", "インチ", "ゥ", "ウ", "ヴ", "ウォン", "ェ", "エ", "エスクード", "エーカー", "ォ", "オ", "オンス", "オーム", "カ", "ガ", "ガロン", "ガンマ", "カイリ", "カラット", "カロリー", "キ", "ギ", "ギガ", "ギニー", "ギルダー", "キュリー", "キロ", "キログラム", "キロメートル", "キロワット", "ク", "グ", "グラム", "グラムトン", "クルゼイロ", "クローネ", "ケ", "ゲ", "ケース", "コ", "ゴ", "ココ", "コト", "コルナ", "コーポ", "サ", "ザ", "サイクル", "サンチーム", "シ", "ジ", "シリング", "ス", "ズ", "セ", "ゼ", "センチ", "セント", "ソ", "ゾ", "タ", "ダ", "ダース", "チ", "ヂ", "ッ", "ツ", "ヅ", "テ", "デ", "デシ", "ト", "ド", "ドル", "トン", "ナ", "ナノ", "ニ", "ヌ", "ネ", "ノ", "ノット", "ハ", "バ", "バーレル", "パ", "パーセント", "パーツ", "ハイツ", "ヒ", "ビ", "ビル", "ピ", "ピアストル", "ピクル", "ピコ", "フ", "ブ", "ブッシェル", "プ", "ファラッド", "フィート", "フラン", "ヘ", "ベ", "ベータ", "ペ", "ペソ", "ペニヒ", "ペンス", "ページ", "ヘクタール", "ヘルツ", "ホ", "ボ", "ボルト", "ポ", "ポイント", "ポンド", "ホン", "ホール", "ホーン", "マ", "マイクロ", "マイル", "マッハ", "マルク", "マンション", "ミ", "ミクロン", "ミリ", "ミリバール", "ム", "メ", "メガ", "メガトン", "メートル", "モ", "ャ", "ヤ", "ヤード", "ヤール", "ュ", "ユ", "ユアン", "ョ", "ヨ", "ラ", "リ", "リットル", "リラ", "ル", "ルピー", "ルーブル", "レ", "レム", "レントゲン", "ロ", "ワ", "ヷ", "ワット", "ヰ", "ヸ", "ヱ", "ヹ", "ヲ", "ヺ", "ン", "・", "ー", "ヾ", "㒞", "㒹", "㒻", "㓟", "㔕", "㛮", "㛼", "㞁", "㠯", "㡢", "㡼", "㣇", "㣣", "㤜", "㤺", "㨮", "㩬", "㫤", "㬈", "㬙", "㭉", "㮝", "㰘", "㱎", "㴳", "㶖", "㺬", "㺸", "㼛", "㿼", "䀈", "䀘", "䀹", "䁆", "䂖", "䃣", "䄯", "䈂", "䈧", "䊠", "䌁", "䌴", "䍙", "䏕", "䏙", "䐋", "䑫", "䔫", "䕝", "䕡", "䕫", "䗗", "䗹", "䘵", "䚾", "䛇", "䦕", "䧦", "䩮", "䩶", "䪲", "䬳", "䯎", "䳎", "䳭", "䳸", "䵖", "一", "丁", "七", "三", "上", "下", "不", "丙", "並", "丨", "中", "串", "丶", "丸", "丹", "丽", "丿", "乁", "乙", "九", "亂", "亅", "了", "二", "五", "亠", "交", "亮", "人", "什", "仌", "令", "企", "休", "你", "侀", "來", "例", "侮", "侻", "便", "倂", "倫", "偺", "備", "像", "僚", "僧", "優", "儿", "兀", "充", "免", "兔", "兤", "入", "內", "全", "兩", "八", "六", "具", "冀", "冂", "再", "冒", "冕", "冖", "冗", "写", "冤", "冫", "冬", "况", "冷", "凉", "凌", "凜", "凞", "几", "凵", "刀", "刃", "切", "列", "初", "利", "刺", "刻", "剆", "前", "割", "剷", "劉", "力", "劣", "劳", "労", "勇", "勉", "勒", "勞", "勤", "勵", "勹", "勺", "包", "匆", "匕", "北", "匚", "匸", "医", "匿", "十", "卄", "卅", "卉", "卑", "協", "博", "卜", "卩", "印", "即", "卵", "卽", "卿", "厂", "厶", "參", "又", "及", "双", "叟", "口", "句", "叫", "可", "叱", "右", "吆", "合", "名", "吏", "吝", "吸", "吹", "呂", "呈", "周", "咞", "咢", "咽", "哶", "唐", "問", "啓", "啕", "啣", "善", "喇", "喙", "喝", "喫", "喳", "営", "嗀", "嗂", "嗢", "嘆", "噑", "器", "噴", "囗", "四", "囹", "圖", "圗", "土", "地", "型", "城", "埴", "堍", "報", "堲", "塀", "塚", "塞", "墨", "墬", "墳", "壘", "壟", "士", "壮", "声", "売", "壷", "夂", "夆", "夊", "夕", "多", "夜", "夢", "大", "大正", "天", "奄", "奈", "契", "奔", "奢", "女", "姘", "姬", "娛", "娧", "婢", "婦", "媵", "嬈", "嬨", "嬾", "子", "字", "学", "宀", "宅", "宗", "寃", "寘", "寧", "寮", "寳", "寸", "寿", "将", "小", "尢", "尸", "尿", "屠", "屢", "層", "履", "屮", "山", "岍", "峀", "崙", "嵃", "嵐", "嵫", "嵮", "嵼", "嶲", "嶺", "巛", "巡", "巢", "工", "左", "己", "巽", "巾", "帨", "帽", "幩", "干", "平成", "年", "幺", "幼", "广", "度", "庰", "庳", "庶", "廉", "廊", "廒", "廓", "廙", "廬", "廴", "廾", "弄", "弋", "弓", "弢", "彐", "当", "彡", "形", "彩", "彫", "彳", "律", "後", "得", "徚", "復", "徭", "心", "忍", "志", "念", "忹", "怒", "怜", "恵", "悁", "悔", "惇", "惘", "惡", "愈", "慄", "慈", "慌", "慎", "慠", "慨", "慺", "憎", "憐", "憤", "憯", "憲", "懞", "懲", "懶", "戀", "戈", "成", "戛", "戮", "戴", "戶", "手", "打", "扝", "投", "抱", "拉", "拏", "拓", "拔", "拼", "拾", "指", "挽", "捐", "捕", "捨", "捻", "掃", "掠", "掩", "揄", "揅", "揤", "搜", "搢", "摒", "摩", "摷", "摾", "撚", "撝", "擄", "支", "攴", "敏", "敖", "敬", "數", "文", "斗", "料", "斤", "新", "方", "旅", "无", "既", "旣", "日", "明治", "易", "映", "昭和", "晉", "晴", "暈", "暑", "暜", "暴", "曆", "曰", "更", "書", "最", "月", "有", "朗", "望", "朡", "木", "李", "杓", "杖", "杞", "杻", "枅", "林", "柳", "柺", "栗", "栟", "株", "株式会社", "桒", "梁", "梅", "梎", "梨", "椔", "楂", "榣", "槪", "樂", "樓", "檨", "櫓", "櫛", "欄", "欠", "次", "歔", "止", "正", "歲", "歷", "歹", "殟", "殮", "殳", "殺", "殻", "毋", "母", "比", "毛", "氏", "气", "水", "汎", "汧", "沈", "沿", "泌", "泍", "泥", "注", "洖", "洛", "洞", "洴", "派", "流", "浩", "浪", "海", "浸", "涅", "淋", "淚", "淪", "淹", "渚", "港", "湮", "満", "溜", "溺", "滇", "滋", "滑", "滛", "漏", "演", "漢", "漣", "潮", "濆", "濫", "濾", "瀛", "瀞", "瀹", "灊", "火", "灰", "灷", "災", "炙", "炭", "烈", "烙", "無", "煅", "煉", "煮", "熜", "燎", "燐", "爐", "爛", "爨", "爪", "爫", "爵", "父", "爻", "爿", "片", "牐", "牙", "牛", "牢", "特", "犀", "犕", "犬", "犯", "狀", "狼", "猪", "獵", "獺", "玄", "率", "玉", "王", "玥", "玲", "珞", "理", "琉", "琢", "瑇", "瑜", "瑩", "瑱", "璅", "璉", "璘", "瓊", "瓜", "瓦", "甆", "甘", "生", "甤", "用", "田", "甲", "申", "男", "画", "甾", "留", "略", "異", "疋", "疒", "痢", "瘐", "瘝", "瘟", "療", "癩", "癶", "白", "皮", "皿", "益", "盛", "監", "盧", "目", "直", "省", "眞", "真", "着", "睊", "瞋", "瞧", "矛", "矢", "石", "硎", "硫", "碌", "碑", "磊", "磌", "磻", "礪", "示", "礼", "社", "祈", "祉", "祐", "祖", "祝", "神", "祥", "祿", "禁", "禍", "禎", "福", "禮", "禸", "禾", "秊", "秘", "秫", "稜", "穀", "穊", "穏", "穴", "空", "突", "窱", "立", "竮", "竹", "笠", "箏", "節", "篆", "築", "簾", "籠", "米", "类", "粒", "精", "糒", "糖", "糣", "糧", "糨", "糸", "紀", "紐", "索", "累", "終", "絛", "絣", "綠", "綾", "緇", "練", "縂", "縉", "縷", "繁", "繅", "缶", "缾", "网", "署", "罹", "罺", "羅", "羊", "羕", "羚", "羽", "翺", "老", "者", "而", "耒", "耳", "聆", "聠", "聯", "聰", "聾", "聿", "肉", "肋", "肭", "育", "脃", "脾", "臘", "臣", "臨", "自", "臭", "至", "臼", "舁", "舄", "舌", "舘", "舛", "舟", "艮", "良", "色", "艸", "艹", "芋", "芑", "芝", "花", "芳", "芽", "若", "苦", "茝", "茣", "茶", "荒", "荓", "荣", "莭", "莽", "菉", "菊", "菌", "菜", "菧", "華", "菱", "落", "葉", "著", "蓮", "蓱", "蓳", "蓼", "蔖", "蕤", "藍", "藺", "蘆", "蘒", "蘭", "蘿", "虍", "虐", "虜", "虧", "虩", "虫", "蚈", "蚩", "蛢", "蜎", "蜨", "蝫", "蝹", "螆", "螺", "蟡", "蠁", "蠟", "血", "行", "衠", "衣", "裂", "裏", "裗", "裞", "裡", "裸", "裺", "褐", "襁", "襤", "襾", "覆", "見", "視", "角", "解", "言", "誠", "說", "調", "請", "諒", "論", "諭", "諸", "諾", "謁", "謹", "識", "讀", "變", "谷", "豆", "豈", "豕", "豸", "貝", "財", "販", "貫", "賁", "賂", "資", "賈", "賓", "贈", "贛", "赤", "走", "起", "足", "趼", "跋", "路", "跰", "身", "車", "軔", "輦", "輪", "輸", "輻", "轢", "辛", "辞", "辰", "辵", "辶", "連", "逸", "遊", "適", "遲", "遼", "邏", "邑", "邔", "郎", "郞", "郱", "都", "鄑", "鄛", "酉", "酪", "醙", "醴", "釆", "里", "量", "金", "鈴", "鈸", "鉶", "鉼", "鋗", "鋘", "錄", "鍊", "鏹", "鐕", "長", "門", "開", "閭", "閷", "阜", "阮", "陋", "降", "陵", "陸", "陼", "隆", "隣", "隶", "隷", "隸", "隹", "雃", "離", "難", "雨", "零", "雷", "霣", "露", "靈", "靑", "靖", "非", "面", "革", "韋", "韛", "韠", "韭", "音", "響", "頁", "項", "頋", "領", "頩", "頻", "類", "風", "飛", "食", "飢", "飯", "飼", "館", "餩", "首", "香", "馧", "馬", "駂", "駱", "駾", "驪", "骨", "高", "髟", "鬒", "鬥", "鬯", "鬲", "鬼", "魚", "魯", "鱀", "鱗", "鳥", "鳽", "鵧", "鶴", "鷺", "鸞", "鹵", "鹿", "麗", "麟", "麥", "麻", "黃", "黍", "黎", "黑", "黹", "黽", "黾", "鼅", "鼎", "鼏", "鼓", "鼖", "鼠", "鼻", "齃", "齊", "齒", "龍", "龎", "龜", "龟", "龠", "\uA76F", "\U00011099𑂺", "\U0001109B𑂺", "\U000110A5𑂺", "\U00011131\U00011127", "\U00011132\U00011127", "𝅗𝅥", "𝅘𝅥", "𝅘𝅥𝅮", "𝅘𝅥𝅯", "𝅘𝅥𝅰", "𝅘𝅥𝅱", "𝅘𝅥𝅲", "𝆹𝅥", "𝆹𝅥𝅮", "𝆹𝅥𝅯", "𝆺𝅥", "𝆺𝅥𝅮", "𝆺𝅥𝅯", "𠄢", "𠔜", "𠔥", "𠕋", "𠘺", "𠠄", "𠣞", "𠨬", "𠭣", "𡓤", "𡚨", "𡛪", "𡧈", "𡬘", "𡴋", "𡷤", "𡷦", "𢆃", "𢆟", "𢌱", "𢛔", "𢡄", "𢡊", "𢬌", "𢯱", "𣀊", "𣊸", "𣍟", "𣎓", "𣎜", "𣏃", "𣏕", "𣑭", "𣚣", "𣢧", "𣪍", "𣫺", "𣲼", "𣴞", "𣻑", "𣽞", "𣾎", "𤉣", "𤋮", "𤎫", "𤘈", "𤜵", "𤠔", "𤰶", "𤲒", "𤾡", "𤾸", "𥁄", "𥃲", "𥃳", "𥄙", "𥄳", "𥉉", "𥐝", "𥘦", "𥚚", "𥛅", "𥥼", "𥪧", "𥮫", "𥲀", "𥳐", "𥾆", "𦇚", "𦈨", "𦉇", "𦋙", "𦌾", "𦓚", "𦔣", "𦖨", "𦞧", "𦞵", "𦬼", "𦰶", "𦳕", "𦵫", "𦼬", "𦾱", "𧃒", "𧏊", "𧙧", "𧢮", "𧥦", "𧲨", "𧻓", "𧼯", "𨗒", "𨗭", "𨜮", "𨯺", "𨵷", "𩅅", "𩇟", "𩈚", "𩐊", "𩒖", "𩖶", "𩬰", "𪃎", "𪄅", "𪈎", "𪊑", "𪎒", "𪘀"];
enum composeIdxMask = (1<<11)-1, composeCntShift = 11;
immutable compositionJumpTrieEntries = TrieEntry!(ushort, 12, 9)([ 0x0,  0x400], [ 0x1000,  0x2000], [ 0x3000200010000,  0x7000600050004,  0x7000700070008,  0xa000700090007,  0x70007000c000b,  0x7000700070007,  0x700070007000d,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x700070007000e,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0x7000700070007,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff080208010800,  0x281618138003ffff,  0x383308328821301b,  0x285108507841383a,  0x8068485f185c3056,  0x3882407affff1078,  0x30a510a398903889,  0xffff30b648ad10ab,  0xffffffffffffffff,  0x28cf18cc80bcffff,  0x38ec08eb88da30d4,  0x290b110970fb40f3,  0x8122491919163110,  0x393c4134ffff1132,  0x3960115e994b4143,  0xffff317351691167,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1979,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff217cffffffff,  0x984118209810980,  0xffff2185ffffffff,  0x989ffffffffffff,  0xffffffffffffffff,  0xffff0991198e218a,  0xffffffffffff0992,  0xffffffffffff2193,  0xffff2197ffffffff,  0x99f119d099c099b,  0xffff21a0ffffffff,  0x9a4ffffffffffff,  0xffffffffffffffff,  0xffff09ac19a921a5,  0xffffffffffff09ad,  0xffffffffffff21ae,  0x21b621b2ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x11bc11baffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff11c011be,  0xffffffffffffffff,  0xffffffffffffffff,  0x9c309c2ffffffff,  0xffffffffffffffff,  0xffffffff09c509c4,  0xffffffffffffffff,  0x9c909c809c709c6,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x9caffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff29d029cb,  0xffffffffffffffff,  0xffffffffffffffff,  0x29d5ffffffffffff,  0xffffffffffff29da,  0x9dfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x9e109e0ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x9e309e2ffffffff,  0xffffffff09e509e4,  0x9e709e6ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff09e8ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff39e9ffff,  0x29f4ffff21f0ffff,  0xffffffff39f9ffff,  0x2200ffffffffffff,  0xffffffff0a04ffff,  0xffffffff3205ffff,  0xffffffff2a0bffff,  0xffff0a11ffff0a10,  0xffffffff4212ffff,  0x321effff221affff,  0xffffffff4224ffff,  0x222cffffffffffff,  0xffffffff1230ffff,  0xffffffff4232ffff,  0x1a431a40323affff,  0xffff0a46ffffffff,  0xffff1247ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0a49ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xa4cffffffff124a,  0xa5212501a4dffff,  0xffff0a57ffff2253,  0xffff0a58ffffffff,  0x2259ffffffffffff,  0xa5dffffffffffff,  0xa5effffffffffff,  0xffffffff0a5fffff,  0xa62ffffffff1260,  0xa6812661a63ffff,  0xffff0a6dffff2269,  0xffff0a6effffffff,  0x226fffffffffffff,  0xa73ffffffffffff,  0xa74ffffffffffff,  0xffffffff0a75ffff,  0xffffffffffffffff,  0xffff0a76ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0a780a77,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0a7a0a79,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0a7c0a7b,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1a7dffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0a81ffff0a80,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0a82ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0a83ffffffff,  0xffffffff0a84ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff0a85,  0xffffffffffffffff,  0xa87ffffffff0a86,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1288ffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1a8affffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0a8dffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xa90128effffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0a91ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xa92ffffffffffff,  0xffffffffffffffff,  0xffff1a93ffffffff,  0xffff0a96ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xa991297ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1a9affff,  0xffffffffffff0a9d,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0a9effff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xaa0ffff0a9fffff,  0xaa2ffff0aa1ffff,  0xffffffff0aa3ffff,  0xffffffff0aa4ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0aa5ffffffff,  0xaa80aa7ffff0aa6,  0xffff0aa9ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xaab0aaaffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xaad0aacffffffff,  0xffffffffffffffff,  0xaaf0aaeffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff12b212b0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0ab50ab4,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0ab70ab6,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xac10ac022bc22b8,  0xac50ac40ac30ac2,  0xacf0ace22ca22c6,  0xad30ad20ad10ad0,  0xffffffff12d612d4,  0xffffffffffffffff,  0xffffffff12da12d8,  0xffffffffffffffff,  0xae50ae422e022dc,  0xae90ae80ae70ae6,  0xaf30af222ee22ea,  0xaf70af60af50af4,  0xffffffff1afb1af8,  0xffffffffffffffff,  0xffffffff1b011afe,  0xffffffffffffffff,  0xffffffff13061304,  0xffffffffffffffff,  0xffffffff130a1308,  0xffffffffffffffff,  0xffffffff1b0f1b0c,  0xffffffffffffffff,  0xffffffff1b12ffff,  0xffffffffffffffff,  0xb1e0b1d23192315,  0xb220b210b200b1f,  0xb2c0b2b23272323,  0xb300b2f0b2e0b2d,  0xffffffffffff0b31,  0xffffffffffff0b32,  0xffffffffffffffff,  0xffffffffffff0b33,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b34ffffffff,  0xffffffffffffffff,  0x1b35ffffffffffff,  0xffffffffffffffff,  0xffff0b38ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b39ffffffff,  0xffffffffffffffff,  0xffff1b3affffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b3effff0b3d,  0xffffffffffff0b3f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b41ffff0b40,  0xffffffffffff0b42,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xb43ffffffffffff,  0xffffffffffffffff,  0xb45ffffffff0b44,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xb46ffffffffffff,  0xffffffff0b47ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff0b48,  0xb49ffffffffffff,  0xffffffff0b4affff,  0xffffffffffff0b4b,  0xffffffff0b4cffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0b4dffff,  0xffffffff0b4f0b4e,  0xffffffffffffffff,  0xffffffffffffffff,  0xb510b50ffffffff,  0xb530b52ffffffff,  0xb550b54ffffffff,  0xffffffff0b570b56,  0xb590b58ffffffff,  0xb5b0b5affffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b5d0b5cffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b5effffffff,  0xffffffffffffffff,  0xb61ffff0b600b5f,  0xffffffffffffffff,  0xb630b62ffffffff,  0xffffffff0b650b64,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0b66ffffffff,  0xb67ffffffffffff,  0xb69ffff0b68ffff,  0xb6bffff0b6affff,  0xb6dffff0b6cffff,  0xb6fffff0b6effff,  0xb71ffff0b70ffff,  0xffffffff0b72ffff,  0xffff0b74ffff0b73,  0xffffffffffff0b75,  0x1376ffffffffffff,  0xffff1378ffffffff,  0xffffffff137affff,  0x137effffffff137c,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0b80ffff,  0xffffffffffffffff,  0xffff0b81ffffffff,  0xb82ffffffffffff,  0xb84ffff0b83ffff,  0xb86ffff0b85ffff,  0xb88ffff0b87ffff,  0xb8affff0b89ffff,  0xb8cffff0b8bffff,  0xffffffff0b8dffff,  0xffff0b8fffff0b8e,  0xffffffffffff0b90,  0x1391ffffffffffff,  0xffff1393ffffffff,  0xffffffff1395ffff,  0x1399ffffffff1397,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xb9bffffffffffff,  0xffff0b9e0b9d0b9c,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0b9fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xba1ffff0ba0ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff0ba2ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff0ba40ba3ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff]);
immutable compositionTable = [CompEntry(0x00338, 0x0226e),CompEntry(0x00338, 0x02260),CompEntry(0x00338, 0x0226f),CompEntry(0x00300, 0x000c0),CompEntry(0x00301, 0x000c1),CompEntry(0x00302, 0x000c2),CompEntry(0x00303, 0x000c3),CompEntry(0x00304, 0x00100),CompEntry(0x00306, 0x00102),CompEntry(0x00307, 0x00226),CompEntry(0x00308, 0x000c4),CompEntry(0x00309, 0x01ea2),CompEntry(0x0030a, 0x000c5),CompEntry(0x0030c, 0x001cd),CompEntry(0x0030f, 0x00200),CompEntry(0x00311, 0x00202),CompEntry(0x00323, 0x01ea0),CompEntry(0x00325, 0x01e00),CompEntry(0x00328, 0x00104),CompEntry(0x00307, 0x01e02),CompEntry(0x00323, 0x01e04),CompEntry(0x00331, 0x01e06),CompEntry(0x00301, 0x00106),CompEntry(0x00302, 0x00108),CompEntry(0x00307, 0x0010a),CompEntry(0x0030c, 0x0010c),CompEntry(0x00327, 0x000c7),CompEntry(0x00307, 0x01e0a),CompEntry(0x0030c, 0x0010e),CompEntry(0x00323, 0x01e0c),CompEntry(0x00327, 0x01e10),CompEntry(0x0032d, 0x01e12),CompEntry(0x00331, 0x01e0e),CompEntry(0x00300, 0x000c8),CompEntry(0x00301, 0x000c9),CompEntry(0x00302, 0x000ca),CompEntry(0x00303, 0x01ebc),CompEntry(0x00304, 0x00112),CompEntry(0x00306, 0x00114),CompEntry(0x00307, 0x00116),CompEntry(0x00308, 0x000cb),CompEntry(0x00309, 0x01eba),CompEntry(0x0030c, 0x0011a),CompEntry(0x0030f, 0x00204),CompEntry(0x00311, 0x00206),CompEntry(0x00323, 0x01eb8),CompEntry(0x00327, 0x00228),CompEntry(0x00328, 0x00118),CompEntry(0x0032d, 0x01e18),CompEntry(0x00330, 0x01e1a),CompEntry(0x00307, 0x01e1e),CompEntry(0x00301, 0x001f4),CompEntry(0x00302, 0x0011c),CompEntry(0x00304, 0x01e20),CompEntry(0x00306, 0x0011e),CompEntry(0x00307, 0x00120),CompEntry(0x0030c, 0x001e6),CompEntry(0x00327, 0x00122),CompEntry(0x00302, 0x00124),CompEntry(0x00307, 0x01e22),CompEntry(0x00308, 0x01e26),CompEntry(0x0030c, 0x0021e),CompEntry(0x00323, 0x01e24),CompEntry(0x00327, 0x01e28),CompEntry(0x0032e, 0x01e2a),CompEntry(0x00300, 0x000cc),CompEntry(0x00301, 0x000cd),CompEntry(0x00302, 0x000ce),CompEntry(0x00303, 0x00128),CompEntry(0x00304, 0x0012a),CompEntry(0x00306, 0x0012c),CompEntry(0x00307, 0x00130),CompEntry(0x00308, 0x000cf),CompEntry(0x00309, 0x01ec8),CompEntry(0x0030c, 0x001cf),CompEntry(0x0030f, 0x00208),CompEntry(0x00311, 0x0020a),CompEntry(0x00323, 0x01eca),CompEntry(0x00328, 0x0012e),CompEntry(0x00330, 0x01e2c),CompEntry(0x00302, 0x00134),CompEntry(0x00301, 0x01e30),CompEntry(0x0030c, 0x001e8),CompEntry(0x00323, 0x01e32),CompEntry(0x00327, 0x00136),CompEntry(0x00331, 0x01e34),CompEntry(0x00301, 0x00139),CompEntry(0x0030c, 0x0013d),CompEntry(0x00323, 0x01e36),CompEntry(0x00327, 0x0013b),CompEntry(0x0032d, 0x01e3c),CompEntry(0x00331, 0x01e3a),CompEntry(0x00301, 0x01e3e),CompEntry(0x00307, 0x01e40),CompEntry(0x00323, 0x01e42),CompEntry(0x00300, 0x001f8),CompEntry(0x00301, 0x00143),CompEntry(0x00303, 0x000d1),CompEntry(0x00307, 0x01e44),CompEntry(0x0030c, 0x00147),CompEntry(0x00323, 0x01e46),CompEntry(0x00327, 0x00145),CompEntry(0x0032d, 0x01e4a),CompEntry(0x00331, 0x01e48),CompEntry(0x00300, 0x000d2),CompEntry(0x00301, 0x000d3),CompEntry(0x00302, 0x000d4),CompEntry(0x00303, 0x000d5),CompEntry(0x00304, 0x0014c),CompEntry(0x00306, 0x0014e),CompEntry(0x00307, 0x0022e),CompEntry(0x00308, 0x000d6),CompEntry(0x00309, 0x01ece),CompEntry(0x0030b, 0x00150),CompEntry(0x0030c, 0x001d1),CompEntry(0x0030f, 0x0020c),CompEntry(0x00311, 0x0020e),CompEntry(0x0031b, 0x001a0),CompEntry(0x00323, 0x01ecc),CompEntry(0x00328, 0x001ea),CompEntry(0x00301, 0x01e54),CompEntry(0x00307, 0x01e56),CompEntry(0x00301, 0x00154),CompEntry(0x00307, 0x01e58),CompEntry(0x0030c, 0x00158),CompEntry(0x0030f, 0x00210),CompEntry(0x00311, 0x00212),CompEntry(0x00323, 0x01e5a),CompEntry(0x00327, 0x00156),CompEntry(0x00331, 0x01e5e),CompEntry(0x00301, 0x0015a),CompEntry(0x00302, 0x0015c),CompEntry(0x00307, 0x01e60),CompEntry(0x0030c, 0x00160),CompEntry(0x00323, 0x01e62),CompEntry(0x00326, 0x00218),CompEntry(0x00327, 0x0015e),CompEntry(0x00307, 0x01e6a),CompEntry(0x0030c, 0x00164),CompEntry(0x00323, 0x01e6c),CompEntry(0x00326, 0x0021a),CompEntry(0x00327, 0x00162),CompEntry(0x0032d, 0x01e70),CompEntry(0x00331, 0x01e6e),CompEntry(0x00300, 0x000d9),CompEntry(0x00301, 0x000da),CompEntry(0x00302, 0x000db),CompEntry(0x00303, 0x00168),CompEntry(0x00304, 0x0016a),CompEntry(0x00306, 0x0016c),CompEntry(0x00308, 0x000dc),CompEntry(0x00309, 0x01ee6),CompEntry(0x0030a, 0x0016e),CompEntry(0x0030b, 0x00170),CompEntry(0x0030c, 0x001d3),CompEntry(0x0030f, 0x00214),CompEntry(0x00311, 0x00216),CompEntry(0x0031b, 0x001af),CompEntry(0x00323, 0x01ee4),CompEntry(0x00324, 0x01e72),CompEntry(0x00328, 0x00172),CompEntry(0x0032d, 0x01e76),CompEntry(0x00330, 0x01e74),CompEntry(0x00303, 0x01e7c),CompEntry(0x00323, 0x01e7e),CompEntry(0x00300, 0x01e80),CompEntry(0x00301, 0x01e82),CompEntry(0x00302, 0x00174),CompEntry(0x00307, 0x01e86),CompEntry(0x00308, 0x01e84),CompEntry(0x00323, 0x01e88),CompEntry(0x00307, 0x01e8a),CompEntry(0x00308, 0x01e8c),CompEntry(0x00300, 0x01ef2),CompEntry(0x00301, 0x000dd),CompEntry(0x00302, 0x00176),CompEntry(0x00303, 0x01ef8),CompEntry(0x00304, 0x00232),CompEntry(0x00307, 0x01e8e),CompEntry(0x00308, 0x00178),CompEntry(0x00309, 0x01ef6),CompEntry(0x00323, 0x01ef4),CompEntry(0x00301, 0x00179),CompEntry(0x00302, 0x01e90),CompEntry(0x00307, 0x0017b),CompEntry(0x0030c, 0x0017d),CompEntry(0x00323, 0x01e92),CompEntry(0x00331, 0x01e94),CompEntry(0x00300, 0x000e0),CompEntry(0x00301, 0x000e1),CompEntry(0x00302, 0x000e2),CompEntry(0x00303, 0x000e3),CompEntry(0x00304, 0x00101),CompEntry(0x00306, 0x00103),CompEntry(0x00307, 0x00227),CompEntry(0x00308, 0x000e4),CompEntry(0x00309, 0x01ea3),CompEntry(0x0030a, 0x000e5),CompEntry(0x0030c, 0x001ce),CompEntry(0x0030f, 0x00201),CompEntry(0x00311, 0x00203),CompEntry(0x00323, 0x01ea1),CompEntry(0x00325, 0x01e01),CompEntry(0x00328, 0x00105),CompEntry(0x00307, 0x01e03),CompEntry(0x00323, 0x01e05),CompEntry(0x00331, 0x01e07),CompEntry(0x00301, 0x00107),CompEntry(0x00302, 0x00109),CompEntry(0x00307, 0x0010b),CompEntry(0x0030c, 0x0010d),CompEntry(0x00327, 0x000e7),CompEntry(0x00307, 0x01e0b),CompEntry(0x0030c, 0x0010f),CompEntry(0x00323, 0x01e0d),CompEntry(0x00327, 0x01e11),CompEntry(0x0032d, 0x01e13),CompEntry(0x00331, 0x01e0f),CompEntry(0x00300, 0x000e8),CompEntry(0x00301, 0x000e9),CompEntry(0x00302, 0x000ea),CompEntry(0x00303, 0x01ebd),CompEntry(0x00304, 0x00113),CompEntry(0x00306, 0x00115),CompEntry(0x00307, 0x00117),CompEntry(0x00308, 0x000eb),CompEntry(0x00309, 0x01ebb),CompEntry(0x0030c, 0x0011b),CompEntry(0x0030f, 0x00205),CompEntry(0x00311, 0x00207),CompEntry(0x00323, 0x01eb9),CompEntry(0x00327, 0x00229),CompEntry(0x00328, 0x00119),CompEntry(0x0032d, 0x01e19),CompEntry(0x00330, 0x01e1b),CompEntry(0x00307, 0x01e1f),CompEntry(0x00301, 0x001f5),CompEntry(0x00302, 0x0011d),CompEntry(0x00304, 0x01e21),CompEntry(0x00306, 0x0011f),CompEntry(0x00307, 0x00121),CompEntry(0x0030c, 0x001e7),CompEntry(0x00327, 0x00123),CompEntry(0x00302, 0x00125),CompEntry(0x00307, 0x01e23),CompEntry(0x00308, 0x01e27),CompEntry(0x0030c, 0x0021f),CompEntry(0x00323, 0x01e25),CompEntry(0x00327, 0x01e29),CompEntry(0x0032e, 0x01e2b),CompEntry(0x00331, 0x01e96),CompEntry(0x00300, 0x000ec),CompEntry(0x00301, 0x000ed),CompEntry(0x00302, 0x000ee),CompEntry(0x00303, 0x00129),CompEntry(0x00304, 0x0012b),CompEntry(0x00306, 0x0012d),CompEntry(0x00308, 0x000ef),CompEntry(0x00309, 0x01ec9),CompEntry(0x0030c, 0x001d0),CompEntry(0x0030f, 0x00209),CompEntry(0x00311, 0x0020b),CompEntry(0x00323, 0x01ecb),CompEntry(0x00328, 0x0012f),CompEntry(0x00330, 0x01e2d),CompEntry(0x00302, 0x00135),CompEntry(0x0030c, 0x001f0),CompEntry(0x00301, 0x01e31),CompEntry(0x0030c, 0x001e9),CompEntry(0x00323, 0x01e33),CompEntry(0x00327, 0x00137),CompEntry(0x00331, 0x01e35),CompEntry(0x00301, 0x0013a),CompEntry(0x0030c, 0x0013e),CompEntry(0x00323, 0x01e37),CompEntry(0x00327, 0x0013c),CompEntry(0x0032d, 0x01e3d),CompEntry(0x00331, 0x01e3b),CompEntry(0x00301, 0x01e3f),CompEntry(0x00307, 0x01e41),CompEntry(0x00323, 0x01e43),CompEntry(0x00300, 0x001f9),CompEntry(0x00301, 0x00144),CompEntry(0x00303, 0x000f1),CompEntry(0x00307, 0x01e45),CompEntry(0x0030c, 0x00148),CompEntry(0x00323, 0x01e47),CompEntry(0x00327, 0x00146),CompEntry(0x0032d, 0x01e4b),CompEntry(0x00331, 0x01e49),CompEntry(0x00300, 0x000f2),CompEntry(0x00301, 0x000f3),CompEntry(0x00302, 0x000f4),CompEntry(0x00303, 0x000f5),CompEntry(0x00304, 0x0014d),CompEntry(0x00306, 0x0014f),CompEntry(0x00307, 0x0022f),CompEntry(0x00308, 0x000f6),CompEntry(0x00309, 0x01ecf),CompEntry(0x0030b, 0x00151),CompEntry(0x0030c, 0x001d2),CompEntry(0x0030f, 0x0020d),CompEntry(0x00311, 0x0020f),CompEntry(0x0031b, 0x001a1),CompEntry(0x00323, 0x01ecd),CompEntry(0x00328, 0x001eb),CompEntry(0x00301, 0x01e55),CompEntry(0x00307, 0x01e57),CompEntry(0x00301, 0x00155),CompEntry(0x00307, 0x01e59),CompEntry(0x0030c, 0x00159),CompEntry(0x0030f, 0x00211),CompEntry(0x00311, 0x00213),CompEntry(0x00323, 0x01e5b),CompEntry(0x00327, 0x00157),CompEntry(0x00331, 0x01e5f),CompEntry(0x00301, 0x0015b),CompEntry(0x00302, 0x0015d),CompEntry(0x00307, 0x01e61),CompEntry(0x0030c, 0x00161),CompEntry(0x00323, 0x01e63),CompEntry(0x00326, 0x00219),CompEntry(0x00327, 0x0015f),CompEntry(0x00307, 0x01e6b),CompEntry(0x00308, 0x01e97),CompEntry(0x0030c, 0x00165),CompEntry(0x00323, 0x01e6d),CompEntry(0x00326, 0x0021b),CompEntry(0x00327, 0x00163),CompEntry(0x0032d, 0x01e71),CompEntry(0x00331, 0x01e6f),CompEntry(0x00300, 0x000f9),CompEntry(0x00301, 0x000fa),CompEntry(0x00302, 0x000fb),CompEntry(0x00303, 0x00169),CompEntry(0x00304, 0x0016b),CompEntry(0x00306, 0x0016d),CompEntry(0x00308, 0x000fc),CompEntry(0x00309, 0x01ee7),CompEntry(0x0030a, 0x0016f),CompEntry(0x0030b, 0x00171),CompEntry(0x0030c, 0x001d4),CompEntry(0x0030f, 0x00215),CompEntry(0x00311, 0x00217),CompEntry(0x0031b, 0x001b0),CompEntry(0x00323, 0x01ee5),CompEntry(0x00324, 0x01e73),CompEntry(0x00328, 0x00173),CompEntry(0x0032d, 0x01e77),CompEntry(0x00330, 0x01e75),CompEntry(0x00303, 0x01e7d),CompEntry(0x00323, 0x01e7f),CompEntry(0x00300, 0x01e81),CompEntry(0x00301, 0x01e83),CompEntry(0x00302, 0x00175),CompEntry(0x00307, 0x01e87),CompEntry(0x00308, 0x01e85),CompEntry(0x0030a, 0x01e98),CompEntry(0x00323, 0x01e89),CompEntry(0x00307, 0x01e8b),CompEntry(0x00308, 0x01e8d),CompEntry(0x00300, 0x01ef3),CompEntry(0x00301, 0x000fd),CompEntry(0x00302, 0x00177),CompEntry(0x00303, 0x01ef9),CompEntry(0x00304, 0x00233),CompEntry(0x00307, 0x01e8f),CompEntry(0x00308, 0x000ff),CompEntry(0x00309, 0x01ef7),CompEntry(0x0030a, 0x01e99),CompEntry(0x00323, 0x01ef5),CompEntry(0x00301, 0x0017a),CompEntry(0x00302, 0x01e91),CompEntry(0x00307, 0x0017c),CompEntry(0x0030c, 0x0017e),CompEntry(0x00323, 0x01e93),CompEntry(0x00331, 0x01e95),CompEntry(0x00300, 0x01fed),CompEntry(0x00301, 0x00385),CompEntry(0x00342, 0x01fc1),CompEntry(0x00300, 0x01ea6),CompEntry(0x00301, 0x01ea4),CompEntry(0x00303, 0x01eaa),CompEntry(0x00309, 0x01ea8),CompEntry(0x00304, 0x001de),CompEntry(0x00301, 0x001fa),CompEntry(0x00301, 0x001fc),CompEntry(0x00304, 0x001e2),CompEntry(0x00301, 0x01e08),CompEntry(0x00300, 0x01ec0),CompEntry(0x00301, 0x01ebe),CompEntry(0x00303, 0x01ec4),CompEntry(0x00309, 0x01ec2),CompEntry(0x00301, 0x01e2e),CompEntry(0x00300, 0x01ed2),CompEntry(0x00301, 0x01ed0),CompEntry(0x00303, 0x01ed6),CompEntry(0x00309, 0x01ed4),CompEntry(0x00301, 0x01e4c),CompEntry(0x00304, 0x0022c),CompEntry(0x00308, 0x01e4e),CompEntry(0x00304, 0x0022a),CompEntry(0x00301, 0x001fe),CompEntry(0x00300, 0x001db),CompEntry(0x00301, 0x001d7),CompEntry(0x00304, 0x001d5),CompEntry(0x0030c, 0x001d9),CompEntry(0x00300, 0x01ea7),CompEntry(0x00301, 0x01ea5),CompEntry(0x00303, 0x01eab),CompEntry(0x00309, 0x01ea9),CompEntry(0x00304, 0x001df),CompEntry(0x00301, 0x001fb),CompEntry(0x00301, 0x001fd),CompEntry(0x00304, 0x001e3),CompEntry(0x00301, 0x01e09),CompEntry(0x00300, 0x01ec1),CompEntry(0x00301, 0x01ebf),CompEntry(0x00303, 0x01ec5),CompEntry(0x00309, 0x01ec3),CompEntry(0x00301, 0x01e2f),CompEntry(0x00300, 0x01ed3),CompEntry(0x00301, 0x01ed1),CompEntry(0x00303, 0x01ed7),CompEntry(0x00309, 0x01ed5),CompEntry(0x00301, 0x01e4d),CompEntry(0x00304, 0x0022d),CompEntry(0x00308, 0x01e4f),CompEntry(0x00304, 0x0022b),CompEntry(0x00301, 0x001ff),CompEntry(0x00300, 0x001dc),CompEntry(0x00301, 0x001d8),CompEntry(0x00304, 0x001d6),CompEntry(0x0030c, 0x001da),CompEntry(0x00300, 0x01eb0),CompEntry(0x00301, 0x01eae),CompEntry(0x00303, 0x01eb4),CompEntry(0x00309, 0x01eb2),CompEntry(0x00300, 0x01eb1),CompEntry(0x00301, 0x01eaf),CompEntry(0x00303, 0x01eb5),CompEntry(0x00309, 0x01eb3),CompEntry(0x00300, 0x01e14),CompEntry(0x00301, 0x01e16),CompEntry(0x00300, 0x01e15),CompEntry(0x00301, 0x01e17),CompEntry(0x00300, 0x01e50),CompEntry(0x00301, 0x01e52),CompEntry(0x00300, 0x01e51),CompEntry(0x00301, 0x01e53),CompEntry(0x00307, 0x01e64),CompEntry(0x00307, 0x01e65),CompEntry(0x00307, 0x01e66),CompEntry(0x00307, 0x01e67),CompEntry(0x00301, 0x01e78),CompEntry(0x00301, 0x01e79),CompEntry(0x00308, 0x01e7a),CompEntry(0x00308, 0x01e7b),CompEntry(0x00307, 0x01e9b),CompEntry(0x00300, 0x01edc),CompEntry(0x00301, 0x01eda),CompEntry(0x00303, 0x01ee0),CompEntry(0x00309, 0x01ede),CompEntry(0x00323, 0x01ee2),CompEntry(0x00300, 0x01edd),CompEntry(0x00301, 0x01edb),CompEntry(0x00303, 0x01ee1),CompEntry(0x00309, 0x01edf),CompEntry(0x00323, 0x01ee3),CompEntry(0x00300, 0x01eea),CompEntry(0x00301, 0x01ee8),CompEntry(0x00303, 0x01eee),CompEntry(0x00309, 0x01eec),CompEntry(0x00323, 0x01ef0),CompEntry(0x00300, 0x01eeb),CompEntry(0x00301, 0x01ee9),CompEntry(0x00303, 0x01eef),CompEntry(0x00309, 0x01eed),CompEntry(0x00323, 0x01ef1),CompEntry(0x0030c, 0x001ee),CompEntry(0x00304, 0x001ec),CompEntry(0x00304, 0x001ed),CompEntry(0x00304, 0x001e0),CompEntry(0x00304, 0x001e1),CompEntry(0x00306, 0x01e1c),CompEntry(0x00306, 0x01e1d),CompEntry(0x00304, 0x00230),CompEntry(0x00304, 0x00231),CompEntry(0x0030c, 0x001ef),CompEntry(0x00300, 0x01fba),CompEntry(0x00301, 0x00386),CompEntry(0x00304, 0x01fb9),CompEntry(0x00306, 0x01fb8),CompEntry(0x00313, 0x01f08),CompEntry(0x00314, 0x01f09),CompEntry(0x00345, 0x01fbc),CompEntry(0x00300, 0x01fc8),CompEntry(0x00301, 0x00388),CompEntry(0x00313, 0x01f18),CompEntry(0x00314, 0x01f19),CompEntry(0x00300, 0x01fca),CompEntry(0x00301, 0x00389),CompEntry(0x00313, 0x01f28),CompEntry(0x00314, 0x01f29),CompEntry(0x00345, 0x01fcc),CompEntry(0x00300, 0x01fda),CompEntry(0x00301, 0x0038a),CompEntry(0x00304, 0x01fd9),CompEntry(0x00306, 0x01fd8),CompEntry(0x00308, 0x003aa),CompEntry(0x00313, 0x01f38),CompEntry(0x00314, 0x01f39),CompEntry(0x00300, 0x01ff8),CompEntry(0x00301, 0x0038c),CompEntry(0x00313, 0x01f48),CompEntry(0x00314, 0x01f49),CompEntry(0x00314, 0x01fec),CompEntry(0x00300, 0x01fea),CompEntry(0x00301, 0x0038e),CompEntry(0x00304, 0x01fe9),CompEntry(0x00306, 0x01fe8),CompEntry(0x00308, 0x003ab),CompEntry(0x00314, 0x01f59),CompEntry(0x00300, 0x01ffa),CompEntry(0x00301, 0x0038f),CompEntry(0x00313, 0x01f68),CompEntry(0x00314, 0x01f69),CompEntry(0x00345, 0x01ffc),CompEntry(0x00345, 0x01fb4),CompEntry(0x00345, 0x01fc4),CompEntry(0x00300, 0x01f70),CompEntry(0x00301, 0x003ac),CompEntry(0x00304, 0x01fb1),CompEntry(0x00306, 0x01fb0),CompEntry(0x00313, 0x01f00),CompEntry(0x00314, 0x01f01),CompEntry(0x00342, 0x01fb6),CompEntry(0x00345, 0x01fb3),CompEntry(0x00300, 0x01f72),CompEntry(0x00301, 0x003ad),CompEntry(0x00313, 0x01f10),CompEntry(0x00314, 0x01f11),CompEntry(0x00300, 0x01f74),CompEntry(0x00301, 0x003ae),CompEntry(0x00313, 0x01f20),CompEntry(0x00314, 0x01f21),CompEntry(0x00342, 0x01fc6),CompEntry(0x00345, 0x01fc3),CompEntry(0x00300, 0x01f76),CompEntry(0x00301, 0x003af),CompEntry(0x00304, 0x01fd1),CompEntry(0x00306, 0x01fd0),CompEntry(0x00308, 0x003ca),CompEntry(0x00313, 0x01f30),CompEntry(0x00314, 0x01f31),CompEntry(0x00342, 0x01fd6),CompEntry(0x00300, 0x01f78),CompEntry(0x00301, 0x003cc),CompEntry(0x00313, 0x01f40),CompEntry(0x00314, 0x01f41),CompEntry(0x00313, 0x01fe4),CompEntry(0x00314, 0x01fe5),CompEntry(0x00300, 0x01f7a),CompEntry(0x00301, 0x003cd),CompEntry(0x00304, 0x01fe1),CompEntry(0x00306, 0x01fe0),CompEntry(0x00308, 0x003cb),CompEntry(0x00313, 0x01f50),CompEntry(0x00314, 0x01f51),CompEntry(0x00342, 0x01fe6),CompEntry(0x00300, 0x01f7c),CompEntry(0x00301, 0x003ce),CompEntry(0x00313, 0x01f60),CompEntry(0x00314, 0x01f61),CompEntry(0x00342, 0x01ff6),CompEntry(0x00345, 0x01ff3),CompEntry(0x00300, 0x01fd2),CompEntry(0x00301, 0x00390),CompEntry(0x00342, 0x01fd7),CompEntry(0x00300, 0x01fe2),CompEntry(0x00301, 0x003b0),CompEntry(0x00342, 0x01fe7),CompEntry(0x00345, 0x01ff4),CompEntry(0x00301, 0x003d3),CompEntry(0x00308, 0x003d4),CompEntry(0x00308, 0x00407),CompEntry(0x00306, 0x004d0),CompEntry(0x00308, 0x004d2),CompEntry(0x00301, 0x00403),CompEntry(0x00300, 0x00400),CompEntry(0x00306, 0x004d6),CompEntry(0x00308, 0x00401),CompEntry(0x00306, 0x004c1),CompEntry(0x00308, 0x004dc),CompEntry(0x00308, 0x004de),CompEntry(0x00300, 0x0040d),CompEntry(0x00304, 0x004e2),CompEntry(0x00306, 0x00419),CompEntry(0x00308, 0x004e4),CompEntry(0x00301, 0x0040c),CompEntry(0x00308, 0x004e6),CompEntry(0x00304, 0x004ee),CompEntry(0x00306, 0x0040e),CompEntry(0x00308, 0x004f0),CompEntry(0x0030b, 0x004f2),CompEntry(0x00308, 0x004f4),CompEntry(0x00308, 0x004f8),CompEntry(0x00308, 0x004ec),CompEntry(0x00306, 0x004d1),CompEntry(0x00308, 0x004d3),CompEntry(0x00301, 0x00453),CompEntry(0x00300, 0x00450),CompEntry(0x00306, 0x004d7),CompEntry(0x00308, 0x00451),CompEntry(0x00306, 0x004c2),CompEntry(0x00308, 0x004dd),CompEntry(0x00308, 0x004df),CompEntry(0x00300, 0x0045d),CompEntry(0x00304, 0x004e3),CompEntry(0x00306, 0x00439),CompEntry(0x00308, 0x004e5),CompEntry(0x00301, 0x0045c),CompEntry(0x00308, 0x004e7),CompEntry(0x00304, 0x004ef),CompEntry(0x00306, 0x0045e),CompEntry(0x00308, 0x004f1),CompEntry(0x0030b, 0x004f3),CompEntry(0x00308, 0x004f5),CompEntry(0x00308, 0x004f9),CompEntry(0x00308, 0x004ed),CompEntry(0x00308, 0x00457),CompEntry(0x0030f, 0x00476),CompEntry(0x0030f, 0x00477),CompEntry(0x00308, 0x004da),CompEntry(0x00308, 0x004db),CompEntry(0x00308, 0x004ea),CompEntry(0x00308, 0x004eb),CompEntry(0x00653, 0x00622),CompEntry(0x00654, 0x00623),CompEntry(0x00655, 0x00625),CompEntry(0x00654, 0x00624),CompEntry(0x00654, 0x00626),CompEntry(0x00654, 0x006c2),CompEntry(0x00654, 0x006d3),CompEntry(0x00654, 0x006c0),CompEntry(0x0093c, 0x00929),CompEntry(0x0093c, 0x00931),CompEntry(0x0093c, 0x00934),CompEntry(0x009be, 0x009cb),CompEntry(0x009d7, 0x009cc),CompEntry(0x00b3e, 0x00b4b),CompEntry(0x00b56, 0x00b48),CompEntry(0x00b57, 0x00b4c),CompEntry(0x00bd7, 0x00b94),CompEntry(0x00bbe, 0x00bca),CompEntry(0x00bd7, 0x00bcc),CompEntry(0x00bbe, 0x00bcb),CompEntry(0x00c56, 0x00c48),CompEntry(0x00cd5, 0x00cc0),CompEntry(0x00cc2, 0x00cca),CompEntry(0x00cd5, 0x00cc7),CompEntry(0x00cd6, 0x00cc8),CompEntry(0x00cd5, 0x00ccb),CompEntry(0x00d3e, 0x00d4a),CompEntry(0x00d57, 0x00d4c),CompEntry(0x00d3e, 0x00d4b),CompEntry(0x00dca, 0x00dda),CompEntry(0x00dcf, 0x00ddc),CompEntry(0x00ddf, 0x00dde),CompEntry(0x00dca, 0x00ddd),CompEntry(0x0102e, 0x01026),CompEntry(0x01b35, 0x01b06),CompEntry(0x01b35, 0x01b08),CompEntry(0x01b35, 0x01b0a),CompEntry(0x01b35, 0x01b0c),CompEntry(0x01b35, 0x01b0e),CompEntry(0x01b35, 0x01b12),CompEntry(0x01b35, 0x01b3b),CompEntry(0x01b35, 0x01b3d),CompEntry(0x01b35, 0x01b40),CompEntry(0x01b35, 0x01b41),CompEntry(0x01b35, 0x01b43),CompEntry(0x00304, 0x01e38),CompEntry(0x00304, 0x01e39),CompEntry(0x00304, 0x01e5c),CompEntry(0x00304, 0x01e5d),CompEntry(0x00307, 0x01e68),CompEntry(0x00307, 0x01e69),CompEntry(0x00302, 0x01eac),CompEntry(0x00306, 0x01eb6),CompEntry(0x00302, 0x01ead),CompEntry(0x00306, 0x01eb7),CompEntry(0x00302, 0x01ec6),CompEntry(0x00302, 0x01ec7),CompEntry(0x00302, 0x01ed8),CompEntry(0x00302, 0x01ed9),CompEntry(0x00300, 0x01f02),CompEntry(0x00301, 0x01f04),CompEntry(0x00342, 0x01f06),CompEntry(0x00345, 0x01f80),CompEntry(0x00300, 0x01f03),CompEntry(0x00301, 0x01f05),CompEntry(0x00342, 0x01f07),CompEntry(0x00345, 0x01f81),CompEntry(0x00345, 0x01f82),CompEntry(0x00345, 0x01f83),CompEntry(0x00345, 0x01f84),CompEntry(0x00345, 0x01f85),CompEntry(0x00345, 0x01f86),CompEntry(0x00345, 0x01f87),CompEntry(0x00300, 0x01f0a),CompEntry(0x00301, 0x01f0c),CompEntry(0x00342, 0x01f0e),CompEntry(0x00345, 0x01f88),CompEntry(0x00300, 0x01f0b),CompEntry(0x00301, 0x01f0d),CompEntry(0x00342, 0x01f0f),CompEntry(0x00345, 0x01f89),CompEntry(0x00345, 0x01f8a),CompEntry(0x00345, 0x01f8b),CompEntry(0x00345, 0x01f8c),CompEntry(0x00345, 0x01f8d),CompEntry(0x00345, 0x01f8e),CompEntry(0x00345, 0x01f8f),CompEntry(0x00300, 0x01f12),CompEntry(0x00301, 0x01f14),CompEntry(0x00300, 0x01f13),CompEntry(0x00301, 0x01f15),CompEntry(0x00300, 0x01f1a),CompEntry(0x00301, 0x01f1c),CompEntry(0x00300, 0x01f1b),CompEntry(0x00301, 0x01f1d),CompEntry(0x00300, 0x01f22),CompEntry(0x00301, 0x01f24),CompEntry(0x00342, 0x01f26),CompEntry(0x00345, 0x01f90),CompEntry(0x00300, 0x01f23),CompEntry(0x00301, 0x01f25),CompEntry(0x00342, 0x01f27),CompEntry(0x00345, 0x01f91),CompEntry(0x00345, 0x01f92),CompEntry(0x00345, 0x01f93),CompEntry(0x00345, 0x01f94),CompEntry(0x00345, 0x01f95),CompEntry(0x00345, 0x01f96),CompEntry(0x00345, 0x01f97),CompEntry(0x00300, 0x01f2a),CompEntry(0x00301, 0x01f2c),CompEntry(0x00342, 0x01f2e),CompEntry(0x00345, 0x01f98),CompEntry(0x00300, 0x01f2b),CompEntry(0x00301, 0x01f2d),CompEntry(0x00342, 0x01f2f),CompEntry(0x00345, 0x01f99),CompEntry(0x00345, 0x01f9a),CompEntry(0x00345, 0x01f9b),CompEntry(0x00345, 0x01f9c),CompEntry(0x00345, 0x01f9d),CompEntry(0x00345, 0x01f9e),CompEntry(0x00345, 0x01f9f),CompEntry(0x00300, 0x01f32),CompEntry(0x00301, 0x01f34),CompEntry(0x00342, 0x01f36),CompEntry(0x00300, 0x01f33),CompEntry(0x00301, 0x01f35),CompEntry(0x00342, 0x01f37),CompEntry(0x00300, 0x01f3a),CompEntry(0x00301, 0x01f3c),CompEntry(0x00342, 0x01f3e),CompEntry(0x00300, 0x01f3b),CompEntry(0x00301, 0x01f3d),CompEntry(0x00342, 0x01f3f),CompEntry(0x00300, 0x01f42),CompEntry(0x00301, 0x01f44),CompEntry(0x00300, 0x01f43),CompEntry(0x00301, 0x01f45),CompEntry(0x00300, 0x01f4a),CompEntry(0x00301, 0x01f4c),CompEntry(0x00300, 0x01f4b),CompEntry(0x00301, 0x01f4d),CompEntry(0x00300, 0x01f52),CompEntry(0x00301, 0x01f54),CompEntry(0x00342, 0x01f56),CompEntry(0x00300, 0x01f53),CompEntry(0x00301, 0x01f55),CompEntry(0x00342, 0x01f57),CompEntry(0x00300, 0x01f5b),CompEntry(0x00301, 0x01f5d),CompEntry(0x00342, 0x01f5f),CompEntry(0x00300, 0x01f62),CompEntry(0x00301, 0x01f64),CompEntry(0x00342, 0x01f66),CompEntry(0x00345, 0x01fa0),CompEntry(0x00300, 0x01f63),CompEntry(0x00301, 0x01f65),CompEntry(0x00342, 0x01f67),CompEntry(0x00345, 0x01fa1),CompEntry(0x00345, 0x01fa2),CompEntry(0x00345, 0x01fa3),CompEntry(0x00345, 0x01fa4),CompEntry(0x00345, 0x01fa5),CompEntry(0x00345, 0x01fa6),CompEntry(0x00345, 0x01fa7),CompEntry(0x00300, 0x01f6a),CompEntry(0x00301, 0x01f6c),CompEntry(0x00342, 0x01f6e),CompEntry(0x00345, 0x01fa8),CompEntry(0x00300, 0x01f6b),CompEntry(0x00301, 0x01f6d),CompEntry(0x00342, 0x01f6f),CompEntry(0x00345, 0x01fa9),CompEntry(0x00345, 0x01faa),CompEntry(0x00345, 0x01fab),CompEntry(0x00345, 0x01fac),CompEntry(0x00345, 0x01fad),CompEntry(0x00345, 0x01fae),CompEntry(0x00345, 0x01faf),CompEntry(0x00345, 0x01fb2),CompEntry(0x00345, 0x01fc2),CompEntry(0x00345, 0x01ff2),CompEntry(0x00345, 0x01fb7),CompEntry(0x00300, 0x01fcd),CompEntry(0x00301, 0x01fce),CompEntry(0x00342, 0x01fcf),CompEntry(0x00345, 0x01fc7),CompEntry(0x00345, 0x01ff7),CompEntry(0x00300, 0x01fdd),CompEntry(0x00301, 0x01fde),CompEntry(0x00342, 0x01fdf),CompEntry(0x00338, 0x0219a),CompEntry(0x00338, 0x0219b),CompEntry(0x00338, 0x021ae),CompEntry(0x00338, 0x021cd),CompEntry(0x00338, 0x021cf),CompEntry(0x00338, 0x021ce),CompEntry(0x00338, 0x02204),CompEntry(0x00338, 0x02209),CompEntry(0x00338, 0x0220c),CompEntry(0x00338, 0x02224),CompEntry(0x00338, 0x02226),CompEntry(0x00338, 0x02241),CompEntry(0x00338, 0x02244),CompEntry(0x00338, 0x02247),CompEntry(0x00338, 0x02249),CompEntry(0x00338, 0x0226d),CompEntry(0x00338, 0x02262),CompEntry(0x00338, 0x02270),CompEntry(0x00338, 0x02271),CompEntry(0x00338, 0x02274),CompEntry(0x00338, 0x02275),CompEntry(0x00338, 0x02278),CompEntry(0x00338, 0x02279),CompEntry(0x00338, 0x02280),CompEntry(0x00338, 0x02281),CompEntry(0x00338, 0x022e0),CompEntry(0x00338, 0x022e1),CompEntry(0x00338, 0x02284),CompEntry(0x00338, 0x02285),CompEntry(0x00338, 0x02288),CompEntry(0x00338, 0x02289),CompEntry(0x00338, 0x022e2),CompEntry(0x00338, 0x022e3),CompEntry(0x00338, 0x022ac),CompEntry(0x00338, 0x022ad),CompEntry(0x00338, 0x022ae),CompEntry(0x00338, 0x022af),CompEntry(0x00338, 0x022ea),CompEntry(0x00338, 0x022eb),CompEntry(0x00338, 0x022ec),CompEntry(0x00338, 0x022ed),CompEntry(0x03099, 0x03094),CompEntry(0x03099, 0x0304c),CompEntry(0x03099, 0x0304e),CompEntry(0x03099, 0x03050),CompEntry(0x03099, 0x03052),CompEntry(0x03099, 0x03054),CompEntry(0x03099, 0x03056),CompEntry(0x03099, 0x03058),CompEntry(0x03099, 0x0305a),CompEntry(0x03099, 0x0305c),CompEntry(0x03099, 0x0305e),CompEntry(0x03099, 0x03060),CompEntry(0x03099, 0x03062),CompEntry(0x03099, 0x03065),CompEntry(0x03099, 0x03067),CompEntry(0x03099, 0x03069),CompEntry(0x03099, 0x03070),CompEntry(0x0309a, 0x03071),CompEntry(0x03099, 0x03073),CompEntry(0x0309a, 0x03074),CompEntry(0x03099, 0x03076),CompEntry(0x0309a, 0x03077),CompEntry(0x03099, 0x03079),CompEntry(0x0309a, 0x0307a),CompEntry(0x03099, 0x0307c),CompEntry(0x0309a, 0x0307d),CompEntry(0x03099, 0x0309e),CompEntry(0x03099, 0x030f4),CompEntry(0x03099, 0x030ac),CompEntry(0x03099, 0x030ae),CompEntry(0x03099, 0x030b0),CompEntry(0x03099, 0x030b2),CompEntry(0x03099, 0x030b4),CompEntry(0x03099, 0x030b6),CompEntry(0x03099, 0x030b8),CompEntry(0x03099, 0x030ba),CompEntry(0x03099, 0x030bc),CompEntry(0x03099, 0x030be),CompEntry(0x03099, 0x030c0),CompEntry(0x03099, 0x030c2),CompEntry(0x03099, 0x030c5),CompEntry(0x03099, 0x030c7),CompEntry(0x03099, 0x030c9),CompEntry(0x03099, 0x030d0),CompEntry(0x0309a, 0x030d1),CompEntry(0x03099, 0x030d3),CompEntry(0x0309a, 0x030d4),CompEntry(0x03099, 0x030d6),CompEntry(0x0309a, 0x030d7),CompEntry(0x03099, 0x030d9),CompEntry(0x0309a, 0x030da),CompEntry(0x03099, 0x030dc),CompEntry(0x0309a, 0x030dd),CompEntry(0x03099, 0x030f7),CompEntry(0x03099, 0x030f8),CompEntry(0x03099, 0x030f9),CompEntry(0x03099, 0x030fa),CompEntry(0x03099, 0x030fe),CompEntry(0x110ba, 0x1109a),CompEntry(0x110ba, 0x1109c),CompEntry(0x110ba, 0x110ab),CompEntry(0x11127, 0x1112e),CompEntry(0x11127, 0x1112f),];

    }
}
bool isFormatGen(dchar ch)
{
    if(ch < 8298)
    {
        if(ch < 1807)
        {
            if(ch < 1536)
            {
                if(ch == 173) return true;
                return false;
            }
            else if (ch < 1541) return true;
            else
            {
                if(ch == 1757) return true;
                return false;
            }
        }
        else if (ch < 1808) return true;
        else
        {
            if(ch < 8234)
            {
                if(ch < 8203) return false;
                if(ch < 8208) return true;
                return false;
            }
            else if (ch < 8239) return true;
            else
            {
                if(ch < 8288) return false;
                if(ch < 8293) return true;
                return false;
            }
        }
    }
    else if (ch < 8304) return true;
    else
    {
        if(ch < 119155)
        {
            if(ch < 65529)
            {
                if(ch == 65279) return true;
                return false;
            }
            else if (ch < 65532) return true;
            else
            {
                if(ch == 69821) return true;
                return false;
            }
        }
        else if (ch < 119163) return true;
        else
        {
            if(ch == 917505) return true;
            if(ch < 917536) return false;
            if(ch < 917632) return true;
            return false;
        }
    }
}

bool isControlGen(dchar ch)
{
    if(ch < 32) return true;
    if(ch < 127) return false;
    if(ch < 160) return true;
    return false;
}

bool isSpaceGen(dchar ch)
{
    if(ch < 160)
    {
        if(ch == 32) return true;
        return false;
    }
    else if (ch < 161) return true;
    else
    {
        if(ch < 8239)
        {
            if(ch < 6158)
            {
                if(ch == 5760) return true;
                return false;
            }
            else if (ch < 6159) return true;
            else
            {
                if(ch < 8192) return false;
                if(ch < 8203) return true;
                return false;
            }
        }
        else if (ch < 8240) return true;
        else
        {
            if(ch == 8287) return true;
            if(ch == 12288) return true;
            return false;
        }
    }
}

bool isWhiteGen(dchar ch)
{
    if(ch < 133)
    {
        if(ch < 9) return false;
        if(ch < 14) return true;
        if(ch == 32) return true;
        return false;
    }
    else if (ch < 134) return true;
    else
    {
        if(ch < 8232)
        {
            if(ch < 6158)
            {
                if(ch == 160) return true;
                if(ch == 5760) return true;
                return false;
            }
            else if (ch < 6159) return true;
            else
            {
                if(ch < 8192) return false;
                if(ch < 8203) return true;
                return false;
            }
        }
        else if (ch < 8234) return true;
        else
        {
            if(ch < 8287)
            {
                if(ch == 8239) return true;
                return false;
            }
            else if (ch < 8288) return true;
            else
            {
                if(ch == 12288) return true;
                return false;
            }
        }
    }
}

bool isHangL(dchar ch)
{
    if(ch < 4352) return false;
    if(ch < 4448) return true;
    if(ch < 43360) return false;
    if(ch < 43389) return true;
    return false;
}

bool isHangV(dchar ch)
{
    if(ch < 4448) return false;
    if(ch < 4520) return true;
    if(ch < 55216) return false;
    if(ch < 55239) return true;
    return false;
}

bool isHangT(dchar ch)
{
    if(ch < 4520) return false;
    if(ch < 4608) return true;
    if(ch < 55243) return false;
    if(ch < 55292) return true;
    return false;
}

