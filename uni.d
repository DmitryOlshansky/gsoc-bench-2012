// Written in the D programming language.

/++
    Functions which operate on Unicode characters.

    For functions which operate on ASCII characters and ignore Unicode
    characters, see $(LINK2 std_ascii.html, std.ascii).

    (Short introduction to come)

    Synopsis:
    ---
    unittest
    {
        import std.uni;
        //intialize codepoint sets using regex notation
        //$(D set) contains codepoints from both scripts.
        auto set = CodepointSet("[\p{Cyrilic}||\p{Armenian}]");
        auto ascii = CodepointSet("[\p{ASCII}]");
        auto currency = CodepointSet("[\p{Currency_Symbol}]");

        //easy set ops
        auto a = set & ascii;
        assert(a.empty); //as it has no intersection with ascii
        a = set | ascii;
        auto b = currency - a; //subtract all ASCII, cyrilic and armenian

        //some properties of codepoint sets
        assert(b.length == 46); //only 46 left per unicode 6.1
        assert(!b['$']);    //testing is not really fast but works

        //building lookup tables
        auto oneTrie = a.buildTrie!1; //1-level Trie lookup table
        assert(oneTrie['£']);
        //pick best trie level, and bind it as a functor
        auto cyrilicOrArmenian = set.buildLookup;
        import std.algorithm;
        auto balance = find!(cyrilicOrArmenian)("Hello ընկեր!");
        assert(balance == "ընկեր!");

        //Normalization
        string s = "Plain ascii (and not only), is always normalized!";
        assert(s is normalize(s));//same string
        string nonS = "eﬃcient?"); //ffi ligature
        auto nS = normalize(nonS);
        assert(nS == "efficient?");
        assert(nS != n);
        //to NFKD, if available
        asert(normalize!NFKD("2¹⁰") == "210");
    }
    ---

    References:
        $(WEB www.digitalmars.com/d/ascii-table.html, ASCII Table),
        $(WEB en.wikipedia.org/wiki/Unicode, Wikipedia),
        $(WEB www.unicode.org, The Unicode Consortium)

    Trademarks:
        Unicode(tm) is a trademark of Unicode, Inc.

    Macros:
        WIKI=Phobos/StdUni

    Copyright: Copyright 2000 -
    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).
    Authors:   $(WEB digitalmars.com, Walter Bright), Jonathan M Davis, and Kenji Hara
    Source:    $(PHOBOSSRC std/_uni.d)
  +/
module uni;

static import std.ascii;
import std.traits, std.range, std.algorithm, std.typecons,
    std.format, std.conv, std.typetuple;
import std.array; //@@BUG UFCS doesn't work with 'local' imports

enum dchar lineSep = '\u2028'; /// UTF line separator
enum dchar paraSep = '\u2029'; /// UTF paragraph separator

//debug = std_uni;

//debug(std_uni) import std.stdio;
import std.stdio;

private:

enum lastDchar = 0x10FFFF;

auto force(T, F)(F from)
	if(isIntegral!T && !is(T == F))
{
	assert(from <= T.max && from >= T.min);
	return cast(T)from;
}

auto force(T, F)(F from)
    if(is(T == F))
{
    return from;
}

//cheap algorithm grease ;)
auto adaptIntRange(T, F)(F[] src)
{
	static struct ConvertIntegers//@@@BUG when in the 9 hells will map be copyable again?!
	{
		private F[] data;

		@property T front()
		{
			return force!T(data.front);
		}

		void popFront(){ data.popFront(); }

		@property bool empty()const { return data.empty; }

		@property size_t length()const { return data.length; }

		auto opSlice(size_t s, size_t e)
		{
		    return ConvertIntegers(data[s..e]);
        }

        //doesn't work with slices @@@BUG 7097
        @property size_t opDollar(){   return data.length; }
	}
	return ConvertIntegers(src);
}

//repeat bit X times pattern in val assuming it's length is 'bits'
size_t replicateBits(size_t times, size_t bits)(size_t val)
{
    static if(times == 1)
        return val;
    else static if(times % 2)
        return (replicateBits!(times-1, bits)(val)<<bits) | val;
    else
        return replicateBits!(times/2, bits*2)(val<<bits | val);
}

unittest
{//for replicate
    size_t m = 0b111;
    foreach(i; TypeTuple!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    {
        assert(replicateBits!(i, 3)(m)+1 == (1<<(3*i)));
        //writefln("%2d:%32b", i, replicateBits!(i, 3)(m));
    }
}

//multiple arrays squashed into one memory block
struct MultiArray(Types...)
{
    this(size_t[] sizes...)
    {
        size_t full_size;
        foreach(i, v; Types)
        {
            full_size += spaceFor!(bitSizeOf!v)(sizes[i]);
            sz[i] = sizes[i];
            static if(i >= 1)
                offsets[i] = offsets[i-1] +
                    spaceFor!(bitSizeOf!(Types[i-1]))(sizes[i-1]);
        }

        storage = new size_t[full_size];
    }

    @property auto slice(size_t n)()inout
    {
        return packedArrayView!(Unpack!(Types[n]), bitSizeOf!(Types[n]))(raw_ptr!n[0..length!n()]);
    }

    @property size_t length(size_t n)()const{ return sz[n]; }

    @property void length(size_t n)(size_t new_size)
    {
        if(new_size > sz[n])
        {//extend
            size_t delta = (new_size - sz[n]);
            sz[n] += delta;
			delta = spaceFor!(bitSizeOf!(Types[n]))(delta);
            storage.length +=  delta;//extend space at end
            //raw_slice!x must follow resize as it could be moved!
            //next stmts move all data past this array, last-one-goes-first
            static if(n != dim-1)
            {
                auto start = raw_ptr!(n+1);
				//len includes delta
                size_t len = (storage.ptr+storage.length-start);

                copy(retro(start[0..len-delta])
                    , retro(start[delta..len]));

                start[0..delta] = 0;
                //offsets are used for raw_slice, ptr etc.
                foreach(i; n+1..dim)
                    offsets[i] += delta;
            }
        }
        else if(new_size < sz[n])
        {//shrink
            size_t delta = (sz[n] - new_size);
			sz[n] -= delta;
            delta = spaceFor!(bitSizeOf!(Types[n]))(delta);            
            //move all data past this array, forward direction
            static if(n != dim-1)
            {
                auto start = raw_ptr!(n+1);
                size_t len = storage.length;
                copy(start[delta..len]
                 , start[0..len-delta]);
                
                //adjust offsets last, they affect raw_slice
                foreach(i; n+1..dim)
                    offsets[i] -= delta;
            }
			storage.length -= delta;
        }
        //else - NOP
    }

	@property size_t bytes(size_t n=size_t.max)() const
	{
		static if(n == size_t.max)
			return storage.length*size_t.sizeof;
		else static if(n != Types.length-1)
			return (raw_ptr!(n+1)-raw_ptr!n)*size_t.sizeof;
		else
			return (storage.ptr+storage.length - raw_ptr!n)*size_t.sizeof;
	}

    void store(OutputRange)(OutputRange sink)
        if(isOutputRange!(OutputRange, ubyte))         
    {
        formattedWrite(sink, "[%( 0x%x, %)]", offsets[]);
        formattedWrite(sink, ", [%( 0x%x, %)]", sz[]);
        formattedWrite(sink, ", [%( 0x%x, %)]", storage);
    }
    
    static MultiArray fromRawArray(size_t[] raw_offsets, size_t[] raw_sizes, size_t[] data)
    {
        MultiArray tmp;
        tmp.offsets[] = raw_offsets[];
        tmp.sz[] = raw_sizes[];
        tmp.storage = data;
        return tmp;
    }
private:
    @property auto raw_ptr(size_t n)()inout
    {
        static if(n == 0)
            return storage.ptr;
        else
        {
            return storage.ptr+offsets[n];
        }
    }
    size_t[Types.length] offsets;//offset for level x
    size_t[Types.length] sz;//size of level x
    enum dim = Types.length;
    static bool needNotifyGc()
    {
        bool yes = false;
        foreach(v; staticMap!(hasIndirections, Types))
            yes = yes || v;
        return yes;
    }
    template Unpack(T)
    {
         //TODO: hackish! do proper pattern matching with BitPacked!(sz, T)
        static if(is(typeof(T.bitSize)) && is(T.entity) )
        {
            alias T.entity Unpack;
        }
        else
            alias T Unpack;
    }
    alias staticMap!(bitSizeOf, Types) bitWidth;
    enum indirections = needNotifyGc();
    size_t[] storage;
}

unittest
{
    // sizes are:
    //lvl0: 3, lvl1 : 2, lvl2: 1
    auto m = MultiArray!(int, ubyte, int)(3,2,1);

    static void check(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            assert(m.slice!(k)[i] == i+1, text("level:",i," : ",m.slice!(k)[0..n]));
    }

    static void checkB(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            assert(m.slice!(k)[i] == n-i, text("level:",i," : ",m.slice!(k)[0..n]));
    }

    static void fill(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            m.slice!(k)[i] = force!ubyte(i+1);
    }

    static void fillB(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            m.slice!(k)[i] = force!ubyte(n-i);
    }

    m.length!1 = 100;
    fill!1(m, 100);
    check!1(m, 100);

    m.length!0 = 220;
    fill!0(m, 220);
    check!1(m, 100);
    check!0(m, 220);

    m.length!2 = 17;
    fillB!2(m, 17);
    checkB!2(m, 17);
    check!0(m, 220);
    check!1(m, 100);

    m.length!2 = 33;
    checkB!2(m, 17);
    fillB!2(m, 33);
    checkB!2(m, 33);
    check!0(m, 220);
    check!1(m, 100);

    m.length!1 = 195;
    fillB!1(m, 195);
    checkB!1(m, 195);
    checkB!2(m, 33);
    check!0(m, 220);

    auto marr = MultiArray!(BitPacked!(4, uint), BitPacked!(6, uint))(20, 10);
    marr.length!0 = 15;
    marr.length!1 = 30;
    fill!1(marr, 30);
    fill!0(marr, 15);
    check!1(marr, 30);
    check!0(marr, 15);
}

unittest
{//more bitpacking tests
    alias MultiArray!(BitPacked!(3, size_t)
                , BitPacked!(4, size_t)
                , BitPacked!(3, size_t)
                , BitPacked!(6, size_t)
                , bool) Bitty;
    alias sliceBits!(13, 16).entity fn1;
    alias sliceBits!( 9, 13).entity fn2;
    alias sliceBits!( 6,  9).entity fn3;
    alias sliceBits!( 0,  6).entity fn4;
    static void check(size_t lvl, MA)(ref MA arr){
        for(size_t i = 0; i< arr.length!lvl; i++)
            assert(arr.slice!(lvl)[i] == i, text("Mismatch on lvl ", lvl, " idx ", i, " value: ", arr.slice!(lvl)[i]));
    }

    static void fillIdx(size_t lvl, MA)(ref MA arr){
        for(size_t i = 0; i< arr.length!lvl; i++)
            arr.slice!(lvl)[i] = i;
    }
    Bitty m1;
    
    m1.length!4 = 10;
    m1.length!3 = 2^^6;
    m1.length!2 = 2^^3;
    m1.length!1 = 2^^4;
    m1.length!0 = 2^^3;

    m1.length!4 = 2^^16;

    for(size_t i = 0; i< m1.length!4; i++)
        m1.slice!(4)[i] = i % 2;

    fillIdx!1(m1);
    check!1(m1);
    fillIdx!2(m1);
    check!2(m1);
    fillIdx!3(m1);
    check!3(m1);
    fillIdx!0(m1);
    check!0(m1);
    check!3(m1);
    check!2(m1);
    check!1(m1);
    for(size_t i=0; i < 2^^16; i++)
    {
        m1.slice!(4)[i] = i % 2;
        m1.slice!(0)[fn1(i)] = fn1(i);
        m1.slice!(1)[fn2(i)] = fn2(i);
        m1.slice!(2)[fn3(i)] = fn3(i);
        m1.slice!(3)[fn4(i)] = fn4(i);
    }
    for(size_t i=0; i < 2^^16; i++)
    {
        assert(m1.slice!(4)[i] == i % 2);
        assert(m1.slice!(0)[fn1(i)] == fn1(i));
        assert(m1.slice!(1)[fn2(i)] == fn2(i));
        assert(m1.slice!(2)[fn3(i)] == fn3(i));
        assert(m1.slice!(3)[fn4(i)] == fn4(i));
    }
}

size_t spaceFor(size_t bits)(size_t new_len)
{
    static if(bits > 8*size_t.sizeof)
    {
        static assert(bits % (size_t.sizeof*8) == 0);
        return new_len * bits/(8*size_t.sizeof);
    }
    else
    {
        enum factor = size_t.sizeof*8/bits;
        return (new_len+factor-1)/factor;
    }
}

//only per word packing, speed is more important
//doesn't own memory, only provides access
struct PackedArrayView(T, size_t bits)
{
    import core.bitop;
    this(inout(size_t)[] arr)inout
    {
        original = arr;
    }

    static if(bits % 8)
    {
        T opIndex(size_t idx)inout
        in
        {
            assert(idx/factor < original.length, text(idx/factor, " vs ", original.length));
        }
        body
        {        
            /*static if(bits == 1)
            {
                
                T t = cast(T)bt(original.ptr, idx);
                return t;
            }
            else*/
            {

                return cast(T)
                ((original[idx/factor] >> bits*(idx%factor))
                     & mask);       
            }
        }

        void opIndexAssign(T val, size_t idx)
        in
        {
            static if(isIntegral!T)
                assert(val <= mask, text("mask: ",mask, " bits: ", bits, "value:", val, " > ", mask));
        }
        body
        {
            /*static if(bits == 1)
            {
                val ? bts(original.ptr, idx) : btr(original.ptr, idx);
                assert(this[idx] == val);
            }
            else*/
            {
                size_t tgt_shift = bits*(idx%(factor));
                original[idx/factor] &= ~(mask<<tgt_shift);
                original[idx/factor] |= cast(size_t)val << tgt_shift;
            }
        }
    }
    else
    {//by byte granular type itself
        ref inout(T) opIndex(size_t idx)inout
        {
            return (cast(inout(T)*)original.ptr)[idx];
        }
    }

    void opSliceAssign(T val, size_t start, size_t end)
    {
        //rounded to factor granuarity
        /*size_t pad_start = (start+factor/2)/factor*factor;//rounded up
        size_t pad_end = end/factor*factor; //rounded down
        size_t i;
        for(i=start; i<pad_start; i++)
            this[i] = val;
        writeln("!!~!~!!");
        //all in between is x*factor elements
        if(pad_start != pad_end)
        {
            size_t repval = replicateBits!(factor, bits)(val);
            for(size_t j=i/factor; i<pad_end; i+=factor, j++)
                original[j] = repval;//so speed it up by factor
        }
        for(; i<end; i++)
            this[i] = val;*/
        for(size_t i=start; i<end; i++)
            this[i] = val;
    }

    auto opSlice(size_t from, size_t to)
    {
        return SliceOverIndexed!PackedArrayView(from, to, &this);
    }

    auto opSlice(){ return opSlice(0, length); }

    bool opEquals(T)(const ref T arr) const
    {
        if(length != arr.length)
           return false;
        for(size_t i=0;i<length; i++)
            if(this[i] != arr[i])
                return false;
        return true;
    }

    @property size_t length()const{ return original.length*factor; }

private:

    //factor - number of elements in one machine word
    enum factor = size_t.sizeof*8/bits, mask = 2^^bits-1;
    size_t[] original;
}


private struct SliceOverIndexed(T)
{
    auto opIndex(size_t idx)const
    in
    {
        assert(idx < to - from);
    }
    body
    {
        return arr.opIndex(from+idx);
    }

    void opIndexAssign(Item val, size_t idx)
    in
    {
        assert(idx < to - from);
    }
    body
    {
       (*arr)[from+idx] = val;
    }

    auto opSlice(size_t a, size_t b)
    {
        return SliceOverIndexed(from+a, from+b, arr);
    }

    void opSliceAssign(T)(T val, size_t start, size_t end)
    {
        return arr.opSliceAssign(val, start+from, end+from);
    }

    auto opSlice()
    {
        return opSlice(from, to);
    }

    @property size_t length()const{ return to-from;}

    @property bool empty()const { return from == to; }

    @property auto front()const { return (*arr)[from]; }

    @property void front(Item val) { (*arr)[from] = val; }

    @property auto back()const { return (*arr)[to-1]; }

    @property void back(Item val) { (*arr)[to-1] = val; }

    @property auto save() { return this; }

    void popFront() {   from++; }

    void popBack() {   to--; }

    bool opEquals(T)(const ref T arr) const
    {
        if(arr.length != length)
            return false;
        for(size_t i=0; i <length; i++)
            if(this[i] != arr[i])
                return false;
        return true;
    }
private:
    alias typeof(T.init[0]) Item;
     size_t from, to;
     T* arr;
}

private auto packedArrayView(T, size_t bits)(inout(size_t)[] arr)inout
{
    return inout(PackedArrayView!(T, bits))(arr);
}

/*
unittest
{
    size_t[] sample = new size_t[328];
    auto parr = packedArrayView!(uint, 7)(sample);
    foreach(i; 0..parr.length)
        parr[i] = i % 128;
    writefln("%(%x%)", sample);

    foreach(i; 0..parr.length)
        assert(parr[i] == i % 128, text(i, " vs ", parr[i]));

    auto parr2 = packedArrayView!(uint, 14)(sample);
    //re-viewing it as doubly sized is supported cleanly
    for(int i=0; i<parr2.length; i++)
        assert(parr2[i] == ((((2*i+1) % 128)<<7) | (2*i % 128)), text(i, " vs ", parr2[i]));
    equal(parr2[0..2],  [128, 384+2]);
}

*/
@safe:
//hope to see simillar stuff in public interface... once Allocators are out
//@@@BUG moveFront and friends? dunno, for now it's POD-only

@trusted size_t genericReplace(Policy=void, T, Range)
    (ref T dest, size_t from, size_t to, Range stuff)
{
    size_t delta = to - from;
    size_t stuff_end = from+stuff.length;
    if(stuff.length > delta)
    {//replace increases length
        delta = stuff.length - delta;//now, new is > old  by delta
        static if(is(Policy == void))
            dest.length = dest.length+delta;//@@@BUG lame @property
        else
            dest = Policy.realloc(dest, dest.length+delta);
        auto rem = copy(retro(dest[to..dest.length-delta])
             , retro(dest[to+delta..dest.length]));
        assert(rem.empty);
        copy(stuff, dest[from..stuff_end]);
    }
    else if(stuff.length == delta)
    {
        copy(stuff, dest[from..to]);
    }
    else
    {//replace decreases length by delta
        delta = delta - stuff.length;
        copy(stuff, dest[from..stuff_end]);
        auto rem =  copy(dest[to..dest.length]
             , dest[stuff_end..dest.length-delta]);
        static if(is(Policy == void))
            dest.length = dest.length - delta;//@@@BUG lame @property
        else
            dest = Policy.realloc(dest, dest.length-delta);
        assert(rem.empty);
    }
    return stuff_end;
}

//Simple storage manipulation policy
//TODO: stop working around the bugs rorts them!
@trusted public struct GcPolicy
{
    static T[] dup(T)(const T[] arr)
    {
        return arr.dup;
    }

    static T[] realloc(T)(T[] arr, size_t sz)
    {
        arr.length = sz;
        return arr;
    }

    static void replaceImpl(T, Range)(ref T[] dest, size_t from, size_t to, Range stuff)
    {
        replaceInPlace(dest, from, to, stuff);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(!isInputRange!V)
    {
        arr ~= force!T(value);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(isInputRange!V)
    {
        insertInPlace(arr, arr.length, value);
    }

    static void destroy(T)(ref T arr)
        if(isDynamicArray!T && is(Unqual!T == T))
    {
        debug 
        {
            arr[] = cast(typeof(T.init[0]))(0xdead_beef); 
        }
    }

    static void destroy(T)(ref T arr)
        if(isDynamicArray!T && !is(Unqual!T == T))
    { /*NOP*/ }
}

//ditto
@trusted struct ReallocPolicy
{
    import std.exception, core.stdc.stdlib;
    static T[] dup(T)(const T[] arr)
    {
        auto result = alloc!T(arr.length);
        result[] = arr[];
        return result;
    }

    static T[] alloc(T)(size_t size)
    {
        auto ptr = cast(T*)enforce(malloc(T.sizeof*size), "out of memory on C heap");
        return ptr[0..size];
    }

    static T[] realloc(T)(T[] arr, size_t size)
    {
        if(!size)
        {
            destroy(arr);
            return null;
        }
        auto ptr = cast(T*)enforce(core.stdc.stdlib.realloc(
                             arr.ptr, T.sizeof*size), "out of memory on C heap");
        return ptr[0..size];
    }

    static void replaceImpl(T, Range)(ref T[] dest, size_t from, size_t to, Range stuff)
    {
        genericReplace!(ReallocPolicy)(dest, from, to, stuff);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(!isInputRange!V)
    {
        arr = realloc(arr, arr.length+1);
        arr[$-1] = force!T(value);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(isInputRange!V && hasLength!V)
    {
        arr = realloc(arr, arr.length+value.length);
        copy(value, arr[$-value.length..$]);
    }

    static void destroy(T)(ref T[] arr)
    {
        if(arr.ptr)
            free(arr.ptr);
        arr = null;
    }
}

unittest
{
    with(ReallocPolicy)
    {
        bool test(T, U, V)(T orig, size_t from, size_t to, U toReplace, V result,
                   string file = __FILE__, size_t line = __LINE__)
        {
            {
                replaceImpl(orig, from, to, toReplace);
                scope(exit) destroy(orig);
                if(!std.algorithm.equal(orig, result))
                    return false;
            }
            return true;
        }
        static T[] arr(T)(T[] args... )
        {
            return dup(args);
        }

        assert(test(arr([1, 2, 3, 4]), 0, 0, [5, 6, 7], [5, 6, 7, 1, 2, 3, 4]));
        assert(test(arr([1, 2, 3, 4]), 0, 2, cast(int[])[], [3, 4]));
        assert(test(arr([1, 2, 3, 4]), 0, 4, [5, 6, 7], [5, 6, 7]));
        assert(test(arr([1, 2, 3, 4]), 0, 2, [5, 6, 7], [5, 6, 7, 3, 4]));
        assert(test(arr([1, 2, 3, 4]), 2, 3, [5, 6, 7], [1, 2, 5, 6, 7, 4]));
    }
}

template isCodepointSet(T)
{
    enum isCodepointSet = is(typeof(T.init.isSet));
}

//bootstrap full set operations from 3 primitives:
//addInterval, skipUpTo, dropUpTo & byInterval iteration
mixin template BasicSetOps()
{
@trusted:
    alias typeof(this) This;
    /**
        $(P Sets support natural syntax for set algebra, namely:)
        $(BOOKTABLE
            $(TR $(TH Operator) $(TH Math notation) $(TH Description) )
            $(TR $(TD &) $(TD a ∩ b) $(TD intersection) )
            $(TR $(TD |) $(TD a ∪ b) $(TD union) )
            $(TR $(TD -) $(TD a ∖ b) $(TD subtraction) )
            $(TR $(TD ~) $(TD a ~ b) $(TD symmetric set difference i.e. (a ∪ b) \ (a ∩ b) ))
        )
    */
    const This opBinary(string op, U)(U rhs) 
        if(isCodepointSet!U || is(U:dchar))
    {
        static if(op == "&" || op == "|" || op == "~")
        {//symmetric ops thus can swap arguments to reuse r-value
            static if(is(U:dchar))
            {
                auto copy = this.dup;
                mixin("copy "~op~"= rhs; ");
                return copy;
            }
            else
            {
                static if(is(Unqual!U == U))
                {
                    //try hard to reuse r-value         
                    mixin("rhs "~op~"= this;");
                    return rhs;
                }
                else
                {
                    auto tmp = this.dup;
                    mixin("tmp "~op~"= rhs;");
                    return tmp;
                }
            }
        }
        else static if(op == "-")
        {
            auto copy = this.dup;
            copy -= rhs;
            return copy;
        }
        else
            static assert(0, "no operator "~op~" defined for Set");
    }

    bool opBinaryRight(string op, U)(U ch)
        if(op == "in" && is(U : dchar))
    {
        return this[ch];
    }

    ///The 'op=' versions of the above overloaded operators.
    ref This opOpAssign(string op, U)(in U rhs)
        if(isCodepointSet!U || is(U:dchar))
    {
        static if(op == "|")    //union
        {
            static if(is(U:dchar))
			{
                this.addInterval(rhs, rhs+1);
				return this;
			}
            else
                return this.add(rhs);
        }
        else static if(op == "&")   //intersection
                return this.intersect(rhs);//overloaded
        else static if(op == "-")   //set difference
                return this.sub(rhs);//overloaded
        else static if(op == "~")   //symmetric set difference
        {
            auto copy = this & rhs;
            this |= rhs;
            this -= copy;
            return this;
        }
        else
            static assert(0, "no operator "~op~" defined for Set");
    }

    ///Range that spans each codepoint in this set.
    @property auto byChar() const
    {
        static struct CharRange
        {
            this(in This set)
            {
                this.r = set.byInterval;
                cur = r.front.a;
            }

            @property dchar front() const
            {
                return cast(dchar)cur;
            }

            @property bool empty() const
            {
                return r.empty;
            }

            void popFront()
            {
                cur++;
                while(cur >= r.front.b)
                {
                    r.popFront();
                    if(r.empty)
                        break;
                    cur = r.front.a;
                }
            }
        private:
            uint cur;
            typeof(This.init.byInterval) r;
        }

        return CharRange(this);
    }

    /**
        $(P Obtain textual representation of this set in from of [a..b) intervals
        and feed it to $(D sink). )
        $(P Used by various standard formatting facilities such as
         $(XREF std._format, formattedWrite), $(D write), $(D writef) and others.
        )
    */
    void toString(scope void delegate (const(char)[]) sink)
    {
        import std.format;
        foreach(i; byInterval)
                formattedWrite(sink, "[%d..%d) ", i.a, i.b);
    }

	ref add()(uint a, uint b)
    {
        addInterval(a, b);
        return this;
    }
	enum isSet = true;
private:

    ref intersect(U)(in U rhs)
        if(isCodepointSet!U)
    {
        Marker mark;
        foreach( i; rhs.byInterval())
        {
            mark = this.dropUpTo(i.a, mark);
            mark = this.skipUpTo(i.b, mark);
        }
        this.dropUpTo(uint.max, mark);
        return this;
    }

    ref intersect()(dchar ch)
    {
        foreach(i; byInterval)
            if(i.a >= ch && ch < i.b)
                return this = This.init.add(ch, ch+1);
        this = This.init;
        return this;
    }

    ref sub()(dchar ch)
    {
        //workaround a BUG, somehow overload below doesn't survive if base class has sub(dchar)
        return subChar(ch);
    }

    //same as the above except that skip & drop parts are swapped
    ref sub(U)(in U rhs)
        if(isCodepointSet!U)
    {
        uint top;
        Marker mark;
        foreach(i; rhs.byInterval)
        {
            mark = this.skipUpTo(i.a, mark);
            mark = this.dropUpTo(i.b, mark);
        }
        return this;
    }

    ref add(U)(in U rhs)
        if(isCodepointSet!U)
    {
        Marker start;
        foreach(i; rhs.byInterval())
        {
            start = addInterval(i.a, i.b, start);
        }
        return this;
    }

};

///RleBitSet is ...
@trusted public struct RleBitSet(T, SP=GcPolicy)
    if(isUnsigned!T)
{
public:
	this(Set)(in Set set)
		if(isCodepointSet!Set)
	{
		size_t top=0;
		foreach(iv; set.byInterval)
		{
				appendPad(data, iv.a - top);
				appendPad(data, iv.b - iv.a);
				top = iv.b;
		}
	}

    this()(in uint[] intervals...) //@@@BUG text is not safe yet?!
    in
    {
        assert(intervals.length % 2 == 0, "Odd number of interval bounds [a, b)!");
        for(uint i=1; i<intervals.length; i++)
            assert(intervals[i-1] < intervals[i]
                   , text(intervals[i-1], ">", intervals[i], " in set c-tor"));
    }
    body
    {
        size_t top=0;
        for(size_t i = 0;  i < intervals.length; i+=2)
        {
            appendPad(data, intervals[i] - top);
            appendPad(data, intervals[i+1] - intervals[i]);
            top = intervals[i+1];
        }
    }

    this(this) 
    {//TODO: COW
        data = SP.dup(data);
    }

    static if(is(SP == ReallocPolicy))
        const ~this() 
        {
            SP.destroy(data);
        }

    ///Make a mutable copy of this set.
    @property auto dup() const
    {
        RleBitSet s;
        s.data = SP.dup(data);
        return s;
    }

    @property auto byInterval() const
    {
        import std.typecons;
        static struct IntervalRange
        {
            this(in RleBitSet set_)
            {
                data = set_.data;
                popFront();
            }

            uint step(ref uint idx, uint value)
            {
                static if(T.sizeof == 4)
                {
                    value += data[idx];
                    idx++;
                }
                else
                {
                    value += data[idx];
                    while(idx+1 < data.length && data[idx+1] == 0)
                    {
                        assert(idx+2 < data.length);
                        value += data[idx+2];
                        idx += 2;
                    }
                    idx++;
                }
                return value;
            }

            @property auto front() const
            {
                return Tuple!(uint,"a", uint,"b")(a, b);
            }

            @property bool empty() const
            {
                return data == null;
            }

            void popFront()
            {
                if(idx == data.length)
                {
                    data = null;
                    return;
                }
                a = step(idx, b);
                b = step(idx, a);
            }

            uint a, b, idx;
            const(T)[] data;
        }

        return IntervalRange(this);
    }

    bool equal(U,SP)(const ref RleBitSet!(U,SP) rhs) const
    {
        static if(T.sizeof == 4 && U.sizeof == 4)//short-circuit full versions
            return repr == rhs.repr;
        else
        {
            uint top=0, rtop=0, idx=0, ridx=0;
            while(idx < data.length && ridx < rhs.data.length)
            {
                top += data[idx];
                rtop += rhs.data[ridx];
                while(rtop != top)
                {
                    //check for ... x 0 y "prolong" sequence
                    if(ridx + 1 < rhs.data.length && rhs.data[ridx+1] == 0)
                    {
                        //OK rhs has extra segment
                        assert(ridx+2 < rhs.data.length); // 0 at the end is an error
                        rtop += rhs.data[ridx+2];
                        ridx += 2;
                    }
                    else if(idx + 1 < data.length && data[idx+1] == 0)
                    {
                        assert(idx+2 < data.length); // ditto at end
                        top += data[idx+2];
                        idx += 2;
                    }
                    else
                        return false;
                }
                idx++;
                ridx++;
            }
            if(idx == data.length)
            {
                if(ridx == rhs.data.length)
                    return true;
                //check overlong sequence
                rtop += rhs.data[ridx];
                while(rtop != top)
                    if(ridx + 1 < rhs.data.length && rhs.data[ridx+1] == 0)
                    {
                        //rhs has extra segment
                        assert(ridx+2 < rhs.data.length); // 0 at the end is an error
                        rtop += rhs.data[ridx+2];
                        ridx += 2;
                    }
                    else
                        return false;
            }
            else
            {
                if(idx == data.length)
                    return true;
                //check overlong sequence
                top += data[idx];
                while(rtop != top)
                    if(idx + 1 < data.length && data[idx+1] == 0)
                    {
                        //rhs has extra segment
                        assert(idx+2 < data.length); // 0 at the end is an error
                        top += data[idx+2];
                        idx += 2;
                    }
                    else
                        return false;
            }
            return idx == data.length && ridx == rhs.data.length;
        }
    }

    bool opEquals(U,SP)(const ref RleBitSet!(U,SP) rhs) const
        if(isUnsigned!U)
    {
        return this.equal(rhs);
    }

    bool opEquals(U,SP)(in RleBitSet!(U,SP) rhs) const
        if(isUnsigned!U)
    {
        return this.equal(rhs);
    }

    bool opIndex(uint val)const
    {
        foreach(i; byInterval)
            if(val < i.b)
                return val >= i.a;
        return false;
    }

	@property size_t size()const
	{
		size_t sum = 0 ;
		for(size_t i=0; i<data.length; i+=2)
			sum += data[i+1];//sum up positive intervals
		return sum;
	}

	ref invert()
	{
		//TODO: implement inversion
		return this;
	}

	@property bool empty()const
	{
		return data.length == 0;
	}

    void store(OutputRange)(scope OutputRange sink) const
        if(isOutputRange!(OutputRange, T))
    {
        foreach(v; data)
            put(sink, v);
    }

    @safe @property size_t bytes() pure const nothrow 
    {
        return data.length*T.sizeof;
    }

    mixin BasicSetOps;
private:
    static if(is(SP == GcPolicy))
        static RleBitSet fromRawArray(T[] input) @trusted pure nothrow
        {//assumes it's a GC-ed slice
            RleBitSet set=void;    
            set.data = input;
            return set;        
        }
    
    struct Marker//denotes position in RleBitSet
    {
        uint idx;
        uint top_before_idx;
    };

    //Think of it as of RLE compressed bit-array
    //data holds _lengths_ of intervals
    //first value is a length of negative portion, second interval is positive,
    //3rd is negative etc. (length can be zero e.g. if interval contains 0 like [\x00-\x7f])
    T[] data;

    static void appendPad(ref T[] dest, size_t val)
    {
        while(val > T.max)
        {//should be somewhat rare(!)
            val -= T.max;
            SP.append(dest, adaptIntRange!T([T.max, 0]));
        }
        SP.append(dest, val);
    }

    static size_t replacePad(ref T[] dest, size_t from, size_t to, uint[] to_insert)
    {
        static if(T.sizeof == 4)//short-circuit to optimal version
        {
            SP.replaceImpl(dest, from, to, to_insert);
            return from+to_insert.length-1;
        }
        else
        {
            T[] scratch_space;
            size_t s=0;
            foreach(i, v; to_insert)
                if(v > T.max)
                {
                    SP.append(scratch_space, adaptIntRange!T(to_insert[s..i]));
                    appendPad(scratch_space, v);
                    s = i+1;
                }

            if(s == 0)
            {
                SP.replaceImpl(dest, from, to, adaptIntRange!T(to_insert)); // short-circuit #2
                return from+to_insert.length-1;
            }
            else
            {// some of (T.max, 0) ended up there
                SP.append(scratch_space, adaptIntRange!T(to_insert[s..$]));
                SP.replaceImpl(dest, from, to, scratch_space);
                SP.destroy(scratch_space);
                return from+scratch_space.length-1;
            }
        }
    }

    @property const(T)[] repr() const{ return data; }

    //special case for RLE set
    ref subChar(dchar ch)
    {
        Marker mark;
        mark = skipUpTo(ch, mark);
        if(mark.top_before_idx == ch && mark.idx+1 != data.length)
        {
            data[mark.idx+1] -= 1;
            data[mark.idx] += 1;
            assert(data[mark.idx] == 1);
        }
        return this;
    }

    //returns last point of insertion (idx,  top_value right before idx),
    // so that top += data[idx] on first iteration  gives top of idx
    Marker addInterval(uint a, uint b, Marker mark=Marker.init)
    in
    {
        assert(a <= b);
    }
    body
    {
        uint hint = mark.idx, hint_top_before=mark.top_before_idx;
        static if(T.sizeof != 4)
            if(a == b)//empty interval, happens often with ushort/ubyte lists
                return Marker(hint, hint_top_before);
        uint top=hint_top_before, idx, a_start, a_idx;
        debug(std_uni)
        {
            scope(exit){
                writefln("after adding (%d, %d):", a, b);
                toString((x){ write(x); });
            }
        }
        uint pos, pre_top;//marker that indicates place of insertion
        assert(a >= top, text(a, "<=", top));
        for(idx=hint; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
            {
                assert(top >=  data[idx]);
                a_start = top - data[idx];
                assert(a_start <= a);
                a_idx = idx;
                break;
            }
        }

        if(idx == data.length)
        {
            //  [---+++----++++----++++++]
            //  [                         a  b]
            static if(T.sizeof < 4)
            {
               appendPad(data, a - top);
               appendPad(data, b - a);
            }
            else
                SP.append(data, adaptIntRange!T([a - top, b - a]));

            return Marker(cast(uint)data.length-1, b - data[$-1]);
        }

        top -= data[idx];
        for(; idx<data.length;idx++)
        {
            top += data[idx];
            if(b <= top)
                break;
        }

        debug(std_uni)
        {
            writefln("a_start=%d; a_idx=%d; idx=%d;", a_start, a_idx, idx);
            writefln("a=%s; b=%s; top=%s; a_start=%s;", a, b, top, a_start);
        }

        uint[] to_insert;
        if(idx == data.length)
        {
            //  [-------++++++++----++++++-]
            //  [      s     a                 b]
            if(a_idx & 1)//a in positive
            {
                to_insert = [ b - a_start ];
            }
            else// a in negative
            {
                to_insert = [ a - a_start, b - a];
            }
            pos = cast(uint)replacePad(data, a_idx, idx, to_insert);
            pre_top = b - data[pos];
            return Marker(cast(uint)pos, pre_top) ; //bail out early
        }

        if(a_idx & 1)
        {//a in positive
            if(idx & 1)//b in positive
            {
                //  [-------++++++++----++++++-]
                //  [       s    a        b    ]
                to_insert = [top - a_start];
            }
            else //b in negative
            {
                //  [-------++++++++----++++++-]
                //  [       s    a   b         ]
                if(top == b)
                {
                    assert(idx+1 < data.length);
                    pre_top = b + data[idx+1];
                    pos = cast(uint)replacePad(data, a_idx, idx+2, [b + data[idx+1] - a_start]);
                    pre_top -= data[pos];
                    return Marker(cast(uint)pos, pre_top);
                }
                to_insert = [b - a_start, top - b];
            }
        }
        else
        { // a in negative
            if(idx & 1) //b in positive
            {
                //  [----------+++++----++++++-]
                //  [     a     b              ]
                to_insert = [a - a_start, top - a];
            }
            else// b in negative
            {
                //  [----------+++++----++++++-]
                //  [  a       s      b        ]
                if(top == b)
                {
                    assert(idx+1 < data.length);
                    pre_top = top + data[idx+1];
                    pos = cast(uint)replacePad(data, a_idx, idx+2, [a - a_start, top + data[idx+1] - a ]);
                    pre_top -= data[pos];
                    return Marker(cast(uint)pos, pre_top);
                }
                assert(a >= a_start, text(a, "<= ", a_start));
                to_insert = [a - a_start, b - a, top - b];
            }
        }
        pos = cast(uint)replacePad(data, a_idx, idx+1, to_insert);
        pre_top = top - data[pos];
        debug(std_uni)
        {
            writefln("marker idx: %d; length=%d", pos, pre_top, data.length);
            writeln("inserting ", to_insert);
        }
        return Marker(cast(uint)pos, pre_top);
    }

    //remove intervals up to [..a) staring at Marker(idx, top_before)
    Marker dropUpTo(uint a, Marker mark=Marker.init)
    {
        uint start_idx = mark.idx, top_before = mark.top_before_idx;
        uint top=top_before, idx=start_idx;
        uint pos, pre_top;//marker that indicates place of insertion
        assert(idx % 2 == 0); //can't start in positive interval,
        //though negative interval can be of length zero
        for(; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
                break;
        }
        if(idx >= data.length)
        {
            //nothing left
            SP.replaceImpl(data, start_idx, data.length, cast(T[])[]);
            return Marker(cast(uint)data.length, top);
        }

        if(idx & 1)
        {   //a in positive
            //[--+++----++++++----+++++++------...]
            //      |<---si       s  a  t
            uint start = top - data[idx];
            if(top == a)//glue two negative intervals
            {
                // for negative stuff, idx can be equal data.length-1
                if(idx + 1 == data.length)
                {
                    replacePad(data, start_idx, data.length, []);
                    return Marker(cast(uint)data.length, top);
                }
                replacePad(data, start_idx, idx+2, [top + data[idx+1] - top_before]);
                return Marker(start_idx, top_before);
            }
            replacePad(data, start_idx, idx+1, [a - top_before, top - a]);
        }
        else
        {   //a in negative
            //[--+++----++++++----+++++++-------+++...]
            //      |<---si              s  a  t
            replacePad(data, start_idx, idx+1, [top - top_before]);
        }
        return Marker(start_idx, top_before);
    }

    //skip intervals up to ..a)
    Marker skipUpTo(uint a, Marker mark=Marker.init)
    out(result)
    {
        assert(result.idx % 2 == 0);//always negative intervals
        //(may be  0-width after-split)
    }
    body
    {
        uint start_idx = mark.idx, top_before = mark.top_before_idx;
        uint top=top_before, idx=start_idx;
        assert(data.length % 2 == 0);
        for(; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
                break;
        }
        if(idx >= data.length) //could have Marker point to recently removed stuff
            return Marker(cast(uint)data.length, top);

        if(idx & 1)//landed in positive, check for split
        {
            if(top == a)//no need to split, it's end
                return Marker(idx+1, top);
            uint start = top - data[idx];
            //split it up
            uint val = cast(uint)replacePad(data, idx, idx+1, [a - start, 0, top - a]);

            return Marker(val-1, top - (data[val]+data[val-1]));        //avoid odd index
        }
        return Marker(idx, top - data[idx]);
    }
};

/**
    $(D CodepointSet) is a packed data structure for sets of codepoints.
    Memory usage is 6 bytes per each contigous interval in a set.
*/
@trusted public struct InversionList(SP=GcPolicy)
{
	this(Set)(in Set set)
		if(is(typeof(Set.init.isSet)))
	{
		uint[] arr;
		foreach(v; set.byInterval)
		{
			arr ~= v.a;
			arr ~= v.b;
		}
		data = Uint24Array!(SP)(arr);
	}

    this()(uint[] intervals...)
    in
    {
        assert(intervals.length % 2 == 0, "Odd number of interval bounds [a, b)!");
        for(uint i=1; i<intervals.length; i++)
            assert(intervals[i-1] < intervals[i]);
    }
    body
    {
        data = Uint24Array!(SP)(intervals);
    }

    this(this)
    {//TODO: COW
        data = data.dup;
    }

    ///Make a mutable copy of this set.
    @property auto dup()const
    {
        InversionList s;
        s.data = data.dup;
        return s;
    }

    @property auto byInterval()const 
    {
        static struct Intervals
        {
            @property auto front()const
            {
                uint a = *cast(uint*)slice.ptr;
                uint b= *cast(uint*)(slice.ptr+1);
                //optimize a bit, since we go by even steps
                return Tuple!(uint, "a", uint, "b")(a & 0xFF_FFFF, b >> 8);
            }

            @property auto back()const
            {
                uint a = *cast(uint*)slice.ptr[len-2];
                uint b = *cast(uint*)slice.ptr[len-1];
                //optimize a bit, since we go by even steps
                return Tuple!(uint, "a", uint, "b")(a & 0xFF_FFFF, b >> 8);
            }

            void popFront()
            {
               len -= 2;
               slice = slice[3..$];//3*2 16bit == 2*24 bits
            }

            void popBack()
            {
                len -= 2;
                slice = slice[0..$-3];
            }

            @property bool empty()const { return len == 0; }

            @property auto save(){ return this; }
        private:
            const(ushort)[] slice;
            size_t len;
        }
        return Intervals(data.data, data.length);
    }

    bool opIndex(uint val)
    {
        return assumeSorted(data[]).lowerBound!(SearchPolicy.gallop)(val).length & 1;
    }

	///Number of characters in this set
	@property size_t size()
	{
		size_t sum = 0;
		foreach(iv; byInterval)
		{
			sum += iv.b - iv.a;
		}
		return sum;
	}

	///Do an in-place inversion of set.  See also '!' unary operator.
	ref invert()
	{
		if(data.length == 0)
		{
			addInterval(0, lastDchar+1);
			return this;
		}
		if(data[0] != 0)
			genericReplace(data, 0, 0, [0]);
		if(data[data.length-1] != lastDchar+1)
			genericReplace(data, data.length, data.length, [lastDchar+1]);

		return this;
	}

	@property bool empty() const
	{
		return data.length == 0;
	}

    mixin BasicSetOps;
private:
    alias typeof(this) This;
    alias size_t Marker;

    //special case for normal InversionList
    ref subChar(dchar ch)
    {
        auto mark = skipUpTo(ch);
        if(mark != data.length
            && data[mark] == ch && data[mark-1] == ch)
        {
            //it has split, meaning that ch happens to be in one of intervals
            data[mark] = data[mark]+1;
        }
        return this;
    }

    //
    Marker addInterval(int a, int b, Marker hint=Marker.init)
    in
    {
        assert(a <= b);
    }
    body
    {
        auto range = assumeSorted(data[]);
        size_t pos;
        size_t a_idx = range.lowerBound(a).length;
        if(a_idx == range.length)
        {
            //  [---+++----++++----++++++]
            //  [                         a  b]
            data.append([a, b]);
            return data.length-1;
        }
        size_t b_idx = range[a_idx..range.length].lowerBound(b).length+a_idx;
        uint[] to_insert;
        debug(std_uni)
        {
            writefln("a_idx=%d; b_idx=%d;", a_idx, b_idx);
        }
        if(b_idx == range.length)
        {
            //  [-------++++++++----++++++-]
            //  [      s     a                 b]
            if(a_idx & 1)//a in positive
            {
                to_insert = [ b ];
            }
            else// a in negative
            {
                to_insert = [a, b];
            }
            genericReplace(data, a_idx, b_idx, to_insert);
            return a_idx+to_insert.length-1;
        }

        uint top = data[b_idx];

        debug(std_uni)
        {
            writefln("a_idx=%d; b_idx=%d;", a_idx, b_idx);
            writefln("a=%s; b=%s; top=%s;", a, b, top);
        }
        if(a_idx & 1)
        {//a in positive
            if(b_idx & 1)//b in positive
            {
                //  [-------++++++++----++++++-]
                //  [       s    a        b    ]
                to_insert = [top];
            }
            else //b in negative
            {
                //  [-------++++++++----++++++-]
                //  [       s    a   b         ]
                if(top == b)
                {
                    assert(b_idx+1 < data.length);
                    pos = genericReplace(data, a_idx, b_idx+2, [data[b_idx+1]]);
                    return pos;
                }
                to_insert = [b, top ];
            }
        }
        else
        { // a in negative
            if(b_idx & 1) //b in positive
            {
                //  [----------+++++----++++++-]
                //  [     a     b              ]
                to_insert = [a, top];
            }
            else// b in negative
            {
                //  [----------+++++----++++++-]
                //  [  a       s      b        ]
                if(top == b)
                {
                    assert(b_idx+1 < data.length);
                    pos = genericReplace(data, a_idx, b_idx+2, [a, data[b_idx+1] ]);
                    return pos;
                }
                to_insert = [a, b, top];
            }
        }
        pos = genericReplace(data, a_idx, b_idx+1, to_insert);
        debug(std_uni)
        {
            writefln("marker idx: %d; length=%d", pos, data[pos], data.length);
            writeln("inserting ", to_insert);
        }
        return pos;
    }

    //
    Marker dropUpTo(uint a, Marker pos=Marker.init)
    in
    {
        assert(pos % 2 == 0); //at start of interval
    }
    body
    {
        auto range = assumeSorted!"a<=b"(data[pos..data.length]);
        if(range.empty)
            return pos;
        size_t idx = pos;
        idx += range.lowerBound(a).length;

        debug(std_uni)
        {
            writeln("dropUpTo full length=", data.length);
            writeln(pos,"~~~", idx);
        }
        if(idx == data.length)
            return genericReplace(data, pos, idx, cast(uint[])[]);
        if(idx & 1)
        {   //a in positive
            //[--+++----++++++----+++++++------...]
            //      |<---si       s  a  t
            genericReplace(data, pos, idx, [a]);
        }
        else
        {   //a in negative
            //[--+++----++++++----+++++++-------+++...]
            //      |<---si              s  a  t
            genericReplace(data, pos, idx, cast(uint[])[]);
        }
        return pos;
    }

    //
    Marker skipUpTo(uint a, Marker pos=Marker.init)
    out(result)
    {
        assert(result % 2 == 0);//always start of interval
        //(may be  0-width after-split)
    }
    body
    {
        assert(data.length % 2 == 0);
        auto range = assumeSorted!"a<=b"(data[pos..data.length]);
        size_t idx = pos+range.lowerBound(a).length;

        if(idx >= data.length) //could have Marker point to recently removed stuff
            return data.length;

        if(idx & 1)//inside of interval, check for split
        {

            uint top = data[idx];
            if(top == a)//no need to split, it's end
                return idx+1;
            uint start = data[idx-1];
            if(a == start)
                return idx-1;
            //split it up
            genericReplace(data, idx, idx+1, [a, a, top]);
            return idx+1;        //avoid odd index
        }
        return idx;
    }

    Uint24Array!SP data;
};

///Packed array of 24-bit integers.
@trusted struct Uint24Array(SP=GcPolicy)
{
    this(Range)(Range range)
        if(isInputRange!Range && hasLength!Range)
    {
        length = range.length;
        copy(range, this[]);
    }

	this(Range)(Range range)
        if(isInputRange!Range &&  !hasLength!Range)
	{
		auto a = array(range); //TODO: use better things like appending to Uint24Array
		this(a);
	}

    this(this)
    {
        data = SP.dup(data);
    }

    ~this()
    {
        SP.destroy(data);
    }

    @property size_t length()const { return roundDiv(data.length*2, 3); }

    @property void length(size_t len)
    {
        data = SP.realloc(data, roundDiv(len*3,2));
    }

    ///Read 24-bit packed integer
    uint opIndex(size_t idx)const
    {
        uint* ptr = cast(uint*)(data.ptr+3*idx/2);
        version(LittleEndian)
            return idx & 1 ? *ptr >>8 : *ptr & 0xFF_FFFF;
        else version(BigEndian)
            return idx & 1 ? *ptr & 0xFF_FFFF : *ptr >>8;
    }

    ///Write 24-bit packed integer
    void opIndexAssign(uint val, size_t idx)
    in
    {
        assert(val <= 0xFF_FFFF);
    }
    body
    {
        uint* ptr = cast(uint*)(data.ptr+3*idx/2);
        version(LittleEndian)
        {
            *ptr = idx & 1 ? (val<<8) | (*ptr&0xFF)
                : val | (*ptr & 0xFF00_0000);
        }
        else version(BigEndian)
        {
            *ptr = idx & 1 ? val | (*ptr & 0xFF00_0000)
                : (val<<8) | (*ptr&0xFF);
        }
    }

    //
    auto opSlice(size_t from, size_t to)
    {
        return SliceOverIndexed!Uint24Array(from, to, &this);
    }
    //
    auto opSlice()
    {
        return opSlice(0, length);
    }

    @property auto dup() const
    {
        Uint24Array r;
        r.data = SP.dup(data);
        return r;
    }

    void append(Range)(Range range)
        if(isInputRange!Range && hasLength!Range)
    {
        size_t nl = length + range.length;
        length = nl;
        copy(range, this[nl-range.length..nl]);
    }

    bool opEquals(const ref Uint24Array rhs)const
    {
        return data[0..roundDiv(data.length*2,3)]
            == rhs.data[0..roundDiv(rhs.data.length*2,3)];
    }
private:
    static uint roundDiv(size_t src, uint div)
    {
        return cast(uint)(src + div/2)/div;
    }
    ushort[] data;
}

@trusted unittest//Uint24 tests //@@@BUG@@ iota is system ?!
{
    InversionList!GcPolicy val;
    foreach(Policy; TypeTuple!(GcPolicy, ReallocPolicy))
    {
        alias typeof(Uint24Array!Policy.init[]) Range;
        alias Uint24Array!Policy U24A;
        static assert(isForwardRange!Range);
        static assert(isBidirectionalRange!Range);
        static assert(isOutputRange!(Range, uint));
        static assert(isRandomAccessRange!(Range));

        auto arr = U24A([42u, 36, 100]);
        assert(arr[0] == 42);
        assert(arr[1] == 36);
        arr[0] = 72;
        arr[1] = 0xFE_FEFE;
        assert(arr[0] == 72);
        assert(arr[1] == 0xFE_FEFE);
        assert(arr[2] == 100);


        auto r2 = U24A(iota(0, 100));
        assert(equal(r2[], iota(0, 100)), text(r2[]));
        copy(iota(10, 170, 2), r2[10..90]);
        assert(equal(r2[], chain(iota(0, 10), iota(10, 170, 2), iota(90, 100)))
               , text(r2[]));
    }
}

version(unittest)
{

private alias TypeTuple!(InversionList!GcPolicy, InversionList!ReallocPolicy) AbsTypes;
private alias staticMap!(RleBitSet, TypeTuple!(ubyte, ushort,uint)) RleTypes;
private alias TypeTuple!(AbsTypes, RleTypes) AllSets;

}

@trusted unittest//core set primitives test
{
    foreach(CodeList; AllSets)
    {
        CodeList a;
        //"plug a hole" test
        a.add(10, 20).add(25, 30).add(15, 27);
        assert(a == CodeList(10, 30), text(a));

        auto x = CodeList.init;
        x.add(10, 20).add(30, 40).add(50, 60);

        a = x;
        a.add(20, 49);//[10, 49) [50, 60)
        assert(a == CodeList(10, 49, 50 ,60));

        a = x;
        a.add(20, 50);
        assert(a == CodeList(10, 60), text(a.byInterval));

        //simple unions, mostly edge effects
        x = CodeList.init;
        x.add(10, 20).add(40, 60);

        a = x;
        a.add(10, 25); //[10, 25) [40, 60)
        assert(a == CodeList(10, 25, 40, 60));

        a = x;
        a.add(5, 15); //[5, 20) [40, 60)
        assert(a == CodeList(5, 20, 40, 60));

        a = x;
        a.add(0, 10); // [0, 20) [40, 60)
        assert(a == CodeList(0, 20, 40, 60));

        a = x;
        a.add(0, 5); //prepand
        assert(a == CodeList(0, 5, 10, 20, 40, 60));

        a = x;
        a.add(5, 20);
        assert(a == CodeList(5, 20, 40, 60));

        a = x;
        a.add(3, 37);
        assert(a == CodeList(3, 37, 40, 60));

        a = x;
        a.add(37, 65);
        assert(a == CodeList(10, 20, 37, 65), text(a.byInterval));

        //some tests on helpers for set intersection
        x = CodeList.init.add(10, 20).add(40, 60).add(100, 120);
        a = x;

        auto m = a.skipUpTo(60);
        a.dropUpTo(110, m);
        assert(a == CodeList(10, 20, 40, 60, 110, 120), text(a.data[]));

        a = x;
        a.dropUpTo(100);
        assert(a == CodeList(100, 120), text(a.data[]));

        a = x;
        m = a.skipUpTo(50);
        a.dropUpTo(140, m);
        assert(a == CodeList(10, 20, 40, 50), text(a.data[]));
        a = x;
        a.dropUpTo(60);
        assert(a == CodeList(100, 120), text(a.data[]));
    }
}

unittest//constructors
{
    alias RleBitSet!ushort CodeList;
    auto a = CodeList(10, 25, 30, 45);
    assert(a.repr == [10, 15, 5, 15]);
}

@trusted unittest
{   //full set operations
    foreach(CodeList; AllSets)
    {
        CodeList a, b, c, d;

        //"plug a hole"
        a.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b.add(40, 60).add(80, 100).add(140, 150);
        c = a | b;
        d = b | a;
        assert(c == CodeList(20, 200), text(c));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(25, 45).add(65, 85).add(95,110).add(150, 210);
        c = a | b; //[20,45) [60, 85) [95, 140) [150, 210)
        d = b | a;
        assert(c == CodeList(20, 45, 60, 85, 95, 140, 150, 210), text(c));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(10, 20).add(30,100).add(145,200);
        c = a | b;//[10, 140) [145, 200)
        d = b | a;
        assert(c == CodeList(10, 140, 145, 200));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(0, 10).add(15, 100).add(10, 20).add(200, 220);
        c = a | b;//[0, 140) [150, 220)
        d = b | a;
        assert(c == CodeList(0, 140, 150, 220));
        assert(c == d, text(c," vs ", d));


        a = CodeList.init.add(20, 40).add(60, 80);
        b = CodeList.init.add(25, 35).add(65, 75);
        c = a & b;
        d = b & a;
        assert(c == CodeList(25, 35, 65, 75), text(c));
        assert(c == d, text(c," vs ", d));

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(25, 35).add(65, 75).add(110, 130).add(160, 180);
        c = a & b;
        d = b & a;
        assert(c == CodeList(25, 35, 65, 75, 110, 130, 160, 180), text(c));
        assert(c == d, text(c," vs ", d));

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(10, 30).add(60, 120).add(135, 160);
        c = a & b;//[20, 30)[60, 80) [100, 120) [135, 140) [150, 160)
        d = b & a;

        assert(c == CodeList(20, 30, 60, 80, 100, 120, 135, 140, 150, 160),text(c));
        assert(c == d, text(c, " vs ",d));
        assert((c & a) == c);
        assert((d & b) == d);
        assert((c & d) == d);

        b = CodeList.init.add(40, 60).add(80, 100).add(140, 200);
        c = a & b;
        d = b & a;
        assert(c == CodeList(150, 200), text(c));
        assert(c == d, text(c, " vs ",d));
        assert((c & a) == c);
        assert((d & b) == d);
        assert((c & d) == d);

        assert((a & a) == a);
        assert((b & b) == b);

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(30, 60).add(75, 120).add(190, 300);
        c = a - b;// [30, 40) [60, 75) [120, 140) [150, 190)
        d = b - a;// [40, 60) [80, 100) [200, 300)
        assert(c == CodeList(20, 30, 60, 75, 120, 140, 150, 190), text(c));
        assert(d == CodeList(40, 60, 80, 100, 200, 300), text(d));
        assert(c - d == c, text(c-d, " vs ", c));
        assert(d - c == d, text(d-c, " vs ", d));
        assert(c - c == CodeList.init);
        assert(d - d == CodeList.init);

        a = CodeList.init.add(20, 40).add( 60, 80).add(100, 140).add(150,            200);
        b = CodeList.init.add(10,  50).add(60,                           160).add(190, 300);
        c = a - b;// [160, 190)
        d = b - a;// [10, 20) [40, 50) [80, 100) [140, 150) [200, 300)
        assert(c == CodeList(160, 190), text(c));
        assert(d == CodeList(10, 20, 40, 50, 80, 100, 140, 150, 200, 300), text(d));
        assert(c - d == c, text(c-d, " vs ", c));
        assert(d - c == d, text(d-c, " vs ", d));
        assert(c - c == CodeList.init);
        assert(d - d == CodeList.init);

        a = CodeList.init.add(20,    40).add(60, 80).add(100,      140).add(150,  200);
        b = CodeList.init.add(10, 30).add(45,         100).add(130,             190);
        c = a ~ b; // [10, 20) [30, 40) [45, 60) [80, 130) [140, 150) [190, 200)
        d = b ~ a;
        assert(c == CodeList(10, 20, 30, 40, 45, 60, 80, 130, 140, 150, 190, 200),
               text(c));
        assert(c == d, text(c, " vs ", d));
    }
}

private alias RleBitSet!ubyte uList;
private alias RleBitSet!ushort mList;
private alias RleBitSet!uint cList;

@system unittest// set operations and integer overflow ;)
{
    uList a, b, c, d;
    a = uList(20, 40, 100,      300, 400,     1200);
    b = uList(0,           260, 300,      600);
    assert(a.repr == [20, 20, 60, 200, 100, 255, 0, 255, 0, 255, 0, 35]);
    assert(b.repr == [0, 255, 0, 5, 40, 255, 0, 45]);
    c = a & b; //[20,40) [100, 260) [400, 600)
    d = b & a;
    auto e = uList(20, 40, 100, 260, 400, 600);
    assert(c == e, text(c, " vs ", e));
    assert(c == d, text(c, " vs ", d));
}

@system unittest// ditto
{
    foreach(i, List; TypeTuple!(mList, cList))
    {
        List a, b, c, d;
        a = List(    150,       450,    550,    750,    1000,  75_000);
        b = List(80,    220,       460,      700,   900,             150_000);
        c = a & b;
        d = a | b;
        assert(c == uList(150, 220, 550, 700, 1000, 75_000), text(c));
        assert(d == uList(80, 450,  460, 750, 900, 150_000), text(d));

        c = a - b;
        d = b - a;
        assert(c == mList(220, 450, 700, 750), text(c));
        assert(d == mList(80, 150,   460, 550, 900, 1000, 75_000, 150_000), text(d));
    }
}

//@@@BUG Error: safe function '__unittest13' cannot call system function 'opAssign' WTF?
@system unittest//even more set operations with BIG intervals
{
    foreach(List; TypeTuple!(mList, cList))
    {
        List a, b, c, d, e, f;
        a = List(10_000,         100_000,
                  1_000_000,                                           10_000_000);
        b = List(       50_000            ,150_000, 250_000 ,350_000,
                  900_000       ,2_300_000,  4_600_000 ,6_400_000, 8_000_000 ,12_000_000);
        c = a | b;
        d = a & b;
        assert(c == mList(10_000, 150_000, 250_000, 350_000, 900_000, 12_000_000));
        assert(d == cList(50_000, 100_000, 1_000_000, 2_300_000, 4_600_000, 6_400_000, 8_000_000, 10_000_000));

        c = a ~ b;
        d = b ~ a;
        assert(c == d);
        assert(c == uList(10_000, 50_000, 100_000, 150_000, 250_000, 350_000, 900_000, 1_000_000,
                       2_300_000, 4_600_000, 6_400_000, 8_000_000, 10_000_000, 12_000_000));

        c = a - b;
        d = b - a;

        assert(c == uList(10_000, 50_000, 2_300_000, 4_600_000, 6_400_000, 8_000_000));
        assert(d == mList(100_000, 150_000, 250_000, 350_000, 900_000, 1_000_000,
                       10_000_000, 12_000_000));
    }
}
@system:
unittest// vs single dchar
{
    mList a = mList(10, 100, 120, 200);
    assert(a - 'A' == uList(10, 65, 66, 100, 120, 200), text(a - 'A'));
    assert((a & 'B') == uList(66, 67));
}

unittest//iteration
{
    import std.typecons;
    auto arr = "ABCDEFGHIJKLMabcdefghijklm"d;
    auto a = mList('A','N','a', 'n');
    assert(equal(a.byInterval, [ tuple(cast(uint)'A', cast(uint)'N'), tuple(cast(uint)'a', cast(uint)'n')]), text(a.byInterval));

    assert(equal(a.byChar, arr), text(a.byChar));

    auto x = uList(100, 500, 600, 900, 1200, 1500);
    assert(equal(x.byInterval, [ tuple(100, 500), tuple(600, 900), tuple(1200, 1500)]), text(x.byInterval));
}

@trusted struct Trie(Value, Key, Prefix...)
    if(Prefix.length >= 1)
{
    static if(is(Value dummy : SetAsSlot!(U), U))
    {
        alias U V;
        enum type = TrieType.Set;
        static putValue(ref V cont, Key val)
        {
            cont.insert(val);
        }
    }
    else static if(is(Value dummy: MapAsSlot!(C, U, X), C, U, X))
    {//TODO: built-in AA are somehow sluggish and need GC addRoot (still not implemented)
        alias C V;
        alias U Item;
        static assert(is(X == Key));
        enum type = TrieType.Map;
        static putValue(Pair)(ref V cont, Pair val)
        {
            cont.insert(val);
        }
    }
    else
    {
        alias Value V;
        alias V Item;
        enum type = TrieType.Value;
        static putValue(ref V x, V val)
        {
            x = val;
        }
    }

    private size_t bootstrap(size_t[Prefix.length] idxs)
    {
        enum pageBits=Prefix[$-1].bitSize, pageSize = 1<<pageBits;
        size_t maxIdx = 1;
        foreach(v; Prefix)
            maxIdx *= 2^^v.bitSize;

        table = table(idxs);
        //one page per level is bootstrap minimum
        foreach(i; Sequence!(0, Prefix.length))
            table.length!i = (1<<Prefix[i].bitSize);
        return maxIdx;
    }

    static if(type == TrieType.Value)
    this()(Value[Key] hash, Value defvalue=Value.init)
    {
        ConstructState[Prefix.length] emptyFull;//empty page index, full page index
        size_t[Prefix.length] idxs;
        enum last = Prefix.length-1;
        size_t maxIdx = bootstrap(idxs);

        auto r = array(zip(hash.byValue, hash.byKey));
        alias GetComparators!(Prefix.length, cmpK0) Comps;
        multiSort!Comps(r);

        size_t j = 0;
        for(size_t i=0;i<r.length; i++)
        {
            size_t keyIdx = getIndex(r[i][1]);
            addValue!last(idxs, defvalue, emptyFull[], keyIdx - j);
            addValue!last(idxs, r[i][0], emptyFull[]);                
            j = keyIdx+1;
        }
        addValue!last(idxs, defvalue, emptyFull[], maxIdx-j);
    }

    static if(type == TrieType.Map)
    this()(Item[Key] hash)
    {
        ConstructState[Prefix.length] emptyFull;//empty page index, full page index
        size_t[Prefix.length] idxs;
        enum last = Prefix.length-1;
        size_t maxIdx = bootstrap(idxs);

        auto r = array(zip(hash.byValue, hash.byKey));
        alias GetComparators!(Prefix.length, cmpK0) Comps;
        multiSort!Comps(r);

        size_t j = 0;
        size_t prevKeyIdx = size_t.max;
        for(size_t i=0;i<r.length; i++)
        {
            size_t keyIdx = getIndex(r[i][1]);
            if(keyIdx != prevKeyIdx)
            {
                addValue!last(idxs, r.front.init, emptyFull[], keyIdx - j);
                addValue!last(idxs, r[i], emptyFull[]);                
                j = keyIdx+1;
                prevKeyIdx = keyIdx;
            }
            else
            {//duplicate keyIdx, quite possible with MapAsSlot
                idxs[last]--;
                addValue!last(idxs, r[i], emptyFull[]);
            }
        }
        addValue!last(idxs, r.front.init, emptyFull[], maxIdx-j);
    }

    ///Construct Trie from array of keys
    ///fills all possible keys with zeros in index
    this(Keys)(Keys keys)
        if(!is(typeof(Keys.init.isSet)) && !isAssociativeArray!Keys)
    {
        ConstructState[Prefix.length] emptyFull; //empty page index, full page index
        enum last = Prefix.length-1;
        enum pageBits=Prefix[$-1].bitSize, pageSize = 1<<pageBits;
        size_t maxIdx = 1;
        //maximum index is sizes of each level multiplied
        foreach(v; Prefix)
            maxIdx *= 2^^v.bitSize;

        size_t[Prefix.length] idxs;
        table = table(idxs);
        //one page per level is bootstrap minimum
        foreach(i; Sequence!(0, Prefix.length))
            table.length!i = (1<<Prefix[i].bitSize);

        {//don't pollute the ctor scope
            size_t j = 0;
            size_t prevKeyIdx = size_t.max;
            static if(isDynamicArray!Keys)
            {
                alias GetComparators!(Prefix.length, cmpK) Comps;
				static if(type == TrieType.Set || (type == TrieType.Value && is(V == bool)))
				{
	                multiSort!(Comps, SwapStrategy.unstable)
		                (keys);
				}
				else static if(is(Unqual!Keys  == V[]))
				{
					/* NOP */
					//we consider indexes to be presorted as need as index in array is treated as key
					//and value of elements is value
				}
				else
					static assert(0, "Unsupported type of array "~Keys.stringof~" for Trie of "~V.stringof);
                auto r = keys;
            }
            else
                static assert(false, "unsupported constructor for "~Keys.stringof);

            for(size_t i=0;i<r.length; i++)
            {
                size_t keyIdx = getIndex(r[i]);
                if(keyIdx != prevKeyIdx)
                {
                    static if(type == TrieType.Value && is(V == bool))
                    {
                        addValue!last(idxs, false, emptyFull[], keyIdx - j);
                        addValue!last(idxs, true, emptyFull[]);
                    }
					else
					{
                        addValue!last(idxs, r.front.init, emptyFull[], keyIdx - j);
                        addValue!last(idxs, r[i], emptyFull[]);
                    }
                    prevKeyIdx = keyIdx;
                    j = keyIdx+1;
                }
                else
                {//Set or map version can have "duplicate" slot keys
                     static if(type == TrieType.Set)
                     {
                        idxs[last]--;
                        addValue!last(idxs, r[i], emptyFull[]);
                     }
                }

            }
            static if(type == TrieType.Set)
                addValue!last(idxs, Key.init, emptyFull[], maxIdx-j);
            else
                addValue!last(idxs, false, emptyFull[], maxIdx-j);
        }
    }

    ///Construct boolean Trie from set.
    this(Set)(in Set set, Key maxKey=Key.max)
        if(is(typeof(Set.init.isSet)))
    {
        ConstructState[Prefix.length] emptyFull; //empty page index, full page index
        foreach(ref v; emptyFull)
            v = ConstructState(true, true, uint.max, uint.max);
        enum last = Prefix.length-1;
        enum pageBits=Prefix[$-1].bitSize, pageSize = 1<<pageBits;
        maxKey =((maxKey + pageSize-1)>>pageBits)<<pageBits;

        auto ivals = set.byInterval;
        size_t[Prefix.length] idxs;


        table = table(idxs);
        //one page per level is bootstrap minimum
        foreach(i; Sequence!(0, Prefix.length))
            table.length!i = (1<<Prefix[i].bitSize);

        {//don't pollute the ctor scope
            auto ptr = table.slice!(last);
            size_t i = 0;
            for(;;)
            {
                if(ivals.empty)
                    break;
                uint a = ivals.front.a, b = ivals.front.b;

                addValue!last(idxs, false, emptyFull[], a - i);
                i = a;
                assert(i <= maxKey, text("set has keys > maxKey in Trie c-tor: ", i, " vs ", maxKey));
                addValue!last(idxs, true, emptyFull[], b - i);
                i = b;

                ivals.popFront();
            }
            addValue!last(idxs, false, emptyFull[], maxKey - i);
        }
    }

    inout(V) opIndex(Key key) inout
    {
        size_t idx;
        alias Prefix p;
        idx = p[0].entity(key);
        foreach(i, v; p[0..$-1])
            idx = (table.slice!i[idx]<<p[i+1].bitSize) + p[i+1].entity(key);
        return table.slice!(p.length-1)[idx];
    }

    @property size_t bytes(size_t n=size_t.max)() const
    {
        return table.bytes!n;
    }

    @property size_t pages(size_t n)() const
    {
        return (bytes!n+2^^(Prefix[n].bitSize-1))
                /2^^Prefix[n].bitSize;
    }

    //needed for multisort to work
    static bool cmpK(size_t i)(Key a, Key b)
    {
        return Prefix[i].entity(a) < Prefix[i].entity(b);
    }

    //ditto
    static if(type == TrieType.Map || type==TrieType.Value)
    static bool cmpK0(size_t i)
        (const ref Tuple!(Item,Key) a, const ref Tuple!(Item, Key) b)
    {
        return Prefix[i].entity(a[1]) < Prefix[i].entity(b[1]);
    }

    void store(OutputRange)(scope OutputRange sink)
        if(isOutputRange!(OutputRange, ubyte))
    {
        table.store(sink);
    }

    static Trie fromRawArray(size_t[] raw_offs, size_t[] raw_sz, size_t[] raw_data)
    {
        Trie t;
        t.table = typeof(t.table).fromRawArray(raw_offs, raw_sz, raw_data);
        return t;
    }

private:
    struct ConstructState//used during creation of Trie
    {
        bool empty, full; //current page is empty? full?
        uint idx_empty, idx_full;
    }
    enum TrieType{ Value, Set, Map };
    //for multi-sort
    template GetComparators(size_t n, alias cmpFn)
    {
        static if(n > 0)
            alias TypeTuple!(GetComparators!(n-1, cmpFn), cmpFn!(n-1)) GetComparators;
        else
            alias TypeTuple!() GetComparators;
    }

    static size_t getIndex(Key key)//get "mapped" virtual integer index
    {
        alias Prefix p;
        size_t idx;
        foreach(i, v; p[0..$-1])
        {
            idx |= p[i].entity(key);
            idx <<= p[i+1].bitSize;
        }
        idx |= p[$-1].entity(key);
        return idx;
    }

    static arrayRepr(T)(T x)
    {
        if(x.length > 32)
        {
            return text(x[0..16],"~...~", x[x.length-16..x.length]);
        }
        else
            return text(x);
    }

    //true if page was allocated, false is it was mapped or not an end of page yet
    void addValue(size_t level, T)(size_t[] indices, T val, ConstructState[] emptyFull, size_t numVals=1)
    {
        enum pageSize = 1<<Prefix[level].bitSize;
        if(numVals == 0)
            return;
        do
        {
            //need to take pointer again, memory block  may move on resize
            auto ptr = table.slice!(level);
            static if(is(T : bool))
            {
                if(val)
                    emptyFull[level].empty = false;
                else
                    emptyFull[level].full = false;
            }
            if(numVals == 1)
            {
                static if(level == Prefix.length-1 && type != TrieType.Value)
                    putValue(ptr[indices[level]], val);
                else{// can incurr narrowing conversion
					assert(indices[level] < ptr.length);
                    ptr[indices[level]] = force!(typeof(ptr[indices[level]]))(val);
				}
                indices[level]++;
                numVals = 0;                
            }
            else
            {
                //where is the next page boundary
                size_t nextPB = (indices[level]+pageSize)/pageSize*pageSize;
                size_t j = indices[level];
                size_t n =  nextPB-j;//can fill right in this page
                if(numVals > n)
                    numVals -= n;
                else
                {
                    n = numVals;
                    numVals = 0;
                }
				static if(level < Prefix.length-1)
					assert(indices[level] <= 2^^Prefix[level+1].bitSize);
                static if(level == Prefix.length-1 && type != TrieType.Value)
                {
                    for(int i=0;i<n; i++)
                        putValue(ptr[j++], val);
                }
                else
                {
                    ptr[j..j+n]  = val;
                    j += n;
                }
                indices[level] = j;

            }
			//last level (i.e. topmost) has 1 "page" 
			//thus it need not to add a new page on upper level
            static if(level != 0)
            {
                alias typeof(table.slice!(level-1)[0]) NextIdx;
                NextIdx next_lvl_index;
                if(indices[level] % pageSize == 0)
                {
                    static if(is(T : bool))
                    {
                        if(emptyFull[level].empty)
                        {
                            if(emptyFull[level].idx_empty == uint.max)
                            {
                                emptyFull[level].idx_empty = cast(uint)(indices[level]/pageSize - 1);
                                goto L_allocate_page;
                            }
                            else
                            {
                                next_lvl_index = cast(NextIdx)emptyFull[level].idx_empty;
                                indices[level] -= pageSize;//it is a duplicate
                                goto L_know_index;
                            }
                        }                        
                    }
                    auto last = indices[level]-pageSize;
                    auto slice = ptr[indices[level] - pageSize..indices[level]];
                    size_t j;
                    for(j=0; j<last; j+=pageSize)
                    {                        
                        if(equal(ptr[j..j+pageSize], slice[0..pageSize]))
                        {
                            //get index to it, reuse ptr space for the next block
                            next_lvl_index = cast(NextIdx)(j/pageSize);
                            version(none)
                            {
                            writefln("LEVEL(%s) page maped idx: %s: 0..%s  ---> [%s..%s]"
                                    ,level
                                    ,indices[level-1], pageSize, j, j+pageSize);
                            writeln("LEVEL(", level
                                    , ") mapped page is: ", slice, ": ", arrayRepr(ptr[j..j+pageSize]));
                            writeln("LEVEL(", level
                                    , ") src page is :", ptr, ": ", arrayRepr(slice[0..pageSize]));
                            }
                            indices[level] -= pageSize; //reuse this page, it is duplicate
                            break;
                        }
                    }

                    if(j == last)
                    {                        	
                    L_allocate_page:	
                        next_lvl_index = cast(NextIdx)(indices[level]/pageSize - 1);	                    
                        //allocate next page
                        version(none)
                        {
                        writefln("LEVEL(%s) page allocated: %s"
                                 , level, arrayRepr(slice[0..pageSize]));
                        writefln("LEVEL(%s) index: %s ; page at this index %s"
                                 , level
                                 , next_lvl_index
                                 , arrayRepr(
                                     table.slice!(level)
                                      [pageSize*next_lvl_index..(next_lvl_index+1)*pageSize]
                                    ));
                        }
                        table.length!level = table.length!level + pageSize;
                    }
                    L_know_index:
                    static if(is(T : bool))
                    {
                        emptyFull[level].empty = true;
                        emptyFull[level].full = true;
                    }

                    addValue!(level-1)(indices, next_lvl_index, emptyFull);
                }
            }
        }
        while(numVals);
    }

    //last index is not stored in table, it is used as offset to values in a block.
    static if(is(V  == bool))//always pack bool
        MultiArray!(idxTypes!(Key, fullBitSize!(Prefix), Prefix[0..$]), BitPacked!(1, V)) table;
    else
        MultiArray!(idxTypes!(Key, fullBitSize!(Prefix), Prefix[0..$]), V) table;
}

template GetBitSlicing(size_t Top, Sizes...)
{
    static if(Sizes.length > 0)
        alias TypeTuple!(sliceBits!(Top - Sizes[0], Top)
            , GetBitSlicing!(Top - Sizes[0], Sizes[1..$])) GetBitSlicing;
    else
        alias TypeTuple!()  GetBitSlicing;
}

/**
    General Trie template warapper to simplify mapping unicode dchar
    to bool. 
*/
template CodepointTrie(Sizes...)
{
    alias Trie!(bool, dchar, GetBitSlicing!(21, Sizes)) CodepointTrie;
}

/**
    Wrapping T by SetAsSlot indicates that T should be considered
    as a set of values.
    When SetAsSlot!T is used as $(D Value) type, Trie will internally
    translate assignments/tests to insert & 'in' operator repspectively.
*/
public struct SetAsSlot(T){}

///Ditto for map of Key -> Value.
public struct MapAsSlot(T, Value, Key){}

/**
    Wrapper, provided to simplify definition
    of custom Trie data structures. Use it on a lambda to indicate that
    returned value always fits within $(D bits) of bits.
*/
public template assumeSize(size_t bits, alias Fn)
{
    enum bitSize = bits;
    alias Fn entity;
}

///indicates MultiArray to apply bit packing to this field
struct BitPacked(size_t sz, T) if(isIntegral!T || is(T:dchar))
{
    enum bitSize = sz;
    alias T entity;
}

template sliceBitsImpl(size_t from, size_t to)
{
    T sliceBitsImpl(T)(T x)
    out(result)
    {
        assert(result < (1<<to-from));
    }
    body
    {
        static assert(from < to);
        return (x >> from) & ((1<<(to-from))-1);
    }
}

///todo
public template sliceBits(size_t from, size_t to)
{
    alias assumeSize!(to-from, sliceBitsImpl!(from, to)) sliceBits;
}

uint low_8(uint x) { return x&0xFF; }
uint midlow_8(uint x){ return (x&0xFF00)>>8; }
alias assumeSize!(8, low_8) lo8;
alias assumeSize!(8, midlow_8) mlo8;

template Sequence(size_t start, size_t end)
{
    static if(start < end)
        alias TypeTuple!(start, Sequence!(start+1, end)) Sequence;
    else
        alias TypeTuple!() Sequence;
}

//---- TRIE TESTS ----
version(unittest)
private enum TokenKind : ubyte { //from DCT by Roman Boiko (Boost v1.0 licence)
        // token kind has not been initialized to a valid value
        Invalid = 0,

        // protection
        Package, Private, Protected, Public, // note: extern also specifies protection level

        // storage classes
        Extern, Abstract, Auto, Const, Deprecated, Enum, Final, Immutable, InOut, NoThrow, Override, Pure, Scope, Shared, Static, Synchronized, _GShared,

        // basic type names
        Bool, Char, UByte, Byte, WChar, UShort, Short, DChar, UInt, Int, ULong, Long, Float, Double, Real, CFloat, CDouble, CReal, IFloat, IDouble, IReal, Void,

        // other keywords
        Alias, Align, Asm, Assert, Body, Break, Case, Cast, Catch, Cent, Class, Continue, Debug, Default, Delegate, Delete, Do, Else, Export, False, Finally, ForEach_Reverse, ForEach, For, Function,
        GoTo, If, Import, Interface, Invariant, In, Is, Lazy, Macro, Mixin, Module, New, Null, Out, Pragma, Ref, Return, Struct, Super, Switch,
        Template, This, Throw, True, Try, TypeDef, TypeId, TypeOf, UCent, Union, UnitTest, Version, Volatile, While, With, _FILE_, _LINE_, _Thread, _Traits,

        // any identifier which is not a keyword
        Identifier,

        // literals
        StringLiteral, CharacterLiteral, IntegerLiteral, FloatLiteral,

        // punctuation

        // brackets
        LeftParen,          // (
        RightParen,         // )
        LeftBracket,        // [
        RightBracket,       // ]
        LeftCurly,          // {
        RightCurly,         // }

        // assignment operators
        Assign,             // =
        AmpersandAssign,    // &=
        TildeAssign,        // ~=
        SlashAssign,        // /=
        LeftShiftAssign,    // <<=
        MinusAssign,        // -=
        PercentAssign,      // %=
        StarAssign,         // *=
        OrAssign,           // |=
        PlusAssign,         // +=
        PowerAssign,        // ^^=
        RightShiftAssign,   // >>=
        URightShiftAssign,  // >>>=
        XorAssign,          // ^=

        // relational operators
        Eq,                 // ==
        NotEq,              // !=
        GreaterThan,        // >
        GreaterOrEq,        // >=
        LessThan,           // <
        LessEqOrGreater,    // <>=
        LessOrGreater,      // <>
        LessOrEq,           // <=
        UnordCompare,       // !<>=
        UnordGreaterOrEq,   // !<
        UnordLessOrEq,      // !>
        UnordOrEq,          // !<>
        UnordOrGreater,     // !<=
        UnordOrLess,        // !>=

        // shift operators
        LeftShift,          // <<
        RightShift,         // >>
        URightShift,        // >>>

        // other binary operators
        Power,              // ^^
        BoolAnd,            // &&
        BoolOr,             // ||
        BitOr,              // |
        BitXor,             // ^
        Percent,            // %
        Slash,              // /

        // operators which can be either unary or binary
        Star,               // * (multiply; pointer)
        Minus,              // -
        Plus,               // +
        Ampersand,          // & (address of; bitwise and)
        Tilde,              // ~ (concat; complement)

        // unary operators
        Bang,               // ! (not; actual compile time parameter)
        Decrement,          // --
        Increment,          // ++

        // other punctuation
        Dot,                // .
        Slice,              // ..
        Ellipsis,           // ...
        Lambda,             // =>
        Question,           // ?
        Comma,              // ,
        Semicolon,          // ;
        Colon,              // :
        Dollar,             // $
        Hash,               // #
        At,                 // @

        // other tokens

        SpecialToken, EndOfLine,
        // note: it is important that the following tokens are last, because column calculation depends on whether tab appears in token spelling
        WhiteSpace, ScriptLine, Comment, SpecialTokenSequence,
        // end of file is always inserted (at the end)
        // it corresponds to either of \0 or \1A, but is also inserted immediately after __EOF__ special token
        // spelling includes everything starting from frontIndex and till the physical end of file, and it may be ""
        // __EOF__ inside a comment, character or string literal is treated as string (unlike DMD, which treats it as EoF inside token strings and character literals)
        _EOF_
};

unittest
{
    static trieStats(TRIE)(TRIE t)
    {
        writeln("---TRIE FOOTPRINT STATS---");
        foreach(i; Sequence!(0, t.table.dim) )
        {
            writefln("lvl%s = %s bytes;  %s pages"
                     , i, t.bytes!i, t.pages!i);
        }
        writefln("TOTAL: %s bytes", t.bytes);
        debug(std_uni)
		{
			writeln("INDEX (excluding value level):");
			foreach(i; Sequence!(0, t.table.dim-1) )
				writeln(t.table.slice!(i)[0..t.table.length!i]);
		}
        writeln("---------------------------");
    }
    //@@@BUG link failure, lambdas not found by linker somehow (in case of trie2)
    //alias assumeSize!(8, function (uint x) { return x&0xFF; }) lo8;
    //alias assumeSize!(7, function (uint x) { return (x&0x7F00)>>8; }) next8;
    alias RleBitSet!ubyte Set;
    auto set = Set('A','Z','a','z');
    auto trie = Trie!(bool, uint, lo8)(set, 256);//simple bool array
    for(int a='a'; a<'z';a++)
        assert(trie[a]);
    for(int a='A'; a<'Z';a++)
        assert(trie[a]);
    for(int a=0; a<'A'; a++)
        assert(!trie[a]);
    for(int a ='Z'; a<'a'; a++)
        assert(!trie[a]);

    auto redundant2 = Set(1, 18, 256+2, 256+111, 512+1, 512+18,
                          768+2, 768+111);
    auto trie2 = Trie!(bool, uint, mlo8, lo8)(redundant2, 1024);
    trieStats(trie2);
    foreach(e; redundant2.byChar)
        assert(trie2[e], text(cast(uint)e, " - ", trie2[e]));
    foreach(i; 0..1024)
    {
        assert(trie2[i] == (i in redundant2));
    }
    trieStats(trie2);

    auto redundant3 = Set(
          2,    4,    6,    8,    16,
       2+16, 4+16, 16+6, 16+8, 16+16,
       2+32, 4+32, 32+6, 32+8,
      );

    enum max3 = 256;
    //sliceBits
    auto trie3 = Trie!(bool, uint
                       , sliceBits!(6,8)
                       , sliceBits!(4,6)
                       , sliceBits!(0,4)
                       )(redundant3, max3);
    trieStats(trie3);
    foreach(i; 0..max3)
        assert(trie3[i] == (i in redundant3), text(cast(uint)i));

    auto redundant4 = Set(
            10, 64, 64+10, 128, 128+10, 256, 256+10, 512,
            1000, 2000, 3000, 4000, 5000, 6000
        );
    enum max4 = 2^^16;
    auto trie4 = Trie!(bool, size_t
                       , sliceBits!(13, 16)
                       , sliceBits!(9, 13)
                       , sliceBits!(6, 9) 
                       , sliceBits!(0, 6)
                       )(redundant4, max4);
    foreach(i; 0..max4){		
        if(i in redundant4)
            assert(trie4[i], text(cast(uint)i));
	}
    trieStats(trie4);

    string[] redundantS = ["tea", "tackle", "teenage", "start", "stray"];
    auto strie = Trie!(bool, string, useItemAt!(0, char))(redundantS);
    //using first char only
    assert(strie["test"], text(strie["test"]));
    assert(!strie["aea"]);
    assert(strie["s"]);

    //A realistic example: keyword detector
    enum keywords = [
            "abstract",
            "alias",
            "align",
            "asm",
            "assert",
            "auto",
            "body",
            "bool",
            "break",
            "byte",
            "case",
            "cast",
            "catch",
            "cdouble",
            "cent",
            "cfloat",
            "char",
            "class",
            "const",
            "continue",
            "creal",
            "dchar",
            "debug",
            "default",
            "delegate",
            "delete",
            "deprecated",
            "do",
            "double",
            "else",
            "enum",
            "export",
            "extern",
            "false",
            "final",
            "finally",
            "float",
            "for",
            "foreach",
            "foreach_reverse",
            "function",
            "goto",
            "idouble",
            "if",
            "ifloat",
            "immutable",
            "import",
            "in",
            "inout",
            "int",
            "interface",
            "invariant",
            "ireal",
            "is",
            "lazy",
            "long",
            "macro",
            "mixin",
            "module",
            "new",
            "nothrow",
            "null",
            "out",
            "override",
            "package",
            "pragma",
            "private",
            "protected",
            "public",
            "pure",
            "real",
            "ref",
            "return",
            "scope",
            "shared",
            "short",
            "static",
            "struct",
            "super",
            "switch",
            "synchronized",
            "template",
            "this",
            "throw",
            "true",
            "try",
            "typedef",
            "typeid",
            "typeof",
            "ubyte",
            "ucent",
            "uint",
            "ulong",
            "union",
            "unittest",
            "ushort",
            "version",
            "void",
            "volatile",
            "wchar",
            "while",
            "with",
            "__FILE__",
            "__gshared",
            "__LINE__",
            "__thread",
            "__traits"
    ];

    //assumes T.init == empty, NG if T.init is a legal key
    struct SmallSet(size_t N, T)
    {
        T[N] items;
        void insert(T val)
        {
            int i;
            if(val == T.init)
                return;
            for(i=0;i<N; i++)
                if(items[i] == T.init)
                {
                    items[i] = val;
                    return;
                }
            throw new Exception(text("out of slots in ", this," on key=", val));
        }

        bool opBinaryRight(string op, T)(T key)
            if(op == "in")
        {
            return  items[].countUntil(key) != -1;
        }
    }

    struct SmallMap(size_t N, V, K)
    {
        void insert(Tuple!(V, K) t){ _set.insert(t); }

        V opBinaryRight(string op, T)(T key)
            if(op == "in")
        {
            auto idx = map!"a[1]"(_set.items[]).countUntil(key);
            return idx < 0 ? V.init : _set.items[idx][0];
        }
        private:
            SmallSet!(N, Tuple!(V, K)) _set;
    }

    static size_t useLength(T)(T[] arr)
    {
        return arr.length > 63 ? 0 : arr.length; //need max length, 64 - 6bits
    }

    enum k = bitSizeOf!(SmallSet!(2, string));

    auto keyTrie = Trie!(SetAsSlot!(SmallSet!(2,string))
                         , string
                         , assumeSize!(6, useLength)
                         , useItemAt!(0, char)
                         , useLastItem!(char))(keywords);
    foreach(key; keywords)
        assert( key in keyTrie[key], text(key, (cast (size_t[])keyTrie[key].items)));
    trieStats(keyTrie);
    auto keywordsMap = [
            "abstract" : TokenKind.Abstract,
            "alias" : TokenKind.Alias,
            "align" : TokenKind.Align,
            "asm" : TokenKind.Asm,
            "assert" : TokenKind.Assert,
            "auto" : TokenKind.Auto,
            "body" : TokenKind.Body,
            "bool" : TokenKind.Bool,
            "break" : TokenKind.Break,
            "byte" : TokenKind.Byte,
            "case" : TokenKind.Case,
            "cast" : TokenKind.Cast,
            "catch" : TokenKind.Catch,
            "cdouble" : TokenKind.CDouble,
            "cent" : TokenKind.Cent,
            "cfloat" : TokenKind.CFloat,
            "char" : TokenKind.Char,
            "class" : TokenKind.Class,
            "const" : TokenKind.Const,
            "continue" : TokenKind.Continue,
            "creal" : TokenKind.CReal,
            "dchar" : TokenKind.DChar,
            "debug" : TokenKind.Debug,
            "default" : TokenKind.Default,
            "delegate" : TokenKind.Delegate,
            "delete" : TokenKind.Delete,
            "deprecated" : TokenKind.Deprecated,
            "do" : TokenKind.Do,
            "double" : TokenKind.Double,
            "else" : TokenKind.Else,
            "enum" : TokenKind.Enum,
            "export" : TokenKind.Export,
            "extern" : TokenKind.Extern,
            "false" : TokenKind.False,
            "final" : TokenKind.Final,
            "finally" : TokenKind.Finally,
            "float" : TokenKind.Float,
            "for" : TokenKind.For,
            "foreach" : TokenKind.ForEach,
            "foreach_reverse" : TokenKind.ForEach_Reverse,
            "function" : TokenKind.Function,
            "goto" : TokenKind.GoTo,
            "idouble" : TokenKind.IDouble,
            "if" : TokenKind.If,
            "ifloat" : TokenKind.IFloat,
            "immutable" : TokenKind.Immutable,
            "import" : TokenKind.Import,
            "in" : TokenKind.In,
            "inout" : TokenKind.InOut,
            "int" : TokenKind.Int,
            "interface" : TokenKind.Interface,
            "invariant" : TokenKind.Invariant,
            "invariant" : TokenKind.Invariant,
            "ireal" : TokenKind.IReal,
            "is" : TokenKind.Is,
            "lazy" : TokenKind.Lazy,
            "long" : TokenKind.Long,
            "macro" : TokenKind.Macro,
            "mixin" : TokenKind.Mixin,
            "module" : TokenKind.Module,
            "new" : TokenKind.New,
            "nothrow" : TokenKind.NoThrow,
            "null" : TokenKind.Null,
            "out" : TokenKind.Out,
            "override" : TokenKind.Override,
            "package" : TokenKind.Package,
            "pragma" : TokenKind.Pragma,
            "private" : TokenKind.Private,
            "protected" : TokenKind.Protected,
            "public" : TokenKind.Public,
            "pure" : TokenKind.Pure,
            "real" : TokenKind.Real,
            "ref" : TokenKind.Ref,
            "return" : TokenKind.Return,
            "scope" : TokenKind.Scope,
            "shared" : TokenKind.Shared,
            "short" : TokenKind.Short,
            "static" : TokenKind.Static,
            "struct" : TokenKind.Struct,
            "super" : TokenKind.Super,
            "switch" : TokenKind.Switch,
            "synchronized" : TokenKind.Synchronized,
            "template" : TokenKind.Template,
            "this" : TokenKind.This,
            "throw" : TokenKind.Throw,
            "true" : TokenKind.True,
            "try" : TokenKind.Try,
            "typedef" : TokenKind.TypeDef,
            "typeid" : TokenKind.TypeId,
            "typeof" : TokenKind.TypeOf,
            "ubyte" : TokenKind.UByte,
            "ucent" : TokenKind.UCent,
            "uint" : TokenKind.UInt,
            "ulong" : TokenKind.ULong,
            "union" : TokenKind.Union,
            "unittest" : TokenKind.UnitTest,
            "ushort" : TokenKind.UShort,
            "version" : TokenKind.Version,
            "void" : TokenKind.Void,
            "volatile" : TokenKind.Volatile,
            "wchar" : TokenKind.WChar,
            "while" : TokenKind.While,
            "with" : TokenKind.With,
            "__FILE__" : TokenKind._FILE_,
            "__gshared" : TokenKind._GShared,
            "__LINE__" : TokenKind._LINE_,
            "__thread" : TokenKind._Thread,
            "__traits" : TokenKind._Traits,
    ];
    auto keyTrie2 = Trie!(MapAsSlot!(SmallMap!(2, TokenKind, string), TokenKind, string)
                         , string
                         , assumeSize!(6, useLength)
                         , useItemAt!(0, char)
                         , useLastItem!(char))(keywordsMap);
    foreach(k,v; keywordsMap)
        assert((k in keyTrie2[k]) == v);
    trieStats(keyTrie2);

	//a bit size test
	auto a = array(map!(x => to!ubyte(x))(iota(0, 256)));
	auto bt = Trie!(bool, ubyte, sliceBits!(7, 8), sliceBits!(5, 7), sliceBits!(0, 5))(a);
	trieStats(bt);
	foreach(i; 0..256)
		assert(bt[cast(ubyte)i]);
}


template useItemAt(size_t idx, T)
    if(isIntegral!T || is(T: dchar))
{
    size_t entity(in T[] arr){ return arr[idx]; }
    enum bitSize = 8*T.sizeof;
}

template useLastItem(T)
{
    size_t entity(in T[] arr){ return arr[$-1]; }
    enum bitSize = 8*T.sizeof;
}

template fullBitSize(Prefix...)
{
	static if(Prefix.length > 0)
		enum fullBitSize = Prefix[0].bitSize+fullBitSize!(Prefix[1..$]);
	else
		enum fullBitSize = 0;
}

template idxTypes(Key, size_t fullBits, Prefix...)
{
    static if(Prefix.length == 1)
    {//the last level is value level, so no index once reduced to 1-level
        alias TypeTuple!() idxTypes;
    }
    else
    {
        //Important note on bit packing
        //Each level has to hold enough of bits to address the next one    
		//The bottom level is known to hold full bit width
		//thus it's size in pages is fill_bit_width - size_of_last_prefix
		//Recourse on this notion
        alias TypeTuple!(
			idxTypes!(Key, fullBits - Prefix[$-1].bitSize, Prefix[0..$-1]),
			BitPacked!(fullBits - Prefix[$-1].bitSize, typeof(Prefix[$-2].entity(Key.init)))
		) idxTypes;
    }
}

template bitSizeOf(T)
{
    static if(is(typeof(T.bitSize)))
        enum bitSizeOf = T.bitSize;
    else
        enum bitSizeOf = T.sizeof*8;
}


int comparePropertyName(Char)(const(Char)[] a, const(Char)[] b)
{
    for(;;)
    {
        while(!a.empty && (isWhite(a.front) || a.front == '-' || a.front =='_'))
        {
            a.popFront();
        }
        while(!b.empty && (isWhite(b.front) || b.front == '-' || b.front =='_'))
        {
            b.popFront();
        }
        if(a.empty)
            return b.empty ? 0 : -1;
        if(b.empty)
            return 1;
        auto ca = toLower(a.front), cb = toLower(b.front);
        if(ca > cb)
            return 1;
        else if( ca < cb)
            return -1;
        a.popFront();
        b.popFront();
    }
}

bool propertyNameLess(Char)(const(Char)[] a, const(Char)[] b)
{
    return comparePropertyName(a, b) < 0;
}

//@@@BUG - has to be public so that std.range.lowerBound works
public bool workaround(T)(in UnicodeProperty!T a, in UnicodeProperty!T b)
{
    return propertyNameLess(a.name,b.name);
}

//
bool searchUnicodeSet(T, alias table)(string name, ref RleBitSet!T dest)
{
    auto range = assumeSorted!(workaround)(table);    
    auto val = typeof(table[0])(name, typeof(table[0].set).init);

    size_t idx = range.lowerBound(val).length;

    if(idx < range.length && comparePropertyName(range[idx].name, name) == 0){
        dest = RleBitSet!T(range[idx].set);
        return true;
    }
    return false;
}

public @property auto unicodeSet(T=uint)(string name)
{
    alias RleBitSet!T Set;
    Set result;
    alias comparePropertyName ucmp;

    //unicode property
    //helper: direct access with a sanity check
    if(ucmp(name, "L") == 0 || ucmp(name, "Letter") == 0)
    {
        result |= unicodeLu;
        result |= unicodeLl;
        result |= unicodeLt;
        result |= unicodeLo;
        result |= unicodeLm;
    }
    else if(ucmp(name,"LC") == 0 || ucmp(name,"Cased Letter")==0)
    {
        result |= unicodeLl;
        result |= unicodeLu;
        result |= unicodeLt;//Title case
    }
    else if(ucmp(name, "M") == 0 || ucmp(name, "Mark") == 0)
    {
        result |= unicodeMn;
        result |= unicodeMc;
        result |= unicodeMe;
    }
    else if(ucmp(name, "N") == 0 || ucmp(name, "Number") == 0)
    {
        result |= unicodeNd;
        result |= unicodeNl;
        result |= unicodeNo;
    }
    else if(ucmp(name, "P") == 0 || ucmp(name, "Punctuation") == 0)
    {
        result |= unicodePc;
        result |= unicodePd;
        result |= unicodePs;
        result |= unicodePe;
        result |= unicodePi;
        result |= unicodePf;
        result |= unicodePo;
    }
    else if(ucmp(name, "S") == 0 || ucmp(name, "Symbol") == 0)
    {
        result |= unicodeSm;
        result |= unicodeSc;
        result |= unicodeSk;
        result |= unicodeSo;
    }
    else if(ucmp(name, "Z") == 0 || ucmp(name, "Separator") == 0)
    {
        result |= unicodeZs;
        result |= unicodeZl;
        result |= unicodeZp;
    }
    else if(ucmp(name, "C") == 0 || ucmp(name, "Other") == 0)
    {
        result |= unicodeCo;
        result |= unicodeLo;
        result |= unicodeNo;
        result |= unicodeSo;
        result |= unicodePo;
    }
    else if(ucmp(name, "any") == 0)
        result = Set(0,0x110000);
    else if(ucmp(name, "ascii") == 0)
        result = Set(0,0x80);
    else
    {
        if(searchUnicodeSet!(T, tinyUnicodeProps)(name, result) 
                || searchUnicodeSet!(T, smallUnicodeProps)(name, result)
                || searchUnicodeSet!(T, fullUnicodeProps)(name, result))
            return result;        
        else
            throw new Exception("no unicode set by name of "~ name);
    }
    return result;
}

unittest{
    assert(unicodeSet("InHebrew") == unicodeInHebrew);
    assert(unicodeSet("separator") == (unicodeZs | unicodeZl | unicodeZp));
    assert(unicodeSet("In-Kharoshthi") == unicodeInKharoshthi);
}

version(LittleEndian)
{


static if(size_t.sizeof == 4)
{    
    immutable bestWhite_Space2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x3800], [ 0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);   
    immutable bestAlphabetic2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0xe800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0xd05c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1901c18,  0xd0341a,  0xd0340d,  0x1b0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x9000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c07,  0x701c07,  0x701c07,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x704007,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x0,  0x0,  0x0,  0x0,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf06e,  0x87000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x9000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x1001c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3f0ffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0xfcffc0,  0x0,  0x0,  0x0,  0x7ffc0,  0x0,  0x0,  0x0,  0x7f00ffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3fffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x7ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f10000,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80,  0x70003fe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3c0000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f0000,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf,  0x402,  0x0,  0x0,  0x0,  0x3e0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff,  0x60000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc0000,  0xffff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffc000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x8000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x0,  0x0,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000,  0x0,  0x0,  0xc008000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17fff0,  0x3c000000,  0x0,  0x0,  0x20,  0x0,  0x61f0000,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x0,  0x0,  0x0,  0x0,  0x7700000,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x3f7f,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x1,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x0,  0x0,  0x800ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff00,  0x0,  0x0,  0x60,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde000000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfff7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff3ff0e,  0x20010000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0x0,  0x0,  0xfc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf00000,  0x0,  0x0,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0x0,  0x0,  0xc0003ffe,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0x0,  0x0,  0xc0000000,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0x0,  0x0,  0xf,  0x0,  0x0,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x8800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0x901c07,  0x701c0a,  0x701c07,  0x701c07,  0xc02c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x703407,  0xf03807,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xc9c0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x60000200,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfce8000e,  0x1500000,  0x0,  0x0,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff007fe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x0,  0x0,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0x0,  0x0,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x0,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffff,  0x3,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x3c00f00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30000000,  0x0,  0x0,  0x0,  0x274,  0x0,  0x0,  0x0,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x0,  0x0,  0x30007f7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x23,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x3800], [ 0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0xf800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0x1805c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1a01c19,  0xd0341b,  0xd0340d,  0x1c0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0740d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xffffffff,  0xffffffff,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0x0,  0x0,  0xffff00ff,  0x7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf000007f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xfe7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff,  0xffffffff,  0xffffffff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0x3ffc01f,  0xfffffff,  0xffffffff,  0xffffffff,  0x800fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xffffffff,  0xffffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3ff3fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff80003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0xffffff87,  0xff8fffff,  0xffffffff,  0xffffffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8fffffff,  0x83ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xffffffff,  0xffdfffff,  0xf,  0x0,  0xffffffff,  0xffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xf0007,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffcfff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x1800], [ 0x100400,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x4000], [ 0x100400,  0x100801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100c01,  0x101001,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x10000], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0x701c07,  0xe03407,  0x110400f,  0x1304412,  0x1104411,  0x1104411,  0x1104414,  0x1104411,  0x1104411,  0x1104415,  0x1105811,  0x1805c11,  0x701c11,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1a01c19,  0x110441b,  0x1104411,  0x1c04411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1107411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x707807,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x0,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x0,  0x0,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0x0,  0x0,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xf000,  0xe0000000,  0x0,  0x0,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xffffffff,  0xffffffff,  0xff00,  0xff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0x0,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00e000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x4000000,  0x0,  0x0,  0xfff00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xf000ffff,  0x0,  0x0,  0x1,  0x0,  0x1800000,  0x0,  0x0,  0x0,  0x1f,  0x1c000,  0x0,  0x0,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffe000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff000,  0x0,  0x0,  0x7f000000,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0x0,  0xff000000,  0x0,  0x0,  0xfc003fe0,  0xf0000000,  0x0,  0x0,  0x7ff00000,  0xe0000000,  0x0,  0x0,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x0,  0x0,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfc00c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0,  0x780,  0xf0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000,  0x0,  0x0,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x0,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x0,  0x0,  0x60000000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x0,  0x0,  0x0,  0xf8000000,  0x78,  0x700000,  0x0,  0x0,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xe0000000,  0x0,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x70000000,  0x7c000000,  0xffffffff,  0xffffffff,  0x0,  0x3f000000,  0xffffffff,  0xffffffff,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xfffffe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x80000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3c000,  0xffff0000,  0x0,  0x0,  0xfffc,  0xfc00fe00,  0x0,  0x200000,  0xfffffff0,  0xffffffff,  0x0,  0x0,  0xfc00fe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xff000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0xfff0fff8,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x180,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xff800000,  0xfffc0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xf000,  0x0,  0x0,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0x0,  0xf000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x0,  0x80000000,  0x2,  0x0,  0x0,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffff001e,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0x0,  0x0,  0x0,  0xfff00000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000]);
    immutable bestWhite_Space3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0x20,  0x80], [ 0x80,  0xc0,  0x700], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2002,  0x2003,  0x2001,  0x2001,  0x2001,  0x2004,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2005,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x163], [ 0x200,  0x170,  0x5100], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x241005,  0x30160a,  0x241c0d,  0x241e09,  0x241209,  0x441210,  0x141212,  0x140a05,  0x140a05,  0x140a05,  0x242813,  0x541209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x1209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x6002,  0xa004,  0xe006,  0x12008,  0x1600a,  0x1a00c,  0x1e00e,  0x2010,  0x24011,  0x2013,  0x2a014,  0x2e016,  0x32018,  0x3601a,  0x38001,  0x3c01d,  0x3e01f,  0x3e020,  0x3e01f,  0x3e01f,  0x3e01f,  0x44021,  0x3e023,  0x4a024,  0x3e01f,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4c001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4e001,  0x2001,  0x2001,  0x2028,  0x54029,  0x5802b,  0x5c02d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x5e001,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x201f,  0x62030,  0x64001,  0x68033,  0x6c035,  0x70037,  0x3e039,  0x3e01f,  0x7603a,  0x7a03c,  0x3e03e,  0x3e01f,  0x8003f,  0x3e01f,  0x3e01f,  0x3e041,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x84001,  0x3e043,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x2001,  0x3e044,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x3e045,  0x3e01f,  0x8c01f,  0x3e047,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x92048,  0x9604a,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e04c,  0x2001,  0x2001,  0x2001,  0x204d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x9c001,  0x3e04f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x3e04f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x40,  0xf0], [ 0x100,  0x160,  0x2c00], [ 0x0,  0x1,  0x2,  0x2,  0x2,  0x3,  0x2,  0x4,  0x5,  0x2,  0x2,  0x6,  0x2,  0x2,  0x7,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x9,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000,  0x0,  0x21,  0x44000,  0x0,  0x0,  0x0,  0x0,  0x23,  0x0,  0x0,  0x4a024,  0x0,  0x0,  0x26,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x50000,  0x29,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x0,  0x0,  0x0,  0x0,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37f8,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0xf06e,  0x87000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x1a80], [ 0x80200,  0x100803,  0x100804,  0x100a04,  0x100804,  0x200e06,  0x100809,  0x100804,  0x100804,  0x280804,  0x101604,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x804,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x10003,  0x14002,  0x8002,  0x1c006,  0x18006,  0x24008,  0x1800a,  0x800b,  0x3000c,  0x800d,  0x38005,  0x8002,  0x8002,  0x800f,  0x8002,  0x8002,  0x40002,  0x44002,  0x800e,  0x4c012,  0x50002,  0xc,  0x8015,  0x8002,  0x8002,  0x8002,  0x5c016,  0x64018,  0x8002,  0x8002,  0x6c01a,  0x8002,  0x8002,  0x7401c,  0x8002,  0x8002,  0x8002,  0x8002,  0x78002,  0x8002,  0x8002,  0x8002,  0x801f,  0x80002,  0x88021,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x18023,  0x8002,  0x30024,  0x30017,  0x800c,  0x10002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x800e,  0x8002,  0x98025,  0x8002,  0xa0027,  0x8c002,  0x8002,  0x8002,  0x8002,  0x8029,  0x802a,  0x802b,  0x802c,  0x8002,  0x8002,  0x802d,  0x8002,  0x1002e,  0x3002f,  0x8002,  0x8002,  0x8002,  0x8002,  0x14002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8030,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8031,  0x8002,  0x8002,  0x8002,  0xc8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8033,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3f0ffc0,  0x0,  0x0,  0x0,  0xfcffc0,  0x0,  0x0,  0x0,  0x7ffc0,  0x0,  0x0,  0x0,  0x7f00ffc0,  0x0,  0x0,  0x0,  0x3fffc0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe00,  0x0,  0x0,  0x0,  0x1c000,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x7ff0000,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x3f10000,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0x0,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x80,  0x70003fe,  0x0,  0x0,  0x3c0000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3f0000,  0x0,  0x0,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0xf,  0x402,  0x0,  0x0,  0x0,  0x3e0000,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff,  0x60000000,  0x0,  0x0,  0xff000000,  0xff000000,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0xfffc0000,  0xffff,  0x0,  0xffc00000,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x3ffff,  0x0,  0x0,  0xffffc000,  0xffffffff,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x40,  0xd0], [ 0x100,  0x120,  0x3100], [ 0x0,  0x1,  0x2,  0x2,  0x2,  0x3,  0x2,  0x4,  0x5,  0x6,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x48001,  0x4c025,  0x4e001,  0x50001,  0x2001,  0x2001,  0x54029,  0x5802b,  0x2001,  0x2001,  0x5c02d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x202f,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x0,  0x0,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000,  0x0,  0x0,  0xc008000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17fff0,  0x3c000000,  0x0,  0x0,  0x20,  0x0,  0x61f0000,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x0,  0x0,  0x0,  0x0,  0x7700000,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x3f7f,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x1,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x0,  0x0,  0x800ff,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff00,  0x0,  0x0,  0x60,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde000000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfff7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff3ff0e,  0x20010000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0x0,  0x0,  0xfc0000,  0x0,  0x0,  0x0,  0xf00000,  0x0,  0x0,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0x0,  0x0,  0xc0003ffe,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0x0,  0x0,  0xc0000000,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0x0,  0x0,  0xf,  0x0,  0x0,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0xf0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x2a80], [ 0x80200,  0x140803,  0x140a05,  0x140c05,  0x140a05,  0x141007,  0x140a05,  0x140a05,  0x140a05,  0x240a05,  0x14160a,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0xa05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0xc002,  0x14004,  0x18002,  0x1c002,  0x24008,  0x28002,  0x8002,  0x2c002,  0x30002,  0x3800d,  0x800f,  0x8010,  0x8011,  0x4c012,  0x50002,  0x8002,  0x8002,  0x54002,  0x8002,  0x8002,  0x8002,  0x58002,  0x8002,  0x60017,  0x8002,  0x8019,  0x8002,  0x8002,  0x8002,  0x68002,  0x7001b,  0x7801d,  0x7c01f,  0x84020,  0x8c022,  0x7c01f,  0x7c01f,  0x94024,  0x7c01f,  0x9801f,  0x7c01f,  0x8027,  0xa0002,  0x8002,  0xa4002,  0xa801f,  0xb002b,  0xb4002,  0xbc02e,  0x7c01f,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc0002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc4002,  0x8002,  0x8002,  0xcc032,  0x8034,  0x8002,  0x8035,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xdc036,  0x8002,  0xe0002,  0x8039,  0xec03a,  0x8002,  0xf403c,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xf801f,  0x10003f,  0x8041,  0x8042,  0x8002,  0x8002,  0x10c002,  0x114044,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x118002,  0x8002,  0x120047,  0x128049,  0x804b,  0x13404c,  0x13c04e,  0x144050,  0x14c052,  0x8021,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x4,  0x0,  0x0,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xc9c0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x60000200,  0x0,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0xc0c0000,  0x0,  0x0,  0x0,  0x20000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x2000000,  0x0,  0x80000000,  0x0,  0x0,  0xfce8000e,  0x1500000,  0x0,  0x0,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0x0,  0x1ff007fe,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x0,  0x0,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0x0,  0x0,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x7e0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x0,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0x7f,  0x0,  0x7fffff,  0x3,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x3c00f00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x30000000,  0x0,  0x0,  0x0,  0x274,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x0,  0x0,  0x30007f7f,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x23,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0x20,  0x80], [ 0x80,  0xc0,  0x700], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2002,  0x2003,  0x2001,  0x2001,  0x2001,  0x2004,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2005,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x0,  0x1,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x173], [ 0x200,  0x190,  0x6100], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x241005,  0x30160a,  0x241c0d,  0x241e09,  0x241209,  0x441210,  0x142612,  0x140a05,  0x140a05,  0x140a05,  0x242a14,  0x581209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x5c1209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x1209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x4001,  0x6001,  0xa004,  0xe006,  0x12008,  0x1600a,  0x1a00c,  0x200e,  0x2000f,  0x2001,  0x24011,  0x28013,  0x2c015,  0x30017,  0x32001,  0x3601a,  0x38001,  0x201d,  0x3c001,  0x2001,  0x3e001,  0x42020,  0x46022,  0x4a024,  0x2026,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4e001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x50001,  0x2001,  0x2001,  0x2029,  0x5602a,  0x5a02c,  0x5e02e,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x60001,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2031,  0x66032,  0x68001,  0x6c035,  0x70037,  0x74039,  0x6203b,  0x62031,  0x7a03c,  0x7e03e,  0x62040,  0x62041,  0x86042,  0x62031,  0x62031,  0x62044,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x8a001,  0x62046,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x2001,  0x62047,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x62048,  0x62031,  0x92031,  0x6204a,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x9804b,  0x9c04d,  0xa004f,  0xa4051,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62053,  0xaa054,  0xae056,  0xb2058,  0xb605a,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x2001,  0x2001,  0x205c,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0xba001,  0x6205e,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x6205e,  0x62031,  0x62031,  0xbe031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xffffffff,  0xffffffff,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0x0,  0x0,  0xffff00ff,  0x7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf000007f,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xfe7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xfff,  0xffffffff,  0xffffffff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0x3ffc01f,  0xfffffff,  0xffffffff,  0xffffffff,  0x800fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xffffffff,  0xffffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3ff3fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff80003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0xffffff87,  0xff8fffff,  0xffffffff,  0xffffffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8fffffff,  0x83ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xffffffff,  0xffdfffff,  0xf,  0x0,  0xffffffff,  0xffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffff,  0x3ff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xf0007,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffcfff,  0xffffffff,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0x20,  0x50], [ 0x80,  0x60,  0x600], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0x20,  0x90], [ 0x80,  0xe0,  0x1200], [ 0x404080,  0x804083,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204085,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000,  0x2001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1003,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x4001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1005,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1006,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1007,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x0,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x6200], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x141005,  0x2c1409,  0x381a0c,  0x381e0e,  0x381c0e,  0x441c10,  0x142612,  0x140a05,  0x140a05,  0x140a05,  0x382a14,  0x581c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x5c1c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a18,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x3005,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x4000,  0x8003,  0xc005,  0x10007,  0x14009,  0x1800b,  0xd,  0x1e00e,  0x0,  0x22010,  0x26012,  0x2a014,  0x2e016,  0x30000,  0x34019,  0x36000,  0x1c,  0x3a000,  0x0,  0x3c000,  0x4001f,  0x44021,  0x48023,  0x25,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e000,  0x0,  0x0,  0x28,  0x54029,  0x5802b,  0x5c02d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5e000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x62030,  0x64000,  0x68033,  0x6c035,  0x70037,  0x74039,  0x7403a,  0x7803b,  0x7c03d,  0x7403f,  0x74040,  0x84041,  0x7403a,  0x7403a,  0x74043,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x88000,  0x74045,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x74046,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x74047,  0x7403a,  0x9003a,  0x74049,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x9604a,  0x9a04c,  0x9e04e,  0xa2050,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x74052,  0xa8053,  0xac055,  0xb0057,  0xb4059,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x0,  0x5b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb8000,  0x7405d,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x7405d,  0x7403a,  0x7403a,  0xbe05e,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x0,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x0,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x0,  0x0,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0x0,  0x0,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xf000,  0xe0000000,  0x0,  0x0,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xffffffff,  0xffffffff,  0xff00,  0xff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff80,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0x0,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00e000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x4000000,  0x0,  0x0,  0xfff00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xf000ffff,  0x0,  0x0,  0x1,  0x0,  0x1800000,  0x0,  0x0,  0x0,  0x1f,  0x1c000,  0x0,  0x0,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffe000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0xfffff000,  0x0,  0x0,  0x7f000000,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0x0,  0xff000000,  0x0,  0x0,  0xfc003fe0,  0xf0000000,  0x0,  0x0,  0x7ff00000,  0xe0000000,  0x0,  0x0,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x0,  0x0,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfc00c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0,  0x780,  0xf0000000,  0x0,  0x0,  0x0,  0xc000,  0x0,  0x0,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x0,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x0,  0x0,  0x60000000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x0,  0x0,  0x0,  0xf8000000,  0x78,  0x700000,  0x0,  0x0,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xe0000000,  0x0,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x70000000,  0x7c000000,  0xffffffff,  0xffffffff,  0x0,  0x3f000000,  0xffffffff,  0xffffffff,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xfffffe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x80000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3c000,  0xffff0000,  0x0,  0x0,  0xfffc,  0xfc00fe00,  0x0,  0x200000,  0xfffffff0,  0xffffffff,  0x0,  0x0,  0xfc00fe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xff000000,  0xfffffc00,  0xffffffff,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0xfff0fff8,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfe000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x180,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xff800000,  0xfffc0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000,  0x0,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0x0,  0xf000,  0x0,  0x0,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0x0,  0xf000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x0,  0x80000000,  0x2,  0x0,  0x0,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffff001e,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0x0,  0x0,  0x0,  0xfff00000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0xffffffff,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000]);
    immutable bestWhite_Space4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x1f,  0x57], [ 0x40,  0x30,  0x70,  0x380], [ 0x1041040,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x41041,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x0,  0x0,  0x4000,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc002,  0x8002,  0x8004,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8005,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8003,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x3d,  0x125], [ 0x40,  0x80,  0x1d0,  0x4080], [ 0x40c2040,  0x6186185,  0x6186186,  0x6186186,  0x6186186,  0x6186186,  0x186186,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0xd05c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1901c18,  0xd0341a,  0xd0340d,  0x1b0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0x340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0xc002,  0x14004,  0x18002,  0x20007,  0x28009,  0x3000b,  0x3800d,  0x4000f,  0x48011,  0x50013,  0x58015,  0x60017,  0x68019,  0x7001b,  0x7801d,  0x8002,  0x8001f,  0x88021,  0x8023,  0x8002,  0x94024,  0x9c026,  0xa4028,  0xac02a,  0xb402c,  0xbc02e,  0xc4030,  0xc8002,  0x8002,  0xd0033,  0xd8035,  0xe0037,  0xe4039,  0xe4039,  0xe8039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xf003b,  0xf803d,  0xe403f,  0xe4039,  0x104040,  0x10c042,  0xe4039,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x110002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x114002,  0x8002,  0x8002,  0x8002,  0x8002,  0x118002,  0x8002,  0x120047,  0x128049,  0x13004b,  0x13804d,  0x14004f,  0x148051,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x14c002,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x154054,  0x15c056,  0x8002,  0x164058,  0x16c05a,  0x17405c,  0x17c05e,  0xe4060,  0x184039,  0x18c062,  0x190002,  0xe4039,  0xe4039,  0xe4039,  0xe4065,  0x19c066,  0xe4068,  0xe4069,  0xe406a,  0xe4039,  0xe4039,  0xe4039,  0x1b006b,  0x1b806d,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x110039,  0xe4039,  0x8002,  0x8002,  0x8002,  0xe406f,  0xe4070,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0xe4071,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0xe4072,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1d0073,  0xe4075,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1dc076,  0x8078,  0x1e4002,  0x1ec07a,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1f407c,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x1f8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x807f,  0xe4064,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0xe4064,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0x3fffffff,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0xffffffff,  0x7fff,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x37,  0xc7], [ 0x40,  0x70,  0x120,  0x2300], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4144104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c07,  0x701c07,  0x701c07,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1001c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x8000,  0xc000,  0x14004,  0x1c006,  0x24008,  0x2c00a,  0x3400c,  0x3c00e,  0x44010,  0x4c012,  0x54014,  0x5c016,  0x64018,  0x0,  0x0,  0x1a,  0x0,  0x0,  0x0,  0x7001b,  0x7801d,  0x8001f,  0x21,  0x8c022,  0x94024,  0x98000,  0x0,  0x0,  0x9c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa0000,  0xa8029,  0x0,  0x0,  0xb002b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb802d,  0x0,  0xc002f,  0xc8031,  0xd0033,  0xd4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x36,  0x0,  0x0,  0x37,  0x0,  0x0,  0xe0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x39,  0x0,  0x0,  0x0,  0x0,  0x0,  0xec03a,  0xf403c,  0x0,  0x0,  0x0,  0x0,  0xf8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10003f,  0x0,  0x108041,  0x43,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4044,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x3f8,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x37f8,  0x40000000,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0xf06e,  0x87000000,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x58,  0x130], [ 0x80,  0x70,  0x1b0,  0xcc0], [ 0x608080,  0xa04084,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x500c,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x680a,  0x500e,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x780a,  0x8810,  0x9812,  0xa814,  0x500a,  0xb00a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0xc017,  0x500a,  0x500a,  0x500a,  0x5019,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x8000,  0x8002,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x18001,  0x1,  0x8001,  0x20001,  0x8001,  0x8001,  0x28001,  0x30001,  0x28001,  0x28001,  0x38001,  0x40001,  0x48001,  0x28001,  0x50001,  0x8001,  0x58001,  0x58001,  0x800c,  0x8001,  0x20001,  0x800b,  0x8001,  0x8001,  0x8001,  0x8001,  0x68001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x70001,  0x8001,  0x78001,  0x800b,  0x8001,  0x80001,  0x88001,  0x8001,  0x8012,  0x58001,  0x8000,  0x90001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x98001,  0x8004,  0xa0001,  0x8015,  0x8001,  0x8001,  0x8001,  0x8001,  0xb0001,  0xc0017,  0x8001,  0x8001,  0x8001,  0x8001,  0xc8001,  0x801a,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0xd8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x801c,  0x8001,  0x8001,  0x801d,  0xf0003,  0x801f,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8003,  0x28001,  0x8001,  0x8001,  0x8020,  0x58001,  0x8004,  0x58001,  0x58001,  0x8001,  0x8001,  0x1,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x800b,  0x8001,  0x8001,  0x8001,  0x110021,  0x8023,  0x8001,  0x8001,  0x128024,  0x130001,  0x8001,  0x8003,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x138001,  0x8001,  0x8028,  0x8001,  0x148001,  0x8001,  0x150001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x158001,  0x8001,  0x8001,  0x8001,  0x160001,  0x1,  0x8019,  0x58001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x20001,  0x8001,  0x8001,  0x17002d,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x178001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x180001,  0x8001,  0x8001,  0x8031,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x3ff,  0x3ff,  0x0,  0x0,  0xffc0,  0x0,  0x3f0ffc0,  0x0,  0xfcffc0,  0x0,  0x7ffc0,  0x0,  0x7f00ffc0,  0x0,  0x3fffc0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x1ffffe00,  0x0,  0x1c000,  0x0,  0x3ff03ff,  0xffc0,  0x0,  0x7ff0000,  0x0,  0x3ff03ff,  0x0,  0x0,  0x3f10000,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x20000000,  0x80,  0x70003fe,  0x3c0000,  0x0,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x3f0000,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0xf,  0x402,  0x0,  0x3e0000,  0x0,  0xff000000,  0x0,  0xfc00000,  0x0,  0xff,  0x60000000,  0xff000000,  0xff000000,  0x0,  0x7fffffff,  0xfffc0000,  0xffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x3ffff,  0xffffc000,  0xffffffff,  0x7ff,  0x0,  0x0,  0x0]);
    immutable bestPunctuation4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x50,  0x100], [ 0x80,  0x60,  0x160,  0x1440], [ 0x608080,  0x204084,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x700d,  0x680f,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x800d,  0x6811,  0x6812,  0x6813,  0x680d,  0xa00d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x8000,  0x18002,  0x18003,  0x18003,  0x18003,  0x18003,  0x20003,  0x18005,  0x18003,  0x18003,  0x30003,  0x40007,  0x50009,  0x58003,  0x1800c,  0x68003,  0x7800e,  0x18003,  0x80003,  0x18003,  0x18003,  0x88003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x90003,  0x98003,  0x18003,  0x18014,  0xb0015,  0xb8003,  0xc0003,  0x18003,  0x18003,  0x18003,  0x18003,  0xc8003,  0x18003,  0x1801a,  0x18003,  0x18003,  0x18003,  0xd8003,  0xe801c,  0x1801e,  0xf8003,  0x18020,  0x18003,  0x108003,  0x18003,  0x18022,  0x18023,  0x120003,  0x128003,  0x138026,  0x140003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x150029,  0x1802b,  0x18003,  0x18003,  0x18003,  0x18003,  0x1802c,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x168003,  0x170003,  0x18003,  0x18003,  0x18003,  0x18002f,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x188003,  0x88003,  0x18003,  0x18032,  0x18003,  0x18003,  0x18003,  0x18033,  0xc0034,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x138003,  0x18003,  0x18003,  0x1b0035,  0x1b8003,  0x18003,  0x18003,  0x1c0003,  0x1c8003,  0x1d803a,  0x1e0003,  0x1e8003,  0x1f0003,  0x18003,  0x1f8003,  0x18003,  0x18003,  0x18027,  0x18003,  0x208040,  0x18003,  0x218042,  0x18003,  0x18003,  0x18003,  0x18044,  0x18003,  0x18003,  0x18003,  0x18003,  0x22803b,  0x230003,  0x18003,  0x18047,  0x18003,  0x240003,  0x18003,  0x18049,  0x18003,  0x250003,  0x26004b,  0x268003,  0x270003,  0x18003,  0x18003,  0x18003,  0x18003,  0x278003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x10030,  0x0,  0x10000,  0x0,  0x100000,  0xc008000,  0x0,  0x17fff0,  0x3c000000,  0x20,  0x0,  0x61f0000,  0x0,  0xfc00,  0x0,  0x0,  0x8000000,  0x0,  0x1ff,  0x1,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x7700000,  0x0,  0x7ff,  0x0,  0x30,  0x0,  0xc0000000,  0x0,  0x0,  0x3f7f,  0xfc000000,  0x1,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x800ff,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x600,  0x0,  0x3fff00,  0x60,  0xffc0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0xde000000,  0xffffffff,  0xfff7fff,  0xfff3ff0e,  0x20010000,  0x0,  0x1,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0xfc0000,  0x0,  0xf00000,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0xc0000000,  0x30000,  0x0,  0x800,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x7,  0x0,  0x10000,  0x0,  0x800000,  0x0,  0x80000000,  0x80000000,  0x1ff0000,  0x80000000,  0x0,  0xfe000000,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0x0,  0xf0000,  0x0,  0x0]);
    immutable bestSymbol4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0xd,  0x6d,  0x13d], [ 0x40,  0xc0,  0x1a0,  0x1b80], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x6810,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x9011,  0x6813,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0xa814,  0x680d,  0x680d,  0xb00d,  0xc017,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x8000,  0x18002,  0x20004,  0x20004,  0x20004,  0x28004,  0x30004,  0x40007,  0x20004,  0x20009,  0x20004,  0x2000a,  0x2000b,  0x60004,  0x20004,  0x40004,  0x20004,  0x20004,  0x20004,  0x68004,  0x20004,  0x70004,  0x78004,  0x80004,  0x88004,  0x20004,  0x90004,  0x20004,  0x20011,  0x20004,  0x20013,  0xa8014,  0x20004,  0x20016,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20017,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0xc0004,  0x20004,  0x20004,  0xc8004,  0xd0004,  0x20004,  0x20004,  0xd8004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0xe801c,  0xf0004,  0x2001f,  0x108020,  0x118022,  0x118023,  0x118023,  0x118024,  0x128023,  0x138026,  0x148028,  0x118023,  0x118023,  0x118023,  0x118023,  0x15802a,  0x16802c,  0x118023,  0x118023,  0x118023,  0x17802e,  0x118023,  0x118023,  0x180023,  0x20004,  0x20004,  0x188004,  0x20004,  0x20004,  0x20004,  0x128032,  0x118023,  0x198023,  0x20034,  0x20035,  0x20004,  0x1b8036,  0x1c8038,  0x1d803a,  0x118023,  0x118023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x118004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x1e0022,  0x20004,  0x20004,  0x20004,  0x20004,  0x2003d,  0x2003e,  0x2003f,  0x20004,  0x20004,  0x20004,  0x200004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20041,  0x218042,  0x20004,  0x20004,  0x20004,  0x220004,  0x228004,  0x20004,  0x238046,  0x240004,  0x20004,  0x20004,  0x250049,  0x26004b,  0x20004,  0x20004,  0x20004,  0x20004,  0x118023,  0x268023,  0x27804e,  0x288050,  0x290023,  0x20004,  0x298023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x2a0004,  0x2b0055,  0x2c0057,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x2c8004,  0x20004,  0x20004,  0x11805a,  0x2e005b,  0x2d005d,  0x2f805e,  0x308060,  0x20004,  0x318062,  0x328064,  0x33003b,  0x338023,  0x348068,  0x350004,  0x358023,  0x360023,  0x128023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x4,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x40000000,  0x60000200,  0x0,  0xc0c0000,  0x0,  0x20000,  0x0,  0x10000,  0x0,  0x7f80000,  0x0,  0x80000000,  0x0,  0x2000000,  0xfce8000e,  0x1500000,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0xc0000000,  0x0,  0x3ff0000,  0x0,  0x8000000,  0x0,  0x1,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x1ff007fe,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0x3ff1fff,  0x0,  0x0,  0x7e0,  0xfbffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x18000000,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0x7f,  0x0,  0x7fffff,  0x3,  0x600,  0x0,  0x0,  0x3c00f00,  0x0,  0x3800000,  0x0,  0x200,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x30000000,  0x0,  0x274,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x30007f7f,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0x23,  0x0,  0x7fffff,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0xf8000000,  0xffe1,  0x0,  0x3f,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x1f,  0x57], [ 0x40,  0x30,  0x70,  0x300], [ 0x1041040,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x41041,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x0,  0x0,  0x0,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x8001,  0x4001,  0x4003,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4004,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4002,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0xd,  0x9d,  0x205], [ 0x40,  0x120,  0x2d0,  0x3280], [ 0x40c2040,  0x6186185,  0x6186186,  0x6186186,  0x6186186,  0x61c6186,  0x186186,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x800d,  0x6811,  0x680d,  0x680d,  0x680d,  0x680d,  0x900d,  0x9813,  0x9813,  0x9813,  0x9813,  0xa814,  0xb816,  0xc818,  0xd81a,  0x9813,  0xe81c,  0x9813,  0xf00d,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x1001f,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9821,  0x9813,  0x9813,  0x9813,  0x11822,  0x9813,  0x9813,  0x12013,  0x13025,  0x9813,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1380d,  0x680d,  0x1400d,  0x9829,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x982a,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x982b,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x8000,  0x18002,  0x18003,  0x18003,  0x18003,  0x18003,  0x20003,  0x18005,  0x18003,  0x18003,  0x38006,  0x48008,  0x1800a,  0x58003,  0x6800c,  0x7800e,  0x88010,  0x98012,  0xa0003,  0xb0015,  0xc0017,  0xd0019,  0xe001b,  0xf001d,  0x10001f,  0x110021,  0x120023,  0x130025,  0x140027,  0x150029,  0x158003,  0x16802c,  0x18003,  0x170003,  0x18003,  0x18003,  0x178003,  0x188030,  0x198032,  0x1a8034,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x1b8036,  0x1c8038,  0x1d0003,  0x1e003b,  0x1f003d,  0x20003f,  0x210041,  0x220043,  0x230045,  0x238003,  0x240003,  0x250049,  0x258046,  0x18003,  0x260003,  0x18003,  0x18003,  0x27004d,  0x28004f,  0x290051,  0x2a0053,  0x18003,  0x18055,  0x18003,  0x18003,  0x18003,  0x2b0003,  0x2c0057,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18059,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x2d0003,  0x230046,  0x2e005b,  0x2e8003,  0x2f805e,  0x308060,  0x230062,  0x2b0063,  0x18003,  0x320003,  0x2c8003,  0x18065,  0x18066,  0x340067,  0x1805c,  0x8003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x1803e,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x348003,  0x18003,  0x35806a,  0x18003,  0x18003,  0x1806c,  0x1e006d,  0x18003,  0x37806e,  0x1e0070,  0x388003,  0x390003,  0x398003,  0x3a8074,  0x3b0003,  0x230077,  0x3c0046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x3c8068,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x3d0003,  0x3d8003,  0x3e807c,  0x3f0003,  0x18003,  0x18003,  0x3f8003,  0x408080,  0x418082,  0x420003,  0x18059,  0x428001,  0x438086,  0x78003,  0x18088,  0x450089,  0x230046,  0x458036,  0x46808c,  0x47808e,  0x18003,  0x230090,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x490091,  0x230046,  0x230093,  0x230094,  0x4b0095,  0x230046,  0x4c0097,  0x230046,  0x4c8003,  0x230046,  0x230046,  0x230046,  0x4d0046,  0x230046,  0x230046,  0x230046,  0x4d8003,  0x4e809c,  0x4f004f,  0x4f8003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x50003c,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x508003,  0x230046,  0x510003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x2300a1,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x2300a3,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x520003,  0x2300a5,  0x2300a6,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x1f0003,  0x5400a7,  0x548003,  0x550003,  0x230046,  0x558003,  0x230046,  0x560003,  0x5700ad,  0x5800af,  0x18003,  0x18003,  0x180b1,  0x18003,  0x590003,  0x230046,  0x230046,  0x230046,  0x230046,  0x5a00b3,  0x5b00b5,  0x230046,  0x230046,  0x18041,  0x5c00b7,  0x2080b9,  0x5d80ba,  0x5e80bc,  0x230046,  0x4200be,  0x6000bf,  0x608001,  0x610003,  0x6200c3,  0x628046,  0x630003,  0x550003,  0x2b0003,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x638003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18035,  0x18003,  0x2300a9,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x2300a9,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x640003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffff20bf,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0xffff00ff,  0x7fffff,  0xffffffff,  0xf000007f,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xfffffffe,  0xffffffff,  0x3ff1fff,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0xfbffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xfe7fffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x1fff,  0x0,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xfff,  0x80ffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0x3ffc01f,  0xfffffff,  0x800fffff,  0x1fffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0xffffffff,  0x3ff3fff,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffff3fff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xfff80003,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0x1fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffff87,  0xff8fffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0x3fffffff,  0x3ff,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x8fffffff,  0x83ffffff,  0xffffffff,  0xc0ffffff,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x1ff,  0x0,  0x0,  0x7fffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xf,  0x0,  0x3ff01ff,  0x0,  0x3ff,  0x0,  0xffffffff,  0x7fff,  0xffffffff,  0xf0007,  0xffffffff,  0x1ffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x3,  0x0,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0x3fffffff,  0x0,  0x3f,  0x0,  0x7fffff,  0x3ffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffcfff,  0xffffffff,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0xf8000000,  0xffe1,  0x0,  0x7fffff,  0x0,  0xffffffff,  0xffff,  0x0,  0x0]);
    immutable bestControl4 = CodepointTrie!(5,4,4,8).fromRawArray([ 0x0,  0x6,  0x18,  0x30], [ 0x20,  0x30,  0x30,  0x300], [ 0x2108420,  0x2108421,  0x108421,  0x0,  0x0,  0x0,  0x40200,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x37,  0x77], [ 0x40,  0x70,  0x80,  0x600], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4144104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100400,  0x100801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100c01,  0x101001,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x600401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc002,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x18000,  0x1c000,  0x20000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x98,  0x208], [ 0x80,  0xf0,  0x2e0,  0x3180], [ 0x608080,  0xe18284,  0x1424408,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58c,  0x1a20408,  0x1a20408,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x800d,  0x6811,  0x680d,  0x680d,  0x680d,  0x680d,  0x900d,  0x680d,  0x680d,  0x680d,  0x680d,  0xa013,  0xb015,  0xc017,  0xd019,  0xd81b,  0xe81c,  0xd81b,  0xf00d,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0x1001f,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd821,  0xd81b,  0xd81b,  0xd81b,  0x11822,  0xd81b,  0xd81b,  0x1201b,  0x13025,  0xd81b,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1380d,  0x680d,  0x1400d,  0xd829,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd82a,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd82b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1600d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1600d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000,  0x2,  0x0,  0x0,  0x20003,  0x30005,  0x7,  0x0,  0x48008,  0x5800a,  0x6800c,  0x7800e,  0x80000,  0x90011,  0xa0013,  0xb0015,  0xc0017,  0xd0019,  0xe001b,  0xf001d,  0x10001f,  0x110021,  0x120023,  0x130025,  0x138000,  0x148028,  0x0,  0x150000,  0x0,  0x0,  0x158000,  0x16802c,  0x17802e,  0x188030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x198032,  0x1a8034,  0x1b0000,  0x1c0037,  0x1d0039,  0x1e003b,  0x1f003d,  0x20003f,  0x210041,  0x218000,  0x220000,  0x230045,  0x238042,  0x0,  0x240000,  0x0,  0x0,  0x250049,  0x26004b,  0x268000,  0x27804e,  0x0,  0x50,  0x0,  0x0,  0x0,  0x288000,  0x298052,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2a8000,  0x210042,  0x2b8056,  0x2c0000,  0x2d0059,  0x2e005b,  0x21005d,  0x28805e,  0x0,  0x2f8000,  0x2a0000,  0x60,  0x61,  0x318062,  0x57,  0x320000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x328000,  0x0,  0x338066,  0x0,  0x0,  0x68,  0x1c0069,  0x0,  0x35806a,  0x1c006c,  0x368000,  0x370000,  0x378000,  0x388070,  0x390000,  0x210073,  0x3a0042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a8063,  0x0,  0x0,  0x0,  0x0,  0x3b0000,  0x3b8000,  0x3c8078,  0x3d0000,  0x0,  0x0,  0x3d8000,  0x3e807c,  0x3f807e,  0x400000,  0x54,  0x408064,  0x418082,  0x58000,  0x84,  0x430085,  0x210042,  0x438032,  0x448088,  0x45808a,  0x0,  0x21008c,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x47008d,  0x210042,  0x21008f,  0x210090,  0x490091,  0x210042,  0x4a0093,  0x210042,  0x4a8000,  0x210042,  0x210042,  0x210042,  0x4b0042,  0x210042,  0x210042,  0x210042,  0x4b8000,  0x4c0000,  0x4c804b,  0x4d0000,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x4d8038,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e0000,  0x210042,  0x4e8000,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x21009c,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x21009e,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x4f8000,  0x2100a0,  0x2100a1,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x1d0000,  0xa2,  0x518000,  0x520000,  0x210042,  0x528000,  0x210042,  0x530000,  0x5400a7,  0x5500a9,  0x0,  0x0,  0xab,  0x0,  0x560000,  0x210042,  0x210042,  0x210042,  0x210042,  0x5700ad,  0x5800af,  0x210042,  0x210042,  0x3d,  0x5900b1,  0x1e80b3,  0x5a80b4,  0x5b80b6,  0x210042,  0x5c80b8,  0x5d80ba,  0x5e0064,  0x5e8000,  0x5f80be,  0x600042,  0x608000,  0x520000,  0x288000,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x610000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x31,  0x0,  0x2100a3,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x2100a3,  0x210042,  0x210042,  0x210042,  0xc3,  0x210042,  0x0,  0x620000,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5f0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5f0000,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0xdf40,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0xf000,  0xe0000000,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xff00,  0xff800000,  0x0,  0xfffff80,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0xfc00,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x1,  0x0,  0xfc00e000,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0x4000000,  0x0,  0xffc00000,  0xf000ffff,  0x1800000,  0x0,  0x1f,  0x1c000,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x0,  0x80000000,  0xffffe000,  0xffffffff,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0xfffff000,  0x7f000000,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0xfc003fe0,  0xf0000000,  0x7ff00000,  0xe0000000,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0x0,  0xfc00c000,  0x780,  0xf0000000,  0x0,  0xc000,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x7fffc,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x60000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x78,  0x700000,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0xc0000000,  0xfffffc00,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0x70000000,  0x7c000000,  0x0,  0x3f000000,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xfffffe00,  0xffffffff,  0xffffffff,  0x80000000,  0x3c000,  0xffff0000,  0xfffc,  0xfc00fe00,  0xfffffff0,  0xffffffff,  0xfc00fe00,  0xffffffff,  0xfffffc00,  0xffffffff,  0x0,  0xffff8000,  0x0,  0xfff0fff8,  0x0,  0xfe000000,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xfffffffc,  0xffffffff,  0x0,  0x180,  0xc0000000,  0xffffffff,  0xffffffc0,  0xffffffff,  0xff800000,  0xfffc0000,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0xc0,  0x3000,  0x0,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x2,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0x7ffffff,  0xffff001e,  0xffffffff,  0xff800000,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0xffff0000,  0x0,  0xc0000000]);
    
    immutable simpleCaseTrie = Trie!(ushort, dchar, sliceBits!(9, 21), sliceBits!(0, 9)).fromRawArray([ 0x0,  0x800], [ 0x1000,  0x1c00], [ 0x1000,  0x3002,  0x3003,  0x3003,  0x3004,  0x3003,  0x3003,  0x6005,  0x3007,  0x3008,  0x3003,  0x3009,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xa003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xb003,  0x3003,  0x300c,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1b5ffff,  0x1ca01bd,  0x1df01d5,  0x1f701ea,  0x20b01ff,  0x6e00213,  0x2300226,  0x2420238,  0x256024c,  0x82e025e,  0x27b0273,  0x28d0283,  0x29d0295,  0xffff02a3,  0xffffffff,  0xffffffff,  0x1b6ffff,  0x1cb01be,  0x1e001d6,  0x1f801eb,  0x20c0200,  0x6df0214,  0x2310227,  0x2430239,  0x257024d,  0x82d025f,  0x27c0274,  0x28e0284,  0x29e0296,  0xffff02a4,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x494ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x4e604e0,  0x4f404f0,  0x6e304fe,  0x51c0513,  0x530052c,  0x53e053a,  0x54e0549,  0x5560552,  0x55e055a,  0x5660562,  0x56e0568,  0xffff0572,  0x580057a,  0x58c0584,  0x5960590,  0x1840598,  0x4e704e1,  0x4f504f1,  0x6e204ff,  0x51d0514,  0x531052d,  0x53f053b,  0x54f054a,  0x5570553,  0x55f055b,  0x5670563,  0x56f0569,  0xffff0573,  0x581057b,  0x58d0585,  0x5970591,  0x7f50599,  0x5fe05fd,  0x6040603,  0x60a0609,  0x6140613,  0x61e061d,  0x6280627,  0x6320631,  0x6380637,  0x63e063d,  0x6440643,  0x64a0649,  0x650064f,  0x6560655,  0x65c065b,  0x6620661,  0x6680667,  0x66e066d,  0x6760675,  0x67e067d,  0x68a0689,  0x6920691,  0x69a0699,  0x6a206a1,  0x6a606a5,  0xffffffff,  0x6ac06ab,  0x6b006af,  0x6b806b7,  0x6c1ffff,  0x6c906c2,  0x6cf06ca,  0x6d606d0,  0x6da06d7,  0x6e406db,  0x6ea06e5,  0x6f206eb,  0xffff06f3,  0x7010700,  0x7090708,  0x70d070c,  0x7110710,  0x7150714,  0x7190718,  0x7210720,  0x72b072a,  0x7330732,  0x73d073c,  0x7430742,  0x74d074c,  0x7570756,  0x7610760,  0x76f076e,  0x77d077c,  0x7890788,  0x7930792,  0x79d079c,  0x7ab07aa,  0x7b907b8,  0x7c707c6,  0x7dd07dc,  0x7fc07f4,  0x80c07fd,  0x81c080d,  0x82c081d,  0x83f04d5,  0x84d084c,  0x8610860,  0x18000c,  0x2c0019,  0x3e0036,  0xffff003f,  0x5e0056,  0x6e0066,  0x7e006f,  0x3160088,  0xa2009a,  0xad00ac,  0xffff04b0,  0xce00c8,  0xda0409,  0xe300e2,  0xef00ee,  0xf900f8,  0x1040100,  0x10c0105,  0xffffffff,  0x1190118,  0x1260120,  0x1320127,  0x140013a,  0x14c0141,  0x158014d,  0x1610160,  0xffffffff,  0x1730172,  0x31cffff,  0xffffffff,  0xffffffff,  0x1aa01ac,  0x1ce01ab,  0x1cd01cc,  0x1ec01ee,  0x20101ed,  0x2150202,  0x2280216,  0x23a0229,  0x24e023b,  0x260024f,  0x2750261,  0x2850276,  0x570286,  0x2a0029f,  0x2ac02ab,  0x2b602b5,  0x2c202c1,  0x2cc02cb,  0x2d402d3,  0x2dc02db,  0x2e602e5,  0x2f002ef,  0x304ffff,  0x3030302,  0x30e030d,  0x31b0315,  0x320031f,  0x3280327,  0x330032f,  0x3380337,  0x3420341,  0x34e034d,  0x35a0359,  0x3680367,  0x3740373,  0x380037f,  0x38a0389,  0x3970396,  0x3a303a2,  0x3b003af,  0x3be03bd,  0x3cd03cc,  0x3da03d9,  0x3e603e5,  0x3f303f2,  0x3fe03fd,  0xffff0408,  0x4120411,  0x41a0419,  0x4250424,  0x42f042e,  0x43b043a,  0x4490448,  0x4570456,  0x4650464,  0x4710470,  0xffffffff,  0xffffffff,  0xffffffff,  0x4a10497,  0x4af04a2,  0x30804b8,  0x4ca030c,  0x4d404cb,  0x4e204d8,  0x4e904e8,  0x4f704f6,  0x5080507,  0x51f051e,  0x5330532,  0x2b202be,  0x84002c6,  0xffff000d,  0x37002d,  0x5fffff,  0x67ffff,  0xffffffff,  0xffffffff,  0xffff007f,  0x89ffff,  0x2eaffff,  0xffff037e,  0x9b00a3,  0x25dffff,  0xffffffff,  0xc9ffff,  0x2baffff,  0xffff00cf,  0xdbffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x270ffff,  0xffffffff,  0xffff0101,  0x10dffff,  0xffffffff,  0xffffffff,  0x4d90121,  0x13b0133,  0xffff04e3,  0xffffffff,  0xffffffff,  0xffff0159,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x738ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2e202e1,  0x2ec02eb,  0xffffffff,  0x2fd02fc,  0xffffffff,  0x5d8ffff,  0x5de05dc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0347,  0x35b0353,  0xffff0361,  0xffff036d,  0x3810379,  0x38bffff,  0x3980517,  0x5c8039e,  0x3b103ab,  0x73905c4,  0x3ce05b2,  0x3db0496,  0x3e703e1,  0x5b7054d,  0x4b3ffff,  0x40a0404,  0x4130542,  0x6d50417,  0x4260422,  0x3540348,  0x362035c,  0x38cffff,  0x3990516,  0x5c7039f,  0x3b203ac,  0x73705c3,  0x3cf05b1,  0x3dc0495,  0x3e803e2,  0x5b6054c,  0x4b204b1,  0x40b0405,  0x4140541,  0x6d40418,  0x4270423,  0x37a036e,  0x5090382,  0x5c50515,  0xffffffff,  0x540ffff,  0x50a054b,  0x5550554,  0x55d055c,  0x5650564,  0x56b056a,  0x5750574,  0x57d057c,  0x5870586,  0x5930592,  0x59b059a,  0x59f059e,  0x5a505a4,  0x5a905a8,  0x5b505b0,  0xffff05d0,  0x5c605c2,  0x5cbffff,  0x5cf05cc,  0x5d405d3,  0x5d7ffff,  0x5dd05db,  0x5e505e3,  0x5eb05e9,  0x5f105ef,  0x5f705f5,  0x5fb05f9,  0x60105ff,  0x6070605,  0x60f060b,  0x6190615,  0x623061f,  0x62d0629,  0x6350633,  0x63b0639,  0x641063f,  0x6470645,  0x64d064b,  0x6530651,  0x6590657,  0x65f065d,  0x6650663,  0x66b0669,  0x671066f,  0x6790677,  0x683067f,  0x61a0616,  0x6240620,  0x62e062a,  0x6360634,  0x63c063a,  0x6420640,  0x6480646,  0x64e064c,  0x6540652,  0x65a0658,  0x660065e,  0x6660664,  0x66c066a,  0x6720670,  0x67a0678,  0x6840680,  0x5e605e4,  0x5ec05ea,  0x5f205f0,  0x5f805f6,  0x5fc05fa,  0x6020600,  0x6080606,  0x610060c,  0x7230722,  0x72d072c,  0x7350734,  0x73f073e,  0x7450744,  0x74f074e,  0x7590758,  0x7630762,  0x7710770,  0x77f077e,  0x78b078a,  0x7950794,  0x79f079e,  0x7ad07ac,  0x7bb07ba,  0x7c907c8,  0x7df07de,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x8380837,  0x84f084e,  0x8630862,  0xf000e,  0x250024,  0x390038,  0x490048,  0x590058,  0x690068,  0x790078,  0x8b008a,  0x9d009c,  0xaf00ae,  0xbb00ba,  0xcb00ca,  0xd700d6,  0xe500e4,  0xf100f0,  0xfb00fa,  0x1030102,  0x10b010a,  0x1130112,  0x11b011a,  0x1230122,  0x12f012e,  0x13d013c,  0x1490148,  0x15a0154,  0x164015b,  0x16c0165,  0x179016d,  0x181017a,  0x18f0182,  0x1990190,  0x155019a,  0x1b801b7,  0x1d001cf,  0x1e501e4,  0x1fa01f9,  0x20e020d,  0x2210220,  0x2330232,  0x2450244,  0x2590258,  0x26c026b,  0x27e027d,  0x290028f,  0x2a202a1,  0x2ae02ad,  0x2b802b7,  0x2c402c3,  0x2ce02cd,  0x2d602d5,  0x2de02dd,  0x2e802e7,  0x2f202f1,  0x2f802f7,  0x3060305,  0x310030f,  0x3180317,  0x3220321,  0x32a0329,  0x3320331,  0x33a0339,  0x3440343,  0x350034f,  0x35e035d,  0x36a0369,  0x3760375,  0x3840383,  0x38e038d,  0x39b039a,  0x3a803a7,  0x3b403b3,  0x3c403c3,  0x3d103d0,  0x3de03dd,  0x3ea03e9,  0x3f803f7,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x42cffff,  0x4360430,  0x444043c,  0x452044a,  0x4600458,  0x46e0466,  0x4780472,  0x480047a,  0x4880482,  0x490048a,  0x4a30499,  0x4b404a7,  0x4c204ba,  0x4cc04c4,  0x4d604ce,  0x4e404da,  0x4f204ea,  0x50004f8,  0x518050b,  0xffff0524,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x42dffff,  0x4370431,  0x445043d,  0x453044b,  0x4610459,  0x46f0467,  0x4790473,  0x481047b,  0x4890483,  0x491048b,  0x4a4049a,  0x4b504a8,  0x4c304bb,  0x4cd04c5,  0x4d704cf,  0x4e504db,  0x4f304eb,  0x50104f9,  0x519050c,  0xffff0525,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7a407a0,  0x7b207ae,  0x7c007bc,  0x7d207ca,  0x7e807e0,  0x7fe07f6,  0x80e0806,  0x81e0816,  0x82f0826,  0x8410839,  0x8560850,  0x864,  0x1a0010,  0x2e0026,  0x40003a,  0x4e004a,  0x60005a,  0x70006a,  0x80007a,  0x90ffff,  0xffffffff,  0xffffffff,  0xc0ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x294ffff,  0xffffffff,  0x267ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x6740673,  0x67c067b,  0x6860685,  0x68e068d,  0x6960695,  0x69e069d,  0x6a406a3,  0x6a806a7,  0x6aa06a9,  0x6ae06ad,  0x6b406b3,  0x6bc06bb,  0x6c406c3,  0x6cc06cb,  0x6d206d1,  0x6d906d8,  0x6dd06dc,  0x6e706e6,  0x6ed06ec,  0x6f506f4,  0x6fb06fa,  0x7050704,  0x70b070a,  0x70f070e,  0x7130712,  0x7170716,  0x71d071c,  0x7270726,  0x7310730,  0x73b073a,  0x7410740,  0x7490748,  0x7530752,  0x75d075c,  0x7690768,  0x7770776,  0x7850784,  0x78f078e,  0x7990798,  0x7a707a6,  0x7b507b4,  0x7c307c2,  0x7d507d4,  0x7eb07ea,  0x8010800,  0x8110810,  0x8210820,  0x8320831,  0x8440843,  0x8590858,  0x30002,  0x1d001c,  0x310030,  0x430042,  0x510050,  0x630062,  0x730072,  0x830082,  0x930092,  0xa500a4,  0xb500b4,  0xc300c2,  0xd100d0,  0xdd00dc,  0xe900e8,  0xf500f4,  0xfd00fc,  0x1070106,  0x10f010e,  0x1150114,  0x11d011c,  0x1290128,  0x1350134,  0x1430142,  0x14f014e,  0xffffffff,  0xffffffff,  0x845ffff,  0xffffffff,  0xffff0183,  0x1920191,  0x19c019b,  0x1ae01ad,  0x1c301c2,  0x1d801d7,  0x1f001ef,  0x2040203,  0x2180217,  0x22b022a,  0x23d023c,  0x2510250,  0x2630262,  0x2780277,  0x2880287,  0x2980297,  0x2a602a5,  0x2b002af,  0x2bc02bb,  0x2c802c7,  0x2d202d1,  0x2d802d7,  0x2e402e3,  0x2ee02ed,  0x2f402f3,  0x2ff02fe,  0x30a0309,  0x3140313,  0x31e031d,  0x3260325,  0x32e032d,  0x3360335,  0x33e033d,  0x34a0349,  0x3560355,  0x3640363,  0x370036f,  0x37c037b,  0x3880387,  0x3950394,  0x3a103a0,  0x3ae03ad,  0x3bc03bb,  0x3cb03ca,  0x3d803d7,  0x3e403e3,  0x3f103f0,  0x3fc03fb,  0x4070406,  0x43f0439,  0x44d0447,  0x45b0455,  0x4690463,  0x43e0438,  0x44c0446,  0x45a0454,  0x4680462,  0x49c0493,  0x4aa04a6,  0x4bd04b7,  0xffffffff,  0x49b0492,  0x4a904a5,  0x4bc04b6,  0xffffffff,  0x50e0503,  0x527051b,  0x535052f,  0x544053d,  0x50d0502,  0x526051a,  0x534052e,  0x543053c,  0x571056d,  0x5790577,  0x583057f,  0x58f0589,  0x570056c,  0x5780576,  0x582057e,  0x58e0588,  0x5ad05ab,  0x5b905b4,  0x5bf05bd,  0xffffffff,  0x5ac05aa,  0x5b805b3,  0x5be05bc,  0xffffffff,  0x5e0ffff,  0x5e8ffff,  0x5eeffff,  0x5f4ffff,  0x5dfffff,  0x5e7ffff,  0x5edffff,  0x5f3ffff,  0x612060e,  0x61c0618,  0x6260622,  0x630062c,  0x611060d,  0x61b0617,  0x6250621,  0x62f062b,  0x7290725,  0x76b0765,  0x7790773,  0x7ed07e3,  0x95008d,  0x1f0013,  0xa7009f,  0xffffffff,  0x6880682,  0x690068c,  0x6980694,  0x6a0069c,  0x6870681,  0x68f068b,  0x6970693,  0x69f069b,  0x6b606b2,  0x6be06ba,  0x6c606c0,  0x6ce06c8,  0x6b506b1,  0x6bd06b9,  0x6c506bf,  0x6cd06c7,  0x6ef06e9,  0x6f706f1,  0x6fd06f9,  0x7070703,  0x6ee06e8,  0x6f606f0,  0x6fc06f8,  0x7060702,  0x71f071b,  0x72fffff,  0xffffffff,  0xffffffff,  0x71e071a,  0x7280724,  0xffff072e,  0xffff0736,  0xffffffff,  0x781ffff,  0xffffffff,  0xffffffff,  0x76a0764,  0x7780772,  0xffff0780,  0xffffffff,  0x7d707cd,  0xffffffff,  0xffffffff,  0xffffffff,  0x7d607cc,  0x7ec07e2,  0xffffffff,  0xffffffff,  0x50867,  0xffffffff,  0x29ffff,  0xffffffff,  0x40866,  0x1e0012,  0xffff0028,  0xffffffff,  0xffffffff,  0xb1ffff,  0xffffffff,  0xffffffff,  0x94008c,  0xa6009e,  0xffff00b0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff06d3,  0xffffffff,  0x6e106de,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff06fe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff06ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7f807ee,  0x8080802,  0x8180812,  0x8280822,  0x83b0833,  0x8520846,  0x868085a,  0x140006,  0x7f907ef,  0x8090803,  0x8190813,  0x8290823,  0x83c0834,  0x8530847,  0x869085b,  0x150007,  0xffffffff,  0xbcffff,  0xffff00bd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1a6019d,  0x1b901af,  0x1d101c4,  0x1e601d9,  0x1fb01f1,  0x20f0205,  0x2220219,  0x234022c,  0x246023e,  0x25a0252,  0x26d0264,  0x27f0279,  0x2910289,  0x1a7019e,  0x1ba01b0,  0x1d201c5,  0x1e701da,  0x1fc01f2,  0x2100206,  0x223021a,  0x235022d,  0x247023f,  0x25b0253,  0x26e0265,  0x280027a,  0x292028a,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7d807ce,  0x7f007e4,  0x80407fa,  0x814080a,  0x824081a,  0x835082a,  0x848083d,  0x85c0854,  0x8086a,  0x200016,  0x32002a,  0x44003c,  0x52004c,  0x64005c,  0x74006c,  0x84007c,  0x96008e,  0xa800a0,  0xb600b2,  0xc400be,  0xd200cc,  0xde00d8,  0xea00e6,  0xffff00f2,  0x7d907cf,  0x7f107e5,  0x80507fb,  0x815080b,  0x825081b,  0x836082b,  0x849083e,  0x85d0855,  0x9086b,  0x210017,  0x33002b,  0x45003d,  0x53004d,  0x65005d,  0x75006d,  0x85007d,  0x97008f,  0xa900a1,  0xb700b3,  0xc500bf,  0xd300cd,  0xdf00d9,  0xeb00e7,  0xffff00f3,  0x2490248,  0x266025c,  0x498026f,  0x28b04b9,  0x299028c,  0x2a7029a,  0x2b102a8,  0x2bd02b9,  0xffff02c5,  0x2d002cf,  0x2d9ffff,  0xffff02da,  0xffffffff,  0xffffffff,  0xffffffff,  0x30b0307,  0x3120311,  0x31a0319,  0x3240323,  0x32c032b,  0x3340333,  0x33c033b,  0x3460345,  0x3520351,  0x360035f,  0x36c036b,  0x3780377,  0x3860385,  0x390038f,  0x39d039c,  0x3aa03a9,  0x3b603b5,  0x3c603c5,  0x3d303d2,  0x3e003df,  0x3ec03eb,  0x3fa03f9,  0x4030402,  0x40d040c,  0x4160415,  0x41f041e,  0x4290428,  0x4330432,  0x4410440,  0x44f044e,  0x45d045c,  0x46b046a,  0x4750474,  0x47d047c,  0x4850484,  0x48d048c,  0x49e049d,  0x4ac04ab,  0x4bf04be,  0x4c704c6,  0x4d104d0,  0x4dd04dc,  0x4ed04ec,  0x4fb04fa,  0x510050f,  0x5290528,  0x5370536,  0x5460545,  0x5510550,  0x5590558,  0x5610560,  0xffffffff,  0xffffffff,  0xffffffff,  0x58affff,  0x594058b,  0xffff0595,  0xffffffff,  0x5a105a0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7a507a1,  0x7b307af,  0x7c107bd,  0x7d307cb,  0x7e907e1,  0x7ff07f7,  0x80f0807,  0x81f0817,  0x8300827,  0x842083a,  0x8570851,  0x10865,  0x1b0011,  0x2f0027,  0x41003b,  0x4f004b,  0x61005b,  0x71006b,  0x81007b,  0x91ffff,  0xffffffff,  0xffffffff,  0xc1ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x4210420,  0x42b042a,  0x4350434,  0x4430442,  0x4510450,  0x45f045e,  0x46d046c,  0x4770476,  0x47f047e,  0x4870486,  0x48f048e,  0x4a0049f,  0x4ae04ad,  0x4c104c0,  0x4c904c8,  0x4d304d2,  0x4df04de,  0x4ef04ee,  0x4fd04fc,  0x5120511,  0x52b052a,  0x5390538,  0x5480547,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x59d059c,  0x5a305a2,  0x5a705a6,  0x5af05ae,  0x5bb05ba,  0x5c105c0,  0x5ca05c9,  0x5ce05cd,  0x5d205d1,  0x5d605d5,  0x5da05d9,  0x5e205e1,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x84b084a,  0x85f085e,  0xb000a,  0x230022,  0x350034,  0x470046,  0x550054,  0xffffffff,  0x770076,  0x870086,  0x990098,  0xab00aa,  0xb900b8,  0xc700c6,  0xd500d4,  0xe100e0,  0xed00ec,  0xf700f6,  0xff00fe,  0x1090108,  0x1110110,  0x1170116,  0x11f011e,  0x12b012a,  0x1370136,  0x1450144,  0x1510150,  0x15d015c,  0x1670166,  0x16f016e,  0x17c017b,  0x1860185,  0x1940193,  0x1a0019f,  0x1b201b1,  0x1c701c6,  0x1dc01db,  0x1f401f3,  0x2080207,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x271ffff,  0x2810272,  0x2930282,  0x29c029b,  0x2aa02a9,  0x2b402b3,  0x2c002bf,  0x2ca02c9,  0xffffffff,  0x2dfffff,  0x2e902e0,  0xffffffff,  0x2f602f5,  0x3010300,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x340033f,  0x34c034b,  0x3580357,  0x3660365,  0x3720371,  0xffff037d,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x746ffff,  0x750074a,  0x75a0754,  0x766075e,  0x774076c,  0x782077a,  0x78c0786,  0x7960790,  0x7a2079a,  0x7b007a8,  0x7be07b6,  0x7d007c4,  0x7e607da,  0xffff07f2,  0xffffffff,  0xffffffff,  0x747ffff,  0x751074b,  0x75b0755,  0x767075f,  0x775076d,  0x783077b,  0x78d0787,  0x7970791,  0x7a3079b,  0x7b107a9,  0x7bf07b7,  0x7d107c5,  0x7e707db,  0xffff07f3,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x12c0124,  0x1380130,  0x146013e,  0x152014a,  0x15e0156,  0x1680162,  0x170016a,  0x17d0177,  0x187017f,  0x195018d,  0x1a10197,  0x1b301a8,  0x1c801bb,  0x1dd01d3,  0x1f501e8,  0x20901fd,  0x21b0211,  0x22e0224,  0x2400236,  0x254024a,  0x12d0125,  0x1390131,  0x147013f,  0x153014b,  0x15f0157,  0x1690163,  0x171016b,  0x17e0178,  0x1880180,  0x196018e,  0x1a20198,  0x1b401a9,  0x1c901bc,  0x1de01d4,  0x1f601e9,  0x20a01fe,  0x21c0212,  0x22f0225,  0x2410237,  0x255024b,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff]);    
    immutable fullCaseTrie = Trie!(ushort, dchar, sliceBits!(9, 21), sliceBits!(0, 9)).fromRawArray([ 0x0,  0x800], [ 0x1000,  0x1e00], [ 0x1000,  0x3002,  0x3003,  0x3003,  0x3004,  0x3003,  0x3003,  0x6005,  0x3007,  0x3008,  0x3003,  0x3009,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xa003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xb003,  0xc003,  0x3003,  0x300d,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0x3003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1ccffff,  0x1e101d4,  0x1f601ec,  0x20e0201,  0x2260218,  0x77a0230,  0x2540247,  0x269025f,  0x27d0273,  0x8fb0285,  0x2a2029a,  0x2b402aa,  0x2c402bc,  0xffff02ca,  0xffffffff,  0xffffffff,  0x1cdffff,  0x1e201d5,  0x1f701ed,  0x20f0202,  0x2270219,  0x7790231,  0x2550248,  0x26a0260,  0x27e0274,  0x8fa0286,  0x2a3029b,  0x2b502ab,  0x2c502bd,  0xffff02cb,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x4cdffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x51f0519,  0x52d0529,  0x7800537,  0x555054c,  0x5690565,  0x5770573,  0x5870582,  0x58f058b,  0x5970593,  0x59f059b,  0x5a705a1,  0xffff05ab,  0x5b905b3,  0x5c505bd,  0x5cf05c9,  0x5d505d1,  0x520051a,  0x52e052a,  0x77f0538,  0x556054d,  0x56a0566,  0x5780574,  0x5880583,  0x590058c,  0x5980594,  0x5a0059c,  0x5a805a2,  0xffff05ac,  0x5ba05b4,  0x5c605be,  0x5d005ca,  0x8c005d2,  0x6440643,  0x64a0649,  0x650064f,  0x65a0659,  0x6640663,  0x66e066d,  0x6780677,  0x67e067d,  0x6840683,  0x68a0689,  0x690068f,  0x6960695,  0x69c069b,  0x6a206a1,  0x6a806a7,  0x6b406b3,  0x6c006bf,  0x6ce06cd,  0x6dc06db,  0x6ea06e9,  0x6f406f3,  0x6fe06fd,  0x7080707,  0x7120711,  0xffff071b,  0x7260725,  0x730072f,  0x73a0739,  0x746ffff,  0x7500747,  0x75a0751,  0x767075b,  0x7710768,  0x7810772,  0x78b0782,  0x795078c,  0x79f0796,  0x7a907a8,  0x7b307b2,  0x7b707b6,  0x7c007bf,  0x7c607c5,  0x7ce07cd,  0x7d607d5,  0x7e007df,  0x7e907e8,  0x7f307f2,  0x7f907f8,  0x8080807,  0x8140813,  0x8220821,  0x830082f,  0x83e083d,  0x84b084a,  0x8550854,  0x85f085e,  0x8720871,  0x880087f,  0x8920891,  0x8a808a7,  0x8c708bf,  0x8d708c8,  0x8e708d8,  0x8f908e8,  0x911050e,  0x91f091e,  0x9370936,  0x18000c,  0x2c0019,  0x3e0036,  0xffff003f,  0x600056,  0x75006b,  0x870076,  0x3490093,  0xad00a5,  0xb800b7,  0xffff04e9,  0xda00d4,  0xe6043f,  0xef00ee,  0xfb00fa,  0x1050104,  0x110010c,  0x1180111,  0xffffffff,  0x1250124,  0x132012c,  0x13e0133,  0x14c0146,  0x158014d,  0x1640159,  0x16f016e,  0xffffffff,  0x1890188,  0x34fffff,  0xffffffff,  0xffffffff,  0x1c101c3,  0x1e501c2,  0x1e401e3,  0x2030205,  0x21a0204,  0x232021b,  0x2490233,  0x261024a,  0x2750262,  0x2870276,  0x29c0288,  0x2ac029d,  0x5702ad,  0x2c702c6,  0x2d502d4,  0x2e302e2,  0x2f302f2,  0x2fd02fc,  0x3050304,  0x30d030c,  0x3170316,  0x3210320,  0x3370328,  0x3360335,  0x3410340,  0x34e0348,  0x3530352,  0x35b035a,  0x3630362,  0x36b036a,  0x3750374,  0x3810380,  0x38d038c,  0x39b039a,  0x3a703a6,  0x3b303b2,  0x3c003bf,  0x3cd03cc,  0x3d903d8,  0x3e603e5,  0x3f403f3,  0x4030402,  0x410040f,  0x41c041b,  0x4290428,  0x4340433,  0xffff043e,  0x4480447,  0x450044f,  0x45b045a,  0x4650464,  0x4710470,  0x4820481,  0x490048f,  0x49e049d,  0x4aa04a9,  0xffffffff,  0xffffffff,  0xffffffff,  0x4da04d0,  0x4e804db,  0x33b04f1,  0x503033f,  0x50d0504,  0x51b0511,  0x5220521,  0x530052f,  0x5410540,  0x5580557,  0x56c056b,  0x2dd02ed,  0x91202f7,  0xffff000d,  0x37002d,  0x61ffff,  0x6cffff,  0xffffffff,  0xffffffff,  0xffff0088,  0x94ffff,  0x31bffff,  0xffff03b1,  0xa600ae,  0x284ffff,  0xffffffff,  0xd5ffff,  0x2e7ffff,  0xffff00db,  0xe7ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x297ffff,  0xffffffff,  0xffff010d,  0x119ffff,  0xffffffff,  0xffffffff,  0x512012d,  0x147013f,  0xffff051c,  0xffffffff,  0xffffffff,  0xffff0165,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7eeffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3130312,  0x31d031c,  0xffffffff,  0x330032f,  0xffffffff,  0x61cffff,  0x6220620,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff037a,  0x38e0386,  0xffff0394,  0xffff03a0,  0x3b403ac,  0x3c1086e,  0x3ce0550,  0x60403d4,  0x3e703e1,  0x7ef0600,  0x40405ee,  0x41104cf,  0x41d0417,  0x5f30586,  0x4ecffff,  0x440043a,  0x449057b,  0x763044d,  0x45c0458,  0x387037b,  0x395038f,  0x3c20902,  0x3cf054f,  0x60303d5,  0x3e803e2,  0x7ed05ff,  0x40505ed,  0x41204ce,  0x41e0418,  0x5f20585,  0x4eb04ea,  0x441043b,  0x44a057a,  0x762044e,  0x45d0459,  0x3ad03a1,  0x54203b5,  0x601054e,  0xffffffff,  0x579ffff,  0x5430584,  0x58e058d,  0x5960595,  0x59e059d,  0x5a405a3,  0x5ae05ad,  0x5b605b5,  0x5c005bf,  0x5cc05cb,  0x5d405d3,  0x5db05da,  0x5e105e0,  0x5e505e4,  0x5f105ec,  0xffff0610,  0x60205fe,  0x609ffff,  0x60f060a,  0x6140613,  0x61bffff,  0x621061f,  0x6290627,  0x631062d,  0x6370635,  0x63d063b,  0x641063f,  0x6470645,  0x64d064b,  0x6550651,  0x65f065b,  0x6690665,  0x673066f,  0x67b0679,  0x681067f,  0x6870685,  0x68d068b,  0x6930691,  0x6990697,  0x69f069d,  0x6a506a3,  0x6ae06a9,  0x6ba06b5,  0x6c606c1,  0x6d406cf,  0x6e206dd,  0x660065c,  0x66a0666,  0x6740670,  0x67c067a,  0x6820680,  0x6880686,  0x68e068c,  0x6940692,  0x69a0698,  0x6a0069e,  0x6a606a4,  0x6af06aa,  0x6bb06b6,  0x6c706c2,  0x6d506d0,  0x6e306de,  0x62a0628,  0x632062e,  0x6380636,  0x63e063c,  0x6420640,  0x6480646,  0x64e064c,  0x6560652,  0x7d807d7,  0x7e207e1,  0x7eb07ea,  0x7f507f4,  0x7fb07fa,  0x80a0809,  0x8160815,  0x8240823,  0x8320831,  0x840083f,  0x84d084c,  0x8570856,  0x8610860,  0x8740873,  0x8820881,  0x8940893,  0x8aa08a9,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x9080907,  0x9210920,  0x9390938,  0xf000e,  0x250024,  0x390038,  0x490048,  0x590058,  0x6e006d,  0x80007f,  0x960095,  0xa800a7,  0xba00b9,  0xc700c6,  0xd700d6,  0xe300e2,  0xf100f0,  0xfd00fc,  0x1070106,  0x10f010e,  0x1170116,  0x11f011e,  0x1270126,  0x12f012e,  0x13b013a,  0x1490148,  0x1550154,  0x1660160,  0x1740167,  0x1800175,  0x18f0181,  0x1970190,  0x1a60198,  0x1b001a7,  0x16101b1,  0x1cf01ce,  0x1e701e6,  0x1fc01fb,  0x2110210,  0x2290228,  0x240023f,  0x2570256,  0x26c026b,  0x280027f,  0x2930292,  0x2a502a4,  0x2b702b6,  0x2c902c8,  0x2d702d6,  0x2e502e4,  0x2f502f4,  0x2ff02fe,  0x3070306,  0x30f030e,  0x3190318,  0x3230322,  0x32b032a,  0x3390338,  0x3430342,  0x34b034a,  0x3550354,  0x35d035c,  0x3650364,  0x36d036c,  0x3770376,  0x3830382,  0x3910390,  0x39d039c,  0x3a903a8,  0x3b703b6,  0x3c403c3,  0x3d103d0,  0x3de03dd,  0x3ea03e9,  0x3fa03f9,  0x4070406,  0x4140413,  0x420041f,  0x42e042d,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x462ffff,  0x46c0466,  0x47d0472,  0x48b0483,  0x4990491,  0x4a7049f,  0x4b104ab,  0x4b904b3,  0x4c104bb,  0x4c904c3,  0x4dc04d2,  0x4ed04e0,  0x4fb04f3,  0x50504fd,  0x50f0507,  0x51d0513,  0x52b0523,  0x5390531,  0x5510544,  0xffff055d,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x463ffff,  0x46d0467,  0x47e0473,  0x48c0484,  0x49a0492,  0x4a804a0,  0x4b204ac,  0x4ba04b4,  0x4c204bc,  0x4ca04c4,  0x4dd04d3,  0x4ee04e1,  0x4fc04f4,  0x50604fe,  0x5100508,  0x51e0514,  0x52c0524,  0x53a0532,  0x5520545,  0x62f055e,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x8680862,  0x8790875,  0x8890883,  0x89d0895,  0x8b308ab,  0x8c908c1,  0x8d908d1,  0x8e908e1,  0x8fc08f1,  0x9130909,  0x92a0922,  0x93a,  0x1a0010,  0x2e0026,  0x40003a,  0x4e004a,  0x62005a,  0x77006f,  0x890081,  0x9bffff,  0xffffffff,  0xffffffff,  0xccffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2bbffff,  0xffffffff,  0x28effff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x6c906c8,  0x6d706d6,  0x6e506e4,  0x6ef06ee,  0x6f906f8,  0x7030702,  0x70d070c,  0x7170716,  0x7210720,  0x72b072a,  0x7350734,  0x73f073e,  0x7490748,  0x7530752,  0x75d075c,  0x76a0769,  0x7740773,  0x7840783,  0x78e078d,  0x7980797,  0x7a207a1,  0x7ae07ad,  0x7b507b4,  0x7bb07ba,  0x7c407c3,  0x7ca07c9,  0x7d207d1,  0x7dc07db,  0x7e707e6,  0x7f107f0,  0x7f707f6,  0x8010800,  0x810080f,  0x81c081b,  0x82a0829,  0x8380837,  0x8470846,  0x8510850,  0x85b085a,  0x86b086a,  0x87c087b,  0x88c088b,  0x8a0089f,  0x8b608b5,  0x8cc08cb,  0x8dc08db,  0x8ec08eb,  0x8ff08fe,  0x9160915,  0x92d092c,  0x30002,  0x1d001c,  0x310030,  0x430042,  0x510050,  0x650064,  0x7a0079,  0x8c008b,  0x9e009d,  0xb000af,  0xc100c0,  0xcf00ce,  0xdd00dc,  0xe900e8,  0xf500f4,  0x1010100,  0x1090108,  0x1130112,  0x11b011a,  0x1210120,  0x1290128,  0x1350134,  0x1410140,  0x14f014e,  0x15b015a,  0x1700168,  0x17c0176,  0x9170182,  0xffffffff,  0xffff05d7,  0x1a901a8,  0x1b301b2,  0x1c501c4,  0x1da01d9,  0x1ef01ee,  0x2070206,  0x21d021c,  0x2350234,  0x24c024b,  0x2640263,  0x2780277,  0x28a0289,  0x29f029e,  0x2af02ae,  0x2bf02be,  0x2cd02cc,  0x2db02da,  0x2eb02ea,  0x2f902f8,  0x3030302,  0x3090308,  0x3150314,  0x31f031e,  0x3250324,  0x3320331,  0x33d033c,  0x3470346,  0x3510350,  0x3590358,  0x3610360,  0x3690368,  0x3710370,  0x37d037c,  0x3890388,  0x3970396,  0x3a303a2,  0x3af03ae,  0x3be03bd,  0x3cb03ca,  0x3d703d6,  0x3e403e3,  0x3f203f1,  0x4010400,  0x40e040d,  0x41a0419,  0x4270426,  0x4320431,  0x43d043c,  0x475046f,  0x4860480,  0x494048e,  0x4a2049c,  0x474046e,  0x485047f,  0x493048d,  0x4a1049b,  0x4d504cc,  0x4e304df,  0x4f604f0,  0xffffffff,  0x4d404cb,  0x4e204de,  0x4f504ef,  0xffffffff,  0x547053c,  0x5600554,  0x56e0568,  0x57d0576,  0x546053b,  0x55f0553,  0x56d0567,  0x57c0575,  0x5aa05a6,  0x5b205b0,  0x5bc05b8,  0x5c805c2,  0x5a905a5,  0x5b105af,  0x5bb05b7,  0x5c705c1,  0x5e905e7,  0x5f505f0,  0x5fb05f9,  0xffffffff,  0x5e805e6,  0x5f405ef,  0x5fa05f8,  0xffffffff,  0x6240607,  0x62c060d,  0x6340615,  0x63a0619,  0x623ffff,  0x62bffff,  0x633ffff,  0x639ffff,  0x6580654,  0x662065e,  0x66c0668,  0x6760672,  0x6570653,  0x661065d,  0x66b0667,  0x6750671,  0x7de07da,  0x82c0826,  0x83a0834,  0x8b808ae,  0xa00098,  0x1f0013,  0xb200aa,  0xffffffff,  0x6e806e1,  0x6f206ed,  0x6fc06f7,  0x7060701,  0x6e606df,  0x6f006eb,  0x6fa06f5,  0x70406ff,  0x7380733,  0x742073d,  0x74c0745,  0x756074f,  0x7360731,  0x740073b,  0x74a0743,  0x754074d,  0x791078a,  0x79b0794,  0x7a5079e,  0x7b107ac,  0x78f0788,  0x7990792,  0x7a3079c,  0x7af07aa,  0x7d407d0,  0x7e507b8,  0xffff07c1,  0x7cb07c7,  0x7d307cf,  0x7dd07d9,  0xffff07e3,  0xffff07ec,  0xffffffff,  0x84307fc,  0xffff080b,  0x81d0817,  0x82b0825,  0x8390833,  0xffff0841,  0xffffffff,  0x8a20898,  0x86c0864,  0xffffffff,  0x88d0885,  0x8a10897,  0x8b708ad,  0xffffffff,  0xffffffff,  0x5093d,  0x90008f3,  0x29090b,  0x92e0924,  0x4093c,  0x1e0012,  0xffff0028,  0xffffffff,  0xffffffff,  0xbd005c,  0xffff0071,  0x8d0083,  0x9f0097,  0xb100a9,  0xffff00bb,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0761,  0xffffffff,  0x77e0778,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff07a6,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff07a7,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x8c308b9,  0x8d308cd,  0x8e308dd,  0x8f508ed,  0x90d0903,  0x9260918,  0x93e0930,  0x140006,  0x8c408ba,  0x8d408ce,  0x8e408de,  0x8f608ee,  0x90e0904,  0x9270919,  0x93f0931,  0x150007,  0xffffffff,  0xc8ffff,  0xffff00c9,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1bd01b4,  0x1d001c6,  0x1e801db,  0x1fd01f0,  0x2120208,  0x22a021e,  0x2410236,  0x258024d,  0x26d0265,  0x2810279,  0x294028b,  0x2a602a0,  0x2b802b0,  0x1be01b5,  0x1d101c7,  0x1e901dc,  0x1fe01f1,  0x2130209,  0x22b021f,  0x2420237,  0x259024e,  0x26e0266,  0x282027a,  0x295028c,  0x2a702a1,  0x2b902b1,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x8a30899,  0x8bb08af,  0x8cf08c5,  0x8df08d5,  0x8ef08e5,  0x90508f7,  0x91a090f,  0x9320928,  0x80940,  0x200016,  0x32002a,  0x44003c,  0x52004c,  0x69005e,  0x7b0073,  0x8f0085,  0xa10099,  0xb300ab,  0xc200be,  0xd000ca,  0xde00d8,  0xea00e4,  0xf600f2,  0xffff00fe,  0x8a4089a,  0x8bc08b0,  0x8d008c6,  0x8e008d6,  0x8f008e6,  0x90608f8,  0x91b0910,  0x9330929,  0x90941,  0x210017,  0x33002b,  0x45003d,  0x53004d,  0x6a005f,  0x7c0074,  0x900086,  0xa2009a,  0xb400ac,  0xc300bf,  0xd100cb,  0xdf00d9,  0xeb00e5,  0xf700f3,  0xffff00ff,  0x270026f,  0x28d0283,  0x4d10296,  0x2b204f2,  0x2c002b3,  0x2ce02c1,  0x2dc02cf,  0x2ec02e6,  0xffff02f6,  0x3010300,  0x30affff,  0xffff030b,  0xffffffff,  0xffffffff,  0xffffffff,  0x33e033a,  0x3450344,  0x34d034c,  0x3570356,  0x35f035e,  0x3670366,  0x36f036e,  0x3790378,  0x3850384,  0x3930392,  0x39f039e,  0x3ab03aa,  0x3b903b8,  0x3c603c5,  0x3d303d2,  0x3e003df,  0x3ec03eb,  0x3fc03fb,  0x4090408,  0x4160415,  0x4220421,  0x430042f,  0x4390438,  0x4430442,  0x44c044b,  0x4550454,  0x45f045e,  0x4690468,  0x4770476,  0x4880487,  0x4960495,  0x4a404a3,  0x4ae04ad,  0x4b604b5,  0x4be04bd,  0x4c604c5,  0x4d704d6,  0x4e504e4,  0x4f804f7,  0x50004ff,  0x50a0509,  0x5160515,  0x5260525,  0x5340533,  0x5490548,  0x5620561,  0x570056f,  0x57f057e,  0x58a0589,  0x5920591,  0x59a0599,  0xffffffff,  0xffffffff,  0xffffffff,  0x5c3ffff,  0x5cd05c4,  0xffff05ce,  0xffffffff,  0x5dd05dc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x8690863,  0x87a0876,  0x88a0884,  0x89e0896,  0x8b408ac,  0x8ca08c2,  0x8da08d2,  0x8ea08e2,  0x8fd08f2,  0x914090a,  0x92b0923,  0x1093b,  0x1b0011,  0x2f0027,  0x41003b,  0x4f004b,  0x63005b,  0x780070,  0x8a0082,  0x9cffff,  0xffffffff,  0xffffffff,  0xcdffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x4570456,  0x4610460,  0x46b046a,  0x4790478,  0x48a0489,  0x4980497,  0x4a604a5,  0x4b004af,  0x4b804b7,  0x4c004bf,  0x4c804c7,  0x4d904d8,  0x4e704e6,  0x4fa04f9,  0x5020501,  0x50c050b,  0x5180517,  0x5280527,  0x5360535,  0x54b054a,  0x5640563,  0x5720571,  0x5810580,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x5d905d8,  0x5df05de,  0x5e305e2,  0x5eb05ea,  0x5f705f6,  0x5fd05fc,  0x6060605,  0x60c060b,  0x6120611,  0x6180617,  0x61e061d,  0x6260625,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x91d091c,  0x9350934,  0xb000a,  0x230022,  0x350034,  0x470046,  0x550054,  0xffffffff,  0x7e007d,  0x920091,  0xa400a3,  0xb600b5,  0xc500c4,  0xd300d2,  0xe100e0,  0xed00ec,  0xf900f8,  0x1030102,  0x10b010a,  0x1150114,  0x11d011c,  0x1230122,  0x12b012a,  0x1370136,  0x1430142,  0x1510150,  0x15d015c,  0x16b016a,  0x1790178,  0x1850184,  0x1920191,  0x19d019c,  0x1ab01aa,  0x1b701b6,  0x1c901c8,  0x1de01dd,  0x1f301f2,  0x20b020a,  0x2210220,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x298ffff,  0x2a80299,  0x2ba02a9,  0x2c302c2,  0x2d102d0,  0x2df02de,  0x2ef02ee,  0x2fb02fa,  0xffffffff,  0x310ffff,  0x31a0311,  0xffffffff,  0x3270326,  0x3340333,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3730372,  0x37f037e,  0x38b038a,  0x3990398,  0x3a503a4,  0xffff03b0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2220214,  0x238022c,  0x25c0243,  0xffff025a,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2d2ffff,  0x2e002d8,  0x2f002e8,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7feffff,  0x80d0805,  0x8190811,  0x827081f,  0x835082d,  0x844083b,  0x84e0848,  0x8580852,  0x866085c,  0x877086f,  0x887087d,  0x89b088f,  0x8b108a5,  0xffff08bd,  0xffffffff,  0xffffffff,  0x7ffffff,  0x80e0806,  0x81a0812,  0x8280820,  0x836082e,  0x845083c,  0x84f0849,  0x8590853,  0x867085d,  0x8780870,  0x888087e,  0x89c0890,  0x8b208a6,  0xffff08be,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1380130,  0x144013c,  0x152014a,  0x15e0156,  0x16c0162,  0x17a0172,  0x186017e,  0x193018d,  0x19e0195,  0x1ac01a4,  0x1b801ae,  0x1ca01bf,  0x1df01d2,  0x1f401ea,  0x20c01ff,  0x2240216,  0x23a022e,  0x2520245,  0x267025d,  0x27b0271,  0x1390131,  0x145013d,  0x153014b,  0x15f0157,  0x16d0163,  0x17b0173,  0x187017f,  0x194018e,  0x19f0196,  0x1ad01a5,  0x1b901af,  0x1cb01c0,  0x1e001d3,  0x1f501eb,  0x20d0200,  0x2250217,  0x23b022f,  0x2530246,  0x268025e,  0x27c0272,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff]);

	immutable lowerCaseTrie = CodepointTrie!(10, 11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x5000], [ 0x100400,  0x400c02,  0x100401,  0x100401,  0x100401,  0x100401,  0x500401,  0x100401,  0x100401,  0x100401,  0x701801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x102001,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x0,  0x4200400,  0x80000000,  0xff7fffff,  0xaaaaaaaa,  0x55aaaaaa,  0xaaaaab55,  0xd4aaaaaa,  0x4e243129,  0xe6512d2a,  0xb5555240,  0xaa29aaaa,  0xaaaaaaaa,  0x93faaaaa,  0xffffaa85,  0xffffffff,  0xffefffff,  0x1ffffff,  0x3,  0x1f,  0x0,  0x0,  0x20,  0x3c8a0000,  0x10000,  0xfffff000,  0xaae37fff,  0x192faaaa,  0x0,  0xffff0000,  0xffffffff,  0xaaaaaaaa,  0xaaaaa802,  0xaaaaaaaa,  0xaaaad554,  0xaaaaaaaa,  0xaaaaaaaa,  0xaa,  0x0,  0xfffffffe,  0xff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xaaaaaaaa,  0xaaaaaaaa,  0xaaaaaaaa,  0xaaaaaaaa,  0xbfeaaaaa,  0xaaaaaaaa,  0xaaaaaaaa,  0xaaaaaaaa,  0x3f00ff,  0xff00ff,  0xff003f,  0x3fff00ff,  0xff00ff,  0x40df00ff,  0xcf00dc,  0xdc00ff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x8c400,  0x32108000,  0x43c0,  0xffff0000,  0x10,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x7fffffff,  0x3fda1562,  0xaaaaaaaa,  0xaaaaaaaa,  0xaaaaaaaa,  0x8501a,  0xffffffff,  0x20bf,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xaaaaaaaa,  0x2aaa,  0xaaaaaa,  0x0,  0x0,  0x0,  0x0,  0xaaabaaa8,  0xaaaaaaaa,  0x95ffaaaa,  0xa50aa,  0x2aa,  0x0,  0x7000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf8007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffff00,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0xfffff,  0xffdfc000,  0xff,  0xffffffc,  0xebc00000,  0xffef,  0xfffffc00,  0xc000000f,  0xffffff,  0xfffc0000,  0xfff,  0xffffffc0,  0xfc000000,  0xfffff,  0xffffc000,  0xff,  0xffffffc,  0xffc00000,  0xffff,  0xfffffc00,  0x3f,  0xf7fffffc,  0xf0000003,  0xfdfffff,  0xffc00000,  0x3f7fff,  0xffff0000,  0xfdff,  0xfffffc00,  0xbf7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
	immutable upperCaseTrie = CodepointTrie!(10, 11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x5800], [ 0x200400,  0x501003,  0x100401,  0x100401,  0x100401,  0x100401,  0x600401,  0x100401,  0x100401,  0x100401,  0x801c01,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x102401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x0,  0x0,  0x0,  0x7f7fffff,  0x0,  0x55555555,  0xaa555555,  0x555554aa,  0x2b555555,  0xb1dbced6,  0x11aed2d5,  0x4aaaa490,  0x55d25555,  0x55555555,  0x6c055555,  0x557a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x450000,  0xfffed740,  0xffb,  0x551c8000,  0xe6905555,  0xffffffff,  0xffff,  0x0,  0x55555555,  0x55555401,  0x55555555,  0x55552aab,  0x55555555,  0x55555555,  0xfffe0055,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x20bf,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x55555555,  0x55555555,  0x55555555,  0x55555555,  0x40155555,  0x55555555,  0x55555555,  0x55555555,  0x3f00ff00,  0xff00ff00,  0xaa003f00,  0xff00,  0x0,  0xf000000,  0xf000f00,  0xf001f00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3e273884,  0xc00f3d50,  0x20,  0xffff,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7fff,  0x0,  0xc025ea9d,  0x55555555,  0x55555555,  0x55555555,  0x42805,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x55555555,  0x1555,  0x555555,  0x0,  0x0,  0x0,  0x0,  0x55545554,  0x55555555,  0x6a005555,  0x52855,  0x555,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ffffff,  0xfff00000,  0x3fff,  0xffffff00,  0xd0000003,  0x3fde64,  0xffff0000,  0x3ff,  0x1fdfe7b0,  0x7b000000,  0x1fc5f,  0xfffff000,  0x3f,  0x3ffffff,  0xfff00000,  0x3fff,  0xffffff00,  0xf0000003,  0x3fffff,  0xffff0000,  0x3ff,  0xffffff00,  0x1,  0x7fffffc,  0xf0000000,  0x1fffff,  0xffc00000,  0x7fff,  0xffff0000,  0x1ff,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
}
else
{
    immutable bestWhite_Space2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x3800], [ 0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0xe800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070340d05c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d0681901c18,  0x6c0d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0x3fffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x0,  0x0,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x0,  0x0,  0x3fffffffffffff,  0x7ffff003fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x9000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c07,  0x1c070380701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c1001c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0x0,  0x0,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x0,  0x0,  0x37f800000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x870000000000f06e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff80000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x9000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c0e,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c1001c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x3ff000000000000,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc000000000,  0x0,  0x3f0ffc000000000,  0x0,  0xffc000000000,  0x0,  0xffc000000000,  0x0,  0xfcffc000000000,  0x0,  0x7ffc000000000,  0x0,  0x7f00ffc000000000,  0x0,  0xffc000000000,  0x0,  0x3fffc000000000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff0000,  0xfffff00000000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c00000000000,  0x0,  0x0,  0x0,  0x3ff03ff00000000,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x7ff0000,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x3ff0000,  0x3ff000000000000,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f1000000000000,  0x3ff,  0x0,  0x0,  0xffffffffffff0000,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x70003fe00000080,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3c0000,  0x0,  0x3ff00000000,  0xfffeff00,  0xfffe0000000003ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x0,  0xffc000000000,  0x0,  0x0,  0x0,  0x0,  0x3f000000000000,  0x0,  0x0,  0x3ff0000,  0x3ff,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf00000000,  0x402,  0x0,  0x3e0000,  0x0,  0x0,  0x3ff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x60000000000000ff,  0x0,  0x0,  0x0,  0xff000000ff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffc0000,  0x0,  0x3ff000000000000,  0xffc0000000000000,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffc000,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x8000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c0e,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000000000000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x0,  0x100000,  0x3fff,  0x0,  0x0,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x0,  0x0,  0x0,  0x1003000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000000000000,  0x0,  0xc008000,  0x0,  0x0,  0x3c0000000017fff0,  0x0,  0x20,  0x61f0000,  0x0,  0xfc00,  0x0,  0x800000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff00000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x0,  0x0,  0x7700000,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0xc0000000,  0x0,  0x3f7f00000000,  0x0,  0x0,  0x1fc000000,  0x0,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x0,  0x800ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff0000000000,  0x0,  0xffc000000060,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x300000000f000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde00000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0xfff7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20010000fff3ff0e,  0x0,  0x100000000,  0x800000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x4008000000000000,  0x0,  0xfc000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf0000000000000,  0x0,  0x70000000000c000,  0xc00000000000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0x30000c0000000,  0x0,  0x0,  0x0,  0x80000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0xffff000003ff0000,  0xd0bfff7ffff,  0x0,  0x0,  0xb80000018c00f7ee,  0x3fa8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x8000000080000000,  0x0,  0x0,  0x0,  0x0,  0x8000000001ff0000,  0x0,  0x0,  0xfe00000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0xd800000000000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x8800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c070280901c07,  0x1c0701c0701c07,  0x1c0701c0c02c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0d01c0701c07,  0x1c0701c0f03807,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffafe0fffc003c,  0x0,  0x20000000000000,  0x30,  0x40000000000000,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x0,  0x6000020040000000,  0x0,  0x0,  0x0,  0x40000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c000000000000,  0x0,  0x0,  0x0,  0x2000000000000,  0x0,  0x1000000000000,  0x0,  0x7f8000000000000,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x200000000000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x1500000fce8000e,  0x0,  0xc000000000000000,  0x1e0dfbf,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0xffffffffc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff007fe00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa000000000000000,  0x6000e000e000e003,  0x0,  0x1c00000000040010,  0x3ffffff00001c00,  0x0,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffe000007,  0xcffffffff0ffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7e000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffff0000,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3007fffff,  0x0,  0x600,  0x0,  0x3c00f0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x380000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000000,  0x0,  0xfffc000000000000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000000000000000,  0x0,  0x27400000000,  0x0,  0x0,  0x4000000070000810,  0x50000001,  0x0,  0x30007f7f00000000,  0x0,  0x0,  0x0,  0x0,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0xffffffffffffffff,  0x23,  0x0,  0x0,  0xffffffffffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x3800], [ 0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000000,  0x0,  0x100000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0xf800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070341805c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d06c1a01c19,  0x700d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x341d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xffffffffffffffff,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xffffffffffffffff,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff20bf,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0xffffffffffffffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0xffffffffffffffff,  0x1fffffffffff0fff,  0xffffffffffffffff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x0,  0x7fffffffff00ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf000007fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff03ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xfffffffffe7fffff,  0xffffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffffffff7fff,  0xffff000fffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffff,  0xffffffffffffffff,  0xffffffff80ffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xfffffff03ffc01f,  0xffffffffffffffff,  0x1fffffff800fffff,  0xffffffffffffffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0xffffffffffffffff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x0,  0x0,  0x3ff3fffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xffffffffffffffff,  0xfffffffffff80003,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0xff8fffffffffff87,  0xffffffffffffffff,  0xfff07ff,  0x3fffffffffff0000,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x91bffffffffffd3f,  0xffbfffff,  0x0,  0x0,  0x83ffffff8fffffff,  0x0,  0xc0ffffffffffffff,  0x0,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0x0,  0x0,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xffdfffffffffffff,  0xf,  0xffffffffffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xf0007ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0xffffffffffffffff,  0x3f,  0x0,  0x0,  0xffffffffffffffff,  0x3ffff007fffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x1800], [ 0x4010040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x4000], [ 0x4020040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4040040100c01,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4050040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4060040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0xe00000000000000,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f8000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x10000], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x1c0701c0c01c07,  0x441003c0e03407,  0x44110441304412,  0x44110501104411,  0x44110441104411,  0x44160441104415,  0x1c070441805c11,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x441106c1a01c19,  0x70110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x441d0441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0707807,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x780701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000000000000,  0x40000280f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x0,  0x0,  0x0,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x0,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0x0,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0x0,  0xe00000000000f000,  0x0,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xffffffffffffffff,  0xff8000000000ff00,  0x0,  0x0,  0x0,  0xfffff8000000000,  0x0,  0x0,  0x0,  0x0,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0x0,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffc00e000,  0xffffffffffffffff,  0xffffffffffffffff,  0x800000000000,  0x80000000,  0x0,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0xffffffffffffffff,  0x4000000,  0xfff0000000000000,  0x0,  0x0,  0x0,  0xf000ffffffc00000,  0x0,  0x1,  0x1800000,  0x0,  0x1c0000000001f,  0x0,  0xf800000000008000,  0xfff000000000,  0x80000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffe000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0xff80,  0x0,  0x0,  0x0,  0x0,  0xfffff00000000000,  0x0,  0x7f000000,  0xff00000000000000,  0x0,  0x0,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xff00000000000000,  0x0,  0xf0000000fc003fe0,  0x0,  0xe00000007ff00000,  0x0,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0x0,  0xff80000007fffff8,  0xffff8080ff818181,  0xffffffffffffffff,  0xffffffffffffffff,  0xfc00c00000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff000000000,  0xf000000000000780,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc00000000000,  0x0,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x0,  0x6000000000000000,  0x1,  0x0,  0x8000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x0,  0xf800000000000000,  0x70000000000078,  0x0,  0xfffffffff000f800,  0xc00000000000ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xe0000000,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0x0,  0x0,  0xfffffc00c0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x6e400000000002c0,  0xffffffff00400000,  0xffffffffffffffff,  0xffffffffffffffff,  0x7c00000070000000,  0xffffffffffffffff,  0x3f00000000000000,  0xffffffffffffffff,  0x78f0000001100f90,  0xfe00ff00,  0xffffffffffffffff,  0xffffffffffffffff,  0x1c0000000000000,  0xf8000000c00000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffffffffffffe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x80000000ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffff00000003c000,  0x0,  0xfc00fe000000fffc,  0x20000000000000,  0xfffffffffffffff0,  0x0,  0xfffffffffc00fe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xff00000000000000,  0xfffffffffffffc00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfff0fff800000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe00000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x800000000000ffe0,  0xffffffff00007fff,  0xffffffffffffffff,  0xfffffffffffffffc,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x18000000000,  0x0,  0x0,  0xffffffffc0000000,  0x0,  0xffffffffffffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffc0000ff800000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0xc000000000,  0x0,  0x0,  0x0,  0x0,  0x3000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf00000000000,  0x0,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xf00000000000,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0xffffffffffffffff,  0xffffffffffffffff,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x8000000000000000,  0x2,  0x0,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0xffffffffffff001e,  0x0,  0xffffffffffffffc0,  0x0,  0xfff0000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffe0000000000000,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffd,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffff000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000]);
    immutable bestWhite_Space3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0xf,  0x3f], [ 0x80,  0xc0,  0x700], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8008002001,  0x8004002003,  0x8004002001,  0x8004002004,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002005,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xa6], [ 0x200,  0x170,  0x5100], [ 0x140a04018080200,  0x200a05038180a05,  0x241c0d0602c1409,  0x401209048241e09,  0x140a05048482209,  0x140a05028140a05,  0x242a09048242813,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x1209048241209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x18008002000,  0x3801800a004,  0x58028012008,  0x7803801a00c,  0x90044002010,  0xa8050002013,  0xc806002e016,  0xe000403601a,  0xf807c03c01d,  0xf807c03e020,  0xf807c03e01f,  0xf808c044021,  0xf807c04a024,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800404c001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x138004002001,  0x8004002001,  0x1500a4002028,  0x1700b405802b,  0x8004002001,  0x8004002001,  0x178004002001,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x1880c000201f,  0x1a00cc064001,  0x1c00dc06c035,  0xf807c03e039,  0x1e80f007603a,  0xf807c03e03e,  0xf807c08003f,  0xf810403e01f,  0xf807c03e01f,  0xf807c03e01f,  0x210004002001,  0xf807c03e043,  0xf807c03e01f,  0xf807c03e01f,  0x8004002001,  0xf807c03e044,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf8114002001,  0x23007c03e01f,  0xf807c03e047,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x258128092048,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf813003e01f,  0x8004002001,  0x8134002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x270004002001,  0xf807c03e04f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf813c002001,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x0,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0x3fffffffffff0000,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x0,  0x0,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x0,  0x0,  0x3fffffffffffff,  0x7ffff003fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0x0,  0x0,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x20,  0x78], [ 0x100,  0x160,  0x2c00], [ 0x100000000,  0x200000002,  0x300000002,  0x400000002,  0x200000005,  0x600000002,  0x200000002,  0x200000007,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x800000002,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000009,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x0,  0x0,  0x100000000000,  0x84000000,  0x44000,  0x0,  0x8c000000,  0x0,  0x4a024,  0x98000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x138000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa4050000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0x0,  0x0,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x0,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x0,  0x0,  0x37f800000000,  0x40000000,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0x0,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0x0,  0x0,  0xfff80000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x1a80], [ 0x100804018080200,  0x100804028100804,  0x1008090401c0c04,  0x100804020100804,  0x100804058101404,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x804020100804,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80020004000,  0x80020008002,  0x80020008002,  0x140020010003,  0x1c0060008002,  0x240080018006,  0x800b001800a,  0x800d003000c,  0x80020038005,  0x800f0008002,  0x80020008002,  0x440020040002,  0x4c012000800e,  0xc0050002,  0x80020008015,  0x80020008002,  0x64018005c016,  0x80020008002,  0x8002006c01a,  0x7401c0008002,  0x80020008002,  0x80020008002,  0x80020078002,  0x80020008002,  0x80002000801f,  0x80020088021,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020018023,  0x300170030024,  0x10002000800c,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x800e0008002,  0x980250008002,  0xa00270008002,  0x8002008c002,  0x80020008002,  0x802a0008029,  0x802c000802b,  0x80020008002,  0x8002000802d,  0x3002f001002e,  0x80020008002,  0x80020008002,  0x80020014002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008030,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80310008002,  0x80020008002,  0xc80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80330008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x3ff000000000000,  0x0,  0x3ff,  0x0,  0xffc000000000,  0x0,  0x3f0ffc000000000,  0x0,  0xfcffc000000000,  0x0,  0x7ffc000000000,  0x0,  0x7f00ffc000000000,  0x0,  0x3fffc000000000,  0x0,  0x3ff0000,  0xfffff00000000,  0x0,  0x3ff0000,  0x0,  0x0,  0x1ffffe0000000000,  0x0,  0x1c00000000000,  0x0,  0x3ff03ff00000000,  0x0,  0xffc0,  0x0,  0x7ff0000,  0x3ff03ff,  0x0,  0x0,  0x3ff03ff,  0x0,  0x3f1000000000000,  0x3ff,  0x0,  0x0,  0xffffffffffff0000,  0x3e7,  0x0,  0x0,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0x0,  0xffc0000000000000,  0xfffff,  0x0,  0x0,  0x2000000000000000,  0x70003fe00000080,  0x0,  0x3c0000,  0x0,  0x3ff00000000,  0xfffeff00,  0xfffe0000000003ff,  0x0,  0x3ff00000000,  0x0,  0x3f000000000000,  0x0,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0x0,  0xf00000000,  0x402,  0x0,  0x3e0000,  0x0,  0xff000000,  0xfc00000,  0x0,  0x0,  0x60000000000000ff,  0x0,  0xff000000ff000000,  0x0,  0x7fffffff00000000,  0x0,  0xfffffffc0000,  0xffc0000000000000,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x3ffff00000000,  0x0,  0xffffffffffffc000,  0x7ff,  0x0,  0x0,  0x0]);
    immutable bestPunctuation3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x20,  0x68], [ 0x100,  0x120,  0x3100], [ 0x100000000,  0x200000002,  0x300000002,  0x400000002,  0x600000005,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x700000002,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x8004002001,  0x8004002001,  0x8004002001,  0x130094048001,  0x14000404e001,  0x8004002001,  0x1600ac054029,  0x8004002001,  0x800405c02d,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800400202f,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000000000000000,  0x80,  0x0,  0x0,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x0,  0x100000,  0x3fff,  0x0,  0x0,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x0,  0x0,  0x0,  0x1003000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x10000000000000,  0x0,  0xc008000,  0x0,  0x0,  0x3c0000000017fff0,  0x0,  0x20,  0x61f0000,  0x0,  0xfc00,  0x0,  0x800000000000000,  0x0,  0x1ff00000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x0,  0x0,  0x7700000,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0xc0000000,  0x0,  0x3f7f00000000,  0x0,  0x0,  0x1fc000000,  0x0,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x0,  0x800ff,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x3fff0000000000,  0x0,  0xffc000000060,  0x0,  0x0,  0x1fffff8,  0x300000000f000000,  0x0,  0x0,  0x0,  0xde00000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0xfff7fffffffffff,  0x0,  0x0,  0x0,  0x20010000fff3ff0e,  0x0,  0x100000000,  0x800000000000000,  0x0,  0x0,  0x0,  0xc000000000000000,  0xe000,  0x4008000000000000,  0x0,  0xfc000000000000,  0x0,  0xf0000000000000,  0x0,  0x70000000000c000,  0xc00000000000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0x30000c0000000,  0x0,  0x0,  0x0,  0x80000000000,  0xc000000000000000,  0x0,  0x0,  0x0,  0xffff000003ff0000,  0xd0bfff7ffff,  0x0,  0x0,  0xb80000018c00f7ee,  0x3fa8000000,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x10000,  0x0,  0x800000,  0x0,  0x0,  0x8000000080000000,  0x0,  0x0,  0x0,  0x0,  0x8000000001ff0000,  0x0,  0x0,  0xfe00000000000000,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0xd800000000000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0xf000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x2a80], [ 0x140a04018080200,  0x140a05030140a05,  0x140a05028200e05,  0x140a05028140a05,  0x140a05058281205,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0xa05028140a05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80020004000,  0x14004000c002,  0x1c0020018002,  0x280020024008,  0x2c0020008002,  0x3800d0030002,  0x8010000800f,  0x4c0120008011,  0x80020050002,  0x540020008002,  0x80020008002,  0x580020008002,  0x600170008002,  0x80190008002,  0x80020008002,  0x680020008002,  0x7801d007001b,  0x84020007c01f,  0x7c01f008c022,  0x94024007c01f,  0x9801f007c01f,  0x8027007c01f,  0x800200a0002,  0xa801f00a4002,  0xb400200b002b,  0x7c01f00bc02e,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0xc00020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x800200c4002,  0xcc0320008002,  0x80020008034,  0x80020008035,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0xdc0360008002,  0xe00020008002,  0xec03a0008039,  0xf403c0008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x10003f00f801f,  0x80420008041,  0x80020008002,  0x114044010c002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020118002,  0x1280490120047,  0x13404c000804b,  0x144050013c04e,  0x8021014c052,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0x0,  0x0,  0xffffafe0fffc003c,  0x0,  0x20000000000000,  0x30,  0x40000000000000,  0x4,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x0,  0x6000020040000000,  0x0,  0x40000000000000,  0x0,  0xc0c000000000000,  0x0,  0x2000000000000,  0x0,  0x1000000000000,  0x0,  0x7f8000000000000,  0x0,  0x8000000000000000,  0x0,  0x200000000000000,  0x8000000000000000,  0x0,  0x1500000fce8000e,  0x0,  0xc000000000000000,  0x1e0dfbf,  0xc0000000,  0x0,  0x3ff0000,  0x0,  0x0,  0x8000000,  0x0,  0x1,  0x0,  0xffffffffc0000000,  0x0,  0x1ff007fe00000000,  0xa000000000000000,  0x6000e000e000e003,  0x0,  0x1c00000000040010,  0x3ffffff00001c00,  0x0,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xfffffffffe000007,  0xcffffffff0ffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x7e000000000,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x0,  0x18000000,  0x0,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffff0000,  0x7f,  0x3007fffff,  0x0,  0x600,  0x0,  0x3c00f0000000000,  0x0,  0x0,  0x380000000000000,  0x20000000000,  0x0,  0xfffc000000000000,  0x3,  0x0,  0x3000000000000000,  0x0,  0x27400000000,  0x4000000070000810,  0x50000001,  0x0,  0x30007f7f00000000,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0xffffffffffffffff,  0x23,  0xffffffffffffffff,  0x7fffff,  0x0,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x0,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0x0,  0x0]);
    immutable bestSpace_Separator3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0xf,  0x3f], [ 0x80,  0xc0,  0x700], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8008002001,  0x8004002003,  0x8004002001,  0x8004002004,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002005,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x100000000,  0x0,  0x100000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xae], [ 0x200,  0x190,  0x6100], [ 0x140a04018080200,  0x200a05038180a05,  0x241c0d0602c1409,  0x401209048241e09,  0x140a05098482209,  0x140a05028140a05,  0x242c09048242a14,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241217,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x1209048241209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10004002000,  0x28010006001,  0x4802000e006,  0x6803001600a,  0x8003c00200e,  0x90044002001,  0xb0054028013,  0xc8004030017,  0xe000403601a,  0xf000400201d,  0xf8004002001,  0x118088042020,  0x809804a024,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800404e001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x140004002001,  0x8004002001,  0x1580a8002029,  0x1780b805a02c,  0x8004002001,  0x8004002001,  0x180004002001,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1980c8002031,  0x1b00d4068001,  0x1d00e4070037,  0x1880c406203b,  0x1f80f807a03c,  0x188104062040,  0x1880c4086042,  0x188110062031,  0x1880c4062031,  0x1880c4062031,  0x228004002001,  0x1880c4062046,  0x1880c4062031,  0x1880c4062031,  0x8004002001,  0x1880c4062047,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x188120002001,  0x2480c4062031,  0x1880c406204a,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x27013409804b,  0x2901440a004f,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x18814c062031,  0x2b81580aa054,  0x2d81680b2058,  0x1880c4062031,  0x1880c4062031,  0x8004002001,  0x8170002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x2e8004002001,  0x1880c406205e,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x188178002001,  0x1880c4062031,  0x1880c40be031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xffffffffffffffff,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xffffffffffffffff,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0xffffffffffffffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0xffffffffffffffff,  0x1fffffffffff0fff,  0xffffffffffffffff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x0,  0x7fffffffff00ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf000007fffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff03ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xfffffffffe7fffff,  0xffffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffffffff7fff,  0xffff000fffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xfffffffffff,  0xffffffffffffffff,  0xffffffff80ffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xfffffff03ffc01f,  0xffffffffffffffff,  0x1fffffff800fffff,  0xffffffffffffffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0xffffffffffffffff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x0,  0x0,  0x3ff3fffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xffffffffffffffff,  0xfffffffffff80003,  0xffffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0xff8fffffffffff87,  0xffffffffffffffff,  0xfff07ff,  0x3fffffffffff0000,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff3fffffff,  0x0,  0x91bffffffffffd3f,  0xffbfffff,  0x0,  0x0,  0x83ffffff8fffffff,  0x0,  0xc0ffffffffffffff,  0x0,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0x0,  0x0,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0xffffffffffffffff,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xffdfffffffffffff,  0xf,  0xffffffffffffffff,  0x3ff01ff,  0x0,  0x0,  0xffffffffffffff,  0x3ff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xf0007ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0xffffffffffffffff,  0x3f,  0x0,  0x0,  0xffffffffffffffff,  0x3ffff007fffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0xf,  0x24], [ 0x80,  0x60,  0x600], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1001001001000,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1,  0x0,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0xf,  0x40], [ 0x80,  0xe0,  0x1200], [ 0x108040830404080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810214081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1002001001000,  0x1001001001001,  0x1001001001001,  0x1001001003001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001004,  0x5001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001006001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001007,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x0,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0xe00000000000000,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f8000000000000,  0x0,  0x0,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x6200], [ 0x140a04018080200,  0x200a05038180a05,  0x381a0c058281205,  0x401c0e070381e0e,  0x140a0509848220e,  0x140a05028140a05,  0x382c0e070382a14,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c17,  0x381c0e070381c0e,  0x140a05028141c0e,  0x140a05028140a05,  0x140a050c0140a05,  0x140a05028140a05,  0x3005028140a05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000,  0x2000c004000,  0x4001c00c005,  0x6002c014009,  0x7803800000d,  0x88040000000,  0xa8050026012,  0xc000002e016,  0xd8000034019,  0xe800000001c,  0xf0000000000,  0x11008404001f,  0x94048023,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x138000000000,  0x0,  0x1500a4000028,  0x1700b405802b,  0x0,  0x0,  0x178000000000,  0x0,  0x0,  0x0,  0x0,  0x1880c0000000,  0x1a00cc064000,  0x1c00dc06c035,  0x1d00e8074039,  0x1f00f407803b,  0x1d010007403f,  0x1d00e8084041,  0x1d010c07403a,  0x1d00e807403a,  0x1d00e807403a,  0x220000000000,  0x1d00e8074045,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x1d00e8074046,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d011c000000,  0x2400e807403a,  0x1d00e8074049,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x26813009604a,  0x28814009e04e,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d014807403a,  0x2b01540a8053,  0x2d01640b0057,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x16c000000,  0x0,  0x0,  0x0,  0x2e0000000000,  0x1d00e807405d,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d0174000000,  0x1d00e807403a,  0x1d00e80be05e,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x0,  0x0,  0x300000000000,  0x0,  0x0,  0x0,  0x300000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000000000000,  0x40000280f,  0x0,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x0,  0x0,  0x0,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x0,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0x0,  0x0,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0x0,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0x0,  0xe00000000000f000,  0x0,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xffffffffffffffff,  0xff8000000000ff00,  0x0,  0x0,  0x0,  0xfffff8000000000,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0x0,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0xfffffffffc00e000,  0xffffffffffffffff,  0xffffffffffffffff,  0x800000000000,  0x80000000,  0x0,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0xffffffffffffffff,  0x4000000,  0xfff0000000000000,  0x0,  0x0,  0x0,  0xf000ffffffc00000,  0x0,  0x1,  0x1800000,  0x0,  0x1c0000000001f,  0x0,  0xf800000000008000,  0xfff000000000,  0x80000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0xffc0000000000000,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffe000,  0x0,  0x0,  0xe000,  0xff80,  0xfffff00000000000,  0x0,  0x7f000000,  0xff00000000000000,  0x0,  0x0,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xff00000000000000,  0x0,  0xf0000000fc003fe0,  0x0,  0xe00000007ff00000,  0x0,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0x0,  0xff80000007fffff8,  0xffff8080ff818181,  0xffffffffffffffff,  0xffffffffffffffff,  0xfc00c00000000000,  0x0,  0x0,  0xfff000000000,  0xf000000000000780,  0x0,  0xc00000000000,  0x0,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x0,  0x7fffc,  0x0,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x0,  0x6000000000000000,  0x1,  0x0,  0x8000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x0,  0xf800000000000000,  0x70000000000078,  0x0,  0xfffffffff000f800,  0xc00000000000ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xe0000000,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0x0,  0x0,  0xfffffc00c0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x6e400000000002c0,  0xffffffff00400000,  0xffffffffffffffff,  0xffffffffffffffff,  0x7c00000070000000,  0xffffffffffffffff,  0x3f00000000000000,  0xffffffffffffffff,  0x78f0000001100f90,  0xfe00ff00,  0xffffffffffffffff,  0xffffffffffffffff,  0x1c0000000000000,  0xf8000000c00000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffffffffffffe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x80000000ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffff00000003c000,  0x0,  0xfc00fe000000fffc,  0x20000000000000,  0xfffffffffffffff0,  0x0,  0xfffffffffc00fe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xff00000000000000,  0xfffffffffffffc00,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfff0fff800000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfe00000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x800000000000ffe0,  0xffffffff00007fff,  0xffffffffffffffff,  0xfffffffffffffffc,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x18000000000,  0x0,  0x0,  0xffffffffc0000000,  0x0,  0xffffffffffffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffc0000ff800000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0xc000000000,  0x0,  0x0,  0x0,  0x0,  0x3000,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0xf00000000000,  0x0,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xf00000000000,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0xffffffffffffffff,  0xffffffffffffffff,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x8000000000000000,  0x2,  0x0,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0xffffffffffff001e,  0x0,  0xffffffffffffffc0,  0x0,  0xfff0000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffff800000,  0xffe0000000000000,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffd,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffff000000000000,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0xc000000000000000]);
    immutable bestWhite_Space4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x10,  0x2c], [ 0x40,  0x30,  0x70,  0x380], [ 0x41041041041040,  0x41041041041041,  0x41041041041041,  0x41041,  0x0,  0x0,  0x0,  0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x0,  0x80020004000,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x8002000c002,  0x80020008004,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008005,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008003,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0]);
    immutable bestAlphabetic4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1f,  0x93], [ 0x40,  0x80,  0x1d0,  0x4080], [ 0x1861861440c2040,  0x186186186186186,  0x186186186186186,  0x186186,  0x0,  0x0,  0x0,  0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070340d05c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d0681901c18,  0x6c0d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d,  0x0,  0x0,  0x80020004000,  0x14004000c002,  0x200070018002,  0x3000b0028009,  0x4000f003800d,  0x500130048011,  0x600170058015,  0x7001b0068019,  0x8002007801d,  0x88021008001f,  0x80020008023,  0x9c0260094024,  0xac02a00a4028,  0xbc02e00b402c,  0xc800200c4030,  0xd00330008002,  0xe003700d8035,  0xe403900e4039,  0xe403900e8039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xf803d00f003b,  0xe403900e403f,  0x10c0420104040,  0xe403900e4039,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x1100020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x1140020008002,  0x80020008002,  0x80020008002,  0x80020118002,  0x1280490120047,  0x13804d013004b,  0x148051014004f,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x14c0020008002,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x800200e4039,  0x15c0560154054,  0x1640580008002,  0x17405c016c05a,  0xe4060017c05e,  0x18c0620184039,  0xe40390190002,  0xe403900e4039,  0x19c06600e4065,  0xe406900e4068,  0xe403900e406a,  0xe403900e4039,  0x1b806d01b006b,  0xe403900e4039,  0xe403900e4039,  0xe40390110039,  0x80020008002,  0xe406f0008002,  0xe403900e4070,  0xe403900e4039,  0x80020008002,  0x80020008002,  0xe403900e4071,  0xe403900e4039,  0x80020008002,  0xe403900e4072,  0xe403900e4039,  0x1d007300e4039,  0xe403900e4075,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x807801dc076,  0x1ec07a01e4002,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403901f407c,  0x80020008002,  0x80020008002,  0x80020008002,  0x800201f8002,  0x80020008002,  0x80020008002,  0x80020008002,  0x807f0008002,  0xe403900e4064,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x80020008002,  0xe403900e4064,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0x0,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0x1fff,  0x1fff,  0x3fffffffffff0000,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0x3fffffff,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x3fffffffffffff,  0x7ffff003fffff,  0xffffffffffffffff,  0x1ff,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0xffffffffffffffff,  0x7fffffffffff,  0xffffffffffffffff,  0x7ffffffff,  0x7fffffffffff,  0x0,  0x1ffffffffffffff,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestMark4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1c,  0x64], [ 0x40,  0x70,  0x120,  0x2300], [ 0x1041041040c2040,  0x104104104104104,  0x105104104104104,  0x104104,  0x0,  0x0,  0x0,  0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c07,  0x1c070380701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c1001c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x10000000,  0xc0000008000,  0x1c0060014004,  0x2c00a0024008,  0x3c00e003400c,  0x4c0120044010,  0x5c0160054014,  0x64018,  0x1a0000000,  0x0,  0x7001b0000000,  0x8001f007801d,  0x8c0220000021,  0x980000094024,  0x0,  0x9c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa802900a0000,  0x0,  0xb002b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb802d,  0xc803100c002f,  0xd400000d0033,  0x0,  0x0,  0x0,  0x360000000,  0x0,  0x37,  0xe00000000000,  0x0,  0x0,  0x0,  0x0,  0x39,  0x0,  0x0,  0xf403c00ec03a,  0x0,  0x0,  0xf8000,  0x0,  0x0,  0x0,  0x10003f0000000,  0x1080410000000,  0x43,  0x0,  0x0,  0x40440000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x3f8,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0xe0000000,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0xf000007fffffffff,  0x0,  0x1ffffffff0000,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x37f800000000,  0x40000000,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0xfff80000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestNumber4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x2b,  0x97], [ 0x80,  0x70,  0x1b0,  0xcc0], [ 0x10a040840608080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xa0140300580a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140380680a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0x1001e0280500a,  0x1502804c09011,  0xa02c0280500a,  0xa0140280500a,  0x170140280500a,  0xa01402805018,  0xa0140640500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0x500a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200080008000,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x40018001,  0x800040008001,  0x200040008001,  0xc00040028001,  0xa00040028001,  0x1000040038001,  0xa00040048001,  0x200040050001,  0x1600040058001,  0x20004000800c,  0x2002c0020001,  0x200040008001,  0x200040008001,  0x200040068001,  0x200040008001,  0x200040008001,  0x1c00040008001,  0x1e00040008001,  0x20004000800b,  0x2200040080001,  0x200480008001,  0x200000058001,  0x200040090001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200100098001,  0x2005400a0001,  0x200040008001,  0x200040008001,  0x30005c00b0001,  0x200040008001,  0x200040008001,  0x2006800c8001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x3600040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x20004000801c,  0x200740008001,  0x2007c00f0003,  0x200040008001,  0x200040008001,  0x200040008001,  0xa00040008003,  0x200040008001,  0x1600040008020,  0x1600040008004,  0x200040058001,  0x40008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x20004000800b,  0x200040008001,  0x2008c0110021,  0x200040008001,  0x4c00040128024,  0x2000c0008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040138001,  0x200040008028,  0x200040148001,  0x200040150001,  0x200040008001,  0x200040008001,  0x200040158001,  0x200040008001,  0x40160001,  0x1600040008019,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x800040008001,  0x200040008001,  0x20004017002d,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040178001,  0x200040008001,  0x200040008001,  0x200040008001,  0x6000040008001,  0x200040008001,  0x200040008031,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x3ff00000000,  0x3ff,  0xffc000000000,  0x3f0ffc000000000,  0xfcffc000000000,  0x7ffc000000000,  0x7f00ffc000000000,  0x3fffc000000000,  0x3ff0000,  0xfffff00000000,  0x1ffffe0000000000,  0x1c00000000000,  0x3ff03ff00000000,  0xffc0,  0x7ff0000,  0x3ff03ff,  0x3f1000000000000,  0xffffffffffff0000,  0x3e7,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0xffc0000000000000,  0xfffff,  0x2000000000000000,  0x70003fe00000080,  0x3c0000,  0xfffeff00,  0xfffe0000000003ff,  0x3f000000000000,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0xf00000000,  0x402,  0x3e0000,  0xff000000,  0xfc00000,  0x60000000000000ff,  0xff000000ff000000,  0x7fffffff00000000,  0xfffffffc0000,  0xffffffffffffffff,  0x7ffffffff,  0x3ffff00000000,  0xffffffffffffc000,  0x7ff,  0x0]);
    immutable bestPunctuation4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x27,  0x7f], [ 0x80,  0x60,  0x160,  0x1440], [ 0x102040840608080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a03c0700d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x110200340680d,  0xd0260340900d,  0xd0280340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x600080008000,  0x6000c0018003,  0x6000c0018003,  0x600140020003,  0x6000c0018003,  0x10001c0030003,  0x16000c0050009,  0x1a000c001800c,  0x6000c007800e,  0x6000c0080003,  0x22000c0018003,  0x6000c0018003,  0x6000c0018003,  0x24000c0018003,  0x6000c0098003,  0x2c00540018014,  0x30000c00b8003,  0x6000c0018003,  0x6000c0018003,  0x6000c00c8003,  0x6000c001801a,  0x6000c0018003,  0x3a007000d8003,  0x3e000c001801e,  0x6000c0018020,  0x6000c0108003,  0x6008c0018022,  0x4a000c0120003,  0x50000c0138026,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x600ac0150029,  0x6000c0018003,  0x6000c0018003,  0x6000c001802c,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x5c000c0168003,  0x6000c0018003,  0x6000bc0018003,  0x6000c0018003,  0x6000c0018003,  0x62000c0018003,  0x6000c0088003,  0x6000c0018032,  0x6000c0018003,  0x3000d00018033,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x4e000c0018003,  0x6000c0018003,  0x6e000c01b0035,  0x6000c0018003,  0x72000c01c0003,  0x78000c01d803a,  0x7c000c01e8003,  0x7e000c0018003,  0x6000c0018003,  0x6000c0018027,  0x6000c0208040,  0x6000c0218042,  0x6000c0018003,  0x6000c0018044,  0x6000c0018003,  0x8a00ec0018003,  0x6000c0230003,  0x6000c0018047,  0x6000c0240003,  0x6000c0018049,  0x98012c0250003,  0x9c000c0268003,  0x6000c0018003,  0x6000c0018003,  0x6000c0278003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x4000000000000000,  0x80,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x100000,  0x3fff,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x1003000000000,  0x1000000000000,  0x10000000000000,  0xc008000,  0x3c0000000017fff0,  0x20,  0x61f0000,  0xfc00,  0x800000000000000,  0x1ff00000000,  0x1,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x7700000,  0x7ff,  0x30,  0xc0000000,  0x3f7f00000000,  0x1fc000000,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x800ff,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x60000000000,  0x3fff0000000000,  0xffc000000060,  0x1fffff8,  0x300000000f000000,  0xde00000000000000,  0xfff7fffffffffff,  0x20010000fff3ff0e,  0x100000000,  0xe000,  0x4008000000000000,  0xfc000000000000,  0xf0000000000000,  0x70000000000c000,  0xc00000000000,  0x80000000,  0xc0003ffe,  0xf0000000,  0x30000c0000000,  0x80000000000,  0xffff000003ff0000,  0xd0bfff7ffff,  0xb80000018c00f7ee,  0x3fa8000000,  0x7,  0x10000,  0x800000,  0x8000000080000000,  0x8000000001ff0000,  0xfe00000000000000,  0x3f80,  0xd800000000000000,  0x3,  0xf,  0x1e0,  0xf000000000000,  0x0]);
    immutable bestSymbol4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0x7,  0x31,  0x99], [ 0x40,  0xc0,  0x1a0,  0x1b80], [ 0x1041041040c2040,  0x104104104104104,  0x104104104104104,  0x104104,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0400780d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x130240440680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0540a00d,  0x1702c0340680d,  0xd01a03406818,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x680d,  0x0,  0x0,  0x0,  0x600080008000,  0x800100020004,  0xa00100020004,  0x10001c0030004,  0x800240020004,  0x800280020004,  0x180010002000b,  0x1000100020004,  0x800100020004,  0x1a00100020004,  0x1c00100020004,  0x2000100078004,  0x800100088004,  0x800100090004,  0x800100020011,  0x2a00500020013,  0x800580020004,  0x800100020004,  0x800100020004,  0x8005c0020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x3000100020004,  0x800100020004,  0x34001000c8004,  0x800100020004,  0x8001000d8004,  0x800100020004,  0x800100020004,  0x800100020004,  0x3a00700020004,  0x8007c00f0004,  0x4600880108020,  0x46008c0118023,  0x4a008c0118024,  0x5200a00138026,  0x46008c0118023,  0x46008c0118023,  0x5a00b0015802a,  0x46008c0118023,  0x5e00b80118023,  0x46008c0118023,  0x800100180023,  0x6200100020004,  0x800100020004,  0x4a00c80020004,  0x66008c0118023,  0x800d40020034,  0x6e00d80020004,  0x7600e801c8038,  0x46008c0118023,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x4600100020004,  0x800100020004,  0x800100020004,  0x7800880020004,  0x800100020004,  0x800100020004,  0x800f8002003d,  0x80010002003f,  0x800100020004,  0x800100200004,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x8601080020041,  0x800100020004,  0x8800100020004,  0x800100228004,  0x9000100238046,  0x800100020004,  0x98012c0250049,  0x800100020004,  0x800100020004,  0x9a008c0118023,  0xa20140027804e,  0x800100290023,  0x800100298023,  0x800100020004,  0x800100020004,  0xa800100020004,  0xb0015c02b0055,  0x800100020004,  0x800100020004,  0xb200100020004,  0x800100020004,  0xb8016c011805a,  0xbe017802d005d,  0x800100308060,  0xca01900318062,  0xce008c033003b,  0xd400100348068,  0xd8008c0358023,  0x800100128023,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0xffffafe0fffc003c,  0x20000000000000,  0x30,  0x40000000000000,  0x4,  0x8000,  0xc9c0,  0x6000020040000000,  0xc0c000000000000,  0x2000000000000,  0x1000000000000,  0x7f8000000000000,  0x8000000000000000,  0x200000000000000,  0x1500000fce8000e,  0xc000000000000000,  0x1e0dfbf,  0xc0000000,  0x3ff0000,  0x8000000,  0x1,  0xffffffffc0000000,  0x1ff007fe00000000,  0xa000000000000000,  0x6000e000e000e003,  0x1c00000000040010,  0x3ffffff00001c00,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xfffffffffe000007,  0xcffffffff0ffffff,  0x3ff1fff,  0x7e000000000,  0xfffffffffbffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x18000000,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0x7f,  0x3007fffff,  0x600,  0x3c00f0000000000,  0x380000000000000,  0x20000000000,  0xfffc000000000000,  0x3,  0x3000000000000000,  0x27400000000,  0x4000000070000810,  0x50000001,  0x30007f7f00000000,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0x23,  0x7fffff,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x3000000000000,  0xffff0fffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0xfffffffffffffffd,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0xf800000000000000,  0xffe1,  0x3f,  0x0]);
    immutable bestSpace_Separator4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x10,  0x2c], [ 0x40,  0x30,  0x70,  0x300], [ 0x41041041041040,  0x41041041041041,  0x41041041041041,  0x41041,  0x0,  0x0,  0x0,  0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x0,  0x40010000000,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010008001,  0x40010004003,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004004,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004002,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x100000000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0]);
    immutable bestGraphical4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0x7,  0x46,  0xfa], [ 0x40,  0x120,  0x2d0,  0x3280], [ 0x1861861440c2040,  0x186186186186186,  0x187186186186186,  0x186186,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xf01a0340680d,  0xd01a0440800d,  0xd01a0340680d,  0x130240340680d,  0x1302604c09813,  0x1602a05009813,  0x1b0340640c017,  0x1303a07009813,  0x1302607806813,  0x1302604c09813,  0x1302604c09813,  0x1302604c1001f,  0x1302604c09813,  0x1302604c09813,  0x1304204c09813,  0x1302604c09813,  0x1302608c11013,  0x2504804c09813,  0xd01a04c09826,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x2701a0340680d,  0x290500340680d,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c0982a,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x2b02604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x4c09813,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600080008000,  0x6000c0018003,  0x6000c0018003,  0x600140020003,  0x6000c0018003,  0x1200200038006,  0x16000c001800a,  0x1e0038006800c,  0x2600480088010,  0x2c005400a0003,  0x34006400c0017,  0x3c007400e001b,  0x440084010001f,  0x4c00940120023,  0x5400a40140027,  0x5a00b00158003,  0x5c000c0018003,  0x6000c0018003,  0x6200c00178003,  0x6a00d00198032,  0x6000c0018003,  0x6000c0018003,  0x6e00d80018003,  0x74000c01c8038,  0x7c00f401e003b,  0x840104020003f,  0x8c01140220043,  0x90000c0238003,  0x9601180250049,  0x98000c0018003,  0x6000c0018003,  0xa0013c027004d,  0xa8014c0290051,  0x601540018003,  0x6000c0018003,  0xac000c0018003,  0x6000c02c0057,  0x6000c0018003,  0x6000c0018003,  0x6000c0018059,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c011802d0003,  0xba000c02e005b,  0xc2018002f805e,  0xac018c0230062,  0xc8000c0018003,  0x6019402c8003,  0xd0019c0018066,  0x2000c001805c,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x600f80018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0xd2000c0018003,  0xd601a80018003,  0x6000c0018003,  0x7801b4001806c,  0xde01b80018003,  0xe2000c01e0070,  0xe6000c0390003,  0xec000c03a8074,  0xf001180230077,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0xf201a00018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0xf6000c03d0003,  0xfc000c03e807c,  0x6000c0018003,  0x102020003f8003,  0x108000c0418082,  0x10a00040018059,  0x1e000c0438086,  0x11402240018088,  0x11600d80230046,  0x11e0238046808c,  0x8c02400018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180490091,  0x8c02500230093,  0x8c011804b0095,  0x8c011804c0097,  0x8c011804c8003,  0x8c01180230046,  0x8c011804d0046,  0x8c01180230046,  0x13a027004d8003,  0x13e000c04f004f,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x14000f00230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c01180508003,  0x8c01180510003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c011802300a1,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x8c011802300a3,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c02940520003,  0x8c011802300a6,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x7c000c0018003,  0x152000c05400a7,  0x8c01180550003,  0x8c01180558003,  0x15c02b40560003,  0x6000c05800af,  0x602c40018003,  0x164000c0018003,  0x8c01180230046,  0x8c01180230046,  0x16c02d405a00b3,  0x8c01180230046,  0x17002dc0018041,  0x17602e802080b9,  0x8c011805e80bc,  0x18002fc04200be,  0x184000c0608001,  0x18a011806200c3,  0x154000c0630003,  0x8c011802b0003,  0x6000c0018003,  0x6000c0018003,  0x18e000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018035,  0x8c011802300a9,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x8c011802300a9,  0x8c01180230046,  0x8c01180230046,  0x190000c0018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffff20bf,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0x1fffffffffff0fff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x7fffffffff00ff,  0xf000007fffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffff03ff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xfffffffffffffffe,  0x3ff1fff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0xfffffffffbffffff,  0xfff0000003fffff,  0xfffffffffe7fffff,  0xfffe3fffffffffe0,  0x7ffffffffff7fff,  0xffff000fffffffff,  0x1fff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xfffffffffff,  0xffffffff80ffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xfffffff03ffc01f,  0x1fffffff800fffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x3ff3fffffffffff,  0xffffffffffff87f,  0xffff3fffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xfffffffffff80003,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0x1fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xff8fffffffffff87,  0xfff07ff,  0x3fffffffffff0000,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0x3ff3fffffff,  0x91bffffffffffd3f,  0xffbfffff,  0x83ffffff8fffffff,  0xc0ffffffffffffff,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x1ff,  0x7fffffff00000000,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xf,  0x3ff01ff,  0x3ff,  0x7fffffffffff,  0xf0007ffffffff,  0x1ffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x3,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0x3fffffff,  0x3f,  0x3ffff007fffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffff3fffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0xfffffffffffffffd,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0xf800000000000000,  0xffe1,  0x7fffff,  0xffffffffffff,  0x0]);
    immutable bestControl4 = CodepointTrie!(5,4,4,8).fromRawArray([ 0x0,  0x3,  0xc,  0x18], [ 0x20,  0x30,  0x30,  0x300], [ 0x84210842108420,  0x108421,  0x0,  0x40201008040200,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x201008040201,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1c,  0x3c], [ 0x40,  0x70,  0x80,  0x600], [ 0x1041041040c2040,  0x104104104104104,  0x105104104104104,  0x104104,  0x0,  0x0,  0x0,  0x4020040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4040040100c01,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4050040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040600401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x4000c002,  0x0,  0x0,  0x0,  0x0,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000018000,  0x20000,  0x0,  0x0,  0x0,  0x90000000,  0x0,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x8000000000000000,  0x0,  0xe00000000000000,  0x2000000000000000,  0x0,  0x0,  0x7f8000000000000,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestCn4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x4b,  0x103], [ 0x80,  0xf0,  0x2e0,  0x3180], [ 0x80e182840608080,  0xb162c58b1628488,  0xb162c58b162c58b,  0xb162c58b162c58b,  0xb162c58b162c58b,  0xb162c58b162c58b,  0x8102058b163058b,  0xd102040d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xf01a0340680d,  0xd01a0440800d,  0xd01a0340680d,  0xd0240340680d,  0xd01a0340680d,  0x1502804c0680d,  0x1a0320600b816,  0x1b03a0700d81b,  0x1b0360780681b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b03606c1001f,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b04206c0d81b,  0x1b03606c0d81b,  0x1b03608c1101b,  0x2504806c0d81b,  0xd01a06c0d826,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd04e0340680d,  0x1b0520a00680d,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x2a03606c0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b0360ac0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0xd01a06c0d81b,  0xd01a0340680d,  0xd01a0340680d,  0xd0580340680d,  0xd01a0340680d,  0xd01a0340680d,  0x2c01a0340680d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80008000,  0x0,  0xc00140020003,  0x7,  0x1600280048008,  0x1e0038006800c,  0x2400440080000,  0x2c005400a0013,  0x34006400c0017,  0x3c007400e001b,  0x440084010001f,  0x4c00940120023,  0x5200a00138000,  0x5400000000000,  0x0,  0x5a00b00158000,  0x6200c0017802e,  0x0,  0x0,  0x6600c80000000,  0x6c000001a8034,  0x7400e401c0037,  0x7c00f401e003b,  0x840104020003f,  0x8800000218000,  0x8e01080230045,  0x9000000000000,  0x0,  0x98012c0250049,  0x9e01380268000,  0x1400000000,  0x0,  0xa200000000000,  0x298052,  0x0,  0x0,  0x54,  0x0,  0x0,  0x0,  0x84010802a8000,  0xb0000002b8056,  0xb8016c02d0059,  0xa20178021005d,  0xbe00000000000,  0x18002a0000,  0xc601880000061,  0xc800000000057,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xca00000000000,  0xce01980000000,  0x0,  0x7001a40000068,  0xd601a80000000,  0xda000001c006c,  0xde00000370000,  0xe400000388070,  0xe801080210073,  0x0,  0x0,  0x0,  0xea018c0000000,  0x0,  0x0,  0xee000003b0000,  0xf4000003c8078,  0x0,  0xfa01f003d8000,  0x100000003f807e,  0x10201900000054,  0x1600000418082,  0x10c02140000084,  0x10e00c80210042,  0x11602280448088,  0x8402300000000,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x840108047008d,  0x840240021008f,  0x8401080490091,  0x84010804a0093,  0x84010804a8000,  0x8401080210042,  0x84010804b0042,  0x8401080210042,  0x130000004b8000,  0x134000004c804b,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x13600e00210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x0,  0x84010804e0000,  0x84010804e8000,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x840108021009c,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x840108021009e,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x84028004f8000,  0x84010802100a1,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x7400000000000,  0x146000000000a2,  0x8401080520000,  0x8401080528000,  0x150029c0530000,  0x5500a9,  0x2ac0000000,  0x15800000000000,  0x8401080210042,  0x8401080210042,  0x16002bc05700ad,  0x8401080210042,  0x16402c4000003d,  0x16a02d001e80b3,  0x84010805b80b6,  0x17602e805c80b8,  0x17a000005e0064,  0x180010805f80be,  0x14800000608000,  0x8401080288000,  0x0,  0x0,  0x18400000000000,  0x0,  0x0,  0x0,  0x0,  0x31,  0x84010802100a3,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x84010802100a3,  0x8401080210042,  0x84010800000c3,  0x18800000000000,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x0,  0x17c00000000000,  0x0,  0x0,  0x0,  0x17c00000000000,  0x0,  0x8300000000000000,  0x40000280f,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0xdf40,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0xe00000000000f000,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xff8000000000ff00,  0xfffff8000000000,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0xfc00,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x1,  0xfffffffffc00e000,  0x800000000000,  0x80000000,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0x4000000,  0xf000ffffffc00000,  0x1800000,  0x1c0000000001f,  0xf800000000008000,  0xfff000000000,  0x8000000000000000,  0xffffffffffffe000,  0xe000,  0xff80,  0xfffff00000000000,  0x7f000000,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xf0000000fc003fe0,  0xe00000007ff00000,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0xff80000007fffff8,  0xffff8080ff818181,  0xfc00c00000000000,  0xf000000000000780,  0xc00000000000,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x7fffc,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x6000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x70000000000078,  0xfffffffff000f800,  0xc00000000000ffff,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0xfffffc00c0000000,  0x6e400000000002c0,  0xffffffff00400000,  0x7c00000070000000,  0x3f00000000000000,  0x78f0000001100f90,  0xfe00ff00,  0x1c0000000000000,  0xf8000000c00000,  0xfffffffffffffe00,  0x80000000ffffffff,  0xffff00000003c000,  0xfc00fe000000fffc,  0xfffffffffffffff0,  0xfffffffffc00fe00,  0xfffffffffffffc00,  0xffff800000000000,  0xfff0fff800000000,  0xfe00000000000000,  0x800000000000ffe0,  0xffffffff00007fff,  0xfffffffffffffffc,  0x18000000000,  0xffffffffc0000000,  0xffffffffffffffc0,  0xfffc0000ff800000,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0xc000000000,  0x3000,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x2,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0x7ffffffffffffff,  0xffffffffffff001e,  0xffffffffff800000,  0xfffffffd,  0xffff000000000000,  0xc000000000000000]);
}

}
else
    static assert(false, "Sorry, no BigEndian data for unicode TRIEs yet");

enum EMPTY_CASE_TRIE = ushort.max;//from what gen_uni uses internally

@trusted:
public: //Public API continues

/++

+/
int sicmp(C1, C2)(in C1[] str1, in C2[] str2)
{
    alias simpleCaseTable stab;
    size_t ridx=0;
    foreach(dchar lhs; str1)
    {
        if(ridx == str2.length)
            return 1;
        dchar rhs = std.utf.decode(str2, ridx);
        int diff = lhs - rhs;
        if(!diff)
            continue;
        size_t idx = simpleCaseTrie[lhs];
        size_t idx2 = simpleCaseTrie[rhs];        
        //simpleCaseTrie is packed index table
        if(idx != EMPTY_CASE_TRIE)
        {
            if(idx2 != EMPTY_CASE_TRIE)
            {//both cased chars
                //adjust idx --> start of bucket
                idx = idx - stab[idx].n;
                idx2 = idx2 - stab[idx2].n;
                if(idx == idx2)//one bucket, equivalent chars
                    continue;
                else//  not the same bucket
                    diff = stab[idx].ch - stab[idx2].ch;
            }
            else
                diff = stab[idx - stab[idx].n].ch - rhs;
        }
        else if(idx2 != EMPTY_CASE_TRIE)
        {
            diff = lhs - stab[idx2 - stab[idx2].n].ch;
        }
        //one of chars is not cased at all
        return diff;
    }
    return ridx == str2.length ? 0 : -1;
}

private int fullCasedCmp(C)(ref dchar lhs, ref dchar rhs, ref inout(C)[] str)
{
    alias fullCaseTable ftab;
    size_t idx = fullCaseTrie[lhs];
    //fullCaseTrie is packed index table
    if(idx != EMPTY_CASE_TRIE)
    {
        size_t start = idx - ftab[idx].n;
        size_t end = ftab[idx].size + start;
        assert(ftab[start].entry_len == 1);
        lhs = ftab[start].ch;//to use when diff is required
        for(idx=start; idx<end; idx++)
        {
            if(ftab[idx].entry_len == 1)
            {
                if(ftab[idx].ch == rhs)
                    return 0;
            }
            else 
            {//OK it's a long chunk, like 'ss' for German
                dstring seq = ftab[idx].seq;
                if(rhs == seq[0] 
                    && str.skipOver(seq[1..$]))
                {
                    return 0;
                }
            }
        }
    }
    return 1;
}

/++
	
+/
int icmp(C1, C2)(inout(C1)[] str1, inout(C2)[] str2)
{
    
    for(;;)
    {
        if(str1.empty)
            return str2.empty ? 0 : -1;
        dchar lhs = str1.front;
        if(str2.empty)
            return 1;
        dchar rhs = str2.front;
        str1.popFront();
        str2.popFront();

        int diff = lhs - rhs;
        if(!diff)
            continue;
        if(fullCasedCmp(lhs, rhs, str2) == 0)
            continue;
        else if(fullCasedCmp(rhs, lhs, str1) == 0)
            continue;
        diff = lhs - rhs;//lhs & rhs are remapped to the start of bucket
        return diff;
    }
}

unittest
{   
    foreach(cfunc; TypeTuple!(icmp, sicmp)) 
    {
        foreach(S1; TypeTuple!(string, wstring, dstring))
        foreach(S2; TypeTuple!(string, wstring, dstring))
        {
            assert(cfunc("".to!S1, "".to!S2) == 0);
            assert(cfunc("A".to!S1, "".to!S2) > 0);
            assert(cfunc("".to!S1, "0".to!S2) < 0);
            assert(cfunc("abc".to!S1, "abc".to!S2) == 0);
            assert(cfunc("abcd".to!S1, "abc".to!S2) > 0);
            assert(cfunc("abc".to!S1, "abcd".to!S2) < 0);
            assert(cfunc("Abc".to!S1, "aBc".to!S2) == 0);
            assert(cfunc("авГуст".to!S1, "АВгУСТ".to!S2) == 0);
        }
        //check that the order is propely agonstic to the case
        auto strs = [ "Apple", "ORANGE",  "orAcle", "amp", "banana"];
        sort!((a,b) => cfunc(a,b) < 0)(strs);    
        assert(strs == ["amp", "Apple",  "banana", "orAcle", "ORANGE"]);        
    }
    assert(icmp("ßa", "ssa") == 0);
}


/++
    Whether or not $(D c) is a Unicode whitespace character.
    (general Unicode category: Part of C0(tab, vertical tab, form feed,
    carriage return, and linefeed characters), Zs, Zl, Zp, and NEL(U+0085))
  +/
bool isWhite(dchar c) 
{
	return bestWhite_Space2[c];
}

/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isLower) instead.)

    Return whether $(D c) is a Unicode lowercase character.
  +/
deprecated bool isUniLower(dchar c) //@safe pure nothrow
{
    return isLower(c);
}

/++
    Return whether $(D c) is a Unicode lowercase character.
  +/
bool isLower(dchar c) //@safe pure nothrow
{
    if(std.ascii.isASCII(c))
        return std.ascii.isLower(c);

    return upperCaseTrie[c];
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isUpper) instead.)

    Return whether $(D c) is a Unicode uppercase character.
  +/
deprecated bool isUniUpper(dchar c) //@safe pure nothrow
{
    return isUpper(c);
}

/++
    Return whether $(D c) is a Unicode uppercase character.
  +/
bool isUpper(dchar c) //@safe pure nothrow
{
    if(std.ascii.isASCII(c))
        return std.ascii.isUpper(c);

    return lowerCaseTrie[c];
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D toLower) instead.)

    If $(D c) is a Unicode uppercase character, then its lowercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
deprecated dchar toUniLower(dchar c) //@safe pure nothrow
{
    return toLower(c);
}

/++
    If $(D c) is a Unicode uppercase character, then its lowercase equivalent
    is returned. Otherwise $(D c) is returned.
    
    Warning: certain alphabets like German, Greek and some have no 1:1
    upper-lower mapping. Use overload of toLower which takes full string instead.
  +/
dchar toLower(dchar c) // @safe pure nothrow
{
    if(std.ascii.isUpper(c))
        c += 32;
    else if(c >= 0x00C0)
    {
        if((c >= 0x00C0 && c <= 0x00D6) ||
           (c >= 0x00D8 && c<=0x00DE))
        {
            c += 32;
        }
        else if((c >= 0x0100 && c < 0x0138) ||
                (c > 0x0149 && c < 0x0178))
        {
            if(c == 0x0130)
                c = 0x0069;
            else if((c & 1) == 0)
                ++c;
        }
        else if(c == 0x0178)
            c = 0x00FF;
        else if((c >= 0x0139 && c < 0x0149) ||
                (c > 0x0178 && c < 0x017F))
        {
            if(c & 1)
                ++c;
        }
        else if(c >= 0x0200 && c <= 0x0217)
        {
            if((c & 1) == 0)
                ++c;
        }
        else if((c >= 0x0401 && c <= 0x040C) ||
                (c>= 0x040E && c <= 0x040F))
        {
            c += 80;
        }
        else if(c >= 0x0410 && c <= 0x042F)
            c += 32;
        else if(c >= 0x0460 && c <= 0x047F)
        {
            if((c & 1) == 0)
                ++c;
        }
        else if(c >= 0x0531 && c <= 0x0556)
            c += 48;
        else if(c >= 0x10A0 && c <= 0x10C5)
            c += 48;
        else if(c >= 0xFF21 && c <= 0xFF3A)
            c += 32;
    }

    return c;
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D toUpper) instead.)

    If $(D c) is a Unicode lowercase character, then its uppercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
deprecated dchar toUniUpper(dchar c) //@safe pure nothrow
{
    return toUpper(c);
}

/++
    If $(D c) is a Unicode lowercase character, then its uppercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
dchar toUpper(dchar c) //@safe pure nothrow
{
    if(std.ascii.isLower(c))
        c -= 32;
    else if(c >= 0x00E0)
    {
        if((c >= 0x00E0 && c <= 0x00F6) ||
           (c >= 0x00F8 && c <= 0x00FE))
        {
            c -= 32;
        }
        else if(c == 0x00FF)
            c = 0x0178;
        else if((c >= 0x0100 && c < 0x0138) ||
                (c > 0x0149 && c < 0x0178))
        {
            if(c == 0x0131)
                c = 0x0049;
            else if(c & 1)
                --c;
        }
        else if((c >= 0x0139 && c < 0x0149) ||
                (c > 0x0178 && c < 0x017F))
        {
            if((c & 1) == 0)
                --c;
        }
        else if(c == 0x017F)
            c = 0x0053;
        else if(c >= 0x0200 && c <= 0x0217)
        {
            if(c & 1)
                --c;
        }
        else if(c >= 0x0430 && c<= 0x044F)
            c -= 32;
        else if((c >= 0x0451 && c <= 0x045C) ||
                (c >=0x045E && c<= 0x045F))
        {
            c -= 80;
        }
        else if(c >= 0x0460 && c <= 0x047F)
        {
            if(c & 1)
                --c;
        }
        else if(c >= 0x0561 && c < 0x0587)
            c -= 48;
        else if(c >= 0xFF41 && c <= 0xFF5A)
            c -= 32;
    }

    return c;
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isAlpha) instead.)

    Returns whether $(D c) is a Unicode alpha character
    (general Unicode category: Lu, Ll, Lt, Lm, and Lo).

    Standards: Unicode 5.0.0.
  +/
deprecated bool isUniAlpha(dchar c) //@safe pure nothrow
{
    return isAlpha(c);
}

/++
    Returns whether $(D c) is a Unicode alpha character
    (general Unicode category: Lu, Ll, Lt, Lm, and Lo).

    Standards: Unicode 5.0.0.
  +/
bool isAlpha(dchar c) /*@safe pure nothrow*/
{    
    // optimization
    if(c < 0xAA)
    {
        if(c < 'A')
            return false;
        if(c <= 'Z')
            return true;
        if(c < 'a')
            return false;
        if(c <= 'z')
            return true;
        return false;
    }

    return bestAlphabetic3[c];
}

unittest
{
    auto alpha = unicodeSet("Alphabetic");
    foreach(ch; alpha.byChar)
        assert(isAlpha(ch));   
    foreach(ch; 0..0x4000)
        assert((ch in alpha) == isAlpha(ch)); 
}


/++
    Returns whether $(D c) is a Unicode mark
    (general Unicode category: Mn, Me, Mc).

    Standards: Unicode 6.0.0.
  +/


@trusted
bool isMark(dchar c) //@safe pure nothrow
{
    return bestMark2[c];
}

unittest
{
    auto mark = unicodeSet("Mark");
    foreach(ch; mark.byChar)
        assert(isMark(ch));   
    foreach(ch; 0..0x4000)
        assert((ch in mark) == isMark(ch)); 
}


/++
    Returns whether $(D c) is a Unicode numerical character
    (general Unicode category: Nd, Nl, No).

    Standards: Unicode 6.0.0.
  +/

bool isNumber(dchar c) //@safe pure nothrow
{
   return bestNumber3[c];
}

unittest
{
    auto n = unicodeSet("N");
    foreach(ch; n.byChar)
        assert(isNumber(ch));
    foreach(ch; 0..0x4000)
        assert((ch in n) == isNumber(ch));
}


/++
    Returns whether $(D c) is a Unicode punctuation character
    (general Unicode category: Pd, Ps, Pe, Pc, Po, Pi, Pf).

    Standards: Unicode 6.0.0.
  +/

bool isPunctuation(dchar c) //@safe pure nothrow
{//TODO: discover cause of faulty lvl3 
    return bestPunctuation4[c];
}

unittest
{
    assert(isPunctuation('\u0021'));
    assert(isPunctuation('\u0028'));
    assert(isPunctuation('\u0029'));
    assert(isPunctuation('\u002D'));
    assert(isPunctuation('\u005F'));
    assert(isPunctuation('\u00AB'));
    assert(isPunctuation('\u00BB'));
    foreach(ch; unicodeSet("P").byChar)
        assert(isPunctuation(ch));
}


/++
    Returns whether $(D c) is a Unicode symbol character
    (general Unicode category: Sm, Sc, Sk, So)

    Standards: Unicode 6.0.0.
  +/
bool isSymbol(dchar c) //@safe pure nothrow
{
   return bestSymbol3[c];
}

unittest
{
    assert(isSymbol('\u0024'));
    assert(isSymbol('\u002B'));
    assert(isSymbol('\u005E'));
    assert(isSymbol('\u00A6'));
    foreach(ch; unicodeSet("S").byChar)
        assert(isSymbol(ch));
}


/++
    Returns whether $(D c) is a Unicode whitespace character
    (general Unicode category: Zs)

    Standards: Unicode 6.0.0.
  +/
bool isSpace(dchar c) //@safe pure nothrow
{
    return bestSpace_Separator2[c];
}

unittest
{
    assert(isSpace('\u0020'));
    foreach(ch; unicodeSet("Zs").byChar)
        assert(isSpace(ch));
}


/++
    Returns whether $(D c) is a Unicode graphical character
    (general Unicode category: L, M, N, P, S, Zs).

    Standards: Unicode 6.0.0.
  +/

bool isGraphical(dchar c) //@safe pure nothrow
{
    return bestGraphical3[c];
}


unittest
{
    auto set = unicodeSet("Alphabetic") | unicodeSet("S") | unicodeSet("P")
        | unicodeSet("M") | unicodeSet("N") | unicodeSet("Zs");
    foreach(ch; set.byChar)
        assert(isGraphical(ch));
    foreach(ch; 0..0x4000)
        assert((ch in set) == isGraphical(ch));
}


/++
    Returns whether $(D c) is a Unicode control character
    (general Unicode category: Cc)

    Standards: Unicode 6.0.0.
  +/

bool isControl(dchar c) //@safe pure nothrow
{
    return (c <= 0x1F || (0x80 <= c && c <= 0x9F));
}

unittest
{
    assert(isControl('\u0000'));
    assert(isControl('\u0081'));
    assert(!isControl('\u0100'));
}


/++
    Returns whether $(D c) is a Unicode formatting character
    (general Unicode category: Cf)

    Standards: Unicode 6.0.0.
  +/
bool isFormat(dchar c) //@safe pure nothrow
{
    return bestFormat3[c];
}


unittest
{
    assert(isFormat('\u00AD'));
    foreach(ch; unicodeSet("Format").byChar)
        assert(isFormat(ch));
}


/++
    Returns whether $(D c) is a Unicode Private Use character
    (general Unicode category: Co)

    Standards: Unicode 6.0.0.
  +/
bool isPrivateUse(dchar c) //@safe pure nothrow
{
    return (0x00_E000 <= c && c <= 0x00_F8FF)
        || (0x0F_0000 <= c && c <= 0x0F_FFFD)
        || (0x10_0000 <= c && c <= 0x10_FFFD);
}


unittest
{
}


/++
    Returns whether $(D c) is a Unicode surrogate character
    (general Unicode category: Cs)

    Standards: Unicode 6.0.0.
  +/
bool isSurrogate(dchar c) //@safe pure nothrow
{
    return (0xD800 <= c && c <= 0xDFFF);
}

/++
    Returns whether $(D c) is a Unicode high surrogate (lead surrogate).

    Standards: Unicode 2.0.
  +/
bool isSurrogateHi(dchar c) @safe pure nothrow
{
    return (0xD800 <= c && c <= 0xDBFF);
}

/++
    Returns whether $(D c) is a Unicode low surrogate (trail surrogate).

    Standards: Unicode 2.0.
  +/
bool isSurrogateLo(dchar c) @safe pure nothrow
{
    return (0xDC00 <= c && c <= 0xDFFF);
}

unittest
{
}


/++
    Returns whether $(D c) is a Unicode non-character
    (general Unicode category: Cn)

    Standards: Unicode 6.0.0.
  +/

bool isNonCharacter(dchar c) //@safe pure nothrow
{
    return bestCn3[c]; 
}


unittest
{
    auto set = unicodeSet("Cn");
    foreach(ch; set.byChar)
        assert(isNonCharacter(ch));
}


//Written in the D programming language
/**
 * License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
 *
 * Authors: Dmitry Olshansky
 *
 */
//Automatically generated from Unicode Character Database files

//Written in the D programming language
/**
 * License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
 *
 * Authors: Dmitry Olshansky
 *
 */
//Automatically generated from Unicode Character Database files
import uni;



struct SimpleCaseEntry

{

    uint ch;

    ubyte n, size;// n - number in batch, size - size of batch

}



struct FullCaseEntry

{

    union

    {

        dchar ch;

        dstring seq;

    }

    ubyte n, size;// n number in batch, size - size of batch

    ubyte entry_len;// ==1 read ch, >1 - seq



    @property auto value()const

    { 

        return entry_len == 1 ? (&ch)[0..1] : cast(dstring)seq;

    }



    this(dstring value, ubyte num, ubyte batch_size)

    {

        assert(value.length < 255);

        entry_len = cast(ubyte)value.length;

        if(value.length == 1)

            ch = value[0];

        else{

            seq = value;

        }

        n = num;

        size = batch_size;

    }

}



immutable simpleCaseTable = [
    SimpleCaseEntry(4279, 0, 2), 
    SimpleCaseEntry(11543, 1, 2), 
    SimpleCaseEntry(7780, 0, 2), 
    SimpleCaseEntry(7781, 1, 2), 
    SimpleCaseEntry(8169, 0, 2), 
    SimpleCaseEntry(8161, 1, 2), 
    SimpleCaseEntry(8558, 0, 2), 
    SimpleCaseEntry(8574, 1, 2), 
    SimpleCaseEntry(11281, 0, 2), 
    SimpleCaseEntry(11329, 1, 2), 
    SimpleCaseEntry(42790, 0, 2), 
    SimpleCaseEntry(42791, 1, 2), 
    SimpleCaseEntry(390, 0, 2), 
    SimpleCaseEntry(596, 1, 2), 
    SimpleCaseEntry(1168, 0, 2), 
    SimpleCaseEntry(1169, 1, 2), 
    SimpleCaseEntry(4280, 0, 2), 
    SimpleCaseEntry(11544, 1, 2), 
    SimpleCaseEntry(8170, 0, 2), 
    SimpleCaseEntry(8058, 1, 2), 
    SimpleCaseEntry(8559, 0, 2), 
    SimpleCaseEntry(8575, 1, 2), 
    SimpleCaseEntry(11282, 0, 2), 
    SimpleCaseEntry(11330, 1, 2), 
    SimpleCaseEntry(391, 0, 2), 
    SimpleCaseEntry(392, 1, 2), 
    SimpleCaseEntry(4281, 0, 2), 
    SimpleCaseEntry(11545, 1, 2), 
    SimpleCaseEntry(7782, 0, 2), 
    SimpleCaseEntry(7783, 1, 2), 
    SimpleCaseEntry(8171, 0, 2), 
    SimpleCaseEntry(8059, 1, 2), 
    SimpleCaseEntry(11283, 0, 2), 
    SimpleCaseEntry(11331, 1, 2), 
    SimpleCaseEntry(42792, 0, 2), 
    SimpleCaseEntry(42793, 1, 2), 
    SimpleCaseEntry(1170, 0, 2), 
    SimpleCaseEntry(1171, 1, 2), 
    SimpleCaseEntry(4282, 0, 2), 
    SimpleCaseEntry(11546, 1, 2), 
    SimpleCaseEntry(8172, 0, 2), 
    SimpleCaseEntry(8165, 1, 2), 
    SimpleCaseEntry(11284, 0, 2), 
    SimpleCaseEntry(11332, 1, 2), 
    SimpleCaseEntry(393, 0, 2), 
    SimpleCaseEntry(598, 1, 2), 
    SimpleCaseEntry(4283, 0, 2), 
    SimpleCaseEntry(11547, 1, 2), 
    SimpleCaseEntry(7784, 0, 2), 
    SimpleCaseEntry(7785, 1, 2), 
    SimpleCaseEntry(11285, 0, 2), 
    SimpleCaseEntry(11333, 1, 2), 
    SimpleCaseEntry(42794, 0, 2), 
    SimpleCaseEntry(42795, 1, 2), 
    SimpleCaseEntry(394, 0, 2), 
    SimpleCaseEntry(599, 1, 2), 
    SimpleCaseEntry(1172, 0, 2), 
    SimpleCaseEntry(1173, 1, 2), 
    SimpleCaseEntry(4284, 0, 2), 
    SimpleCaseEntry(11548, 1, 2), 
    SimpleCaseEntry(11286, 0, 2), 
    SimpleCaseEntry(11334, 1, 2), 
    SimpleCaseEntry(395, 0, 2), 
    SimpleCaseEntry(396, 1, 2), 
    SimpleCaseEntry(4285, 0, 2), 
    SimpleCaseEntry(11549, 1, 2), 
    SimpleCaseEntry(7786, 0, 2), 
    SimpleCaseEntry(7787, 1, 2), 
    SimpleCaseEntry(11287, 0, 2), 
    SimpleCaseEntry(11335, 1, 2), 
    SimpleCaseEntry(42796, 0, 2), 
    SimpleCaseEntry(42797, 1, 2), 
    SimpleCaseEntry(1174, 0, 2), 
    SimpleCaseEntry(1175, 1, 2), 
    SimpleCaseEntry(4286, 0, 2), 
    SimpleCaseEntry(11550, 1, 2), 
    SimpleCaseEntry(11288, 0, 2), 
    SimpleCaseEntry(11336, 1, 2), 
    SimpleCaseEntry(4287, 0, 2), 
    SimpleCaseEntry(11551, 1, 2), 
    SimpleCaseEntry(7788, 0, 2), 
    SimpleCaseEntry(7789, 1, 2), 
    SimpleCaseEntry(11289, 0, 2), 
    SimpleCaseEntry(11337, 1, 2), 
    SimpleCaseEntry(42798, 0, 2), 
    SimpleCaseEntry(42799, 1, 2), 
    SimpleCaseEntry(398, 0, 2), 
    SimpleCaseEntry(477, 1, 2), 
    SimpleCaseEntry(1176, 0, 2), 
    SimpleCaseEntry(1177, 1, 2), 
    SimpleCaseEntry(4288, 0, 2), 
    SimpleCaseEntry(11552, 1, 2), 
    SimpleCaseEntry(11290, 0, 2), 
    SimpleCaseEntry(11338, 1, 2), 
    SimpleCaseEntry(399, 0, 2), 
    SimpleCaseEntry(601, 1, 2), 
    SimpleCaseEntry(4289, 0, 2), 
    SimpleCaseEntry(11553, 1, 2), 
    SimpleCaseEntry(7790, 0, 2), 
    SimpleCaseEntry(7791, 1, 2), 
    SimpleCaseEntry(11291, 0, 2), 
    SimpleCaseEntry(11339, 1, 2), 
    SimpleCaseEntry(400, 0, 2), 
    SimpleCaseEntry(603, 1, 2), 
    SimpleCaseEntry(1178, 0, 2), 
    SimpleCaseEntry(1179, 1, 2), 
    SimpleCaseEntry(4290, 0, 2), 
    SimpleCaseEntry(11554, 1, 2), 
    SimpleCaseEntry(11292, 0, 2), 
    SimpleCaseEntry(11340, 1, 2), 
    SimpleCaseEntry(401, 0, 2), 
    SimpleCaseEntry(402, 1, 2), 
    SimpleCaseEntry(4291, 0, 2), 
    SimpleCaseEntry(11555, 1, 2), 
    SimpleCaseEntry(7792, 0, 2), 
    SimpleCaseEntry(7793, 1, 2), 
    SimpleCaseEntry(11293, 0, 2), 
    SimpleCaseEntry(11341, 1, 2), 
    SimpleCaseEntry(42802, 0, 2), 
    SimpleCaseEntry(42803, 1, 2), 
    SimpleCaseEntry(1180, 0, 2), 
    SimpleCaseEntry(1181, 1, 2), 
    SimpleCaseEntry(4292, 0, 2), 
    SimpleCaseEntry(11556, 1, 2), 
    SimpleCaseEntry(11294, 0, 2), 
    SimpleCaseEntry(11342, 1, 2), 
    SimpleCaseEntry(403, 0, 2), 
    SimpleCaseEntry(608, 1, 2), 
    SimpleCaseEntry(4293, 0, 2), 
    SimpleCaseEntry(11557, 1, 2), 
    SimpleCaseEntry(7794, 0, 2), 
    SimpleCaseEntry(7795, 1, 2), 
    SimpleCaseEntry(11295, 0, 2), 
    SimpleCaseEntry(11343, 1, 2), 
    SimpleCaseEntry(42804, 0, 2), 
    SimpleCaseEntry(42805, 1, 2), 
    SimpleCaseEntry(404, 0, 2), 
    SimpleCaseEntry(611, 1, 2), 
    SimpleCaseEntry(1182, 0, 2), 
    SimpleCaseEntry(1183, 1, 2), 
    SimpleCaseEntry(8184, 0, 2), 
    SimpleCaseEntry(8056, 1, 2), 
    SimpleCaseEntry(11296, 0, 2), 
    SimpleCaseEntry(11344, 1, 2), 
    SimpleCaseEntry(4295, 0, 2), 
    SimpleCaseEntry(11559, 1, 2), 
    SimpleCaseEntry(7796, 0, 2), 
    SimpleCaseEntry(7797, 1, 2), 
    SimpleCaseEntry(8185, 0, 2), 
    SimpleCaseEntry(8057, 1, 2), 
    SimpleCaseEntry(11297, 0, 2), 
    SimpleCaseEntry(11345, 1, 2), 
    SimpleCaseEntry(42806, 0, 2), 
    SimpleCaseEntry(42807, 1, 2), 
    SimpleCaseEntry(406, 0, 2), 
    SimpleCaseEntry(617, 1, 2), 
    SimpleCaseEntry(1184, 0, 2), 
    SimpleCaseEntry(1185, 1, 2), 
    SimpleCaseEntry(8186, 0, 2), 
    SimpleCaseEntry(8060, 1, 2), 
    SimpleCaseEntry(11298, 0, 2), 
    SimpleCaseEntry(11346, 1, 2), 
    SimpleCaseEntry(407, 0, 2), 
    SimpleCaseEntry(616, 1, 2), 
    SimpleCaseEntry(7798, 0, 2), 
    SimpleCaseEntry(7799, 1, 2), 
    SimpleCaseEntry(8187, 0, 2), 
    SimpleCaseEntry(8061, 1, 2), 
    SimpleCaseEntry(11299, 0, 2), 
    SimpleCaseEntry(11347, 1, 2), 
    SimpleCaseEntry(42808, 0, 2), 
    SimpleCaseEntry(42809, 1, 2), 
    SimpleCaseEntry(408, 0, 2), 
    SimpleCaseEntry(409, 1, 2), 
    SimpleCaseEntry(1186, 0, 2), 
    SimpleCaseEntry(1187, 1, 2), 
    SimpleCaseEntry(8188, 0, 2), 
    SimpleCaseEntry(8179, 1, 2), 
    SimpleCaseEntry(11300, 0, 2), 
    SimpleCaseEntry(11348, 1, 2), 
    SimpleCaseEntry(7800, 0, 2), 
    SimpleCaseEntry(7801, 1, 2), 
    SimpleCaseEntry(11301, 0, 2), 
    SimpleCaseEntry(11349, 1, 2), 
    SimpleCaseEntry(42810, 0, 2), 
    SimpleCaseEntry(42811, 1, 2), 
    SimpleCaseEntry(1188, 0, 2), 
    SimpleCaseEntry(1189, 1, 2), 
    SimpleCaseEntry(8579, 0, 2), 
    SimpleCaseEntry(8580, 1, 2), 
    SimpleCaseEntry(11302, 0, 2), 
    SimpleCaseEntry(11350, 1, 2), 
    SimpleCaseEntry(4301, 0, 2), 
    SimpleCaseEntry(11565, 1, 2), 
    SimpleCaseEntry(7802, 0, 2), 
    SimpleCaseEntry(7803, 1, 2), 
    SimpleCaseEntry(11303, 0, 2), 
    SimpleCaseEntry(11351, 1, 2), 
    SimpleCaseEntry(42812, 0, 2), 
    SimpleCaseEntry(42813, 1, 2), 
    SimpleCaseEntry(412, 0, 2), 
    SimpleCaseEntry(623, 1, 2), 
    SimpleCaseEntry(1190, 0, 2), 
    SimpleCaseEntry(1191, 1, 2), 
    SimpleCaseEntry(11304, 0, 2), 
    SimpleCaseEntry(11352, 1, 2), 
    SimpleCaseEntry(413, 0, 2), 
    SimpleCaseEntry(626, 1, 2), 
    SimpleCaseEntry(7804, 0, 2), 
    SimpleCaseEntry(7805, 1, 2), 
    SimpleCaseEntry(11305, 0, 2), 
    SimpleCaseEntry(11353, 1, 2), 
    SimpleCaseEntry(42814, 0, 2), 
    SimpleCaseEntry(42815, 1, 2), 
    SimpleCaseEntry(1192, 0, 2), 
    SimpleCaseEntry(1193, 1, 2), 
    SimpleCaseEntry(11306, 0, 2), 
    SimpleCaseEntry(11354, 1, 2), 
    SimpleCaseEntry(415, 0, 2), 
    SimpleCaseEntry(629, 1, 2), 
    SimpleCaseEntry(7806, 0, 2), 
    SimpleCaseEntry(7807, 1, 2), 
    SimpleCaseEntry(11307, 0, 2), 
    SimpleCaseEntry(11355, 1, 2), 
    SimpleCaseEntry(42816, 0, 2), 
    SimpleCaseEntry(42817, 1, 2), 
    SimpleCaseEntry(416, 0, 2), 
    SimpleCaseEntry(417, 1, 2), 
    SimpleCaseEntry(1194, 0, 2), 
    SimpleCaseEntry(1195, 1, 2), 
    SimpleCaseEntry(11308, 0, 2), 
    SimpleCaseEntry(11356, 1, 2), 
    SimpleCaseEntry(7808, 0, 2), 
    SimpleCaseEntry(7809, 1, 2), 
    SimpleCaseEntry(11309, 0, 2), 
    SimpleCaseEntry(11357, 1, 2), 
    SimpleCaseEntry(42818, 0, 2), 
    SimpleCaseEntry(42819, 1, 2), 
    SimpleCaseEntry(418, 0, 2), 
    SimpleCaseEntry(419, 1, 2), 
    SimpleCaseEntry(1196, 0, 2), 
    SimpleCaseEntry(1197, 1, 2), 
    SimpleCaseEntry(11310, 0, 2), 
    SimpleCaseEntry(11358, 1, 2), 
    SimpleCaseEntry(7810, 0, 2), 
    SimpleCaseEntry(7811, 1, 2), 
    SimpleCaseEntry(42820, 0, 2), 
    SimpleCaseEntry(42821, 1, 2), 
    SimpleCaseEntry(420, 0, 2), 
    SimpleCaseEntry(421, 1, 2), 
    SimpleCaseEntry(1198, 0, 2), 
    SimpleCaseEntry(1199, 1, 2), 
    SimpleCaseEntry(7812, 0, 2), 
    SimpleCaseEntry(7813, 1, 2), 
    SimpleCaseEntry(42822, 0, 2), 
    SimpleCaseEntry(42823, 1, 2), 
    SimpleCaseEntry(422, 0, 2), 
    SimpleCaseEntry(640, 1, 2), 
    SimpleCaseEntry(1200, 0, 2), 
    SimpleCaseEntry(1201, 1, 2), 
    SimpleCaseEntry(423, 0, 2), 
    SimpleCaseEntry(424, 1, 2), 
    SimpleCaseEntry(7814, 0, 2), 
    SimpleCaseEntry(7815, 1, 2), 
    SimpleCaseEntry(42824, 0, 2), 
    SimpleCaseEntry(42825, 1, 2), 
    SimpleCaseEntry(1202, 0, 2), 
    SimpleCaseEntry(1203, 1, 2), 
    SimpleCaseEntry(425, 0, 2), 
    SimpleCaseEntry(643, 1, 2), 
    SimpleCaseEntry(7816, 0, 2), 
    SimpleCaseEntry(7817, 1, 2), 
    SimpleCaseEntry(42826, 0, 2), 
    SimpleCaseEntry(42827, 1, 2), 
    SimpleCaseEntry(1204, 0, 2), 
    SimpleCaseEntry(1205, 1, 2), 
    SimpleCaseEntry(7818, 0, 2), 
    SimpleCaseEntry(7819, 1, 2), 
    SimpleCaseEntry(42828, 0, 2), 
    SimpleCaseEntry(42829, 1, 2), 
    SimpleCaseEntry(428, 0, 2), 
    SimpleCaseEntry(429, 1, 2), 
    SimpleCaseEntry(1206, 0, 2), 
    SimpleCaseEntry(1207, 1, 2), 
    SimpleCaseEntry(7820, 0, 2), 
    SimpleCaseEntry(7821, 1, 2), 
    SimpleCaseEntry(42830, 0, 2), 
    SimpleCaseEntry(42831, 1, 2), 
    SimpleCaseEntry(430, 0, 2), 
    SimpleCaseEntry(648, 1, 2), 
    SimpleCaseEntry(1208, 0, 2), 
    SimpleCaseEntry(1209, 1, 2), 
    SimpleCaseEntry(66560, 0, 2), 
    SimpleCaseEntry(66600, 1, 2), 
    SimpleCaseEntry(431, 0, 2), 
    SimpleCaseEntry(432, 1, 2), 
    SimpleCaseEntry(7822, 0, 2), 
    SimpleCaseEntry(7823, 1, 2), 
    SimpleCaseEntry(42832, 0, 2), 
    SimpleCaseEntry(42833, 1, 2), 
    SimpleCaseEntry(66561, 0, 2), 
    SimpleCaseEntry(66601, 1, 2), 
    SimpleCaseEntry(1210, 0, 2), 
    SimpleCaseEntry(1211, 1, 2), 
    SimpleCaseEntry(66562, 0, 2), 
    SimpleCaseEntry(66602, 1, 2), 
    SimpleCaseEntry(433, 0, 2), 
    SimpleCaseEntry(650, 1, 2), 
    SimpleCaseEntry(7824, 0, 2), 
    SimpleCaseEntry(7825, 1, 2), 
    SimpleCaseEntry(42834, 0, 2), 
    SimpleCaseEntry(42835, 1, 2), 
    SimpleCaseEntry(66563, 0, 2), 
    SimpleCaseEntry(66603, 1, 2), 
    SimpleCaseEntry(434, 0, 2), 
    SimpleCaseEntry(651, 1, 2), 
    SimpleCaseEntry(1212, 0, 2), 
    SimpleCaseEntry(1213, 1, 2), 
    SimpleCaseEntry(66564, 0, 2), 
    SimpleCaseEntry(66604, 1, 2), 
    SimpleCaseEntry(435, 0, 2), 
    SimpleCaseEntry(436, 1, 2), 
    SimpleCaseEntry(7826, 0, 2), 
    SimpleCaseEntry(7827, 1, 2), 
    SimpleCaseEntry(42836, 0, 2), 
    SimpleCaseEntry(42837, 1, 2), 
    SimpleCaseEntry(66565, 0, 2), 
    SimpleCaseEntry(66605, 1, 2), 
    SimpleCaseEntry(1214, 0, 2), 
    SimpleCaseEntry(1215, 1, 2), 
    SimpleCaseEntry(66566, 0, 2), 
    SimpleCaseEntry(66606, 1, 2), 
    SimpleCaseEntry(437, 0, 2), 
    SimpleCaseEntry(438, 1, 2), 
    SimpleCaseEntry(7828, 0, 2), 
    SimpleCaseEntry(7829, 1, 2), 
    SimpleCaseEntry(42838, 0, 2), 
    SimpleCaseEntry(42839, 1, 2), 
    SimpleCaseEntry(66567, 0, 2), 
    SimpleCaseEntry(66607, 1, 2), 
    SimpleCaseEntry(1216, 0, 2), 
    SimpleCaseEntry(1231, 1, 2), 
    SimpleCaseEntry(66568, 0, 2), 
    SimpleCaseEntry(66608, 1, 2), 
    SimpleCaseEntry(439, 0, 2), 
    SimpleCaseEntry(658, 1, 2), 
    SimpleCaseEntry(1217, 0, 2), 
    SimpleCaseEntry(1218, 1, 2), 
    SimpleCaseEntry(42840, 0, 2), 
    SimpleCaseEntry(42841, 1, 2), 
    SimpleCaseEntry(66569, 0, 2), 
    SimpleCaseEntry(66609, 1, 2), 
    SimpleCaseEntry(440, 0, 2), 
    SimpleCaseEntry(441, 1, 2), 
    SimpleCaseEntry(66570, 0, 2), 
    SimpleCaseEntry(66610, 1, 2), 
    SimpleCaseEntry(1219, 0, 2), 
    SimpleCaseEntry(1220, 1, 2), 
    SimpleCaseEntry(42842, 0, 2), 
    SimpleCaseEntry(42843, 1, 2), 
    SimpleCaseEntry(66571, 0, 2), 
    SimpleCaseEntry(66611, 1, 2), 
    SimpleCaseEntry(66572, 0, 2), 
    SimpleCaseEntry(66612, 1, 2), 
    SimpleCaseEntry(1221, 0, 2), 
    SimpleCaseEntry(1222, 1, 2), 
    SimpleCaseEntry(42844, 0, 2), 
    SimpleCaseEntry(42845, 1, 2), 
    SimpleCaseEntry(66573, 0, 2), 
    SimpleCaseEntry(66613, 1, 2), 
    SimpleCaseEntry(444, 0, 2), 
    SimpleCaseEntry(445, 1, 2), 
    SimpleCaseEntry(7835, 0, 3), 
    SimpleCaseEntry(7777, 1, 3), 
    SimpleCaseEntry(7776, 2, 3), 
    SimpleCaseEntry(66574, 0, 2), 
    SimpleCaseEntry(66614, 1, 2), 
    SimpleCaseEntry(1223, 0, 2), 
    SimpleCaseEntry(1224, 1, 2), 
    SimpleCaseEntry(42846, 0, 2), 
    SimpleCaseEntry(42847, 1, 2), 
    SimpleCaseEntry(66575, 0, 2), 
    SimpleCaseEntry(66615, 1, 2), 
    SimpleCaseEntry(66576, 0, 2), 
    SimpleCaseEntry(66616, 1, 2), 
    SimpleCaseEntry(1225, 0, 2), 
    SimpleCaseEntry(1226, 1, 2), 
    SimpleCaseEntry(7838, 0, 2), 
    SimpleCaseEntry(223, 1, 2), 
    SimpleCaseEntry(42848, 0, 2), 
    SimpleCaseEntry(42849, 1, 2), 
    SimpleCaseEntry(66577, 0, 2), 
    SimpleCaseEntry(66617, 1, 2), 
    SimpleCaseEntry(837, 0, 4), 
    SimpleCaseEntry(953, 1, 4), 
    SimpleCaseEntry(921, 2, 4), 
    SimpleCaseEntry(8126, 3, 4), 
    SimpleCaseEntry(66578, 0, 2), 
    SimpleCaseEntry(66618, 1, 2), 
    SimpleCaseEntry(1227, 0, 2), 
    SimpleCaseEntry(1228, 1, 2), 
    SimpleCaseEntry(7840, 0, 2), 
    SimpleCaseEntry(7841, 1, 2), 
    SimpleCaseEntry(42850, 0, 2), 
    SimpleCaseEntry(42851, 1, 2), 
    SimpleCaseEntry(66579, 0, 2), 
    SimpleCaseEntry(66619, 1, 2), 
    SimpleCaseEntry(66580, 0, 2), 
    SimpleCaseEntry(66620, 1, 2), 
    SimpleCaseEntry(1229, 0, 2), 
    SimpleCaseEntry(1230, 1, 2), 
    SimpleCaseEntry(7842, 0, 2), 
    SimpleCaseEntry(7843, 1, 2), 
    SimpleCaseEntry(9398, 0, 2), 
    SimpleCaseEntry(9424, 1, 2), 
    SimpleCaseEntry(42852, 0, 2), 
    SimpleCaseEntry(42853, 1, 2), 
    SimpleCaseEntry(66581, 0, 2), 
    SimpleCaseEntry(66621, 1, 2), 
    SimpleCaseEntry(452, 0, 3), 
    SimpleCaseEntry(454, 1, 3), 
    SimpleCaseEntry(453, 2, 3), 
    SimpleCaseEntry(9399, 0, 2), 
    SimpleCaseEntry(9425, 1, 2), 
    SimpleCaseEntry(66582, 0, 2), 
    SimpleCaseEntry(66622, 1, 2), 
    SimpleCaseEntry(453, 0, 3), 
    SimpleCaseEntry(454, 1, 3), 
    SimpleCaseEntry(452, 2, 3), 
    SimpleCaseEntry(7844, 0, 2), 
    SimpleCaseEntry(7845, 1, 2), 
    SimpleCaseEntry(9400, 0, 2), 
    SimpleCaseEntry(9426, 1, 2), 
    SimpleCaseEntry(42854, 0, 2), 
    SimpleCaseEntry(42855, 1, 2), 
    SimpleCaseEntry(66583, 0, 2), 
    SimpleCaseEntry(66623, 1, 2), 
    SimpleCaseEntry(65, 0, 2), 
    SimpleCaseEntry(97, 1, 2), 
    SimpleCaseEntry(1232, 0, 2), 
    SimpleCaseEntry(1233, 1, 2), 
    SimpleCaseEntry(9401, 0, 2), 
    SimpleCaseEntry(9427, 1, 2), 
    SimpleCaseEntry(66584, 0, 2), 
    SimpleCaseEntry(66624, 1, 2), 
    SimpleCaseEntry(66, 0, 2), 
    SimpleCaseEntry(98, 1, 2), 
    SimpleCaseEntry(455, 0, 3), 
    SimpleCaseEntry(457, 1, 3), 
    SimpleCaseEntry(456, 2, 3), 
    SimpleCaseEntry(7846, 0, 2), 
    SimpleCaseEntry(7847, 1, 2), 
    SimpleCaseEntry(9402, 0, 2), 
    SimpleCaseEntry(9428, 1, 2), 
    SimpleCaseEntry(42856, 0, 2), 
    SimpleCaseEntry(42857, 1, 2), 
    SimpleCaseEntry(66585, 0, 2), 
    SimpleCaseEntry(66625, 1, 2), 
    SimpleCaseEntry(67, 0, 2), 
    SimpleCaseEntry(99, 1, 2), 
    SimpleCaseEntry(456, 0, 3), 
    SimpleCaseEntry(457, 1, 3), 
    SimpleCaseEntry(455, 2, 3), 
    SimpleCaseEntry(1234, 0, 2), 
    SimpleCaseEntry(1235, 1, 2), 
    SimpleCaseEntry(9403, 0, 2), 
    SimpleCaseEntry(9429, 1, 2), 
    SimpleCaseEntry(66586, 0, 2), 
    SimpleCaseEntry(66626, 1, 2), 
    SimpleCaseEntry(68, 0, 2), 
    SimpleCaseEntry(100, 1, 2), 
    SimpleCaseEntry(7848, 0, 2), 
    SimpleCaseEntry(7849, 1, 2), 
    SimpleCaseEntry(9404, 0, 2), 
    SimpleCaseEntry(9430, 1, 2), 
    SimpleCaseEntry(42858, 0, 2), 
    SimpleCaseEntry(42859, 1, 2), 
    SimpleCaseEntry(66587, 0, 2), 
    SimpleCaseEntry(66627, 1, 2), 
    SimpleCaseEntry(69, 0, 2), 
    SimpleCaseEntry(101, 1, 2), 
    SimpleCaseEntry(458, 0, 3), 
    SimpleCaseEntry(460, 1, 3), 
    SimpleCaseEntry(459, 2, 3), 
    SimpleCaseEntry(1236, 0, 2), 
    SimpleCaseEntry(1237, 1, 2), 
    SimpleCaseEntry(9405, 0, 2), 
    SimpleCaseEntry(9431, 1, 2), 
    SimpleCaseEntry(66588, 0, 2), 
    SimpleCaseEntry(66628, 1, 2), 
    SimpleCaseEntry(70, 0, 2), 
    SimpleCaseEntry(102, 1, 2), 
    SimpleCaseEntry(459, 0, 3), 
    SimpleCaseEntry(460, 1, 3), 
    SimpleCaseEntry(458, 2, 3), 
    SimpleCaseEntry(7850, 0, 2), 
    SimpleCaseEntry(7851, 1, 2), 
    SimpleCaseEntry(9406, 0, 2), 
    SimpleCaseEntry(9432, 1, 2), 
    SimpleCaseEntry(42860, 0, 2), 
    SimpleCaseEntry(42861, 1, 2), 
    SimpleCaseEntry(66589, 0, 2), 
    SimpleCaseEntry(66629, 1, 2), 
    SimpleCaseEntry(71, 0, 2), 
    SimpleCaseEntry(103, 1, 2), 
    SimpleCaseEntry(1238, 0, 2), 
    SimpleCaseEntry(1239, 1, 2), 
    SimpleCaseEntry(9407, 0, 2), 
    SimpleCaseEntry(9433, 1, 2), 
    SimpleCaseEntry(66590, 0, 2), 
    SimpleCaseEntry(66630, 1, 2), 
    SimpleCaseEntry(72, 0, 2), 
    SimpleCaseEntry(104, 1, 2), 
    SimpleCaseEntry(461, 0, 2), 
    SimpleCaseEntry(462, 1, 2), 
    SimpleCaseEntry(7852, 0, 2), 
    SimpleCaseEntry(7853, 1, 2), 
    SimpleCaseEntry(9408, 0, 2), 
    SimpleCaseEntry(9434, 1, 2), 
    SimpleCaseEntry(42862, 0, 2), 
    SimpleCaseEntry(42863, 1, 2), 
    SimpleCaseEntry(66591, 0, 2), 
    SimpleCaseEntry(66631, 1, 2), 
    SimpleCaseEntry(73, 0, 2), 
    SimpleCaseEntry(105, 1, 2), 
    SimpleCaseEntry(1240, 0, 2), 
    SimpleCaseEntry(1241, 1, 2), 
    SimpleCaseEntry(9409, 0, 2), 
    SimpleCaseEntry(9435, 1, 2), 
    SimpleCaseEntry(66592, 0, 2), 
    SimpleCaseEntry(66632, 1, 2), 
    SimpleCaseEntry(74, 0, 2), 
    SimpleCaseEntry(106, 1, 2), 
    SimpleCaseEntry(463, 0, 2), 
    SimpleCaseEntry(464, 1, 2), 
    SimpleCaseEntry(7854, 0, 2), 
    SimpleCaseEntry(7855, 1, 2), 
    SimpleCaseEntry(9410, 0, 2), 
    SimpleCaseEntry(9436, 1, 2), 
    SimpleCaseEntry(66593, 0, 2), 
    SimpleCaseEntry(66633, 1, 2), 
    SimpleCaseEntry(75, 0, 3), 
    SimpleCaseEntry(107, 1, 3), 
    SimpleCaseEntry(8490, 2, 3), 
    SimpleCaseEntry(1242, 0, 2), 
    SimpleCaseEntry(1243, 1, 2), 
    SimpleCaseEntry(9411, 0, 2), 
    SimpleCaseEntry(9437, 1, 2), 
    SimpleCaseEntry(66594, 0, 2), 
    SimpleCaseEntry(66634, 1, 2), 
    SimpleCaseEntry(76, 0, 2), 
    SimpleCaseEntry(108, 1, 2), 
    SimpleCaseEntry(465, 0, 2), 
    SimpleCaseEntry(466, 1, 2), 
    SimpleCaseEntry(7856, 0, 2), 
    SimpleCaseEntry(7857, 1, 2), 
    SimpleCaseEntry(9412, 0, 2), 
    SimpleCaseEntry(9438, 1, 2), 
    SimpleCaseEntry(66595, 0, 2), 
    SimpleCaseEntry(66635, 1, 2), 
    SimpleCaseEntry(77, 0, 2), 
    SimpleCaseEntry(109, 1, 2), 
    SimpleCaseEntry(1244, 0, 2), 
    SimpleCaseEntry(1245, 1, 2), 
    SimpleCaseEntry(9413, 0, 2), 
    SimpleCaseEntry(9439, 1, 2), 
    SimpleCaseEntry(66596, 0, 2), 
    SimpleCaseEntry(66636, 1, 2), 
    SimpleCaseEntry(78, 0, 2), 
    SimpleCaseEntry(110, 1, 2), 
    SimpleCaseEntry(467, 0, 2), 
    SimpleCaseEntry(468, 1, 2), 
    SimpleCaseEntry(7858, 0, 2), 
    SimpleCaseEntry(7859, 1, 2), 
    SimpleCaseEntry(9414, 0, 2), 
    SimpleCaseEntry(9440, 1, 2), 
    SimpleCaseEntry(66597, 0, 2), 
    SimpleCaseEntry(66637, 1, 2), 
    SimpleCaseEntry(79, 0, 2), 
    SimpleCaseEntry(111, 1, 2), 
    SimpleCaseEntry(1246, 0, 2), 
    SimpleCaseEntry(1247, 1, 2), 
    SimpleCaseEntry(9415, 0, 2), 
    SimpleCaseEntry(9441, 1, 2), 
    SimpleCaseEntry(11360, 0, 2), 
    SimpleCaseEntry(11361, 1, 2), 
    SimpleCaseEntry(66598, 0, 2), 
    SimpleCaseEntry(66638, 1, 2), 
    SimpleCaseEntry(80, 0, 2), 
    SimpleCaseEntry(112, 1, 2), 
    SimpleCaseEntry(469, 0, 2), 
    SimpleCaseEntry(470, 1, 2), 
    SimpleCaseEntry(7860, 0, 2), 
    SimpleCaseEntry(7861, 1, 2), 
    SimpleCaseEntry(9416, 0, 2), 
    SimpleCaseEntry(9442, 1, 2), 
    SimpleCaseEntry(66599, 0, 2), 
    SimpleCaseEntry(66639, 1, 2), 
    SimpleCaseEntry(81, 0, 2), 
    SimpleCaseEntry(113, 1, 2), 
    SimpleCaseEntry(1248, 0, 2), 
    SimpleCaseEntry(1249, 1, 2), 
    SimpleCaseEntry(9417, 0, 2), 
    SimpleCaseEntry(9443, 1, 2), 
    SimpleCaseEntry(11362, 0, 2), 
    SimpleCaseEntry(619, 1, 2), 
    SimpleCaseEntry(82, 0, 2), 
    SimpleCaseEntry(114, 1, 2), 
    SimpleCaseEntry(471, 0, 2), 
    SimpleCaseEntry(472, 1, 2), 
    SimpleCaseEntry(7862, 0, 2), 
    SimpleCaseEntry(7863, 1, 2), 
    SimpleCaseEntry(9418, 0, 2), 
    SimpleCaseEntry(9444, 1, 2), 
    SimpleCaseEntry(11363, 0, 2), 
    SimpleCaseEntry(7549, 1, 2), 
    SimpleCaseEntry(83, 0, 3), 
    SimpleCaseEntry(115, 1, 3), 
    SimpleCaseEntry(383, 2, 3), 
    SimpleCaseEntry(1250, 0, 2), 
    SimpleCaseEntry(1251, 1, 2), 
    SimpleCaseEntry(9419, 0, 2), 
    SimpleCaseEntry(9445, 1, 2), 
    SimpleCaseEntry(11364, 0, 2), 
    SimpleCaseEntry(637, 1, 2), 
    SimpleCaseEntry(42873, 0, 2), 
    SimpleCaseEntry(42874, 1, 2), 
    SimpleCaseEntry(84, 0, 2), 
    SimpleCaseEntry(116, 1, 2), 
    SimpleCaseEntry(473, 0, 2), 
    SimpleCaseEntry(474, 1, 2), 
    SimpleCaseEntry(7864, 0, 2), 
    SimpleCaseEntry(7865, 1, 2), 
    SimpleCaseEntry(9420, 0, 2), 
    SimpleCaseEntry(9446, 1, 2), 
    SimpleCaseEntry(85, 0, 2), 
    SimpleCaseEntry(117, 1, 2), 
    SimpleCaseEntry(1252, 0, 2), 
    SimpleCaseEntry(1253, 1, 2), 
    SimpleCaseEntry(9421, 0, 2), 
    SimpleCaseEntry(9447, 1, 2), 
    SimpleCaseEntry(42875, 0, 2), 
    SimpleCaseEntry(42876, 1, 2), 
    SimpleCaseEntry(86, 0, 2), 
    SimpleCaseEntry(118, 1, 2), 
    SimpleCaseEntry(475, 0, 2), 
    SimpleCaseEntry(476, 1, 2), 
    SimpleCaseEntry(7866, 0, 2), 
    SimpleCaseEntry(7867, 1, 2), 
    SimpleCaseEntry(9422, 0, 2), 
    SimpleCaseEntry(9448, 1, 2), 
    SimpleCaseEntry(11367, 0, 2), 
    SimpleCaseEntry(11368, 1, 2), 
    SimpleCaseEntry(87, 0, 2), 
    SimpleCaseEntry(119, 1, 2), 
    SimpleCaseEntry(1254, 0, 2), 
    SimpleCaseEntry(1255, 1, 2), 
    SimpleCaseEntry(9423, 0, 2), 
    SimpleCaseEntry(9449, 1, 2), 
    SimpleCaseEntry(42877, 0, 2), 
    SimpleCaseEntry(7545, 1, 2), 
    SimpleCaseEntry(88, 0, 2), 
    SimpleCaseEntry(120, 1, 2), 
    SimpleCaseEntry(7868, 0, 2), 
    SimpleCaseEntry(7869, 1, 2), 
    SimpleCaseEntry(11369, 0, 2), 
    SimpleCaseEntry(11370, 1, 2), 
    SimpleCaseEntry(42878, 0, 2), 
    SimpleCaseEntry(42879, 1, 2), 
    SimpleCaseEntry(89, 0, 2), 
    SimpleCaseEntry(121, 1, 2), 
    SimpleCaseEntry(478, 0, 2), 
    SimpleCaseEntry(479, 1, 2), 
    SimpleCaseEntry(1256, 0, 2), 
    SimpleCaseEntry(1257, 1, 2), 
    SimpleCaseEntry(90, 0, 2), 
    SimpleCaseEntry(122, 1, 2), 
    SimpleCaseEntry(7870, 0, 2), 
    SimpleCaseEntry(7871, 1, 2), 
    SimpleCaseEntry(11371, 0, 2), 
    SimpleCaseEntry(11372, 1, 2), 
    SimpleCaseEntry(42880, 0, 2), 
    SimpleCaseEntry(42881, 1, 2), 
    SimpleCaseEntry(480, 0, 2), 
    SimpleCaseEntry(481, 1, 2), 
    SimpleCaseEntry(1258, 0, 2), 
    SimpleCaseEntry(1259, 1, 2), 
    SimpleCaseEntry(7872, 0, 2), 
    SimpleCaseEntry(7873, 1, 2), 
    SimpleCaseEntry(11373, 0, 2), 
    SimpleCaseEntry(593, 1, 2), 
    SimpleCaseEntry(42882, 0, 2), 
    SimpleCaseEntry(42883, 1, 2), 
    SimpleCaseEntry(482, 0, 2), 
    SimpleCaseEntry(483, 1, 2), 
    SimpleCaseEntry(1260, 0, 2), 
    SimpleCaseEntry(1261, 1, 2), 
    SimpleCaseEntry(11374, 0, 2), 
    SimpleCaseEntry(625, 1, 2), 
    SimpleCaseEntry(7874, 0, 2), 
    SimpleCaseEntry(7875, 1, 2), 
    SimpleCaseEntry(11375, 0, 2), 
    SimpleCaseEntry(592, 1, 2), 
    SimpleCaseEntry(42884, 0, 2), 
    SimpleCaseEntry(42885, 1, 2), 
    SimpleCaseEntry(484, 0, 2), 
    SimpleCaseEntry(485, 1, 2), 
    SimpleCaseEntry(1262, 0, 2), 
    SimpleCaseEntry(1263, 1, 2), 
    SimpleCaseEntry(11376, 0, 2), 
    SimpleCaseEntry(594, 1, 2), 
    SimpleCaseEntry(7876, 0, 2), 
    SimpleCaseEntry(7877, 1, 2), 
    SimpleCaseEntry(42886, 0, 2), 
    SimpleCaseEntry(42887, 1, 2), 
    SimpleCaseEntry(486, 0, 2), 
    SimpleCaseEntry(487, 1, 2), 
    SimpleCaseEntry(1264, 0, 2), 
    SimpleCaseEntry(1265, 1, 2), 
    SimpleCaseEntry(11378, 0, 2), 
    SimpleCaseEntry(11379, 1, 2), 
    SimpleCaseEntry(7878, 0, 2), 
    SimpleCaseEntry(7879, 1, 2), 
    SimpleCaseEntry(488, 0, 2), 
    SimpleCaseEntry(489, 1, 2), 
    SimpleCaseEntry(1266, 0, 2), 
    SimpleCaseEntry(1267, 1, 2), 
    SimpleCaseEntry(7880, 0, 2), 
    SimpleCaseEntry(7881, 1, 2), 
    SimpleCaseEntry(11381, 0, 2), 
    SimpleCaseEntry(11382, 1, 2), 
    SimpleCaseEntry(490, 0, 2), 
    SimpleCaseEntry(491, 1, 2), 
    SimpleCaseEntry(1268, 0, 2), 
    SimpleCaseEntry(1269, 1, 2), 
    SimpleCaseEntry(42891, 0, 2), 
    SimpleCaseEntry(42892, 1, 2), 
    SimpleCaseEntry(880, 0, 2), 
    SimpleCaseEntry(881, 1, 2), 
    SimpleCaseEntry(7882, 0, 2), 
    SimpleCaseEntry(7883, 1, 2), 
    SimpleCaseEntry(492, 0, 2), 
    SimpleCaseEntry(493, 1, 2), 
    SimpleCaseEntry(1270, 0, 2), 
    SimpleCaseEntry(1271, 1, 2), 
    SimpleCaseEntry(42893, 0, 2), 
    SimpleCaseEntry(613, 1, 2), 
    SimpleCaseEntry(882, 0, 2), 
    SimpleCaseEntry(883, 1, 2), 
    SimpleCaseEntry(7884, 0, 2), 
    SimpleCaseEntry(7885, 1, 2), 
    SimpleCaseEntry(494, 0, 2), 
    SimpleCaseEntry(495, 1, 2), 
    SimpleCaseEntry(1272, 0, 2), 
    SimpleCaseEntry(1273, 1, 2), 
    SimpleCaseEntry(7886, 0, 2), 
    SimpleCaseEntry(7887, 1, 2), 
    SimpleCaseEntry(42896, 0, 2), 
    SimpleCaseEntry(42897, 1, 2), 
    SimpleCaseEntry(1274, 0, 2), 
    SimpleCaseEntry(1275, 1, 2), 
    SimpleCaseEntry(497, 0, 3), 
    SimpleCaseEntry(499, 1, 3), 
    SimpleCaseEntry(498, 2, 3), 
    SimpleCaseEntry(886, 0, 2), 
    SimpleCaseEntry(887, 1, 2), 
    SimpleCaseEntry(7888, 0, 2), 
    SimpleCaseEntry(7889, 1, 2), 
    SimpleCaseEntry(42898, 0, 2), 
    SimpleCaseEntry(42899, 1, 2), 
    SimpleCaseEntry(498, 0, 3), 
    SimpleCaseEntry(499, 1, 3), 
    SimpleCaseEntry(497, 2, 3), 
    SimpleCaseEntry(1276, 0, 2), 
    SimpleCaseEntry(1277, 1, 2), 
    SimpleCaseEntry(11390, 0, 2), 
    SimpleCaseEntry(575, 1, 2), 
    SimpleCaseEntry(7890, 0, 2), 
    SimpleCaseEntry(7891, 1, 2), 
    SimpleCaseEntry(11391, 0, 2), 
    SimpleCaseEntry(576, 1, 2), 
    SimpleCaseEntry(500, 0, 2), 
    SimpleCaseEntry(501, 1, 2), 
    SimpleCaseEntry(1278, 0, 2), 
    SimpleCaseEntry(1279, 1, 2), 
    SimpleCaseEntry(11392, 0, 2), 
    SimpleCaseEntry(11393, 1, 2), 
    SimpleCaseEntry(7892, 0, 2), 
    SimpleCaseEntry(7893, 1, 2), 
    SimpleCaseEntry(502, 0, 2), 
    SimpleCaseEntry(405, 1, 2), 
    SimpleCaseEntry(1280, 0, 2), 
    SimpleCaseEntry(1281, 1, 2), 
    SimpleCaseEntry(11394, 0, 2), 
    SimpleCaseEntry(11395, 1, 2), 
    SimpleCaseEntry(503, 0, 2), 
    SimpleCaseEntry(447, 1, 2), 
    SimpleCaseEntry(7894, 0, 2), 
    SimpleCaseEntry(7895, 1, 2), 
    SimpleCaseEntry(504, 0, 2), 
    SimpleCaseEntry(505, 1, 2), 
    SimpleCaseEntry(1282, 0, 2), 
    SimpleCaseEntry(1283, 1, 2), 
    SimpleCaseEntry(11396, 0, 2), 
    SimpleCaseEntry(11397, 1, 2), 
    SimpleCaseEntry(7896, 0, 2), 
    SimpleCaseEntry(7897, 1, 2), 
    SimpleCaseEntry(506, 0, 2), 
    SimpleCaseEntry(507, 1, 2), 
    SimpleCaseEntry(1284, 0, 2), 
    SimpleCaseEntry(1285, 1, 2), 
    SimpleCaseEntry(11398, 0, 2), 
    SimpleCaseEntry(11399, 1, 2), 
    SimpleCaseEntry(7898, 0, 2), 
    SimpleCaseEntry(7899, 1, 2), 
    SimpleCaseEntry(508, 0, 2), 
    SimpleCaseEntry(509, 1, 2), 
    SimpleCaseEntry(1286, 0, 2), 
    SimpleCaseEntry(1287, 1, 2), 
    SimpleCaseEntry(11400, 0, 2), 
    SimpleCaseEntry(11401, 1, 2), 
    SimpleCaseEntry(7900, 0, 2), 
    SimpleCaseEntry(7901, 1, 2), 
    SimpleCaseEntry(510, 0, 2), 
    SimpleCaseEntry(511, 1, 2), 
    SimpleCaseEntry(1288, 0, 2), 
    SimpleCaseEntry(1289, 1, 2), 
    SimpleCaseEntry(11402, 0, 2), 
    SimpleCaseEntry(11403, 1, 2), 
    SimpleCaseEntry(7902, 0, 2), 
    SimpleCaseEntry(7903, 1, 2), 
    SimpleCaseEntry(42912, 0, 2), 
    SimpleCaseEntry(42913, 1, 2), 
    SimpleCaseEntry(512, 0, 2), 
    SimpleCaseEntry(513, 1, 2), 
    SimpleCaseEntry(1290, 0, 2), 
    SimpleCaseEntry(1291, 1, 2), 
    SimpleCaseEntry(11404, 0, 2), 
    SimpleCaseEntry(11405, 1, 2), 
    SimpleCaseEntry(902, 0, 2), 
    SimpleCaseEntry(940, 1, 2), 
    SimpleCaseEntry(7904, 0, 2), 
    SimpleCaseEntry(7905, 1, 2), 
    SimpleCaseEntry(42914, 0, 2), 
    SimpleCaseEntry(42915, 1, 2), 
    SimpleCaseEntry(514, 0, 2), 
    SimpleCaseEntry(515, 1, 2), 
    SimpleCaseEntry(1292, 0, 2), 
    SimpleCaseEntry(1293, 1, 2), 
    SimpleCaseEntry(11406, 0, 2), 
    SimpleCaseEntry(11407, 1, 2), 
    SimpleCaseEntry(904, 0, 2), 
    SimpleCaseEntry(941, 1, 2), 
    SimpleCaseEntry(7906, 0, 2), 
    SimpleCaseEntry(7907, 1, 2), 
    SimpleCaseEntry(42916, 0, 2), 
    SimpleCaseEntry(42917, 1, 2), 
    SimpleCaseEntry(516, 0, 2), 
    SimpleCaseEntry(517, 1, 2), 
    SimpleCaseEntry(905, 0, 2), 
    SimpleCaseEntry(942, 1, 2), 
    SimpleCaseEntry(1294, 0, 2), 
    SimpleCaseEntry(1295, 1, 2), 
    SimpleCaseEntry(11408, 0, 2), 
    SimpleCaseEntry(11409, 1, 2), 
    SimpleCaseEntry(906, 0, 2), 
    SimpleCaseEntry(943, 1, 2), 
    SimpleCaseEntry(7908, 0, 2), 
    SimpleCaseEntry(7909, 1, 2), 
    SimpleCaseEntry(42918, 0, 2), 
    SimpleCaseEntry(42919, 1, 2), 
    SimpleCaseEntry(518, 0, 2), 
    SimpleCaseEntry(519, 1, 2), 
    SimpleCaseEntry(1296, 0, 2), 
    SimpleCaseEntry(1297, 1, 2), 
    SimpleCaseEntry(11410, 0, 2), 
    SimpleCaseEntry(11411, 1, 2), 
    SimpleCaseEntry(908, 0, 2), 
    SimpleCaseEntry(972, 1, 2), 
    SimpleCaseEntry(7910, 0, 2), 
    SimpleCaseEntry(7911, 1, 2), 
    SimpleCaseEntry(42920, 0, 2), 
    SimpleCaseEntry(42921, 1, 2), 
    SimpleCaseEntry(520, 0, 2), 
    SimpleCaseEntry(521, 1, 2), 
    SimpleCaseEntry(1298, 0, 2), 
    SimpleCaseEntry(1299, 1, 2), 
    SimpleCaseEntry(11412, 0, 2), 
    SimpleCaseEntry(11413, 1, 2), 
    SimpleCaseEntry(910, 0, 2), 
    SimpleCaseEntry(973, 1, 2), 
    SimpleCaseEntry(7912, 0, 2), 
    SimpleCaseEntry(7913, 1, 2), 
    SimpleCaseEntry(42922, 0, 2), 
    SimpleCaseEntry(614, 1, 2), 
    SimpleCaseEntry(522, 0, 2), 
    SimpleCaseEntry(523, 1, 2), 
    SimpleCaseEntry(911, 0, 2), 
    SimpleCaseEntry(974, 1, 2), 
    SimpleCaseEntry(1300, 0, 2), 
    SimpleCaseEntry(1301, 1, 2), 
    SimpleCaseEntry(11414, 0, 2), 
    SimpleCaseEntry(11415, 1, 2), 
    SimpleCaseEntry(7914, 0, 2), 
    SimpleCaseEntry(7915, 1, 2), 
    SimpleCaseEntry(524, 0, 2), 
    SimpleCaseEntry(525, 1, 2), 
    SimpleCaseEntry(913, 0, 2), 
    SimpleCaseEntry(945, 1, 2), 
    SimpleCaseEntry(1302, 0, 2), 
    SimpleCaseEntry(1303, 1, 2), 
    SimpleCaseEntry(11416, 0, 2), 
    SimpleCaseEntry(11417, 1, 2), 
    SimpleCaseEntry(914, 0, 3), 
    SimpleCaseEntry(946, 1, 3), 
    SimpleCaseEntry(976, 2, 3), 
    SimpleCaseEntry(7916, 0, 2), 
    SimpleCaseEntry(7917, 1, 2), 
    SimpleCaseEntry(526, 0, 2), 
    SimpleCaseEntry(527, 1, 2), 
    SimpleCaseEntry(915, 0, 2), 
    SimpleCaseEntry(947, 1, 2), 
    SimpleCaseEntry(1304, 0, 2), 
    SimpleCaseEntry(1305, 1, 2), 
    SimpleCaseEntry(11418, 0, 2), 
    SimpleCaseEntry(11419, 1, 2), 
    SimpleCaseEntry(916, 0, 2), 
    SimpleCaseEntry(948, 1, 2), 
    SimpleCaseEntry(7918, 0, 2), 
    SimpleCaseEntry(7919, 1, 2), 
    SimpleCaseEntry(528, 0, 2), 
    SimpleCaseEntry(529, 1, 2), 
    SimpleCaseEntry(917, 0, 3), 
    SimpleCaseEntry(949, 1, 3), 
    SimpleCaseEntry(1013, 2, 3), 
    SimpleCaseEntry(1306, 0, 2), 
    SimpleCaseEntry(1307, 1, 2), 
    SimpleCaseEntry(11420, 0, 2), 
    SimpleCaseEntry(11421, 1, 2), 
    SimpleCaseEntry(918, 0, 2), 
    SimpleCaseEntry(950, 1, 2), 
    SimpleCaseEntry(7920, 0, 2), 
    SimpleCaseEntry(7921, 1, 2), 
    SimpleCaseEntry(530, 0, 2), 
    SimpleCaseEntry(531, 1, 2), 
    SimpleCaseEntry(919, 0, 2), 
    SimpleCaseEntry(951, 1, 2), 
    SimpleCaseEntry(1308, 0, 2), 
    SimpleCaseEntry(1309, 1, 2), 
    SimpleCaseEntry(11422, 0, 2), 
    SimpleCaseEntry(11423, 1, 2), 
    SimpleCaseEntry(920, 0, 4), 
    SimpleCaseEntry(952, 1, 4), 
    SimpleCaseEntry(977, 2, 4), 
    SimpleCaseEntry(1012, 3, 4), 
    SimpleCaseEntry(7922, 0, 2), 
    SimpleCaseEntry(7923, 1, 2), 
    SimpleCaseEntry(532, 0, 2), 
    SimpleCaseEntry(533, 1, 2), 
    SimpleCaseEntry(921, 0, 4), 
    SimpleCaseEntry(953, 1, 4), 
    SimpleCaseEntry(837, 2, 4), 
    SimpleCaseEntry(8126, 3, 4), 
    SimpleCaseEntry(1310, 0, 2), 
    SimpleCaseEntry(1311, 1, 2), 
    SimpleCaseEntry(11424, 0, 2), 
    SimpleCaseEntry(11425, 1, 2), 
    SimpleCaseEntry(922, 0, 3), 
    SimpleCaseEntry(954, 1, 3), 
    SimpleCaseEntry(1008, 2, 3), 
    SimpleCaseEntry(7924, 0, 2), 
    SimpleCaseEntry(7925, 1, 2), 
    SimpleCaseEntry(534, 0, 2), 
    SimpleCaseEntry(535, 1, 2), 
    SimpleCaseEntry(923, 0, 2), 
    SimpleCaseEntry(955, 1, 2), 
    SimpleCaseEntry(1312, 0, 2), 
    SimpleCaseEntry(1313, 1, 2), 
    SimpleCaseEntry(11426, 0, 2), 
    SimpleCaseEntry(11427, 1, 2), 
    SimpleCaseEntry(924, 0, 3), 
    SimpleCaseEntry(956, 1, 3), 
    SimpleCaseEntry(181, 2, 3), 
    SimpleCaseEntry(7926, 0, 2), 
    SimpleCaseEntry(7927, 1, 2), 
    SimpleCaseEntry(536, 0, 2), 
    SimpleCaseEntry(537, 1, 2), 
    SimpleCaseEntry(925, 0, 2), 
    SimpleCaseEntry(957, 1, 2), 
    SimpleCaseEntry(1314, 0, 2), 
    SimpleCaseEntry(1315, 1, 2), 
    SimpleCaseEntry(11428, 0, 2), 
    SimpleCaseEntry(11429, 1, 2), 
    SimpleCaseEntry(926, 0, 2), 
    SimpleCaseEntry(958, 1, 2), 
    SimpleCaseEntry(7928, 0, 2), 
    SimpleCaseEntry(7929, 1, 2), 
    SimpleCaseEntry(538, 0, 2), 
    SimpleCaseEntry(539, 1, 2), 
    SimpleCaseEntry(927, 0, 2), 
    SimpleCaseEntry(959, 1, 2), 
    SimpleCaseEntry(1316, 0, 2), 
    SimpleCaseEntry(1317, 1, 2), 
    SimpleCaseEntry(11430, 0, 2), 
    SimpleCaseEntry(11431, 1, 2), 
    SimpleCaseEntry(928, 0, 3), 
    SimpleCaseEntry(960, 1, 3), 
    SimpleCaseEntry(982, 2, 3), 
    SimpleCaseEntry(7930, 0, 2), 
    SimpleCaseEntry(7931, 1, 2), 
    SimpleCaseEntry(540, 0, 2), 
    SimpleCaseEntry(541, 1, 2), 
    SimpleCaseEntry(929, 0, 3), 
    SimpleCaseEntry(961, 1, 3), 
    SimpleCaseEntry(1009, 2, 3), 
    SimpleCaseEntry(1318, 0, 2), 
    SimpleCaseEntry(1319, 1, 2), 
    SimpleCaseEntry(11432, 0, 2), 
    SimpleCaseEntry(11433, 1, 2), 
    SimpleCaseEntry(7932, 0, 2), 
    SimpleCaseEntry(7933, 1, 2), 
    SimpleCaseEntry(542, 0, 2), 
    SimpleCaseEntry(543, 1, 2), 
    SimpleCaseEntry(931, 0, 3), 
    SimpleCaseEntry(963, 1, 3), 
    SimpleCaseEntry(962, 2, 3), 
    SimpleCaseEntry(11434, 0, 2), 
    SimpleCaseEntry(11435, 1, 2), 
    SimpleCaseEntry(932, 0, 2), 
    SimpleCaseEntry(964, 1, 2), 
    SimpleCaseEntry(7934, 0, 2), 
    SimpleCaseEntry(7935, 1, 2), 
    SimpleCaseEntry(544, 0, 2), 
    SimpleCaseEntry(414, 1, 2), 
    SimpleCaseEntry(933, 0, 2), 
    SimpleCaseEntry(965, 1, 2), 
    SimpleCaseEntry(11436, 0, 2), 
    SimpleCaseEntry(11437, 1, 2), 
    SimpleCaseEntry(934, 0, 3), 
    SimpleCaseEntry(966, 1, 3), 
    SimpleCaseEntry(981, 2, 3), 
    SimpleCaseEntry(546, 0, 2), 
    SimpleCaseEntry(547, 1, 2), 
    SimpleCaseEntry(935, 0, 2), 
    SimpleCaseEntry(967, 1, 2), 
    SimpleCaseEntry(11438, 0, 2), 
    SimpleCaseEntry(11439, 1, 2), 
    SimpleCaseEntry(936, 0, 2), 
    SimpleCaseEntry(968, 1, 2), 
    SimpleCaseEntry(548, 0, 2), 
    SimpleCaseEntry(549, 1, 2), 
    SimpleCaseEntry(937, 0, 3), 
    SimpleCaseEntry(969, 1, 3), 
    SimpleCaseEntry(8486, 2, 3), 
    SimpleCaseEntry(11440, 0, 2), 
    SimpleCaseEntry(11441, 1, 2), 
    SimpleCaseEntry(42560, 0, 2), 
    SimpleCaseEntry(42561, 1, 2), 
    SimpleCaseEntry(938, 0, 2), 
    SimpleCaseEntry(970, 1, 2), 
    SimpleCaseEntry(550, 0, 2), 
    SimpleCaseEntry(551, 1, 2), 
    SimpleCaseEntry(939, 0, 2), 
    SimpleCaseEntry(971, 1, 2), 
    SimpleCaseEntry(11442, 0, 2), 
    SimpleCaseEntry(11443, 1, 2), 
    SimpleCaseEntry(42562, 0, 2), 
    SimpleCaseEntry(42563, 1, 2), 
    SimpleCaseEntry(1329, 0, 2), 
    SimpleCaseEntry(1377, 1, 2), 
    SimpleCaseEntry(552, 0, 2), 
    SimpleCaseEntry(553, 1, 2), 
    SimpleCaseEntry(1330, 0, 2), 
    SimpleCaseEntry(1378, 1, 2), 
    SimpleCaseEntry(11444, 0, 2), 
    SimpleCaseEntry(11445, 1, 2), 
    SimpleCaseEntry(42564, 0, 2), 
    SimpleCaseEntry(42565, 1, 2), 
    SimpleCaseEntry(1331, 0, 2), 
    SimpleCaseEntry(1379, 1, 2), 
    SimpleCaseEntry(7944, 0, 2), 
    SimpleCaseEntry(7936, 1, 2), 
    SimpleCaseEntry(554, 0, 2), 
    SimpleCaseEntry(555, 1, 2), 
    SimpleCaseEntry(1332, 0, 2), 
    SimpleCaseEntry(1380, 1, 2), 
    SimpleCaseEntry(7945, 0, 2), 
    SimpleCaseEntry(7937, 1, 2), 
    SimpleCaseEntry(11446, 0, 2), 
    SimpleCaseEntry(11447, 1, 2), 
    SimpleCaseEntry(42566, 0, 2), 
    SimpleCaseEntry(42567, 1, 2), 
    SimpleCaseEntry(1333, 0, 2), 
    SimpleCaseEntry(1381, 1, 2), 
    SimpleCaseEntry(7946, 0, 2), 
    SimpleCaseEntry(7938, 1, 2), 
    SimpleCaseEntry(556, 0, 2), 
    SimpleCaseEntry(557, 1, 2), 
    SimpleCaseEntry(1334, 0, 2), 
    SimpleCaseEntry(1382, 1, 2), 
    SimpleCaseEntry(7947, 0, 2), 
    SimpleCaseEntry(7939, 1, 2), 
    SimpleCaseEntry(11448, 0, 2), 
    SimpleCaseEntry(11449, 1, 2), 
    SimpleCaseEntry(42568, 0, 2), 
    SimpleCaseEntry(42569, 1, 2), 
    SimpleCaseEntry(1335, 0, 2), 
    SimpleCaseEntry(1383, 1, 2), 
    SimpleCaseEntry(7948, 0, 2), 
    SimpleCaseEntry(7940, 1, 2), 
    SimpleCaseEntry(558, 0, 2), 
    SimpleCaseEntry(559, 1, 2), 
    SimpleCaseEntry(1336, 0, 2), 
    SimpleCaseEntry(1384, 1, 2), 
    SimpleCaseEntry(7949, 0, 2), 
    SimpleCaseEntry(7941, 1, 2), 
    SimpleCaseEntry(11450, 0, 2), 
    SimpleCaseEntry(11451, 1, 2), 
    SimpleCaseEntry(42570, 0, 2), 
    SimpleCaseEntry(42571, 1, 2), 
    SimpleCaseEntry(1337, 0, 2), 
    SimpleCaseEntry(1385, 1, 2), 
    SimpleCaseEntry(7950, 0, 2), 
    SimpleCaseEntry(7942, 1, 2), 
    SimpleCaseEntry(560, 0, 2), 
    SimpleCaseEntry(561, 1, 2), 
    SimpleCaseEntry(1338, 0, 2), 
    SimpleCaseEntry(1386, 1, 2), 
    SimpleCaseEntry(7951, 0, 2), 
    SimpleCaseEntry(7943, 1, 2), 
    SimpleCaseEntry(11452, 0, 2), 
    SimpleCaseEntry(11453, 1, 2), 
    SimpleCaseEntry(42572, 0, 2), 
    SimpleCaseEntry(42573, 1, 2), 
    SimpleCaseEntry(1339, 0, 2), 
    SimpleCaseEntry(1387, 1, 2), 
    SimpleCaseEntry(562, 0, 2), 
    SimpleCaseEntry(563, 1, 2), 
    SimpleCaseEntry(1340, 0, 2), 
    SimpleCaseEntry(1388, 1, 2), 
    SimpleCaseEntry(11454, 0, 2), 
    SimpleCaseEntry(11455, 1, 2), 
    SimpleCaseEntry(42574, 0, 2), 
    SimpleCaseEntry(42575, 1, 2), 
    SimpleCaseEntry(1341, 0, 2), 
    SimpleCaseEntry(1389, 1, 2), 
    SimpleCaseEntry(1342, 0, 2), 
    SimpleCaseEntry(1390, 1, 2), 
    SimpleCaseEntry(11456, 0, 2), 
    SimpleCaseEntry(11457, 1, 2), 
    SimpleCaseEntry(42576, 0, 2), 
    SimpleCaseEntry(42577, 1, 2), 
    SimpleCaseEntry(1343, 0, 2), 
    SimpleCaseEntry(1391, 1, 2), 
    SimpleCaseEntry(1344, 0, 2), 
    SimpleCaseEntry(1392, 1, 2), 
    SimpleCaseEntry(11458, 0, 2), 
    SimpleCaseEntry(11459, 1, 2), 
    SimpleCaseEntry(42578, 0, 2), 
    SimpleCaseEntry(42579, 1, 2), 
    SimpleCaseEntry(1345, 0, 2), 
    SimpleCaseEntry(1393, 1, 2), 
    SimpleCaseEntry(1346, 0, 2), 
    SimpleCaseEntry(1394, 1, 2), 
    SimpleCaseEntry(11460, 0, 2), 
    SimpleCaseEntry(11461, 1, 2), 
    SimpleCaseEntry(42580, 0, 2), 
    SimpleCaseEntry(42581, 1, 2), 
    SimpleCaseEntry(1347, 0, 2), 
    SimpleCaseEntry(1395, 1, 2), 
    SimpleCaseEntry(7960, 0, 2), 
    SimpleCaseEntry(7952, 1, 2), 
    SimpleCaseEntry(181, 0, 3), 
    SimpleCaseEntry(956, 1, 3), 
    SimpleCaseEntry(924, 2, 3), 
    SimpleCaseEntry(570, 0, 2), 
    SimpleCaseEntry(11365, 1, 2), 
    SimpleCaseEntry(1348, 0, 2), 
    SimpleCaseEntry(1396, 1, 2), 
    SimpleCaseEntry(7961, 0, 2), 
    SimpleCaseEntry(7953, 1, 2), 
    SimpleCaseEntry(11462, 0, 2), 
    SimpleCaseEntry(11463, 1, 2), 
    SimpleCaseEntry(42582, 0, 2), 
    SimpleCaseEntry(42583, 1, 2), 
    SimpleCaseEntry(571, 0, 2), 
    SimpleCaseEntry(572, 1, 2), 
    SimpleCaseEntry(1349, 0, 2), 
    SimpleCaseEntry(1397, 1, 2), 
    SimpleCaseEntry(7962, 0, 2), 
    SimpleCaseEntry(7954, 1, 2), 
    SimpleCaseEntry(1350, 0, 2), 
    SimpleCaseEntry(1398, 1, 2), 
    SimpleCaseEntry(7963, 0, 2), 
    SimpleCaseEntry(7955, 1, 2), 
    SimpleCaseEntry(11464, 0, 2), 
    SimpleCaseEntry(11465, 1, 2), 
    SimpleCaseEntry(42584, 0, 2), 
    SimpleCaseEntry(42585, 1, 2), 
    SimpleCaseEntry(573, 0, 2), 
    SimpleCaseEntry(410, 1, 2), 
    SimpleCaseEntry(962, 0, 3), 
    SimpleCaseEntry(963, 1, 3), 
    SimpleCaseEntry(931, 2, 3), 
    SimpleCaseEntry(1351, 0, 2), 
    SimpleCaseEntry(1399, 1, 2), 
    SimpleCaseEntry(7964, 0, 2), 
    SimpleCaseEntry(7956, 1, 2), 
    SimpleCaseEntry(574, 0, 2), 
    SimpleCaseEntry(11366, 1, 2), 
    SimpleCaseEntry(1352, 0, 2), 
    SimpleCaseEntry(1400, 1, 2), 
    SimpleCaseEntry(7965, 0, 2), 
    SimpleCaseEntry(7957, 1, 2), 
    SimpleCaseEntry(11466, 0, 2), 
    SimpleCaseEntry(11467, 1, 2), 
    SimpleCaseEntry(42586, 0, 2), 
    SimpleCaseEntry(42587, 1, 2), 
    SimpleCaseEntry(1353, 0, 2), 
    SimpleCaseEntry(1401, 1, 2), 
    SimpleCaseEntry(1354, 0, 2), 
    SimpleCaseEntry(1402, 1, 2), 
    SimpleCaseEntry(11468, 0, 2), 
    SimpleCaseEntry(11469, 1, 2), 
    SimpleCaseEntry(42588, 0, 2), 
    SimpleCaseEntry(42589, 1, 2), 
    SimpleCaseEntry(577, 0, 2), 
    SimpleCaseEntry(578, 1, 2), 
    SimpleCaseEntry(1355, 0, 2), 
    SimpleCaseEntry(1403, 1, 2), 
    SimpleCaseEntry(1356, 0, 2), 
    SimpleCaseEntry(1404, 1, 2), 
    SimpleCaseEntry(11470, 0, 2), 
    SimpleCaseEntry(11471, 1, 2), 
    SimpleCaseEntry(42590, 0, 2), 
    SimpleCaseEntry(42591, 1, 2), 
    SimpleCaseEntry(579, 0, 2), 
    SimpleCaseEntry(384, 1, 2), 
    SimpleCaseEntry(1357, 0, 2), 
    SimpleCaseEntry(1405, 1, 2), 
    SimpleCaseEntry(580, 0, 2), 
    SimpleCaseEntry(649, 1, 2), 
    SimpleCaseEntry(1358, 0, 2), 
    SimpleCaseEntry(1406, 1, 2), 
    SimpleCaseEntry(11472, 0, 2), 
    SimpleCaseEntry(11473, 1, 2), 
    SimpleCaseEntry(42592, 0, 2), 
    SimpleCaseEntry(42593, 1, 2), 
    SimpleCaseEntry(192, 0, 2), 
    SimpleCaseEntry(224, 1, 2), 
    SimpleCaseEntry(581, 0, 2), 
    SimpleCaseEntry(652, 1, 2), 
    SimpleCaseEntry(1359, 0, 2), 
    SimpleCaseEntry(1407, 1, 2), 
    SimpleCaseEntry(193, 0, 2), 
    SimpleCaseEntry(225, 1, 2), 
    SimpleCaseEntry(582, 0, 2), 
    SimpleCaseEntry(583, 1, 2), 
    SimpleCaseEntry(1360, 0, 2), 
    SimpleCaseEntry(1408, 1, 2), 
    SimpleCaseEntry(11474, 0, 2), 
    SimpleCaseEntry(11475, 1, 2), 
    SimpleCaseEntry(42594, 0, 2), 
    SimpleCaseEntry(42595, 1, 2), 
    SimpleCaseEntry(194, 0, 2), 
    SimpleCaseEntry(226, 1, 2), 
    SimpleCaseEntry(1361, 0, 2), 
    SimpleCaseEntry(1409, 1, 2), 
    SimpleCaseEntry(195, 0, 2), 
    SimpleCaseEntry(227, 1, 2), 
    SimpleCaseEntry(584, 0, 2), 
    SimpleCaseEntry(585, 1, 2), 
    SimpleCaseEntry(1362, 0, 2), 
    SimpleCaseEntry(1410, 1, 2), 
    SimpleCaseEntry(11476, 0, 2), 
    SimpleCaseEntry(11477, 1, 2), 
    SimpleCaseEntry(42596, 0, 2), 
    SimpleCaseEntry(42597, 1, 2), 
    SimpleCaseEntry(196, 0, 2), 
    SimpleCaseEntry(228, 1, 2), 
    SimpleCaseEntry(1363, 0, 2), 
    SimpleCaseEntry(1411, 1, 2), 
    SimpleCaseEntry(7976, 0, 2), 
    SimpleCaseEntry(7968, 1, 2), 
    SimpleCaseEntry(197, 0, 3), 
    SimpleCaseEntry(229, 1, 3), 
    SimpleCaseEntry(8491, 2, 3), 
    SimpleCaseEntry(586, 0, 2), 
    SimpleCaseEntry(587, 1, 2), 
    SimpleCaseEntry(975, 0, 2), 
    SimpleCaseEntry(983, 1, 2), 
    SimpleCaseEntry(1364, 0, 2), 
    SimpleCaseEntry(1412, 1, 2), 
    SimpleCaseEntry(7977, 0, 2), 
    SimpleCaseEntry(7969, 1, 2), 
    SimpleCaseEntry(11478, 0, 2), 
    SimpleCaseEntry(11479, 1, 2), 
    SimpleCaseEntry(42598, 0, 2), 
    SimpleCaseEntry(42599, 1, 2), 
    SimpleCaseEntry(198, 0, 2), 
    SimpleCaseEntry(230, 1, 2), 
    SimpleCaseEntry(976, 0, 3), 
    SimpleCaseEntry(946, 1, 3), 
    SimpleCaseEntry(914, 2, 3), 
    SimpleCaseEntry(1365, 0, 2), 
    SimpleCaseEntry(1413, 1, 2), 
    SimpleCaseEntry(7978, 0, 2), 
    SimpleCaseEntry(7970, 1, 2), 
    SimpleCaseEntry(199, 0, 2), 
    SimpleCaseEntry(231, 1, 2), 
    SimpleCaseEntry(588, 0, 2), 
    SimpleCaseEntry(589, 1, 2), 
    SimpleCaseEntry(977, 0, 4), 
    SimpleCaseEntry(952, 1, 4), 
    SimpleCaseEntry(920, 2, 4), 
    SimpleCaseEntry(1012, 3, 4), 
    SimpleCaseEntry(1366, 0, 2), 
    SimpleCaseEntry(1414, 1, 2), 
    SimpleCaseEntry(7979, 0, 2), 
    SimpleCaseEntry(7971, 1, 2), 
    SimpleCaseEntry(11480, 0, 2), 
    SimpleCaseEntry(11481, 1, 2), 
    SimpleCaseEntry(42600, 0, 2), 
    SimpleCaseEntry(42601, 1, 2), 
    SimpleCaseEntry(200, 0, 2), 
    SimpleCaseEntry(232, 1, 2), 
    SimpleCaseEntry(7980, 0, 2), 
    SimpleCaseEntry(7972, 1, 2), 
    SimpleCaseEntry(201, 0, 2), 
    SimpleCaseEntry(233, 1, 2), 
    SimpleCaseEntry(590, 0, 2), 
    SimpleCaseEntry(591, 1, 2), 
    SimpleCaseEntry(7981, 0, 2), 
    SimpleCaseEntry(7973, 1, 2), 
    SimpleCaseEntry(11482, 0, 2), 
    SimpleCaseEntry(11483, 1, 2), 
    SimpleCaseEntry(42602, 0, 2), 
    SimpleCaseEntry(42603, 1, 2), 
    SimpleCaseEntry(202, 0, 2), 
    SimpleCaseEntry(234, 1, 2), 
    SimpleCaseEntry(7982, 0, 2), 
    SimpleCaseEntry(7974, 1, 2), 
    SimpleCaseEntry(203, 0, 2), 
    SimpleCaseEntry(235, 1, 2), 
    SimpleCaseEntry(981, 0, 3), 
    SimpleCaseEntry(966, 1, 3), 
    SimpleCaseEntry(934, 2, 3), 
    SimpleCaseEntry(7983, 0, 2), 
    SimpleCaseEntry(7975, 1, 2), 
    SimpleCaseEntry(11484, 0, 2), 
    SimpleCaseEntry(11485, 1, 2), 
    SimpleCaseEntry(42604, 0, 2), 
    SimpleCaseEntry(42605, 1, 2), 
    SimpleCaseEntry(204, 0, 2), 
    SimpleCaseEntry(236, 1, 2), 
    SimpleCaseEntry(982, 0, 3), 
    SimpleCaseEntry(960, 1, 3), 
    SimpleCaseEntry(928, 2, 3), 
    SimpleCaseEntry(205, 0, 2), 
    SimpleCaseEntry(237, 1, 2), 
    SimpleCaseEntry(11486, 0, 2), 
    SimpleCaseEntry(11487, 1, 2), 
    SimpleCaseEntry(206, 0, 2), 
    SimpleCaseEntry(238, 1, 2), 
    SimpleCaseEntry(984, 0, 2), 
    SimpleCaseEntry(985, 1, 2), 
    SimpleCaseEntry(207, 0, 2), 
    SimpleCaseEntry(239, 1, 2), 
    SimpleCaseEntry(11488, 0, 2), 
    SimpleCaseEntry(11489, 1, 2), 
    SimpleCaseEntry(208, 0, 2), 
    SimpleCaseEntry(240, 1, 2), 
    SimpleCaseEntry(986, 0, 2), 
    SimpleCaseEntry(987, 1, 2), 
    SimpleCaseEntry(209, 0, 2), 
    SimpleCaseEntry(241, 1, 2), 
    SimpleCaseEntry(11490, 0, 2), 
    SimpleCaseEntry(11491, 1, 2), 
    SimpleCaseEntry(210, 0, 2), 
    SimpleCaseEntry(242, 1, 2), 
    SimpleCaseEntry(988, 0, 2), 
    SimpleCaseEntry(989, 1, 2), 
    SimpleCaseEntry(211, 0, 2), 
    SimpleCaseEntry(243, 1, 2), 
    SimpleCaseEntry(212, 0, 2), 
    SimpleCaseEntry(244, 1, 2), 
    SimpleCaseEntry(990, 0, 2), 
    SimpleCaseEntry(991, 1, 2), 
    SimpleCaseEntry(7992, 0, 2), 
    SimpleCaseEntry(7984, 1, 2), 
    SimpleCaseEntry(213, 0, 2), 
    SimpleCaseEntry(245, 1, 2), 
    SimpleCaseEntry(7993, 0, 2), 
    SimpleCaseEntry(7985, 1, 2), 
    SimpleCaseEntry(214, 0, 2), 
    SimpleCaseEntry(246, 1, 2), 
    SimpleCaseEntry(992, 0, 2), 
    SimpleCaseEntry(993, 1, 2), 
    SimpleCaseEntry(7994, 0, 2), 
    SimpleCaseEntry(7986, 1, 2), 
    SimpleCaseEntry(7995, 0, 2), 
    SimpleCaseEntry(7987, 1, 2), 
    SimpleCaseEntry(216, 0, 2), 
    SimpleCaseEntry(248, 1, 2), 
    SimpleCaseEntry(994, 0, 2), 
    SimpleCaseEntry(995, 1, 2), 
    SimpleCaseEntry(7996, 0, 2), 
    SimpleCaseEntry(7988, 1, 2), 
    SimpleCaseEntry(217, 0, 2), 
    SimpleCaseEntry(249, 1, 2), 
    SimpleCaseEntry(7997, 0, 2), 
    SimpleCaseEntry(7989, 1, 2), 
    SimpleCaseEntry(218, 0, 2), 
    SimpleCaseEntry(250, 1, 2), 
    SimpleCaseEntry(996, 0, 2), 
    SimpleCaseEntry(997, 1, 2), 
    SimpleCaseEntry(7998, 0, 2), 
    SimpleCaseEntry(7990, 1, 2), 
    SimpleCaseEntry(11499, 0, 2), 
    SimpleCaseEntry(11500, 1, 2), 
    SimpleCaseEntry(219, 0, 2), 
    SimpleCaseEntry(251, 1, 2), 
    SimpleCaseEntry(7999, 0, 2), 
    SimpleCaseEntry(7991, 1, 2), 
    SimpleCaseEntry(220, 0, 2), 
    SimpleCaseEntry(252, 1, 2), 
    SimpleCaseEntry(998, 0, 2), 
    SimpleCaseEntry(999, 1, 2), 
    SimpleCaseEntry(11501, 0, 2), 
    SimpleCaseEntry(11502, 1, 2), 
    SimpleCaseEntry(221, 0, 2), 
    SimpleCaseEntry(253, 1, 2), 
    SimpleCaseEntry(222, 0, 2), 
    SimpleCaseEntry(254, 1, 2), 
    SimpleCaseEntry(1000, 0, 2), 
    SimpleCaseEntry(1001, 1, 2), 
    SimpleCaseEntry(42624, 0, 2), 
    SimpleCaseEntry(42625, 1, 2), 
    SimpleCaseEntry(1002, 0, 2), 
    SimpleCaseEntry(1003, 1, 2), 
    SimpleCaseEntry(11506, 0, 2), 
    SimpleCaseEntry(11507, 1, 2), 
    SimpleCaseEntry(42626, 0, 2), 
    SimpleCaseEntry(42627, 1, 2), 
    SimpleCaseEntry(1004, 0, 2), 
    SimpleCaseEntry(1005, 1, 2), 
    SimpleCaseEntry(42628, 0, 2), 
    SimpleCaseEntry(42629, 1, 2), 
    SimpleCaseEntry(1006, 0, 2), 
    SimpleCaseEntry(1007, 1, 2), 
    SimpleCaseEntry(8008, 0, 2), 
    SimpleCaseEntry(8000, 1, 2), 
    SimpleCaseEntry(8009, 0, 2), 
    SimpleCaseEntry(8001, 1, 2), 
    SimpleCaseEntry(42630, 0, 2), 
    SimpleCaseEntry(42631, 1, 2), 
    SimpleCaseEntry(1008, 0, 3), 
    SimpleCaseEntry(954, 1, 3), 
    SimpleCaseEntry(922, 2, 3), 
    SimpleCaseEntry(8010, 0, 2), 
    SimpleCaseEntry(8002, 1, 2), 
    SimpleCaseEntry(1009, 0, 3), 
    SimpleCaseEntry(961, 1, 3), 
    SimpleCaseEntry(929, 2, 3), 
    SimpleCaseEntry(8011, 0, 2), 
    SimpleCaseEntry(8003, 1, 2), 
    SimpleCaseEntry(42632, 0, 2), 
    SimpleCaseEntry(42633, 1, 2), 
    SimpleCaseEntry(8012, 0, 2), 
    SimpleCaseEntry(8004, 1, 2), 
    SimpleCaseEntry(8013, 0, 2), 
    SimpleCaseEntry(8005, 1, 2), 
    SimpleCaseEntry(42634, 0, 2), 
    SimpleCaseEntry(42635, 1, 2), 
    SimpleCaseEntry(1012, 0, 4), 
    SimpleCaseEntry(952, 1, 4), 
    SimpleCaseEntry(920, 2, 4), 
    SimpleCaseEntry(977, 3, 4), 
    SimpleCaseEntry(1013, 0, 3), 
    SimpleCaseEntry(949, 1, 3), 
    SimpleCaseEntry(917, 2, 3), 
    SimpleCaseEntry(42636, 0, 2), 
    SimpleCaseEntry(42637, 1, 2), 
    SimpleCaseEntry(1015, 0, 2), 
    SimpleCaseEntry(1016, 1, 2), 
    SimpleCaseEntry(42638, 0, 2), 
    SimpleCaseEntry(42639, 1, 2), 
    SimpleCaseEntry(1017, 0, 2), 
    SimpleCaseEntry(1010, 1, 2), 
    SimpleCaseEntry(42640, 0, 2), 
    SimpleCaseEntry(42641, 1, 2), 
    SimpleCaseEntry(1018, 0, 2), 
    SimpleCaseEntry(1019, 1, 2), 
    SimpleCaseEntry(42642, 0, 2), 
    SimpleCaseEntry(42643, 1, 2), 
    SimpleCaseEntry(1021, 0, 2), 
    SimpleCaseEntry(891, 1, 2), 
    SimpleCaseEntry(42644, 0, 2), 
    SimpleCaseEntry(42645, 1, 2), 
    SimpleCaseEntry(1022, 0, 2), 
    SimpleCaseEntry(892, 1, 2), 
    SimpleCaseEntry(1023, 0, 2), 
    SimpleCaseEntry(893, 1, 2), 
    SimpleCaseEntry(8025, 0, 2), 
    SimpleCaseEntry(8017, 1, 2), 
    SimpleCaseEntry(42646, 0, 2), 
    SimpleCaseEntry(42647, 1, 2), 
    SimpleCaseEntry(1024, 0, 2), 
    SimpleCaseEntry(1104, 1, 2), 
    SimpleCaseEntry(1025, 0, 2), 
    SimpleCaseEntry(1105, 1, 2), 
    SimpleCaseEntry(8027, 0, 2), 
    SimpleCaseEntry(8019, 1, 2), 
    SimpleCaseEntry(1026, 0, 2), 
    SimpleCaseEntry(1106, 1, 2), 
    SimpleCaseEntry(1027, 0, 2), 
    SimpleCaseEntry(1107, 1, 2), 
    SimpleCaseEntry(8029, 0, 2), 
    SimpleCaseEntry(8021, 1, 2), 
    SimpleCaseEntry(1028, 0, 2), 
    SimpleCaseEntry(1108, 1, 2), 
    SimpleCaseEntry(1029, 0, 2), 
    SimpleCaseEntry(1109, 1, 2), 
    SimpleCaseEntry(8031, 0, 2), 
    SimpleCaseEntry(8023, 1, 2), 
    SimpleCaseEntry(1030, 0, 2), 
    SimpleCaseEntry(1110, 1, 2), 
    SimpleCaseEntry(1031, 0, 2), 
    SimpleCaseEntry(1111, 1, 2), 
    SimpleCaseEntry(1032, 0, 2), 
    SimpleCaseEntry(1112, 1, 2), 
    SimpleCaseEntry(1033, 0, 2), 
    SimpleCaseEntry(1113, 1, 2), 
    SimpleCaseEntry(256, 0, 2), 
    SimpleCaseEntry(257, 1, 2), 
    SimpleCaseEntry(1034, 0, 2), 
    SimpleCaseEntry(1114, 1, 2), 
    SimpleCaseEntry(1035, 0, 2), 
    SimpleCaseEntry(1115, 1, 2), 
    SimpleCaseEntry(258, 0, 2), 
    SimpleCaseEntry(259, 1, 2), 
    SimpleCaseEntry(1036, 0, 2), 
    SimpleCaseEntry(1116, 1, 2), 
    SimpleCaseEntry(1037, 0, 2), 
    SimpleCaseEntry(1117, 1, 2), 
    SimpleCaseEntry(260, 0, 2), 
    SimpleCaseEntry(261, 1, 2), 
    SimpleCaseEntry(1038, 0, 2), 
    SimpleCaseEntry(1118, 1, 2), 
    SimpleCaseEntry(8040, 0, 2), 
    SimpleCaseEntry(8032, 1, 2), 
    SimpleCaseEntry(1039, 0, 2), 
    SimpleCaseEntry(1119, 1, 2), 
    SimpleCaseEntry(8041, 0, 2), 
    SimpleCaseEntry(8033, 1, 2), 
    SimpleCaseEntry(262, 0, 2), 
    SimpleCaseEntry(263, 1, 2), 
    SimpleCaseEntry(1040, 0, 2), 
    SimpleCaseEntry(1072, 1, 2), 
    SimpleCaseEntry(8042, 0, 2), 
    SimpleCaseEntry(8034, 1, 2), 
    SimpleCaseEntry(1041, 0, 2), 
    SimpleCaseEntry(1073, 1, 2), 
    SimpleCaseEntry(8043, 0, 2), 
    SimpleCaseEntry(8035, 1, 2), 
    SimpleCaseEntry(264, 0, 2), 
    SimpleCaseEntry(265, 1, 2), 
    SimpleCaseEntry(1042, 0, 2), 
    SimpleCaseEntry(1074, 1, 2), 
    SimpleCaseEntry(8044, 0, 2), 
    SimpleCaseEntry(8036, 1, 2), 
    SimpleCaseEntry(1043, 0, 2), 
    SimpleCaseEntry(1075, 1, 2), 
    SimpleCaseEntry(8045, 0, 2), 
    SimpleCaseEntry(8037, 1, 2), 
    SimpleCaseEntry(266, 0, 2), 
    SimpleCaseEntry(267, 1, 2), 
    SimpleCaseEntry(1044, 0, 2), 
    SimpleCaseEntry(1076, 1, 2), 
    SimpleCaseEntry(8046, 0, 2), 
    SimpleCaseEntry(8038, 1, 2), 
    SimpleCaseEntry(1045, 0, 2), 
    SimpleCaseEntry(1077, 1, 2), 
    SimpleCaseEntry(8047, 0, 2), 
    SimpleCaseEntry(8039, 1, 2), 
    SimpleCaseEntry(268, 0, 2), 
    SimpleCaseEntry(269, 1, 2), 
    SimpleCaseEntry(1046, 0, 2), 
    SimpleCaseEntry(1078, 1, 2), 
    SimpleCaseEntry(1047, 0, 2), 
    SimpleCaseEntry(1079, 1, 2), 
    SimpleCaseEntry(270, 0, 2), 
    SimpleCaseEntry(271, 1, 2), 
    SimpleCaseEntry(1048, 0, 2), 
    SimpleCaseEntry(1080, 1, 2), 
    SimpleCaseEntry(1049, 0, 2), 
    SimpleCaseEntry(1081, 1, 2), 
    SimpleCaseEntry(272, 0, 2), 
    SimpleCaseEntry(273, 1, 2), 
    SimpleCaseEntry(1050, 0, 2), 
    SimpleCaseEntry(1082, 1, 2), 
    SimpleCaseEntry(1051, 0, 2), 
    SimpleCaseEntry(1083, 1, 2), 
    SimpleCaseEntry(274, 0, 2), 
    SimpleCaseEntry(275, 1, 2), 
    SimpleCaseEntry(1052, 0, 2), 
    SimpleCaseEntry(1084, 1, 2), 
    SimpleCaseEntry(1053, 0, 2), 
    SimpleCaseEntry(1085, 1, 2), 
    SimpleCaseEntry(276, 0, 2), 
    SimpleCaseEntry(277, 1, 2), 
    SimpleCaseEntry(1054, 0, 2), 
    SimpleCaseEntry(1086, 1, 2), 
    SimpleCaseEntry(1055, 0, 2), 
    SimpleCaseEntry(1087, 1, 2), 
    SimpleCaseEntry(278, 0, 2), 
    SimpleCaseEntry(279, 1, 2), 
    SimpleCaseEntry(1056, 0, 2), 
    SimpleCaseEntry(1088, 1, 2), 
    SimpleCaseEntry(1057, 0, 2), 
    SimpleCaseEntry(1089, 1, 2), 
    SimpleCaseEntry(280, 0, 2), 
    SimpleCaseEntry(281, 1, 2), 
    SimpleCaseEntry(1058, 0, 2), 
    SimpleCaseEntry(1090, 1, 2), 
    SimpleCaseEntry(1059, 0, 2), 
    SimpleCaseEntry(1091, 1, 2), 
    SimpleCaseEntry(282, 0, 2), 
    SimpleCaseEntry(283, 1, 2), 
    SimpleCaseEntry(1060, 0, 2), 
    SimpleCaseEntry(1092, 1, 2), 
    SimpleCaseEntry(1061, 0, 2), 
    SimpleCaseEntry(1093, 1, 2), 
    SimpleCaseEntry(284, 0, 2), 
    SimpleCaseEntry(285, 1, 2), 
    SimpleCaseEntry(1062, 0, 2), 
    SimpleCaseEntry(1094, 1, 2), 
    SimpleCaseEntry(1063, 0, 2), 
    SimpleCaseEntry(1095, 1, 2), 
    SimpleCaseEntry(286, 0, 2), 
    SimpleCaseEntry(287, 1, 2), 
    SimpleCaseEntry(1064, 0, 2), 
    SimpleCaseEntry(1096, 1, 2), 
    SimpleCaseEntry(1065, 0, 2), 
    SimpleCaseEntry(1097, 1, 2), 
    SimpleCaseEntry(288, 0, 2), 
    SimpleCaseEntry(289, 1, 2), 
    SimpleCaseEntry(1066, 0, 2), 
    SimpleCaseEntry(1098, 1, 2), 
    SimpleCaseEntry(1067, 0, 2), 
    SimpleCaseEntry(1099, 1, 2), 
    SimpleCaseEntry(7680, 0, 2), 
    SimpleCaseEntry(7681, 1, 2), 
    SimpleCaseEntry(290, 0, 2), 
    SimpleCaseEntry(291, 1, 2), 
    SimpleCaseEntry(1068, 0, 2), 
    SimpleCaseEntry(1100, 1, 2), 
    SimpleCaseEntry(1069, 0, 2), 
    SimpleCaseEntry(1101, 1, 2), 
    SimpleCaseEntry(7682, 0, 2), 
    SimpleCaseEntry(7683, 1, 2), 
    SimpleCaseEntry(292, 0, 2), 
    SimpleCaseEntry(293, 1, 2), 
    SimpleCaseEntry(1070, 0, 2), 
    SimpleCaseEntry(1102, 1, 2), 
    SimpleCaseEntry(8072, 0, 2), 
    SimpleCaseEntry(8064, 1, 2), 
    SimpleCaseEntry(1071, 0, 2), 
    SimpleCaseEntry(1103, 1, 2), 
    SimpleCaseEntry(7684, 0, 2), 
    SimpleCaseEntry(7685, 1, 2), 
    SimpleCaseEntry(8073, 0, 2), 
    SimpleCaseEntry(8065, 1, 2), 
    SimpleCaseEntry(294, 0, 2), 
    SimpleCaseEntry(295, 1, 2), 
    SimpleCaseEntry(8074, 0, 2), 
    SimpleCaseEntry(8066, 1, 2), 
    SimpleCaseEntry(7686, 0, 2), 
    SimpleCaseEntry(7687, 1, 2), 
    SimpleCaseEntry(8075, 0, 2), 
    SimpleCaseEntry(8067, 1, 2), 
    SimpleCaseEntry(296, 0, 2), 
    SimpleCaseEntry(297, 1, 2), 
    SimpleCaseEntry(8076, 0, 2), 
    SimpleCaseEntry(8068, 1, 2), 
    SimpleCaseEntry(7688, 0, 2), 
    SimpleCaseEntry(7689, 1, 2), 
    SimpleCaseEntry(8077, 0, 2), 
    SimpleCaseEntry(8069, 1, 2), 
    SimpleCaseEntry(298, 0, 2), 
    SimpleCaseEntry(299, 1, 2), 
    SimpleCaseEntry(8078, 0, 2), 
    SimpleCaseEntry(8070, 1, 2), 
    SimpleCaseEntry(7690, 0, 2), 
    SimpleCaseEntry(7691, 1, 2), 
    SimpleCaseEntry(8079, 0, 2), 
    SimpleCaseEntry(8071, 1, 2), 
    SimpleCaseEntry(300, 0, 2), 
    SimpleCaseEntry(301, 1, 2), 
    SimpleCaseEntry(7692, 0, 2), 
    SimpleCaseEntry(7693, 1, 2), 
    SimpleCaseEntry(302, 0, 2), 
    SimpleCaseEntry(303, 1, 2), 
    SimpleCaseEntry(7694, 0, 2), 
    SimpleCaseEntry(7695, 1, 2), 
    SimpleCaseEntry(7696, 0, 2), 
    SimpleCaseEntry(7697, 1, 2), 
    SimpleCaseEntry(306, 0, 2), 
    SimpleCaseEntry(307, 1, 2), 
    SimpleCaseEntry(7698, 0, 2), 
    SimpleCaseEntry(7699, 1, 2), 
    SimpleCaseEntry(308, 0, 2), 
    SimpleCaseEntry(309, 1, 2), 
    SimpleCaseEntry(8088, 0, 2), 
    SimpleCaseEntry(8080, 1, 2), 
    SimpleCaseEntry(7700, 0, 2), 
    SimpleCaseEntry(7701, 1, 2), 
    SimpleCaseEntry(8089, 0, 2), 
    SimpleCaseEntry(8081, 1, 2), 
    SimpleCaseEntry(310, 0, 2), 
    SimpleCaseEntry(311, 1, 2), 
    SimpleCaseEntry(8090, 0, 2), 
    SimpleCaseEntry(8082, 1, 2), 
    SimpleCaseEntry(7702, 0, 2), 
    SimpleCaseEntry(7703, 1, 2), 
    SimpleCaseEntry(8091, 0, 2), 
    SimpleCaseEntry(8083, 1, 2), 
    SimpleCaseEntry(8092, 0, 2), 
    SimpleCaseEntry(8084, 1, 2), 
    SimpleCaseEntry(313, 0, 2), 
    SimpleCaseEntry(314, 1, 2), 
    SimpleCaseEntry(7704, 0, 2), 
    SimpleCaseEntry(7705, 1, 2), 
    SimpleCaseEntry(8093, 0, 2), 
    SimpleCaseEntry(8085, 1, 2), 
    SimpleCaseEntry(8094, 0, 2), 
    SimpleCaseEntry(8086, 1, 2), 
    SimpleCaseEntry(315, 0, 2), 
    SimpleCaseEntry(316, 1, 2), 
    SimpleCaseEntry(7706, 0, 2), 
    SimpleCaseEntry(7707, 1, 2), 
    SimpleCaseEntry(8095, 0, 2), 
    SimpleCaseEntry(8087, 1, 2), 
    SimpleCaseEntry(317, 0, 2), 
    SimpleCaseEntry(318, 1, 2), 
    SimpleCaseEntry(7708, 0, 2), 
    SimpleCaseEntry(7709, 1, 2), 
    SimpleCaseEntry(8486, 0, 3), 
    SimpleCaseEntry(969, 1, 3), 
    SimpleCaseEntry(937, 2, 3), 
    SimpleCaseEntry(319, 0, 2), 
    SimpleCaseEntry(320, 1, 2), 
    SimpleCaseEntry(7710, 0, 2), 
    SimpleCaseEntry(7711, 1, 2), 
    SimpleCaseEntry(321, 0, 2), 
    SimpleCaseEntry(322, 1, 2), 
    SimpleCaseEntry(7712, 0, 2), 
    SimpleCaseEntry(7713, 1, 2), 
    SimpleCaseEntry(8490, 0, 3), 
    SimpleCaseEntry(107, 1, 3), 
    SimpleCaseEntry(75, 2, 3), 
    SimpleCaseEntry(8491, 0, 3), 
    SimpleCaseEntry(229, 1, 3), 
    SimpleCaseEntry(197, 2, 3), 
    SimpleCaseEntry(323, 0, 2), 
    SimpleCaseEntry(324, 1, 2), 
    SimpleCaseEntry(7714, 0, 2), 
    SimpleCaseEntry(7715, 1, 2), 
    SimpleCaseEntry(8104, 0, 2), 
    SimpleCaseEntry(8096, 1, 2), 
    SimpleCaseEntry(325, 0, 2), 
    SimpleCaseEntry(326, 1, 2), 
    SimpleCaseEntry(7716, 0, 2), 
    SimpleCaseEntry(7717, 1, 2), 
    SimpleCaseEntry(8105, 0, 2), 
    SimpleCaseEntry(8097, 1, 2), 
    SimpleCaseEntry(8106, 0, 2), 
    SimpleCaseEntry(8098, 1, 2), 
    SimpleCaseEntry(327, 0, 2), 
    SimpleCaseEntry(328, 1, 2), 
    SimpleCaseEntry(7718, 0, 2), 
    SimpleCaseEntry(7719, 1, 2), 
    SimpleCaseEntry(8107, 0, 2), 
    SimpleCaseEntry(8099, 1, 2), 
    SimpleCaseEntry(8108, 0, 2), 
    SimpleCaseEntry(8100, 1, 2), 
    SimpleCaseEntry(7720, 0, 2), 
    SimpleCaseEntry(7721, 1, 2), 
    SimpleCaseEntry(8109, 0, 2), 
    SimpleCaseEntry(8101, 1, 2), 
    SimpleCaseEntry(8498, 0, 2), 
    SimpleCaseEntry(8526, 1, 2), 
    SimpleCaseEntry(330, 0, 2), 
    SimpleCaseEntry(331, 1, 2), 
    SimpleCaseEntry(8110, 0, 2), 
    SimpleCaseEntry(8102, 1, 2), 
    SimpleCaseEntry(7722, 0, 2), 
    SimpleCaseEntry(7723, 1, 2), 
    SimpleCaseEntry(8111, 0, 2), 
    SimpleCaseEntry(8103, 1, 2), 
    SimpleCaseEntry(332, 0, 2), 
    SimpleCaseEntry(333, 1, 2), 
    SimpleCaseEntry(7724, 0, 2), 
    SimpleCaseEntry(7725, 1, 2), 
    SimpleCaseEntry(334, 0, 2), 
    SimpleCaseEntry(335, 1, 2), 
    SimpleCaseEntry(7726, 0, 2), 
    SimpleCaseEntry(7727, 1, 2), 
    SimpleCaseEntry(336, 0, 2), 
    SimpleCaseEntry(337, 1, 2), 
    SimpleCaseEntry(7728, 0, 2), 
    SimpleCaseEntry(7729, 1, 2), 
    SimpleCaseEntry(338, 0, 2), 
    SimpleCaseEntry(339, 1, 2), 
    SimpleCaseEntry(7730, 0, 2), 
    SimpleCaseEntry(7731, 1, 2), 
    SimpleCaseEntry(340, 0, 2), 
    SimpleCaseEntry(341, 1, 2), 
    SimpleCaseEntry(8120, 0, 2), 
    SimpleCaseEntry(8112, 1, 2), 
    SimpleCaseEntry(7732, 0, 2), 
    SimpleCaseEntry(7733, 1, 2), 
    SimpleCaseEntry(8121, 0, 2), 
    SimpleCaseEntry(8113, 1, 2), 
    SimpleCaseEntry(342, 0, 2), 
    SimpleCaseEntry(343, 1, 2), 
    SimpleCaseEntry(1120, 0, 2), 
    SimpleCaseEntry(1121, 1, 2), 
    SimpleCaseEntry(8122, 0, 2), 
    SimpleCaseEntry(8048, 1, 2), 
    SimpleCaseEntry(7734, 0, 2), 
    SimpleCaseEntry(7735, 1, 2), 
    SimpleCaseEntry(8123, 0, 2), 
    SimpleCaseEntry(8049, 1, 2), 
    SimpleCaseEntry(344, 0, 2), 
    SimpleCaseEntry(345, 1, 2), 
    SimpleCaseEntry(1122, 0, 2), 
    SimpleCaseEntry(1123, 1, 2), 
    SimpleCaseEntry(8124, 0, 2), 
    SimpleCaseEntry(8115, 1, 2), 
    SimpleCaseEntry(7736, 0, 2), 
    SimpleCaseEntry(7737, 1, 2), 
    SimpleCaseEntry(346, 0, 2), 
    SimpleCaseEntry(347, 1, 2), 
    SimpleCaseEntry(1124, 0, 2), 
    SimpleCaseEntry(1125, 1, 2), 
    SimpleCaseEntry(8126, 0, 4), 
    SimpleCaseEntry(953, 1, 4), 
    SimpleCaseEntry(837, 2, 4), 
    SimpleCaseEntry(921, 3, 4), 
    SimpleCaseEntry(7738, 0, 2), 
    SimpleCaseEntry(7739, 1, 2), 
    SimpleCaseEntry(348, 0, 2), 
    SimpleCaseEntry(349, 1, 2), 
    SimpleCaseEntry(1126, 0, 2), 
    SimpleCaseEntry(1127, 1, 2), 
    SimpleCaseEntry(7740, 0, 2), 
    SimpleCaseEntry(7741, 1, 2), 
    SimpleCaseEntry(350, 0, 2), 
    SimpleCaseEntry(351, 1, 2), 
    SimpleCaseEntry(1128, 0, 2), 
    SimpleCaseEntry(1129, 1, 2), 
    SimpleCaseEntry(65313, 0, 2), 
    SimpleCaseEntry(65345, 1, 2), 
    SimpleCaseEntry(7742, 0, 2), 
    SimpleCaseEntry(7743, 1, 2), 
    SimpleCaseEntry(65314, 0, 2), 
    SimpleCaseEntry(65346, 1, 2), 
    SimpleCaseEntry(352, 0, 2), 
    SimpleCaseEntry(353, 1, 2), 
    SimpleCaseEntry(1130, 0, 2), 
    SimpleCaseEntry(1131, 1, 2), 
    SimpleCaseEntry(65315, 0, 2), 
    SimpleCaseEntry(65347, 1, 2), 
    SimpleCaseEntry(7744, 0, 2), 
    SimpleCaseEntry(7745, 1, 2), 
    SimpleCaseEntry(65316, 0, 2), 
    SimpleCaseEntry(65348, 1, 2), 
    SimpleCaseEntry(354, 0, 2), 
    SimpleCaseEntry(355, 1, 2), 
    SimpleCaseEntry(1132, 0, 2), 
    SimpleCaseEntry(1133, 1, 2), 
    SimpleCaseEntry(65317, 0, 2), 
    SimpleCaseEntry(65349, 1, 2), 
    SimpleCaseEntry(7746, 0, 2), 
    SimpleCaseEntry(7747, 1, 2), 
    SimpleCaseEntry(65318, 0, 2), 
    SimpleCaseEntry(65350, 1, 2), 
    SimpleCaseEntry(356, 0, 2), 
    SimpleCaseEntry(357, 1, 2), 
    SimpleCaseEntry(1134, 0, 2), 
    SimpleCaseEntry(1135, 1, 2), 
    SimpleCaseEntry(8136, 0, 2), 
    SimpleCaseEntry(8050, 1, 2), 
    SimpleCaseEntry(65319, 0, 2), 
    SimpleCaseEntry(65351, 1, 2), 
    SimpleCaseEntry(7748, 0, 2), 
    SimpleCaseEntry(7749, 1, 2), 
    SimpleCaseEntry(8137, 0, 2), 
    SimpleCaseEntry(8051, 1, 2), 
    SimpleCaseEntry(65320, 0, 2), 
    SimpleCaseEntry(65352, 1, 2), 
    SimpleCaseEntry(358, 0, 2), 
    SimpleCaseEntry(359, 1, 2), 
    SimpleCaseEntry(1136, 0, 2), 
    SimpleCaseEntry(1137, 1, 2), 
    SimpleCaseEntry(8138, 0, 2), 
    SimpleCaseEntry(8052, 1, 2), 
    SimpleCaseEntry(65321, 0, 2), 
    SimpleCaseEntry(65353, 1, 2), 
    SimpleCaseEntry(7750, 0, 2), 
    SimpleCaseEntry(7751, 1, 2), 
    SimpleCaseEntry(8139, 0, 2), 
    SimpleCaseEntry(8053, 1, 2), 
    SimpleCaseEntry(65322, 0, 2), 
    SimpleCaseEntry(65354, 1, 2), 
    SimpleCaseEntry(360, 0, 2), 
    SimpleCaseEntry(361, 1, 2), 
    SimpleCaseEntry(1138, 0, 2), 
    SimpleCaseEntry(1139, 1, 2), 
    SimpleCaseEntry(8140, 0, 2), 
    SimpleCaseEntry(8131, 1, 2), 
    SimpleCaseEntry(65323, 0, 2), 
    SimpleCaseEntry(65355, 1, 2), 
    SimpleCaseEntry(7752, 0, 2), 
    SimpleCaseEntry(7753, 1, 2), 
    SimpleCaseEntry(65324, 0, 2), 
    SimpleCaseEntry(65356, 1, 2), 
    SimpleCaseEntry(362, 0, 2), 
    SimpleCaseEntry(363, 1, 2), 
    SimpleCaseEntry(1140, 0, 2), 
    SimpleCaseEntry(1141, 1, 2), 
    SimpleCaseEntry(65325, 0, 2), 
    SimpleCaseEntry(65357, 1, 2), 
    SimpleCaseEntry(7754, 0, 2), 
    SimpleCaseEntry(7755, 1, 2), 
    SimpleCaseEntry(65326, 0, 2), 
    SimpleCaseEntry(65358, 1, 2), 
    SimpleCaseEntry(364, 0, 2), 
    SimpleCaseEntry(365, 1, 2), 
    SimpleCaseEntry(1142, 0, 2), 
    SimpleCaseEntry(1143, 1, 2), 
    SimpleCaseEntry(65327, 0, 2), 
    SimpleCaseEntry(65359, 1, 2), 
    SimpleCaseEntry(7756, 0, 2), 
    SimpleCaseEntry(7757, 1, 2), 
    SimpleCaseEntry(65328, 0, 2), 
    SimpleCaseEntry(65360, 1, 2), 
    SimpleCaseEntry(366, 0, 2), 
    SimpleCaseEntry(367, 1, 2), 
    SimpleCaseEntry(1144, 0, 2), 
    SimpleCaseEntry(1145, 1, 2), 
    SimpleCaseEntry(4256, 0, 2), 
    SimpleCaseEntry(11520, 1, 2), 
    SimpleCaseEntry(65329, 0, 2), 
    SimpleCaseEntry(65361, 1, 2), 
    SimpleCaseEntry(4257, 0, 2), 
    SimpleCaseEntry(11521, 1, 2), 
    SimpleCaseEntry(7758, 0, 2), 
    SimpleCaseEntry(7759, 1, 2), 
    SimpleCaseEntry(65330, 0, 2), 
    SimpleCaseEntry(65362, 1, 2), 
    SimpleCaseEntry(368, 0, 2), 
    SimpleCaseEntry(369, 1, 2), 
    SimpleCaseEntry(1146, 0, 2), 
    SimpleCaseEntry(1147, 1, 2), 
    SimpleCaseEntry(4258, 0, 2), 
    SimpleCaseEntry(11522, 1, 2), 
    SimpleCaseEntry(65331, 0, 2), 
    SimpleCaseEntry(65363, 1, 2), 
    SimpleCaseEntry(4259, 0, 2), 
    SimpleCaseEntry(11523, 1, 2), 
    SimpleCaseEntry(7760, 0, 2), 
    SimpleCaseEntry(7761, 1, 2), 
    SimpleCaseEntry(65332, 0, 2), 
    SimpleCaseEntry(65364, 1, 2), 
    SimpleCaseEntry(370, 0, 2), 
    SimpleCaseEntry(371, 1, 2), 
    SimpleCaseEntry(1148, 0, 2), 
    SimpleCaseEntry(1149, 1, 2), 
    SimpleCaseEntry(4260, 0, 2), 
    SimpleCaseEntry(11524, 1, 2), 
    SimpleCaseEntry(65333, 0, 2), 
    SimpleCaseEntry(65365, 1, 2), 
    SimpleCaseEntry(4261, 0, 2), 
    SimpleCaseEntry(11525, 1, 2), 
    SimpleCaseEntry(7762, 0, 2), 
    SimpleCaseEntry(7763, 1, 2), 
    SimpleCaseEntry(65334, 0, 2), 
    SimpleCaseEntry(65366, 1, 2), 
    SimpleCaseEntry(372, 0, 2), 
    SimpleCaseEntry(373, 1, 2), 
    SimpleCaseEntry(1150, 0, 2), 
    SimpleCaseEntry(1151, 1, 2), 
    SimpleCaseEntry(4262, 0, 2), 
    SimpleCaseEntry(11526, 1, 2), 
    SimpleCaseEntry(8152, 0, 2), 
    SimpleCaseEntry(8144, 1, 2), 
    SimpleCaseEntry(11264, 0, 2), 
    SimpleCaseEntry(11312, 1, 2), 
    SimpleCaseEntry(65335, 0, 2), 
    SimpleCaseEntry(65367, 1, 2), 
    SimpleCaseEntry(4263, 0, 2), 
    SimpleCaseEntry(11527, 1, 2), 
    SimpleCaseEntry(7764, 0, 2), 
    SimpleCaseEntry(7765, 1, 2), 
    SimpleCaseEntry(8153, 0, 2), 
    SimpleCaseEntry(8145, 1, 2), 
    SimpleCaseEntry(11265, 0, 2), 
    SimpleCaseEntry(11313, 1, 2), 
    SimpleCaseEntry(65336, 0, 2), 
    SimpleCaseEntry(65368, 1, 2), 
    SimpleCaseEntry(374, 0, 2), 
    SimpleCaseEntry(375, 1, 2), 
    SimpleCaseEntry(1152, 0, 2), 
    SimpleCaseEntry(1153, 1, 2), 
    SimpleCaseEntry(4264, 0, 2), 
    SimpleCaseEntry(11528, 1, 2), 
    SimpleCaseEntry(8154, 0, 2), 
    SimpleCaseEntry(8054, 1, 2), 
    SimpleCaseEntry(11266, 0, 2), 
    SimpleCaseEntry(11314, 1, 2), 
    SimpleCaseEntry(65337, 0, 2), 
    SimpleCaseEntry(65369, 1, 2), 
    SimpleCaseEntry(4265, 0, 2), 
    SimpleCaseEntry(11529, 1, 2), 
    SimpleCaseEntry(7766, 0, 2), 
    SimpleCaseEntry(7767, 1, 2), 
    SimpleCaseEntry(8155, 0, 2), 
    SimpleCaseEntry(8055, 1, 2), 
    SimpleCaseEntry(8544, 0, 2), 
    SimpleCaseEntry(8560, 1, 2), 
    SimpleCaseEntry(11267, 0, 2), 
    SimpleCaseEntry(11315, 1, 2), 
    SimpleCaseEntry(65338, 0, 2), 
    SimpleCaseEntry(65370, 1, 2), 
    SimpleCaseEntry(376, 0, 2), 
    SimpleCaseEntry(255, 1, 2), 
    SimpleCaseEntry(4266, 0, 2), 
    SimpleCaseEntry(11530, 1, 2), 
    SimpleCaseEntry(8545, 0, 2), 
    SimpleCaseEntry(8561, 1, 2), 
    SimpleCaseEntry(11268, 0, 2), 
    SimpleCaseEntry(11316, 1, 2), 
    SimpleCaseEntry(377, 0, 2), 
    SimpleCaseEntry(378, 1, 2), 
    SimpleCaseEntry(4267, 0, 2), 
    SimpleCaseEntry(11531, 1, 2), 
    SimpleCaseEntry(7768, 0, 2), 
    SimpleCaseEntry(7769, 1, 2), 
    SimpleCaseEntry(8546, 0, 2), 
    SimpleCaseEntry(8562, 1, 2), 
    SimpleCaseEntry(11269, 0, 2), 
    SimpleCaseEntry(11317, 1, 2), 
    SimpleCaseEntry(4268, 0, 2), 
    SimpleCaseEntry(11532, 1, 2), 
    SimpleCaseEntry(8547, 0, 2), 
    SimpleCaseEntry(8563, 1, 2), 
    SimpleCaseEntry(11270, 0, 2), 
    SimpleCaseEntry(11318, 1, 2), 
    SimpleCaseEntry(379, 0, 2), 
    SimpleCaseEntry(380, 1, 2), 
    SimpleCaseEntry(4269, 0, 2), 
    SimpleCaseEntry(11533, 1, 2), 
    SimpleCaseEntry(7770, 0, 2), 
    SimpleCaseEntry(7771, 1, 2), 
    SimpleCaseEntry(8548, 0, 2), 
    SimpleCaseEntry(8564, 1, 2), 
    SimpleCaseEntry(11271, 0, 2), 
    SimpleCaseEntry(11319, 1, 2), 
    SimpleCaseEntry(4270, 0, 2), 
    SimpleCaseEntry(11534, 1, 2), 
    SimpleCaseEntry(8549, 0, 2), 
    SimpleCaseEntry(8565, 1, 2), 
    SimpleCaseEntry(11272, 0, 2), 
    SimpleCaseEntry(11320, 1, 2), 
    SimpleCaseEntry(381, 0, 2), 
    SimpleCaseEntry(382, 1, 2), 
    SimpleCaseEntry(4271, 0, 2), 
    SimpleCaseEntry(11535, 1, 2), 
    SimpleCaseEntry(7772, 0, 2), 
    SimpleCaseEntry(7773, 1, 2), 
    SimpleCaseEntry(8550, 0, 2), 
    SimpleCaseEntry(8566, 1, 2), 
    SimpleCaseEntry(11273, 0, 2), 
    SimpleCaseEntry(11321, 1, 2), 
    SimpleCaseEntry(4272, 0, 2), 
    SimpleCaseEntry(11536, 1, 2), 
    SimpleCaseEntry(8551, 0, 2), 
    SimpleCaseEntry(8567, 1, 2), 
    SimpleCaseEntry(11274, 0, 2), 
    SimpleCaseEntry(11322, 1, 2), 
    SimpleCaseEntry(383, 0, 3), 
    SimpleCaseEntry(115, 1, 3), 
    SimpleCaseEntry(83, 2, 3), 
    SimpleCaseEntry(4273, 0, 2), 
    SimpleCaseEntry(11537, 1, 2), 
    SimpleCaseEntry(7774, 0, 2), 
    SimpleCaseEntry(7775, 1, 2), 
    SimpleCaseEntry(8552, 0, 2), 
    SimpleCaseEntry(8568, 1, 2), 
    SimpleCaseEntry(11275, 0, 2), 
    SimpleCaseEntry(11323, 1, 2), 
    SimpleCaseEntry(1162, 0, 2), 
    SimpleCaseEntry(1163, 1, 2), 
    SimpleCaseEntry(4274, 0, 2), 
    SimpleCaseEntry(11538, 1, 2), 
    SimpleCaseEntry(8553, 0, 2), 
    SimpleCaseEntry(8569, 1, 2), 
    SimpleCaseEntry(11276, 0, 2), 
    SimpleCaseEntry(11324, 1, 2), 
    SimpleCaseEntry(385, 0, 2), 
    SimpleCaseEntry(595, 1, 2), 
    SimpleCaseEntry(4275, 0, 2), 
    SimpleCaseEntry(11539, 1, 2), 
    SimpleCaseEntry(7776, 0, 3), 
    SimpleCaseEntry(7777, 1, 3), 
    SimpleCaseEntry(7835, 2, 3), 
    SimpleCaseEntry(8554, 0, 2), 
    SimpleCaseEntry(8570, 1, 2), 
    SimpleCaseEntry(11277, 0, 2), 
    SimpleCaseEntry(11325, 1, 2), 
    SimpleCaseEntry(42786, 0, 2), 
    SimpleCaseEntry(42787, 1, 2), 
    SimpleCaseEntry(386, 0, 2), 
    SimpleCaseEntry(387, 1, 2), 
    SimpleCaseEntry(1164, 0, 2), 
    SimpleCaseEntry(1165, 1, 2), 
    SimpleCaseEntry(4276, 0, 2), 
    SimpleCaseEntry(11540, 1, 2), 
    SimpleCaseEntry(8555, 0, 2), 
    SimpleCaseEntry(8571, 1, 2), 
    SimpleCaseEntry(11278, 0, 2), 
    SimpleCaseEntry(11326, 1, 2), 
    SimpleCaseEntry(4277, 0, 2), 
    SimpleCaseEntry(11541, 1, 2), 
    SimpleCaseEntry(7778, 0, 2), 
    SimpleCaseEntry(7779, 1, 2), 
    SimpleCaseEntry(8556, 0, 2), 
    SimpleCaseEntry(8572, 1, 2), 
    SimpleCaseEntry(11279, 0, 2), 
    SimpleCaseEntry(11327, 1, 2), 
    SimpleCaseEntry(42788, 0, 2), 
    SimpleCaseEntry(42789, 1, 2), 
    SimpleCaseEntry(388, 0, 2), 
    SimpleCaseEntry(389, 1, 2), 
    SimpleCaseEntry(1166, 0, 2), 
    SimpleCaseEntry(1167, 1, 2), 
    SimpleCaseEntry(4278, 0, 2), 
    SimpleCaseEntry(11542, 1, 2), 
    SimpleCaseEntry(8168, 0, 2), 
    SimpleCaseEntry(8160, 1, 2), 
    SimpleCaseEntry(8557, 0, 2), 
    SimpleCaseEntry(8573, 1, 2), 
    SimpleCaseEntry(11280, 0, 2), 
    SimpleCaseEntry(11328, 1, 2)
];

immutable fullCaseTable = [
    FullCaseEntry("Ⴗ", 0, 2),
    FullCaseEntry("ⴗ", 1, 2),
    FullCaseEntry("Ṥ", 0, 2),
    FullCaseEntry("ṥ", 1, 2),
    FullCaseEntry("Ῡ", 0, 2),
    FullCaseEntry("ῡ", 1, 2),
    FullCaseEntry("Ⅾ", 0, 2),
    FullCaseEntry("ⅾ", 1, 2),
    FullCaseEntry("Ⱁ", 0, 2),
    FullCaseEntry("ⱁ", 1, 2),
    FullCaseEntry("Ꜧ", 0, 2),
    FullCaseEntry("ꜧ", 1, 2),
    FullCaseEntry("Ɔ", 0, 2),
    FullCaseEntry("ɔ", 1, 2),
    FullCaseEntry("Ґ", 0, 2),
    FullCaseEntry("ґ", 1, 2),
    FullCaseEntry("Ⴘ", 0, 2),
    FullCaseEntry("ⴘ", 1, 2),
    FullCaseEntry("Ὺ", 0, 2),
    FullCaseEntry("ὺ", 1, 2),
    FullCaseEntry("Ⅿ", 0, 2),
    FullCaseEntry("ⅿ", 1, 2),
    FullCaseEntry("Ⱂ", 0, 2),
    FullCaseEntry("ⱂ", 1, 2),
    FullCaseEntry("Ƈ", 0, 2),
    FullCaseEntry("ƈ", 1, 2),
    FullCaseEntry("Ⴙ", 0, 2),
    FullCaseEntry("ⴙ", 1, 2),
    FullCaseEntry("Ṧ", 0, 2),
    FullCaseEntry("ṧ", 1, 2),
    FullCaseEntry("Ύ", 0, 2),
    FullCaseEntry("ύ", 1, 2),
    FullCaseEntry("Ⱃ", 0, 2),
    FullCaseEntry("ⱃ", 1, 2),
    FullCaseEntry("Ꜩ", 0, 2),
    FullCaseEntry("ꜩ", 1, 2),
    FullCaseEntry("Ғ", 0, 2),
    FullCaseEntry("ғ", 1, 2),
    FullCaseEntry("Ⴚ", 0, 2),
    FullCaseEntry("ⴚ", 1, 2),
    FullCaseEntry("Ῥ", 0, 2),
    FullCaseEntry("ῥ", 1, 2),
    FullCaseEntry("Ⱄ", 0, 2),
    FullCaseEntry("ⱄ", 1, 2),
    FullCaseEntry("Ɖ", 0, 2),
    FullCaseEntry("ɖ", 1, 2),
    FullCaseEntry("Ⴛ", 0, 2),
    FullCaseEntry("ⴛ", 1, 2),
    FullCaseEntry("Ṩ", 0, 2),
    FullCaseEntry("ṩ", 1, 2),
    FullCaseEntry("Ⱅ", 0, 2),
    FullCaseEntry("ⱅ", 1, 2),
    FullCaseEntry("Ꜫ", 0, 2),
    FullCaseEntry("ꜫ", 1, 2),
    FullCaseEntry("Ɗ", 0, 2),
    FullCaseEntry("ɗ", 1, 2),
    FullCaseEntry("Ҕ", 0, 2),
    FullCaseEntry("ҕ", 1, 2),
    FullCaseEntry("Ⴜ", 0, 2),
    FullCaseEntry("ⴜ", 1, 2),
    FullCaseEntry("Ⱆ", 0, 2),
    FullCaseEntry("ⱆ", 1, 2),
    FullCaseEntry("Ƌ", 0, 2),
    FullCaseEntry("ƌ", 1, 2),
    FullCaseEntry("Ⴝ", 0, 2),
    FullCaseEntry("ⴝ", 1, 2),
    FullCaseEntry("Ṫ", 0, 2),
    FullCaseEntry("ṫ", 1, 2),
    FullCaseEntry("Ⱇ", 0, 2),
    FullCaseEntry("ⱇ", 1, 2),
    FullCaseEntry("Ꜭ", 0, 2),
    FullCaseEntry("ꜭ", 1, 2),
    FullCaseEntry("Җ", 0, 2),
    FullCaseEntry("җ", 1, 2),
    FullCaseEntry("Ⴞ", 0, 2),
    FullCaseEntry("ⴞ", 1, 2),
    FullCaseEntry("Ⱈ", 0, 2),
    FullCaseEntry("ⱈ", 1, 2),
    FullCaseEntry("Ⴟ", 0, 2),
    FullCaseEntry("ⴟ", 1, 2),
    FullCaseEntry("Ṭ", 0, 2),
    FullCaseEntry("ṭ", 1, 2),
    FullCaseEntry("Ⱉ", 0, 2),
    FullCaseEntry("ⱉ", 1, 2),
    FullCaseEntry("Ꜯ", 0, 2),
    FullCaseEntry("ꜯ", 1, 2),
    FullCaseEntry("Ǝ", 0, 2),
    FullCaseEntry("ǝ", 1, 2),
    FullCaseEntry("Ҙ", 0, 2),
    FullCaseEntry("ҙ", 1, 2),
    FullCaseEntry("Ⴠ", 0, 2),
    FullCaseEntry("ⴠ", 1, 2),
    FullCaseEntry("ῲ", 0, 2),
    FullCaseEntry("ὼι", 1, 2),
    FullCaseEntry("Ⱊ", 0, 2),
    FullCaseEntry("ⱊ", 1, 2),
    FullCaseEntry("Ə", 0, 2),
    FullCaseEntry("ə", 1, 2),
    FullCaseEntry("Ⴡ", 0, 2),
    FullCaseEntry("ⴡ", 1, 2),
    FullCaseEntry("Ṯ", 0, 2),
    FullCaseEntry("ṯ", 1, 2),
    FullCaseEntry("ῳ", 0, 3),
    FullCaseEntry("ωι", 1, 3),
    FullCaseEntry("ῼ", 2, 3),
    FullCaseEntry("Ⱋ", 0, 2),
    FullCaseEntry("ⱋ", 1, 2),
    FullCaseEntry("Ɛ", 0, 2),
    FullCaseEntry("ɛ", 1, 2),
    FullCaseEntry("Қ", 0, 2),
    FullCaseEntry("қ", 1, 2),
    FullCaseEntry("Ⴢ", 0, 2),
    FullCaseEntry("ⴢ", 1, 2),
    FullCaseEntry("ῴ", 0, 2),
    FullCaseEntry("ώι", 1, 2),
    FullCaseEntry("Ⱌ", 0, 2),
    FullCaseEntry("ⱌ", 1, 2),
    FullCaseEntry("Ƒ", 0, 2),
    FullCaseEntry("ƒ", 1, 2),
    FullCaseEntry("Ⴣ", 0, 2),
    FullCaseEntry("ⴣ", 1, 2),
    FullCaseEntry("Ṱ", 0, 2),
    FullCaseEntry("ṱ", 1, 2),
    FullCaseEntry("Ⱍ", 0, 2),
    FullCaseEntry("ⱍ", 1, 2),
    FullCaseEntry("Ꜳ", 0, 2),
    FullCaseEntry("ꜳ", 1, 2),
    FullCaseEntry("Ҝ", 0, 2),
    FullCaseEntry("ҝ", 1, 2),
    FullCaseEntry("Ⴤ", 0, 2),
    FullCaseEntry("ⴤ", 1, 2),
    FullCaseEntry("ῶ", 0, 2),
    FullCaseEntry("ῶ", 1, 2),
    FullCaseEntry("Ⱎ", 0, 2),
    FullCaseEntry("ⱎ", 1, 2),
    FullCaseEntry("Ɠ", 0, 2),
    FullCaseEntry("ɠ", 1, 2),
    FullCaseEntry("Ⴥ", 0, 2),
    FullCaseEntry("ⴥ", 1, 2),
    FullCaseEntry("Ṳ", 0, 2),
    FullCaseEntry("ṳ", 1, 2),
    FullCaseEntry("ῷ", 0, 2),
    FullCaseEntry("ῶι", 1, 2),
    FullCaseEntry("Ⱏ", 0, 2),
    FullCaseEntry("ⱏ", 1, 2),
    FullCaseEntry("Ꜵ", 0, 2),
    FullCaseEntry("ꜵ", 1, 2),
    FullCaseEntry("Ɣ", 0, 2),
    FullCaseEntry("ɣ", 1, 2),
    FullCaseEntry("Ҟ", 0, 2),
    FullCaseEntry("ҟ", 1, 2),
    FullCaseEntry("Ὸ", 0, 2),
    FullCaseEntry("ὸ", 1, 2),
    FullCaseEntry("Ⱐ", 0, 2),
    FullCaseEntry("ⱐ", 1, 2),
    FullCaseEntry("Ⴧ", 0, 2),
    FullCaseEntry("ⴧ", 1, 2),
    FullCaseEntry("Ṵ", 0, 2),
    FullCaseEntry("ṵ", 1, 2),
    FullCaseEntry("Ό", 0, 2),
    FullCaseEntry("ό", 1, 2),
    FullCaseEntry("Ⱑ", 0, 2),
    FullCaseEntry("ⱑ", 1, 2),
    FullCaseEntry("Ꜷ", 0, 2),
    FullCaseEntry("ꜷ", 1, 2),
    FullCaseEntry("Ɩ", 0, 2),
    FullCaseEntry("ɩ", 1, 2),
    FullCaseEntry("Ҡ", 0, 2),
    FullCaseEntry("ҡ", 1, 2),
    FullCaseEntry("Ὼ", 0, 2),
    FullCaseEntry("ὼ", 1, 2),
    FullCaseEntry("Ⱒ", 0, 2),
    FullCaseEntry("ⱒ", 1, 2),
    FullCaseEntry("Ɨ", 0, 2),
    FullCaseEntry("ɨ", 1, 2),
    FullCaseEntry("Ṷ", 0, 2),
    FullCaseEntry("ṷ", 1, 2),
    FullCaseEntry("Ώ", 0, 2),
    FullCaseEntry("ώ", 1, 2),
    FullCaseEntry("Ⱓ", 0, 2),
    FullCaseEntry("ⱓ", 1, 2),
    FullCaseEntry("Ꜹ", 0, 2),
    FullCaseEntry("ꜹ", 1, 2),
    FullCaseEntry("Ƙ", 0, 2),
    FullCaseEntry("ƙ", 1, 2),
    FullCaseEntry("Ң", 0, 2),
    FullCaseEntry("ң", 1, 2),
    FullCaseEntry("ῼ", 0, 3),
    FullCaseEntry("ωι", 1, 3),
    FullCaseEntry("ῳ", 2, 3),
    FullCaseEntry("Ⱔ", 0, 2),
    FullCaseEntry("ⱔ", 1, 2),
    FullCaseEntry("Ṹ", 0, 2),
    FullCaseEntry("ṹ", 1, 2),
    FullCaseEntry("Ⱕ", 0, 2),
    FullCaseEntry("ⱕ", 1, 2),
    FullCaseEntry("Ꜻ", 0, 2),
    FullCaseEntry("ꜻ", 1, 2),
    FullCaseEntry("Ҥ", 0, 2),
    FullCaseEntry("ҥ", 1, 2),
    FullCaseEntry("Ↄ", 0, 2),
    FullCaseEntry("ↄ", 1, 2),
    FullCaseEntry("Ⱖ", 0, 2),
    FullCaseEntry("ⱖ", 1, 2),
    FullCaseEntry("Ⴭ", 0, 2),
    FullCaseEntry("ⴭ", 1, 2),
    FullCaseEntry("Ṻ", 0, 2),
    FullCaseEntry("ṻ", 1, 2),
    FullCaseEntry("Ⱗ", 0, 2),
    FullCaseEntry("ⱗ", 1, 2),
    FullCaseEntry("Ꜽ", 0, 2),
    FullCaseEntry("ꜽ", 1, 2),
    FullCaseEntry("Ɯ", 0, 2),
    FullCaseEntry("ɯ", 1, 2),
    FullCaseEntry("Ҧ", 0, 2),
    FullCaseEntry("ҧ", 1, 2),
    FullCaseEntry("Ⱘ", 0, 2),
    FullCaseEntry("ⱘ", 1, 2),
    FullCaseEntry("Ɲ", 0, 2),
    FullCaseEntry("ɲ", 1, 2),
    FullCaseEntry("Ṽ", 0, 2),
    FullCaseEntry("ṽ", 1, 2),
    FullCaseEntry("Ⱙ", 0, 2),
    FullCaseEntry("ⱙ", 1, 2),
    FullCaseEntry("Ꜿ", 0, 2),
    FullCaseEntry("ꜿ", 1, 2),
    FullCaseEntry("Ҩ", 0, 2),
    FullCaseEntry("ҩ", 1, 2),
    FullCaseEntry("Ⱚ", 0, 2),
    FullCaseEntry("ⱚ", 1, 2),
    FullCaseEntry("Ɵ", 0, 2),
    FullCaseEntry("ɵ", 1, 2),
    FullCaseEntry("Ṿ", 0, 2),
    FullCaseEntry("ṿ", 1, 2),
    FullCaseEntry("Ⱛ", 0, 2),
    FullCaseEntry("ⱛ", 1, 2),
    FullCaseEntry("Ꝁ", 0, 2),
    FullCaseEntry("ꝁ", 1, 2),
    FullCaseEntry("Ơ", 0, 2),
    FullCaseEntry("ơ", 1, 2),
    FullCaseEntry("Ҫ", 0, 2),
    FullCaseEntry("ҫ", 1, 2),
    FullCaseEntry("Ⱜ", 0, 2),
    FullCaseEntry("ⱜ", 1, 2),
    FullCaseEntry("Ẁ", 0, 2),
    FullCaseEntry("ẁ", 1, 2),
    FullCaseEntry("Ⱝ", 0, 2),
    FullCaseEntry("ⱝ", 1, 2),
    FullCaseEntry("Ꝃ", 0, 2),
    FullCaseEntry("ꝃ", 1, 2),
    FullCaseEntry("Ƣ", 0, 2),
    FullCaseEntry("ƣ", 1, 2),
    FullCaseEntry("Ҭ", 0, 2),
    FullCaseEntry("ҭ", 1, 2),
    FullCaseEntry("Ⱞ", 0, 2),
    FullCaseEntry("ⱞ", 1, 2),
    FullCaseEntry("Ẃ", 0, 2),
    FullCaseEntry("ẃ", 1, 2),
    FullCaseEntry("Ꝅ", 0, 2),
    FullCaseEntry("ꝅ", 1, 2),
    FullCaseEntry("Ƥ", 0, 2),
    FullCaseEntry("ƥ", 1, 2),
    FullCaseEntry("Ү", 0, 2),
    FullCaseEntry("ү", 1, 2),
    FullCaseEntry("Ẅ", 0, 2),
    FullCaseEntry("ẅ", 1, 2),
    FullCaseEntry("Ꝇ", 0, 2),
    FullCaseEntry("ꝇ", 1, 2),
    FullCaseEntry("Ʀ", 0, 2),
    FullCaseEntry("ʀ", 1, 2),
    FullCaseEntry("Ұ", 0, 2),
    FullCaseEntry("ұ", 1, 2),
    FullCaseEntry("Ƨ", 0, 2),
    FullCaseEntry("ƨ", 1, 2),
    FullCaseEntry("Ẇ", 0, 2),
    FullCaseEntry("ẇ", 1, 2),
    FullCaseEntry("Ꝉ", 0, 2),
    FullCaseEntry("ꝉ", 1, 2),
    FullCaseEntry("Ҳ", 0, 2),
    FullCaseEntry("ҳ", 1, 2),
    FullCaseEntry("Ʃ", 0, 2),
    FullCaseEntry("ʃ", 1, 2),
    FullCaseEntry("Ẉ", 0, 2),
    FullCaseEntry("ẉ", 1, 2),
    FullCaseEntry("Ꝋ", 0, 2),
    FullCaseEntry("ꝋ", 1, 2),
    FullCaseEntry("Ҵ", 0, 2),
    FullCaseEntry("ҵ", 1, 2),
    FullCaseEntry("Ẋ", 0, 2),
    FullCaseEntry("ẋ", 1, 2),
    FullCaseEntry("Ꝍ", 0, 2),
    FullCaseEntry("ꝍ", 1, 2),
    FullCaseEntry("Ƭ", 0, 2),
    FullCaseEntry("ƭ", 1, 2),
    FullCaseEntry("Ҷ", 0, 2),
    FullCaseEntry("ҷ", 1, 2),
    FullCaseEntry("Ẍ", 0, 2),
    FullCaseEntry("ẍ", 1, 2),
    FullCaseEntry("Ꝏ", 0, 2),
    FullCaseEntry("ꝏ", 1, 2),
    FullCaseEntry("Ʈ", 0, 2),
    FullCaseEntry("ʈ", 1, 2),
    FullCaseEntry("Ҹ", 0, 2),
    FullCaseEntry("ҹ", 1, 2),
    FullCaseEntry("𐐀", 0, 2),
    FullCaseEntry("𐐨", 1, 2),
    FullCaseEntry("Ư", 0, 2),
    FullCaseEntry("ư", 1, 2),
    FullCaseEntry("Ẏ", 0, 2),
    FullCaseEntry("ẏ", 1, 2),
    FullCaseEntry("Ꝑ", 0, 2),
    FullCaseEntry("ꝑ", 1, 2),
    FullCaseEntry("𐐁", 0, 2),
    FullCaseEntry("𐐩", 1, 2),
    FullCaseEntry("Һ", 0, 2),
    FullCaseEntry("һ", 1, 2),
    FullCaseEntry("𐐂", 0, 2),
    FullCaseEntry("𐐪", 1, 2),
    FullCaseEntry("Ʊ", 0, 2),
    FullCaseEntry("ʊ", 1, 2),
    FullCaseEntry("Ẑ", 0, 2),
    FullCaseEntry("ẑ", 1, 2),
    FullCaseEntry("Ꝓ", 0, 2),
    FullCaseEntry("ꝓ", 1, 2),
    FullCaseEntry("𐐃", 0, 2),
    FullCaseEntry("𐐫", 1, 2),
    FullCaseEntry("Ʋ", 0, 2),
    FullCaseEntry("ʋ", 1, 2),
    FullCaseEntry("Ҽ", 0, 2),
    FullCaseEntry("ҽ", 1, 2),
    FullCaseEntry("𐐄", 0, 2),
    FullCaseEntry("𐐬", 1, 2),
    FullCaseEntry("Ƴ", 0, 2),
    FullCaseEntry("ƴ", 1, 2),
    FullCaseEntry("Ẓ", 0, 2),
    FullCaseEntry("ẓ", 1, 2),
    FullCaseEntry("Ꝕ", 0, 2),
    FullCaseEntry("ꝕ", 1, 2),
    FullCaseEntry("𐐅", 0, 2),
    FullCaseEntry("𐐭", 1, 2),
    FullCaseEntry("Ҿ", 0, 2),
    FullCaseEntry("ҿ", 1, 2),
    FullCaseEntry("𐐆", 0, 2),
    FullCaseEntry("𐐮", 1, 2),
    FullCaseEntry("Ƶ", 0, 2),
    FullCaseEntry("ƶ", 1, 2),
    FullCaseEntry("Ẕ", 0, 2),
    FullCaseEntry("ẕ", 1, 2),
    FullCaseEntry("Ꝗ", 0, 2),
    FullCaseEntry("ꝗ", 1, 2),
    FullCaseEntry("𐐇", 0, 2),
    FullCaseEntry("𐐯", 1, 2),
    FullCaseEntry("Ӏ", 0, 2),
    FullCaseEntry("ӏ", 1, 2),
    FullCaseEntry("𐐈", 0, 2),
    FullCaseEntry("𐐰", 1, 2),
    FullCaseEntry("Ʒ", 0, 2),
    FullCaseEntry("ʒ", 1, 2),
    FullCaseEntry("Ӂ", 0, 2),
    FullCaseEntry("ӂ", 1, 2),
    FullCaseEntry("ẖ", 0, 2),
    FullCaseEntry("ẖ", 1, 2),
    FullCaseEntry("Ꝙ", 0, 2),
    FullCaseEntry("ꝙ", 1, 2),
    FullCaseEntry("𐐉", 0, 2),
    FullCaseEntry("𐐱", 1, 2),
    FullCaseEntry("Ƹ", 0, 2),
    FullCaseEntry("ƹ", 1, 2),
    FullCaseEntry("ẗ", 0, 2),
    FullCaseEntry("ẗ", 1, 2),
    FullCaseEntry("𐐊", 0, 2),
    FullCaseEntry("𐐲", 1, 2),
    FullCaseEntry("Ӄ", 0, 2),
    FullCaseEntry("ӄ", 1, 2),
    FullCaseEntry("ẘ", 0, 2),
    FullCaseEntry("ẘ", 1, 2),
    FullCaseEntry("Ꝛ", 0, 2),
    FullCaseEntry("ꝛ", 1, 2),
    FullCaseEntry("𐐋", 0, 2),
    FullCaseEntry("𐐳", 1, 2),
    FullCaseEntry("ẙ", 0, 2),
    FullCaseEntry("ẙ", 1, 2),
    FullCaseEntry("𐐌", 0, 2),
    FullCaseEntry("𐐴", 1, 2),
    FullCaseEntry("Ӆ", 0, 2),
    FullCaseEntry("ӆ", 1, 2),
    FullCaseEntry("ẚ", 0, 2),
    FullCaseEntry("aʾ", 1, 2),
    FullCaseEntry("Ꝝ", 0, 2),
    FullCaseEntry("ꝝ", 1, 2),
    FullCaseEntry("𐐍", 0, 2),
    FullCaseEntry("𐐵", 1, 2),
    FullCaseEntry("Ƽ", 0, 2),
    FullCaseEntry("ƽ", 1, 2),
    FullCaseEntry("ẛ", 0, 3),
    FullCaseEntry("ṡ", 1, 3),
    FullCaseEntry("Ṡ", 2, 3),
    FullCaseEntry("𐐎", 0, 2),
    FullCaseEntry("𐐶", 1, 2),
    FullCaseEntry("Ӈ", 0, 2),
    FullCaseEntry("ӈ", 1, 2),
    FullCaseEntry("Ꝟ", 0, 2),
    FullCaseEntry("ꝟ", 1, 2),
    FullCaseEntry("𐐏", 0, 2),
    FullCaseEntry("𐐷", 1, 2),
    FullCaseEntry("𐐐", 0, 2),
    FullCaseEntry("𐐸", 1, 2),
    FullCaseEntry("Ӊ", 0, 2),
    FullCaseEntry("ӊ", 1, 2),
    FullCaseEntry("ẞ", 0, 3),
    FullCaseEntry("ss", 1, 3),
    FullCaseEntry("ß", 2, 3),
    FullCaseEntry("Ꝡ", 0, 2),
    FullCaseEntry("ꝡ", 1, 2),
    FullCaseEntry("𐐑", 0, 2),
    FullCaseEntry("𐐹", 1, 2),
    FullCaseEntry("ͅ", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("Ι", 2, 4),
    FullCaseEntry("ι", 3, 4),
    FullCaseEntry("𐐒", 0, 2),
    FullCaseEntry("𐐺", 1, 2),
    FullCaseEntry("Ӌ", 0, 2),
    FullCaseEntry("ӌ", 1, 2),
    FullCaseEntry("Ạ", 0, 2),
    FullCaseEntry("ạ", 1, 2),
    FullCaseEntry("Ꝣ", 0, 2),
    FullCaseEntry("ꝣ", 1, 2),
    FullCaseEntry("𐐓", 0, 2),
    FullCaseEntry("𐐻", 1, 2),
    FullCaseEntry("𐐔", 0, 2),
    FullCaseEntry("𐐼", 1, 2),
    FullCaseEntry("Ӎ", 0, 2),
    FullCaseEntry("ӎ", 1, 2),
    FullCaseEntry("Ả", 0, 2),
    FullCaseEntry("ả", 1, 2),
    FullCaseEntry("Ⓐ", 0, 2),
    FullCaseEntry("ⓐ", 1, 2),
    FullCaseEntry("Ꝥ", 0, 2),
    FullCaseEntry("ꝥ", 1, 2),
    FullCaseEntry("𐐕", 0, 2),
    FullCaseEntry("𐐽", 1, 2),
    FullCaseEntry("Ǆ", 0, 3),
    FullCaseEntry("ǆ", 1, 3),
    FullCaseEntry("ǅ", 2, 3),
    FullCaseEntry("Ⓑ", 0, 2),
    FullCaseEntry("ⓑ", 1, 2),
    FullCaseEntry("𐐖", 0, 2),
    FullCaseEntry("𐐾", 1, 2),
    FullCaseEntry("ǅ", 0, 3),
    FullCaseEntry("ǆ", 1, 3),
    FullCaseEntry("Ǆ", 2, 3),
    FullCaseEntry("Ấ", 0, 2),
    FullCaseEntry("ấ", 1, 2),
    FullCaseEntry("Ⓒ", 0, 2),
    FullCaseEntry("ⓒ", 1, 2),
    FullCaseEntry("Ꝧ", 0, 2),
    FullCaseEntry("ꝧ", 1, 2),
    FullCaseEntry("𐐗", 0, 2),
    FullCaseEntry("𐐿", 1, 2),
    FullCaseEntry("A", 0, 2),
    FullCaseEntry("a", 1, 2),
    FullCaseEntry("Ӑ", 0, 2),
    FullCaseEntry("ӑ", 1, 2),
    FullCaseEntry("Ⓓ", 0, 2),
    FullCaseEntry("ⓓ", 1, 2),
    FullCaseEntry("𐐘", 0, 2),
    FullCaseEntry("𐑀", 1, 2),
    FullCaseEntry("B", 0, 2),
    FullCaseEntry("b", 1, 2),
    FullCaseEntry("Ǉ", 0, 3),
    FullCaseEntry("ǉ", 1, 3),
    FullCaseEntry("ǈ", 2, 3),
    FullCaseEntry("Ầ", 0, 2),
    FullCaseEntry("ầ", 1, 2),
    FullCaseEntry("Ⓔ", 0, 2),
    FullCaseEntry("ⓔ", 1, 2),
    FullCaseEntry("Ꝩ", 0, 2),
    FullCaseEntry("ꝩ", 1, 2),
    FullCaseEntry("𐐙", 0, 2),
    FullCaseEntry("𐑁", 1, 2),
    FullCaseEntry("C", 0, 2),
    FullCaseEntry("c", 1, 2),
    FullCaseEntry("ǈ", 0, 3),
    FullCaseEntry("ǉ", 1, 3),
    FullCaseEntry("Ǉ", 2, 3),
    FullCaseEntry("Ӓ", 0, 2),
    FullCaseEntry("ӓ", 1, 2),
    FullCaseEntry("Ⓕ", 0, 2),
    FullCaseEntry("ⓕ", 1, 2),
    FullCaseEntry("𐐚", 0, 2),
    FullCaseEntry("𐑂", 1, 2),
    FullCaseEntry("D", 0, 2),
    FullCaseEntry("d", 1, 2),
    FullCaseEntry("Ẩ", 0, 2),
    FullCaseEntry("ẩ", 1, 2),
    FullCaseEntry("Ⓖ", 0, 2),
    FullCaseEntry("ⓖ", 1, 2),
    FullCaseEntry("Ꝫ", 0, 2),
    FullCaseEntry("ꝫ", 1, 2),
    FullCaseEntry("𐐛", 0, 2),
    FullCaseEntry("𐑃", 1, 2),
    FullCaseEntry("E", 0, 2),
    FullCaseEntry("e", 1, 2),
    FullCaseEntry("Ǌ", 0, 3),
    FullCaseEntry("ǌ", 1, 3),
    FullCaseEntry("ǋ", 2, 3),
    FullCaseEntry("Ӕ", 0, 2),
    FullCaseEntry("ӕ", 1, 2),
    FullCaseEntry("Ⓗ", 0, 2),
    FullCaseEntry("ⓗ", 1, 2),
    FullCaseEntry("𐐜", 0, 2),
    FullCaseEntry("𐑄", 1, 2),
    FullCaseEntry("F", 0, 2),
    FullCaseEntry("f", 1, 2),
    FullCaseEntry("ǋ", 0, 3),
    FullCaseEntry("ǌ", 1, 3),
    FullCaseEntry("Ǌ", 2, 3),
    FullCaseEntry("Ẫ", 0, 2),
    FullCaseEntry("ẫ", 1, 2),
    FullCaseEntry("Ⓘ", 0, 2),
    FullCaseEntry("ⓘ", 1, 2),
    FullCaseEntry("Ꝭ", 0, 2),
    FullCaseEntry("ꝭ", 1, 2),
    FullCaseEntry("𐐝", 0, 2),
    FullCaseEntry("𐑅", 1, 2),
    FullCaseEntry("G", 0, 2),
    FullCaseEntry("g", 1, 2),
    FullCaseEntry("Ӗ", 0, 2),
    FullCaseEntry("ӗ", 1, 2),
    FullCaseEntry("Ⓙ", 0, 2),
    FullCaseEntry("ⓙ", 1, 2),
    FullCaseEntry("ﬀ", 0, 2),
    FullCaseEntry("ff", 1, 2),
    FullCaseEntry("𐐞", 0, 2),
    FullCaseEntry("𐑆", 1, 2),
    FullCaseEntry("H", 0, 2),
    FullCaseEntry("h", 1, 2),
    FullCaseEntry("Ǎ", 0, 2),
    FullCaseEntry("ǎ", 1, 2),
    FullCaseEntry("Ậ", 0, 2),
    FullCaseEntry("ậ", 1, 2),
    FullCaseEntry("Ⓚ", 0, 2),
    FullCaseEntry("ⓚ", 1, 2),
    FullCaseEntry("Ꝯ", 0, 2),
    FullCaseEntry("ꝯ", 1, 2),
    FullCaseEntry("ﬁ", 0, 2),
    FullCaseEntry("fi", 1, 2),
    FullCaseEntry("𐐟", 0, 2),
    FullCaseEntry("𐑇", 1, 2),
    FullCaseEntry("I", 0, 2),
    FullCaseEntry("i", 1, 2),
    FullCaseEntry("Ә", 0, 2),
    FullCaseEntry("ә", 1, 2),
    FullCaseEntry("Ⓛ", 0, 2),
    FullCaseEntry("ⓛ", 1, 2),
    FullCaseEntry("ﬂ", 0, 2),
    FullCaseEntry("fl", 1, 2),
    FullCaseEntry("𐐠", 0, 2),
    FullCaseEntry("𐑈", 1, 2),
    FullCaseEntry("J", 0, 2),
    FullCaseEntry("j", 1, 2),
    FullCaseEntry("Ǐ", 0, 2),
    FullCaseEntry("ǐ", 1, 2),
    FullCaseEntry("Ắ", 0, 2),
    FullCaseEntry("ắ", 1, 2),
    FullCaseEntry("Ⓜ", 0, 2),
    FullCaseEntry("ⓜ", 1, 2),
    FullCaseEntry("ﬃ", 0, 2),
    FullCaseEntry("ffi", 1, 2),
    FullCaseEntry("𐐡", 0, 2),
    FullCaseEntry("𐑉", 1, 2),
    FullCaseEntry("K", 0, 3),
    FullCaseEntry("k", 1, 3),
    FullCaseEntry("K", 2, 3),
    FullCaseEntry("Ӛ", 0, 2),
    FullCaseEntry("ӛ", 1, 2),
    FullCaseEntry("Ⓝ", 0, 2),
    FullCaseEntry("ⓝ", 1, 2),
    FullCaseEntry("ﬄ", 0, 2),
    FullCaseEntry("ffl", 1, 2),
    FullCaseEntry("𐐢", 0, 2),
    FullCaseEntry("𐑊", 1, 2),
    FullCaseEntry("L", 0, 2),
    FullCaseEntry("l", 1, 2),
    FullCaseEntry("Ǒ", 0, 2),
    FullCaseEntry("ǒ", 1, 2),
    FullCaseEntry("Ằ", 0, 2),
    FullCaseEntry("ằ", 1, 2),
    FullCaseEntry("Ⓞ", 0, 2),
    FullCaseEntry("ⓞ", 1, 2),
    FullCaseEntry("ﬅ", 0, 3),
    FullCaseEntry("st", 1, 3),
    FullCaseEntry("ﬆ", 2, 3),
    FullCaseEntry("𐐣", 0, 2),
    FullCaseEntry("𐑋", 1, 2),
    FullCaseEntry("M", 0, 2),
    FullCaseEntry("m", 1, 2),
    FullCaseEntry("Ӝ", 0, 2),
    FullCaseEntry("ӝ", 1, 2),
    FullCaseEntry("Ⓟ", 0, 2),
    FullCaseEntry("ⓟ", 1, 2),
    FullCaseEntry("ﬆ", 0, 3),
    FullCaseEntry("st", 1, 3),
    FullCaseEntry("ﬅ", 2, 3),
    FullCaseEntry("𐐤", 0, 2),
    FullCaseEntry("𐑌", 1, 2),
    FullCaseEntry("N", 0, 2),
    FullCaseEntry("n", 1, 2),
    FullCaseEntry("Ǔ", 0, 2),
    FullCaseEntry("ǔ", 1, 2),
    FullCaseEntry("Ẳ", 0, 2),
    FullCaseEntry("ẳ", 1, 2),
    FullCaseEntry("Ⓠ", 0, 2),
    FullCaseEntry("ⓠ", 1, 2),
    FullCaseEntry("𐐥", 0, 2),
    FullCaseEntry("𐑍", 1, 2),
    FullCaseEntry("O", 0, 2),
    FullCaseEntry("o", 1, 2),
    FullCaseEntry("Ӟ", 0, 2),
    FullCaseEntry("ӟ", 1, 2),
    FullCaseEntry("Ⓡ", 0, 2),
    FullCaseEntry("ⓡ", 1, 2),
    FullCaseEntry("Ⱡ", 0, 2),
    FullCaseEntry("ⱡ", 1, 2),
    FullCaseEntry("𐐦", 0, 2),
    FullCaseEntry("𐑎", 1, 2),
    FullCaseEntry("P", 0, 2),
    FullCaseEntry("p", 1, 2),
    FullCaseEntry("Ǖ", 0, 2),
    FullCaseEntry("ǖ", 1, 2),
    FullCaseEntry("Ẵ", 0, 2),
    FullCaseEntry("ẵ", 1, 2),
    FullCaseEntry("Ⓢ", 0, 2),
    FullCaseEntry("ⓢ", 1, 2),
    FullCaseEntry("𐐧", 0, 2),
    FullCaseEntry("𐑏", 1, 2),
    FullCaseEntry("Q", 0, 2),
    FullCaseEntry("q", 1, 2),
    FullCaseEntry("Ӡ", 0, 2),
    FullCaseEntry("ӡ", 1, 2),
    FullCaseEntry("Ⓣ", 0, 2),
    FullCaseEntry("ⓣ", 1, 2),
    FullCaseEntry("Ɫ", 0, 2),
    FullCaseEntry("ɫ", 1, 2),
    FullCaseEntry("R", 0, 2),
    FullCaseEntry("r", 1, 2),
    FullCaseEntry("Ǘ", 0, 2),
    FullCaseEntry("ǘ", 1, 2),
    FullCaseEntry("Ặ", 0, 2),
    FullCaseEntry("ặ", 1, 2),
    FullCaseEntry("Ⓤ", 0, 2),
    FullCaseEntry("ⓤ", 1, 2),
    FullCaseEntry("Ᵽ", 0, 2),
    FullCaseEntry("ᵽ", 1, 2),
    FullCaseEntry("S", 0, 3),
    FullCaseEntry("s", 1, 3),
    FullCaseEntry("ſ", 2, 3),
    FullCaseEntry("Ӣ", 0, 2),
    FullCaseEntry("ӣ", 1, 2),
    FullCaseEntry("Ⓥ", 0, 2),
    FullCaseEntry("ⓥ", 1, 2),
    FullCaseEntry("Ɽ", 0, 2),
    FullCaseEntry("ɽ", 1, 2),
    FullCaseEntry("Ꝺ", 0, 2),
    FullCaseEntry("ꝺ", 1, 2),
    FullCaseEntry("T", 0, 2),
    FullCaseEntry("t", 1, 2),
    FullCaseEntry("Ǚ", 0, 2),
    FullCaseEntry("ǚ", 1, 2),
    FullCaseEntry("Ẹ", 0, 2),
    FullCaseEntry("ẹ", 1, 2),
    FullCaseEntry("Ⓦ", 0, 2),
    FullCaseEntry("ⓦ", 1, 2),
    FullCaseEntry("U", 0, 2),
    FullCaseEntry("u", 1, 2),
    FullCaseEntry("Ӥ", 0, 2),
    FullCaseEntry("ӥ", 1, 2),
    FullCaseEntry("Ⓧ", 0, 2),
    FullCaseEntry("ⓧ", 1, 2),
    FullCaseEntry("Ꝼ", 0, 2),
    FullCaseEntry("ꝼ", 1, 2),
    FullCaseEntry("V", 0, 2),
    FullCaseEntry("v", 1, 2),
    FullCaseEntry("Ǜ", 0, 2),
    FullCaseEntry("ǜ", 1, 2),
    FullCaseEntry("Ẻ", 0, 2),
    FullCaseEntry("ẻ", 1, 2),
    FullCaseEntry("Ⓨ", 0, 2),
    FullCaseEntry("ⓨ", 1, 2),
    FullCaseEntry("Ⱨ", 0, 2),
    FullCaseEntry("ⱨ", 1, 2),
    FullCaseEntry("W", 0, 2),
    FullCaseEntry("w", 1, 2),
    FullCaseEntry("Ӧ", 0, 2),
    FullCaseEntry("ӧ", 1, 2),
    FullCaseEntry("Ⓩ", 0, 2),
    FullCaseEntry("ⓩ", 1, 2),
    FullCaseEntry("Ᵹ", 0, 2),
    FullCaseEntry("ᵹ", 1, 2),
    FullCaseEntry("X", 0, 2),
    FullCaseEntry("x", 1, 2),
    FullCaseEntry("Ẽ", 0, 2),
    FullCaseEntry("ẽ", 1, 2),
    FullCaseEntry("Ⱪ", 0, 2),
    FullCaseEntry("ⱪ", 1, 2),
    FullCaseEntry("Ꝿ", 0, 2),
    FullCaseEntry("ꝿ", 1, 2),
    FullCaseEntry("Y", 0, 2),
    FullCaseEntry("y", 1, 2),
    FullCaseEntry("Ǟ", 0, 2),
    FullCaseEntry("ǟ", 1, 2),
    FullCaseEntry("Ө", 0, 2),
    FullCaseEntry("ө", 1, 2),
    FullCaseEntry("Z", 0, 2),
    FullCaseEntry("z", 1, 2),
    FullCaseEntry("Ế", 0, 2),
    FullCaseEntry("ế", 1, 2),
    FullCaseEntry("Ⱬ", 0, 2),
    FullCaseEntry("ⱬ", 1, 2),
    FullCaseEntry("Ꞁ", 0, 2),
    FullCaseEntry("ꞁ", 1, 2),
    FullCaseEntry("ﬓ", 0, 2),
    FullCaseEntry("մն", 1, 2),
    FullCaseEntry("Ǡ", 0, 2),
    FullCaseEntry("ǡ", 1, 2),
    FullCaseEntry("Ӫ", 0, 2),
    FullCaseEntry("ӫ", 1, 2),
    FullCaseEntry("ﬔ", 0, 2),
    FullCaseEntry("մե", 1, 2),
    FullCaseEntry("Ề", 0, 2),
    FullCaseEntry("ề", 1, 2),
    FullCaseEntry("Ɑ", 0, 2),
    FullCaseEntry("ɑ", 1, 2),
    FullCaseEntry("Ꞃ", 0, 2),
    FullCaseEntry("ꞃ", 1, 2),
    FullCaseEntry("ﬕ", 0, 2),
    FullCaseEntry("մի", 1, 2),
    FullCaseEntry("Ǣ", 0, 2),
    FullCaseEntry("ǣ", 1, 2),
    FullCaseEntry("Ӭ", 0, 2),
    FullCaseEntry("ӭ", 1, 2),
    FullCaseEntry("Ɱ", 0, 2),
    FullCaseEntry("ɱ", 1, 2),
    FullCaseEntry("ﬖ", 0, 2),
    FullCaseEntry("վն", 1, 2),
    FullCaseEntry("Ể", 0, 2),
    FullCaseEntry("ể", 1, 2),
    FullCaseEntry("Ɐ", 0, 2),
    FullCaseEntry("ɐ", 1, 2),
    FullCaseEntry("Ꞅ", 0, 2),
    FullCaseEntry("ꞅ", 1, 2),
    FullCaseEntry("ﬗ", 0, 2),
    FullCaseEntry("մխ", 1, 2),
    FullCaseEntry("Ǥ", 0, 2),
    FullCaseEntry("ǥ", 1, 2),
    FullCaseEntry("Ӯ", 0, 2),
    FullCaseEntry("ӯ", 1, 2),
    FullCaseEntry("Ɒ", 0, 2),
    FullCaseEntry("ɒ", 1, 2),
    FullCaseEntry("Ễ", 0, 2),
    FullCaseEntry("ễ", 1, 2),
    FullCaseEntry("Ꞇ", 0, 2),
    FullCaseEntry("ꞇ", 1, 2),
    FullCaseEntry("Ǧ", 0, 2),
    FullCaseEntry("ǧ", 1, 2),
    FullCaseEntry("Ӱ", 0, 2),
    FullCaseEntry("ӱ", 1, 2),
    FullCaseEntry("Ⱳ", 0, 2),
    FullCaseEntry("ⱳ", 1, 2),
    FullCaseEntry("Ệ", 0, 2),
    FullCaseEntry("ệ", 1, 2),
    FullCaseEntry("Ǩ", 0, 2),
    FullCaseEntry("ǩ", 1, 2),
    FullCaseEntry("Ӳ", 0, 2),
    FullCaseEntry("ӳ", 1, 2),
    FullCaseEntry("Ỉ", 0, 2),
    FullCaseEntry("ỉ", 1, 2),
    FullCaseEntry("Ⱶ", 0, 2),
    FullCaseEntry("ⱶ", 1, 2),
    FullCaseEntry("Ǫ", 0, 2),
    FullCaseEntry("ǫ", 1, 2),
    FullCaseEntry("Ӵ", 0, 2),
    FullCaseEntry("ӵ", 1, 2),
    FullCaseEntry("Ꞌ", 0, 2),
    FullCaseEntry("ꞌ", 1, 2),
    FullCaseEntry("Ͱ", 0, 2),
    FullCaseEntry("ͱ", 1, 2),
    FullCaseEntry("Ị", 0, 2),
    FullCaseEntry("ị", 1, 2),
    FullCaseEntry("Ǭ", 0, 2),
    FullCaseEntry("ǭ", 1, 2),
    FullCaseEntry("Ӷ", 0, 2),
    FullCaseEntry("ӷ", 1, 2),
    FullCaseEntry("Ɥ", 0, 2),
    FullCaseEntry("ɥ", 1, 2),
    FullCaseEntry("Ͳ", 0, 2),
    FullCaseEntry("ͳ", 1, 2),
    FullCaseEntry("Ọ", 0, 2),
    FullCaseEntry("ọ", 1, 2),
    FullCaseEntry("Ǯ", 0, 2),
    FullCaseEntry("ǯ", 1, 2),
    FullCaseEntry("Ӹ", 0, 2),
    FullCaseEntry("ӹ", 1, 2),
    FullCaseEntry("Ỏ", 0, 2),
    FullCaseEntry("ỏ", 1, 2),
    FullCaseEntry("Ꞑ", 0, 2),
    FullCaseEntry("ꞑ", 1, 2),
    FullCaseEntry("ǰ", 0, 2),
    FullCaseEntry("ǰ", 1, 2),
    FullCaseEntry("Ӻ", 0, 2),
    FullCaseEntry("ӻ", 1, 2),
    FullCaseEntry("Ǳ", 0, 3),
    FullCaseEntry("ǳ", 1, 3),
    FullCaseEntry("ǲ", 2, 3),
    FullCaseEntry("Ͷ", 0, 2),
    FullCaseEntry("ͷ", 1, 2),
    FullCaseEntry("Ố", 0, 2),
    FullCaseEntry("ố", 1, 2),
    FullCaseEntry("Ꞓ", 0, 2),
    FullCaseEntry("ꞓ", 1, 2),
    FullCaseEntry("ǲ", 0, 3),
    FullCaseEntry("ǳ", 1, 3),
    FullCaseEntry("Ǳ", 2, 3),
    FullCaseEntry("Ӽ", 0, 2),
    FullCaseEntry("ӽ", 1, 2),
    FullCaseEntry("Ȿ", 0, 2),
    FullCaseEntry("ȿ", 1, 2),
    FullCaseEntry("Ồ", 0, 2),
    FullCaseEntry("ồ", 1, 2),
    FullCaseEntry("Ɀ", 0, 2),
    FullCaseEntry("ɀ", 1, 2),
    FullCaseEntry("Ǵ", 0, 2),
    FullCaseEntry("ǵ", 1, 2),
    FullCaseEntry("Ӿ", 0, 2),
    FullCaseEntry("ӿ", 1, 2),
    FullCaseEntry("Ⲁ", 0, 2),
    FullCaseEntry("ⲁ", 1, 2),
    FullCaseEntry("Ổ", 0, 2),
    FullCaseEntry("ổ", 1, 2),
    FullCaseEntry("Ƕ", 0, 2),
    FullCaseEntry("ƕ", 1, 2),
    FullCaseEntry("Ԁ", 0, 2),
    FullCaseEntry("ԁ", 1, 2),
    FullCaseEntry("Ⲃ", 0, 2),
    FullCaseEntry("ⲃ", 1, 2),
    FullCaseEntry("Ƿ", 0, 2),
    FullCaseEntry("ƿ", 1, 2),
    FullCaseEntry("Ỗ", 0, 2),
    FullCaseEntry("ỗ", 1, 2),
    FullCaseEntry("Ǹ", 0, 2),
    FullCaseEntry("ǹ", 1, 2),
    FullCaseEntry("Ԃ", 0, 2),
    FullCaseEntry("ԃ", 1, 2),
    FullCaseEntry("Ⲅ", 0, 2),
    FullCaseEntry("ⲅ", 1, 2),
    FullCaseEntry("Ộ", 0, 2),
    FullCaseEntry("ộ", 1, 2),
    FullCaseEntry("Ǻ", 0, 2),
    FullCaseEntry("ǻ", 1, 2),
    FullCaseEntry("Ԅ", 0, 2),
    FullCaseEntry("ԅ", 1, 2),
    FullCaseEntry("Ⲇ", 0, 2),
    FullCaseEntry("ⲇ", 1, 2),
    FullCaseEntry("Ớ", 0, 2),
    FullCaseEntry("ớ", 1, 2),
    FullCaseEntry("Ǽ", 0, 2),
    FullCaseEntry("ǽ", 1, 2),
    FullCaseEntry("Ԇ", 0, 2),
    FullCaseEntry("ԇ", 1, 2),
    FullCaseEntry("Ⲉ", 0, 2),
    FullCaseEntry("ⲉ", 1, 2),
    FullCaseEntry("Ờ", 0, 2),
    FullCaseEntry("ờ", 1, 2),
    FullCaseEntry("Ǿ", 0, 2),
    FullCaseEntry("ǿ", 1, 2),
    FullCaseEntry("Ԉ", 0, 2),
    FullCaseEntry("ԉ", 1, 2),
    FullCaseEntry("Ⲋ", 0, 2),
    FullCaseEntry("ⲋ", 1, 2),
    FullCaseEntry("Ở", 0, 2),
    FullCaseEntry("ở", 1, 2),
    FullCaseEntry("Ꞡ", 0, 2),
    FullCaseEntry("ꞡ", 1, 2),
    FullCaseEntry("Ȁ", 0, 2),
    FullCaseEntry("ȁ", 1, 2),
    FullCaseEntry("Ԋ", 0, 2),
    FullCaseEntry("ԋ", 1, 2),
    FullCaseEntry("Ⲍ", 0, 2),
    FullCaseEntry("ⲍ", 1, 2),
    FullCaseEntry("Ά", 0, 2),
    FullCaseEntry("ά", 1, 2),
    FullCaseEntry("Ỡ", 0, 2),
    FullCaseEntry("ỡ", 1, 2),
    FullCaseEntry("Ꞣ", 0, 2),
    FullCaseEntry("ꞣ", 1, 2),
    FullCaseEntry("Ȃ", 0, 2),
    FullCaseEntry("ȃ", 1, 2),
    FullCaseEntry("Ԍ", 0, 2),
    FullCaseEntry("ԍ", 1, 2),
    FullCaseEntry("Ⲏ", 0, 2),
    FullCaseEntry("ⲏ", 1, 2),
    FullCaseEntry("Έ", 0, 2),
    FullCaseEntry("έ", 1, 2),
    FullCaseEntry("Ợ", 0, 2),
    FullCaseEntry("ợ", 1, 2),
    FullCaseEntry("Ꞥ", 0, 2),
    FullCaseEntry("ꞥ", 1, 2),
    FullCaseEntry("Ȅ", 0, 2),
    FullCaseEntry("ȅ", 1, 2),
    FullCaseEntry("Ή", 0, 2),
    FullCaseEntry("ή", 1, 2),
    FullCaseEntry("Ԏ", 0, 2),
    FullCaseEntry("ԏ", 1, 2),
    FullCaseEntry("Ⲑ", 0, 2),
    FullCaseEntry("ⲑ", 1, 2),
    FullCaseEntry("Ί", 0, 2),
    FullCaseEntry("ί", 1, 2),
    FullCaseEntry("Ụ", 0, 2),
    FullCaseEntry("ụ", 1, 2),
    FullCaseEntry("Ꞧ", 0, 2),
    FullCaseEntry("ꞧ", 1, 2),
    FullCaseEntry("Ȇ", 0, 2),
    FullCaseEntry("ȇ", 1, 2),
    FullCaseEntry("Ԑ", 0, 2),
    FullCaseEntry("ԑ", 1, 2),
    FullCaseEntry("Ⲓ", 0, 2),
    FullCaseEntry("ⲓ", 1, 2),
    FullCaseEntry("Ό", 0, 2),
    FullCaseEntry("ό", 1, 2),
    FullCaseEntry("Ủ", 0, 2),
    FullCaseEntry("ủ", 1, 2),
    FullCaseEntry("Ꞩ", 0, 2),
    FullCaseEntry("ꞩ", 1, 2),
    FullCaseEntry("Ȉ", 0, 2),
    FullCaseEntry("ȉ", 1, 2),
    FullCaseEntry("Ԓ", 0, 2),
    FullCaseEntry("ԓ", 1, 2),
    FullCaseEntry("Ⲕ", 0, 2),
    FullCaseEntry("ⲕ", 1, 2),
    FullCaseEntry("Ύ", 0, 2),
    FullCaseEntry("ύ", 1, 2),
    FullCaseEntry("Ứ", 0, 2),
    FullCaseEntry("ứ", 1, 2),
    FullCaseEntry("Ɦ", 0, 2),
    FullCaseEntry("ɦ", 1, 2),
    FullCaseEntry("Ȋ", 0, 2),
    FullCaseEntry("ȋ", 1, 2),
    FullCaseEntry("Ώ", 0, 2),
    FullCaseEntry("ώ", 1, 2),
    FullCaseEntry("Ԕ", 0, 2),
    FullCaseEntry("ԕ", 1, 2),
    FullCaseEntry("Ⲗ", 0, 2),
    FullCaseEntry("ⲗ", 1, 2),
    FullCaseEntry("ΐ", 0, 3),
    FullCaseEntry("ΐ", 1, 3),
    FullCaseEntry("ΐ", 2, 3),
    FullCaseEntry("Ừ", 0, 2),
    FullCaseEntry("ừ", 1, 2),
    FullCaseEntry("Ȍ", 0, 2),
    FullCaseEntry("ȍ", 1, 2),
    FullCaseEntry("Α", 0, 2),
    FullCaseEntry("α", 1, 2),
    FullCaseEntry("Ԗ", 0, 2),
    FullCaseEntry("ԗ", 1, 2),
    FullCaseEntry("Ⲙ", 0, 2),
    FullCaseEntry("ⲙ", 1, 2),
    FullCaseEntry("Β", 0, 3),
    FullCaseEntry("β", 1, 3),
    FullCaseEntry("ϐ", 2, 3),
    FullCaseEntry("Ử", 0, 2),
    FullCaseEntry("ử", 1, 2),
    FullCaseEntry("Ȏ", 0, 2),
    FullCaseEntry("ȏ", 1, 2),
    FullCaseEntry("Γ", 0, 2),
    FullCaseEntry("γ", 1, 2),
    FullCaseEntry("Ԙ", 0, 2),
    FullCaseEntry("ԙ", 1, 2),
    FullCaseEntry("Ⲛ", 0, 2),
    FullCaseEntry("ⲛ", 1, 2),
    FullCaseEntry("Δ", 0, 2),
    FullCaseEntry("δ", 1, 2),
    FullCaseEntry("Ữ", 0, 2),
    FullCaseEntry("ữ", 1, 2),
    FullCaseEntry("Ȑ", 0, 2),
    FullCaseEntry("ȑ", 1, 2),
    FullCaseEntry("Ε", 0, 3),
    FullCaseEntry("ε", 1, 3),
    FullCaseEntry("ϵ", 2, 3),
    FullCaseEntry("Ԛ", 0, 2),
    FullCaseEntry("ԛ", 1, 2),
    FullCaseEntry("Ⲝ", 0, 2),
    FullCaseEntry("ⲝ", 1, 2),
    FullCaseEntry("Ζ", 0, 2),
    FullCaseEntry("ζ", 1, 2),
    FullCaseEntry("Ự", 0, 2),
    FullCaseEntry("ự", 1, 2),
    FullCaseEntry("Ȓ", 0, 2),
    FullCaseEntry("ȓ", 1, 2),
    FullCaseEntry("Η", 0, 2),
    FullCaseEntry("η", 1, 2),
    FullCaseEntry("Ԝ", 0, 2),
    FullCaseEntry("ԝ", 1, 2),
    FullCaseEntry("Ⲟ", 0, 2),
    FullCaseEntry("ⲟ", 1, 2),
    FullCaseEntry("Θ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("ϑ", 2, 4),
    FullCaseEntry("ϴ", 3, 4),
    FullCaseEntry("Ỳ", 0, 2),
    FullCaseEntry("ỳ", 1, 2),
    FullCaseEntry("Ȕ", 0, 2),
    FullCaseEntry("ȕ", 1, 2),
    FullCaseEntry("Ι", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("ͅ", 2, 4),
    FullCaseEntry("ι", 3, 4),
    FullCaseEntry("Ԟ", 0, 2),
    FullCaseEntry("ԟ", 1, 2),
    FullCaseEntry("Ⲡ", 0, 2),
    FullCaseEntry("ⲡ", 1, 2),
    FullCaseEntry("Κ", 0, 3),
    FullCaseEntry("κ", 1, 3),
    FullCaseEntry("ϰ", 2, 3),
    FullCaseEntry("Ỵ", 0, 2),
    FullCaseEntry("ỵ", 1, 2),
    FullCaseEntry("Ȗ", 0, 2),
    FullCaseEntry("ȗ", 1, 2),
    FullCaseEntry("Λ", 0, 2),
    FullCaseEntry("λ", 1, 2),
    FullCaseEntry("Ԡ", 0, 2),
    FullCaseEntry("ԡ", 1, 2),
    FullCaseEntry("Ⲣ", 0, 2),
    FullCaseEntry("ⲣ", 1, 2),
    FullCaseEntry("Μ", 0, 3),
    FullCaseEntry("μ", 1, 3),
    FullCaseEntry("µ", 2, 3),
    FullCaseEntry("Ỷ", 0, 2),
    FullCaseEntry("ỷ", 1, 2),
    FullCaseEntry("Ș", 0, 2),
    FullCaseEntry("ș", 1, 2),
    FullCaseEntry("Ν", 0, 2),
    FullCaseEntry("ν", 1, 2),
    FullCaseEntry("Ԣ", 0, 2),
    FullCaseEntry("ԣ", 1, 2),
    FullCaseEntry("Ⲥ", 0, 2),
    FullCaseEntry("ⲥ", 1, 2),
    FullCaseEntry("Ξ", 0, 2),
    FullCaseEntry("ξ", 1, 2),
    FullCaseEntry("Ỹ", 0, 2),
    FullCaseEntry("ỹ", 1, 2),
    FullCaseEntry("Ț", 0, 2),
    FullCaseEntry("ț", 1, 2),
    FullCaseEntry("Ο", 0, 2),
    FullCaseEntry("ο", 1, 2),
    FullCaseEntry("Ԥ", 0, 2),
    FullCaseEntry("ԥ", 1, 2),
    FullCaseEntry("Ⲧ", 0, 2),
    FullCaseEntry("ⲧ", 1, 2),
    FullCaseEntry("Π", 0, 3),
    FullCaseEntry("π", 1, 3),
    FullCaseEntry("ϖ", 2, 3),
    FullCaseEntry("Ỻ", 0, 2),
    FullCaseEntry("ỻ", 1, 2),
    FullCaseEntry("Ȝ", 0, 2),
    FullCaseEntry("ȝ", 1, 2),
    FullCaseEntry("Ρ", 0, 3),
    FullCaseEntry("ρ", 1, 3),
    FullCaseEntry("ϱ", 2, 3),
    FullCaseEntry("Ԧ", 0, 2),
    FullCaseEntry("ԧ", 1, 2),
    FullCaseEntry("Ⲩ", 0, 2),
    FullCaseEntry("ⲩ", 1, 2),
    FullCaseEntry("Ỽ", 0, 2),
    FullCaseEntry("ỽ", 1, 2),
    FullCaseEntry("Ȟ", 0, 2),
    FullCaseEntry("ȟ", 1, 2),
    FullCaseEntry("Σ", 0, 3),
    FullCaseEntry("σ", 1, 3),
    FullCaseEntry("ς", 2, 3),
    FullCaseEntry("Ⲫ", 0, 2),
    FullCaseEntry("ⲫ", 1, 2),
    FullCaseEntry("Τ", 0, 2),
    FullCaseEntry("τ", 1, 2),
    FullCaseEntry("Ỿ", 0, 2),
    FullCaseEntry("ỿ", 1, 2),
    FullCaseEntry("Ƞ", 0, 2),
    FullCaseEntry("ƞ", 1, 2),
    FullCaseEntry("Υ", 0, 2),
    FullCaseEntry("υ", 1, 2),
    FullCaseEntry("Ⲭ", 0, 2),
    FullCaseEntry("ⲭ", 1, 2),
    FullCaseEntry("Φ", 0, 3),
    FullCaseEntry("φ", 1, 3),
    FullCaseEntry("ϕ", 2, 3),
    FullCaseEntry("Ȣ", 0, 2),
    FullCaseEntry("ȣ", 1, 2),
    FullCaseEntry("Χ", 0, 2),
    FullCaseEntry("χ", 1, 2),
    FullCaseEntry("Ⲯ", 0, 2),
    FullCaseEntry("ⲯ", 1, 2),
    FullCaseEntry("Ψ", 0, 2),
    FullCaseEntry("ψ", 1, 2),
    FullCaseEntry("Ȥ", 0, 2),
    FullCaseEntry("ȥ", 1, 2),
    FullCaseEntry("Ω", 0, 3),
    FullCaseEntry("ω", 1, 3),
    FullCaseEntry("Ω", 2, 3),
    FullCaseEntry("Ⲱ", 0, 2),
    FullCaseEntry("ⲱ", 1, 2),
    FullCaseEntry("Ꙁ", 0, 2),
    FullCaseEntry("ꙁ", 1, 2),
    FullCaseEntry("Ϊ", 0, 2),
    FullCaseEntry("ϊ", 1, 2),
    FullCaseEntry("Ȧ", 0, 2),
    FullCaseEntry("ȧ", 1, 2),
    FullCaseEntry("Ϋ", 0, 2),
    FullCaseEntry("ϋ", 1, 2),
    FullCaseEntry("Ⲳ", 0, 2),
    FullCaseEntry("ⲳ", 1, 2),
    FullCaseEntry("Ꙃ", 0, 2),
    FullCaseEntry("ꙃ", 1, 2),
    FullCaseEntry("Ա", 0, 2),
    FullCaseEntry("ա", 1, 2),
    FullCaseEntry("Ȩ", 0, 2),
    FullCaseEntry("ȩ", 1, 2),
    FullCaseEntry("Բ", 0, 2),
    FullCaseEntry("բ", 1, 2),
    FullCaseEntry("Ⲵ", 0, 2),
    FullCaseEntry("ⲵ", 1, 2),
    FullCaseEntry("Ꙅ", 0, 2),
    FullCaseEntry("ꙅ", 1, 2),
    FullCaseEntry("Գ", 0, 2),
    FullCaseEntry("գ", 1, 2),
    FullCaseEntry("Ἀ", 0, 2),
    FullCaseEntry("ἀ", 1, 2),
    FullCaseEntry("Ȫ", 0, 2),
    FullCaseEntry("ȫ", 1, 2),
    FullCaseEntry("Դ", 0, 2),
    FullCaseEntry("դ", 1, 2),
    FullCaseEntry("Ἁ", 0, 2),
    FullCaseEntry("ἁ", 1, 2),
    FullCaseEntry("Ⲷ", 0, 2),
    FullCaseEntry("ⲷ", 1, 2),
    FullCaseEntry("Ꙇ", 0, 2),
    FullCaseEntry("ꙇ", 1, 2),
    FullCaseEntry("ΰ", 0, 3),
    FullCaseEntry("ΰ", 1, 3),
    FullCaseEntry("ΰ", 2, 3),
    FullCaseEntry("Ե", 0, 2),
    FullCaseEntry("ե", 1, 2),
    FullCaseEntry("Ἂ", 0, 2),
    FullCaseEntry("ἂ", 1, 2),
    FullCaseEntry("Ȭ", 0, 2),
    FullCaseEntry("ȭ", 1, 2),
    FullCaseEntry("Զ", 0, 2),
    FullCaseEntry("զ", 1, 2),
    FullCaseEntry("Ἃ", 0, 2),
    FullCaseEntry("ἃ", 1, 2),
    FullCaseEntry("Ⲹ", 0, 2),
    FullCaseEntry("ⲹ", 1, 2),
    FullCaseEntry("Ꙉ", 0, 2),
    FullCaseEntry("ꙉ", 1, 2),
    FullCaseEntry("Է", 0, 2),
    FullCaseEntry("է", 1, 2),
    FullCaseEntry("Ἄ", 0, 2),
    FullCaseEntry("ἄ", 1, 2),
    FullCaseEntry("Ȯ", 0, 2),
    FullCaseEntry("ȯ", 1, 2),
    FullCaseEntry("Ը", 0, 2),
    FullCaseEntry("ը", 1, 2),
    FullCaseEntry("Ἅ", 0, 2),
    FullCaseEntry("ἅ", 1, 2),
    FullCaseEntry("Ⲻ", 0, 2),
    FullCaseEntry("ⲻ", 1, 2),
    FullCaseEntry("Ꙋ", 0, 2),
    FullCaseEntry("ꙋ", 1, 2),
    FullCaseEntry("Թ", 0, 2),
    FullCaseEntry("թ", 1, 2),
    FullCaseEntry("Ἆ", 0, 2),
    FullCaseEntry("ἆ", 1, 2),
    FullCaseEntry("Ȱ", 0, 2),
    FullCaseEntry("ȱ", 1, 2),
    FullCaseEntry("Ժ", 0, 2),
    FullCaseEntry("ժ", 1, 2),
    FullCaseEntry("Ἇ", 0, 2),
    FullCaseEntry("ἇ", 1, 2),
    FullCaseEntry("Ⲽ", 0, 2),
    FullCaseEntry("ⲽ", 1, 2),
    FullCaseEntry("Ꙍ", 0, 2),
    FullCaseEntry("ꙍ", 1, 2),
    FullCaseEntry("Ի", 0, 2),
    FullCaseEntry("ի", 1, 2),
    FullCaseEntry("Ȳ", 0, 2),
    FullCaseEntry("ȳ", 1, 2),
    FullCaseEntry("Լ", 0, 2),
    FullCaseEntry("լ", 1, 2),
    FullCaseEntry("Ⲿ", 0, 2),
    FullCaseEntry("ⲿ", 1, 2),
    FullCaseEntry("Ꙏ", 0, 2),
    FullCaseEntry("ꙏ", 1, 2),
    FullCaseEntry("Խ", 0, 2),
    FullCaseEntry("խ", 1, 2),
    FullCaseEntry("Ծ", 0, 2),
    FullCaseEntry("ծ", 1, 2),
    FullCaseEntry("Ⳁ", 0, 2),
    FullCaseEntry("ⳁ", 1, 2),
    FullCaseEntry("Ꙑ", 0, 2),
    FullCaseEntry("ꙑ", 1, 2),
    FullCaseEntry("Կ", 0, 2),
    FullCaseEntry("կ", 1, 2),
    FullCaseEntry("Հ", 0, 2),
    FullCaseEntry("հ", 1, 2),
    FullCaseEntry("Ⳃ", 0, 2),
    FullCaseEntry("ⳃ", 1, 2),
    FullCaseEntry("Ꙓ", 0, 2),
    FullCaseEntry("ꙓ", 1, 2),
    FullCaseEntry("Ձ", 0, 2),
    FullCaseEntry("ձ", 1, 2),
    FullCaseEntry("Ղ", 0, 2),
    FullCaseEntry("ղ", 1, 2),
    FullCaseEntry("Ⳅ", 0, 2),
    FullCaseEntry("ⳅ", 1, 2),
    FullCaseEntry("Ꙕ", 0, 2),
    FullCaseEntry("ꙕ", 1, 2),
    FullCaseEntry("Ճ", 0, 2),
    FullCaseEntry("ճ", 1, 2),
    FullCaseEntry("Ἐ", 0, 2),
    FullCaseEntry("ἐ", 1, 2),
    FullCaseEntry("µ", 0, 3),
    FullCaseEntry("μ", 1, 3),
    FullCaseEntry("Μ", 2, 3),
    FullCaseEntry("Ⱥ", 0, 2),
    FullCaseEntry("ⱥ", 1, 2),
    FullCaseEntry("Մ", 0, 2),
    FullCaseEntry("մ", 1, 2),
    FullCaseEntry("Ἑ", 0, 2),
    FullCaseEntry("ἑ", 1, 2),
    FullCaseEntry("Ⳇ", 0, 2),
    FullCaseEntry("ⳇ", 1, 2),
    FullCaseEntry("Ꙗ", 0, 2),
    FullCaseEntry("ꙗ", 1, 2),
    FullCaseEntry("Ȼ", 0, 2),
    FullCaseEntry("ȼ", 1, 2),
    FullCaseEntry("Յ", 0, 2),
    FullCaseEntry("յ", 1, 2),
    FullCaseEntry("Ἒ", 0, 2),
    FullCaseEntry("ἒ", 1, 2),
    FullCaseEntry("Ն", 0, 2),
    FullCaseEntry("ն", 1, 2),
    FullCaseEntry("Ἓ", 0, 2),
    FullCaseEntry("ἓ", 1, 2),
    FullCaseEntry("Ⳉ", 0, 2),
    FullCaseEntry("ⳉ", 1, 2),
    FullCaseEntry("Ꙙ", 0, 2),
    FullCaseEntry("ꙙ", 1, 2),
    FullCaseEntry("Ƚ", 0, 2),
    FullCaseEntry("ƚ", 1, 2),
    FullCaseEntry("ς", 0, 3),
    FullCaseEntry("σ", 1, 3),
    FullCaseEntry("Σ", 2, 3),
    FullCaseEntry("Շ", 0, 2),
    FullCaseEntry("շ", 1, 2),
    FullCaseEntry("Ἔ", 0, 2),
    FullCaseEntry("ἔ", 1, 2),
    FullCaseEntry("Ⱦ", 0, 2),
    FullCaseEntry("ⱦ", 1, 2),
    FullCaseEntry("Ո", 0, 2),
    FullCaseEntry("ո", 1, 2),
    FullCaseEntry("Ἕ", 0, 2),
    FullCaseEntry("ἕ", 1, 2),
    FullCaseEntry("Ⳋ", 0, 2),
    FullCaseEntry("ⳋ", 1, 2),
    FullCaseEntry("Ꙛ", 0, 2),
    FullCaseEntry("ꙛ", 1, 2),
    FullCaseEntry("Չ", 0, 2),
    FullCaseEntry("չ", 1, 2),
    FullCaseEntry("Պ", 0, 2),
    FullCaseEntry("պ", 1, 2),
    FullCaseEntry("Ⳍ", 0, 2),
    FullCaseEntry("ⳍ", 1, 2),
    FullCaseEntry("Ꙝ", 0, 2),
    FullCaseEntry("ꙝ", 1, 2),
    FullCaseEntry("Ɂ", 0, 2),
    FullCaseEntry("ɂ", 1, 2),
    FullCaseEntry("Ջ", 0, 2),
    FullCaseEntry("ջ", 1, 2),
    FullCaseEntry("Ռ", 0, 2),
    FullCaseEntry("ռ", 1, 2),
    FullCaseEntry("Ⳏ", 0, 2),
    FullCaseEntry("ⳏ", 1, 2),
    FullCaseEntry("Ꙟ", 0, 2),
    FullCaseEntry("ꙟ", 1, 2),
    FullCaseEntry("Ƀ", 0, 2),
    FullCaseEntry("ƀ", 1, 2),
    FullCaseEntry("Ս", 0, 2),
    FullCaseEntry("ս", 1, 2),
    FullCaseEntry("Ʉ", 0, 2),
    FullCaseEntry("ʉ", 1, 2),
    FullCaseEntry("Վ", 0, 2),
    FullCaseEntry("վ", 1, 2),
    FullCaseEntry("Ⳑ", 0, 2),
    FullCaseEntry("ⳑ", 1, 2),
    FullCaseEntry("Ꙡ", 0, 2),
    FullCaseEntry("ꙡ", 1, 2),
    FullCaseEntry("À", 0, 2),
    FullCaseEntry("à", 1, 2),
    FullCaseEntry("Ʌ", 0, 2),
    FullCaseEntry("ʌ", 1, 2),
    FullCaseEntry("Տ", 0, 2),
    FullCaseEntry("տ", 1, 2),
    FullCaseEntry("Á", 0, 2),
    FullCaseEntry("á", 1, 2),
    FullCaseEntry("Ɇ", 0, 2),
    FullCaseEntry("ɇ", 1, 2),
    FullCaseEntry("Ր", 0, 2),
    FullCaseEntry("ր", 1, 2),
    FullCaseEntry("Ⳓ", 0, 2),
    FullCaseEntry("ⳓ", 1, 2),
    FullCaseEntry("Ꙣ", 0, 2),
    FullCaseEntry("ꙣ", 1, 2),
    FullCaseEntry("Â", 0, 2),
    FullCaseEntry("â", 1, 2),
    FullCaseEntry("Ց", 0, 2),
    FullCaseEntry("ց", 1, 2),
    FullCaseEntry("Ã", 0, 2),
    FullCaseEntry("ã", 1, 2),
    FullCaseEntry("Ɉ", 0, 2),
    FullCaseEntry("ɉ", 1, 2),
    FullCaseEntry("Ւ", 0, 2),
    FullCaseEntry("ւ", 1, 2),
    FullCaseEntry("Ⳕ", 0, 2),
    FullCaseEntry("ⳕ", 1, 2),
    FullCaseEntry("Ꙥ", 0, 2),
    FullCaseEntry("ꙥ", 1, 2),
    FullCaseEntry("Ä", 0, 2),
    FullCaseEntry("ä", 1, 2),
    FullCaseEntry("Փ", 0, 2),
    FullCaseEntry("փ", 1, 2),
    FullCaseEntry("Ἠ", 0, 2),
    FullCaseEntry("ἠ", 1, 2),
    FullCaseEntry("Å", 0, 3),
    FullCaseEntry("å", 1, 3),
    FullCaseEntry("Å", 2, 3),
    FullCaseEntry("Ɋ", 0, 2),
    FullCaseEntry("ɋ", 1, 2),
    FullCaseEntry("Ϗ", 0, 2),
    FullCaseEntry("ϗ", 1, 2),
    FullCaseEntry("Ք", 0, 2),
    FullCaseEntry("ք", 1, 2),
    FullCaseEntry("Ἡ", 0, 2),
    FullCaseEntry("ἡ", 1, 2),
    FullCaseEntry("Ⳗ", 0, 2),
    FullCaseEntry("ⳗ", 1, 2),
    FullCaseEntry("Ꙧ", 0, 2),
    FullCaseEntry("ꙧ", 1, 2),
    FullCaseEntry("Æ", 0, 2),
    FullCaseEntry("æ", 1, 2),
    FullCaseEntry("ϐ", 0, 3),
    FullCaseEntry("β", 1, 3),
    FullCaseEntry("Β", 2, 3),
    FullCaseEntry("Օ", 0, 2),
    FullCaseEntry("օ", 1, 2),
    FullCaseEntry("Ἢ", 0, 2),
    FullCaseEntry("ἢ", 1, 2),
    FullCaseEntry("Ç", 0, 2),
    FullCaseEntry("ç", 1, 2),
    FullCaseEntry("Ɍ", 0, 2),
    FullCaseEntry("ɍ", 1, 2),
    FullCaseEntry("ϑ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("Θ", 2, 4),
    FullCaseEntry("ϴ", 3, 4),
    FullCaseEntry("Ֆ", 0, 2),
    FullCaseEntry("ֆ", 1, 2),
    FullCaseEntry("Ἣ", 0, 2),
    FullCaseEntry("ἣ", 1, 2),
    FullCaseEntry("Ⳙ", 0, 2),
    FullCaseEntry("ⳙ", 1, 2),
    FullCaseEntry("Ꙩ", 0, 2),
    FullCaseEntry("ꙩ", 1, 2),
    FullCaseEntry("È", 0, 2),
    FullCaseEntry("è", 1, 2),
    FullCaseEntry("Ἤ", 0, 2),
    FullCaseEntry("ἤ", 1, 2),
    FullCaseEntry("É", 0, 2),
    FullCaseEntry("é", 1, 2),
    FullCaseEntry("Ɏ", 0, 2),
    FullCaseEntry("ɏ", 1, 2),
    FullCaseEntry("Ἥ", 0, 2),
    FullCaseEntry("ἥ", 1, 2),
    FullCaseEntry("Ⳛ", 0, 2),
    FullCaseEntry("ⳛ", 1, 2),
    FullCaseEntry("Ꙫ", 0, 2),
    FullCaseEntry("ꙫ", 1, 2),
    FullCaseEntry("Ê", 0, 2),
    FullCaseEntry("ê", 1, 2),
    FullCaseEntry("Ἦ", 0, 2),
    FullCaseEntry("ἦ", 1, 2),
    FullCaseEntry("Ë", 0, 2),
    FullCaseEntry("ë", 1, 2),
    FullCaseEntry("ϕ", 0, 3),
    FullCaseEntry("φ", 1, 3),
    FullCaseEntry("Φ", 2, 3),
    FullCaseEntry("Ἧ", 0, 2),
    FullCaseEntry("ἧ", 1, 2),
    FullCaseEntry("Ⳝ", 0, 2),
    FullCaseEntry("ⳝ", 1, 2),
    FullCaseEntry("Ꙭ", 0, 2),
    FullCaseEntry("ꙭ", 1, 2),
    FullCaseEntry("Ì", 0, 2),
    FullCaseEntry("ì", 1, 2),
    FullCaseEntry("ϖ", 0, 3),
    FullCaseEntry("π", 1, 3),
    FullCaseEntry("Π", 2, 3),
    FullCaseEntry("Í", 0, 2),
    FullCaseEntry("í", 1, 2),
    FullCaseEntry("Ⳟ", 0, 2),
    FullCaseEntry("ⳟ", 1, 2),
    FullCaseEntry("Î", 0, 2),
    FullCaseEntry("î", 1, 2),
    FullCaseEntry("Ϙ", 0, 2),
    FullCaseEntry("ϙ", 1, 2),
    FullCaseEntry("Ï", 0, 2),
    FullCaseEntry("ï", 1, 2),
    FullCaseEntry("Ⳡ", 0, 2),
    FullCaseEntry("ⳡ", 1, 2),
    FullCaseEntry("Ð", 0, 2),
    FullCaseEntry("ð", 1, 2),
    FullCaseEntry("Ϛ", 0, 2),
    FullCaseEntry("ϛ", 1, 2),
    FullCaseEntry("Ñ", 0, 2),
    FullCaseEntry("ñ", 1, 2),
    FullCaseEntry("Ⳣ", 0, 2),
    FullCaseEntry("ⳣ", 1, 2),
    FullCaseEntry("Ò", 0, 2),
    FullCaseEntry("ò", 1, 2),
    FullCaseEntry("Ϝ", 0, 2),
    FullCaseEntry("ϝ", 1, 2),
    FullCaseEntry("Ó", 0, 2),
    FullCaseEntry("ó", 1, 2),
    FullCaseEntry("Ô", 0, 2),
    FullCaseEntry("ô", 1, 2),
    FullCaseEntry("Ϟ", 0, 2),
    FullCaseEntry("ϟ", 1, 2),
    FullCaseEntry("Ἰ", 0, 2),
    FullCaseEntry("ἰ", 1, 2),
    FullCaseEntry("Õ", 0, 2),
    FullCaseEntry("õ", 1, 2),
    FullCaseEntry("Ἱ", 0, 2),
    FullCaseEntry("ἱ", 1, 2),
    FullCaseEntry("Ö", 0, 2),
    FullCaseEntry("ö", 1, 2),
    FullCaseEntry("Ϡ", 0, 2),
    FullCaseEntry("ϡ", 1, 2),
    FullCaseEntry("Ἲ", 0, 2),
    FullCaseEntry("ἲ", 1, 2),
    FullCaseEntry("Ἳ", 0, 2),
    FullCaseEntry("ἳ", 1, 2),
    FullCaseEntry("Ø", 0, 2),
    FullCaseEntry("ø", 1, 2),
    FullCaseEntry("Ϣ", 0, 2),
    FullCaseEntry("ϣ", 1, 2),
    FullCaseEntry("Ἴ", 0, 2),
    FullCaseEntry("ἴ", 1, 2),
    FullCaseEntry("Ù", 0, 2),
    FullCaseEntry("ù", 1, 2),
    FullCaseEntry("Ἵ", 0, 2),
    FullCaseEntry("ἵ", 1, 2),
    FullCaseEntry("Ú", 0, 2),
    FullCaseEntry("ú", 1, 2),
    FullCaseEntry("Ϥ", 0, 2),
    FullCaseEntry("ϥ", 1, 2),
    FullCaseEntry("Ἶ", 0, 2),
    FullCaseEntry("ἶ", 1, 2),
    FullCaseEntry("Ⳬ", 0, 2),
    FullCaseEntry("ⳬ", 1, 2),
    FullCaseEntry("Û", 0, 2),
    FullCaseEntry("û", 1, 2),
    FullCaseEntry("Ἷ", 0, 2),
    FullCaseEntry("ἷ", 1, 2),
    FullCaseEntry("Ü", 0, 2),
    FullCaseEntry("ü", 1, 2),
    FullCaseEntry("Ϧ", 0, 2),
    FullCaseEntry("ϧ", 1, 2),
    FullCaseEntry("Ⳮ", 0, 2),
    FullCaseEntry("ⳮ", 1, 2),
    FullCaseEntry("Ý", 0, 2),
    FullCaseEntry("ý", 1, 2),
    FullCaseEntry("Þ", 0, 2),
    FullCaseEntry("þ", 1, 2),
    FullCaseEntry("Ϩ", 0, 2),
    FullCaseEntry("ϩ", 1, 2),
    FullCaseEntry("ß", 0, 3),
    FullCaseEntry("ss", 1, 3),
    FullCaseEntry("ẞ", 2, 3),
    FullCaseEntry("Ꚁ", 0, 2),
    FullCaseEntry("ꚁ", 1, 2),
    FullCaseEntry("Ϫ", 0, 2),
    FullCaseEntry("ϫ", 1, 2),
    FullCaseEntry("Ⳳ", 0, 2),
    FullCaseEntry("ⳳ", 1, 2),
    FullCaseEntry("Ꚃ", 0, 2),
    FullCaseEntry("ꚃ", 1, 2),
    FullCaseEntry("Ϭ", 0, 2),
    FullCaseEntry("ϭ", 1, 2),
    FullCaseEntry("Ꚅ", 0, 2),
    FullCaseEntry("ꚅ", 1, 2),
    FullCaseEntry("Ϯ", 0, 2),
    FullCaseEntry("ϯ", 1, 2),
    FullCaseEntry("Ὀ", 0, 2),
    FullCaseEntry("ὀ", 1, 2),
    FullCaseEntry("Ὁ", 0, 2),
    FullCaseEntry("ὁ", 1, 2),
    FullCaseEntry("Ꚇ", 0, 2),
    FullCaseEntry("ꚇ", 1, 2),
    FullCaseEntry("ϰ", 0, 3),
    FullCaseEntry("κ", 1, 3),
    FullCaseEntry("Κ", 2, 3),
    FullCaseEntry("Ὂ", 0, 2),
    FullCaseEntry("ὂ", 1, 2),
    FullCaseEntry("ϱ", 0, 3),
    FullCaseEntry("ρ", 1, 3),
    FullCaseEntry("Ρ", 2, 3),
    FullCaseEntry("Ὃ", 0, 2),
    FullCaseEntry("ὃ", 1, 2),
    FullCaseEntry("Ꚉ", 0, 2),
    FullCaseEntry("ꚉ", 1, 2),
    FullCaseEntry("Ὄ", 0, 2),
    FullCaseEntry("ὄ", 1, 2),
    FullCaseEntry("Ὅ", 0, 2),
    FullCaseEntry("ὅ", 1, 2),
    FullCaseEntry("Ꚋ", 0, 2),
    FullCaseEntry("ꚋ", 1, 2),
    FullCaseEntry("ϴ", 0, 4),
    FullCaseEntry("θ", 1, 4),
    FullCaseEntry("Θ", 2, 4),
    FullCaseEntry("ϑ", 3, 4),
    FullCaseEntry("ϵ", 0, 3),
    FullCaseEntry("ε", 1, 3),
    FullCaseEntry("Ε", 2, 3),
    FullCaseEntry("Ꚍ", 0, 2),
    FullCaseEntry("ꚍ", 1, 2),
    FullCaseEntry("ὐ", 0, 2),
    FullCaseEntry("ὐ", 1, 2),
    FullCaseEntry("Ϸ", 0, 2),
    FullCaseEntry("ϸ", 1, 2),
    FullCaseEntry("Ꚏ", 0, 2),
    FullCaseEntry("ꚏ", 1, 2),
    FullCaseEntry("ὒ", 0, 2),
    FullCaseEntry("ὒ", 1, 2),
    FullCaseEntry("Ϲ", 0, 2),
    FullCaseEntry("ϲ", 1, 2),
    FullCaseEntry("Ꚑ", 0, 2),
    FullCaseEntry("ꚑ", 1, 2),
    FullCaseEntry("Ϻ", 0, 2),
    FullCaseEntry("ϻ", 1, 2),
    FullCaseEntry("ὔ", 0, 2),
    FullCaseEntry("ὔ", 1, 2),
    FullCaseEntry("Ꚓ", 0, 2),
    FullCaseEntry("ꚓ", 1, 2),
    FullCaseEntry("ὖ", 0, 2),
    FullCaseEntry("ὖ", 1, 2),
    FullCaseEntry("Ͻ", 0, 2),
    FullCaseEntry("ͻ", 1, 2),
    FullCaseEntry("Ꚕ", 0, 2),
    FullCaseEntry("ꚕ", 1, 2),
    FullCaseEntry("Ͼ", 0, 2),
    FullCaseEntry("ͼ", 1, 2),
    FullCaseEntry("Ͽ", 0, 2),
    FullCaseEntry("ͽ", 1, 2),
    FullCaseEntry("Ὑ", 0, 2),
    FullCaseEntry("ὑ", 1, 2),
    FullCaseEntry("Ꚗ", 0, 2),
    FullCaseEntry("ꚗ", 1, 2),
    FullCaseEntry("Ѐ", 0, 2),
    FullCaseEntry("ѐ", 1, 2),
    FullCaseEntry("Ё", 0, 2),
    FullCaseEntry("ё", 1, 2),
    FullCaseEntry("Ὓ", 0, 2),
    FullCaseEntry("ὓ", 1, 2),
    FullCaseEntry("Ђ", 0, 2),
    FullCaseEntry("ђ", 1, 2),
    FullCaseEntry("և", 0, 2),
    FullCaseEntry("եւ", 1, 2),
    FullCaseEntry("Ѓ", 0, 2),
    FullCaseEntry("ѓ", 1, 2),
    FullCaseEntry("Ὕ", 0, 2),
    FullCaseEntry("ὕ", 1, 2),
    FullCaseEntry("Є", 0, 2),
    FullCaseEntry("є", 1, 2),
    FullCaseEntry("Ѕ", 0, 2),
    FullCaseEntry("ѕ", 1, 2),
    FullCaseEntry("Ὗ", 0, 2),
    FullCaseEntry("ὗ", 1, 2),
    FullCaseEntry("І", 0, 2),
    FullCaseEntry("і", 1, 2),
    FullCaseEntry("Ї", 0, 2),
    FullCaseEntry("ї", 1, 2),
    FullCaseEntry("Ј", 0, 2),
    FullCaseEntry("ј", 1, 2),
    FullCaseEntry("Љ", 0, 2),
    FullCaseEntry("љ", 1, 2),
    FullCaseEntry("Ā", 0, 2),
    FullCaseEntry("ā", 1, 2),
    FullCaseEntry("Њ", 0, 2),
    FullCaseEntry("њ", 1, 2),
    FullCaseEntry("Ћ", 0, 2),
    FullCaseEntry("ћ", 1, 2),
    FullCaseEntry("Ă", 0, 2),
    FullCaseEntry("ă", 1, 2),
    FullCaseEntry("Ќ", 0, 2),
    FullCaseEntry("ќ", 1, 2),
    FullCaseEntry("Ѝ", 0, 2),
    FullCaseEntry("ѝ", 1, 2),
    FullCaseEntry("Ą", 0, 2),
    FullCaseEntry("ą", 1, 2),
    FullCaseEntry("Ў", 0, 2),
    FullCaseEntry("ў", 1, 2),
    FullCaseEntry("Ὠ", 0, 2),
    FullCaseEntry("ὠ", 1, 2),
    FullCaseEntry("Џ", 0, 2),
    FullCaseEntry("џ", 1, 2),
    FullCaseEntry("Ὡ", 0, 2),
    FullCaseEntry("ὡ", 1, 2),
    FullCaseEntry("Ć", 0, 2),
    FullCaseEntry("ć", 1, 2),
    FullCaseEntry("А", 0, 2),
    FullCaseEntry("а", 1, 2),
    FullCaseEntry("Ὢ", 0, 2),
    FullCaseEntry("ὢ", 1, 2),
    FullCaseEntry("Б", 0, 2),
    FullCaseEntry("б", 1, 2),
    FullCaseEntry("Ὣ", 0, 2),
    FullCaseEntry("ὣ", 1, 2),
    FullCaseEntry("Ĉ", 0, 2),
    FullCaseEntry("ĉ", 1, 2),
    FullCaseEntry("В", 0, 2),
    FullCaseEntry("в", 1, 2),
    FullCaseEntry("Ὤ", 0, 2),
    FullCaseEntry("ὤ", 1, 2),
    FullCaseEntry("Г", 0, 2),
    FullCaseEntry("г", 1, 2),
    FullCaseEntry("Ὥ", 0, 2),
    FullCaseEntry("ὥ", 1, 2),
    FullCaseEntry("Ċ", 0, 2),
    FullCaseEntry("ċ", 1, 2),
    FullCaseEntry("Д", 0, 2),
    FullCaseEntry("д", 1, 2),
    FullCaseEntry("Ὦ", 0, 2),
    FullCaseEntry("ὦ", 1, 2),
    FullCaseEntry("Е", 0, 2),
    FullCaseEntry("е", 1, 2),
    FullCaseEntry("Ὧ", 0, 2),
    FullCaseEntry("ὧ", 1, 2),
    FullCaseEntry("Č", 0, 2),
    FullCaseEntry("č", 1, 2),
    FullCaseEntry("Ж", 0, 2),
    FullCaseEntry("ж", 1, 2),
    FullCaseEntry("З", 0, 2),
    FullCaseEntry("з", 1, 2),
    FullCaseEntry("Ď", 0, 2),
    FullCaseEntry("ď", 1, 2),
    FullCaseEntry("И", 0, 2),
    FullCaseEntry("и", 1, 2),
    FullCaseEntry("Й", 0, 2),
    FullCaseEntry("й", 1, 2),
    FullCaseEntry("Đ", 0, 2),
    FullCaseEntry("đ", 1, 2),
    FullCaseEntry("К", 0, 2),
    FullCaseEntry("к", 1, 2),
    FullCaseEntry("Л", 0, 2),
    FullCaseEntry("л", 1, 2),
    FullCaseEntry("Ē", 0, 2),
    FullCaseEntry("ē", 1, 2),
    FullCaseEntry("М", 0, 2),
    FullCaseEntry("м", 1, 2),
    FullCaseEntry("Н", 0, 2),
    FullCaseEntry("н", 1, 2),
    FullCaseEntry("Ĕ", 0, 2),
    FullCaseEntry("ĕ", 1, 2),
    FullCaseEntry("О", 0, 2),
    FullCaseEntry("о", 1, 2),
    FullCaseEntry("П", 0, 2),
    FullCaseEntry("п", 1, 2),
    FullCaseEntry("Ė", 0, 2),
    FullCaseEntry("ė", 1, 2),
    FullCaseEntry("Р", 0, 2),
    FullCaseEntry("р", 1, 2),
    FullCaseEntry("С", 0, 2),
    FullCaseEntry("с", 1, 2),
    FullCaseEntry("Ę", 0, 2),
    FullCaseEntry("ę", 1, 2),
    FullCaseEntry("Т", 0, 2),
    FullCaseEntry("т", 1, 2),
    FullCaseEntry("У", 0, 2),
    FullCaseEntry("у", 1, 2),
    FullCaseEntry("Ě", 0, 2),
    FullCaseEntry("ě", 1, 2),
    FullCaseEntry("Ф", 0, 2),
    FullCaseEntry("ф", 1, 2),
    FullCaseEntry("Х", 0, 2),
    FullCaseEntry("х", 1, 2),
    FullCaseEntry("Ĝ", 0, 2),
    FullCaseEntry("ĝ", 1, 2),
    FullCaseEntry("Ц", 0, 2),
    FullCaseEntry("ц", 1, 2),
    FullCaseEntry("ᾀ", 0, 3),
    FullCaseEntry("ἀι", 1, 3),
    FullCaseEntry("ᾈ", 2, 3),
    FullCaseEntry("Ч", 0, 2),
    FullCaseEntry("ч", 1, 2),
    FullCaseEntry("ᾁ", 0, 3),
    FullCaseEntry("ἁι", 1, 3),
    FullCaseEntry("ᾉ", 2, 3),
    FullCaseEntry("Ğ", 0, 2),
    FullCaseEntry("ğ", 1, 2),
    FullCaseEntry("Ш", 0, 2),
    FullCaseEntry("ш", 1, 2),
    FullCaseEntry("ᾂ", 0, 3),
    FullCaseEntry("ἂι", 1, 3),
    FullCaseEntry("ᾊ", 2, 3),
    FullCaseEntry("Щ", 0, 2),
    FullCaseEntry("щ", 1, 2),
    FullCaseEntry("ᾃ", 0, 3),
    FullCaseEntry("ἃι", 1, 3),
    FullCaseEntry("ᾋ", 2, 3),
    FullCaseEntry("Ġ", 0, 2),
    FullCaseEntry("ġ", 1, 2),
    FullCaseEntry("Ъ", 0, 2),
    FullCaseEntry("ъ", 1, 2),
    FullCaseEntry("ᾄ", 0, 3),
    FullCaseEntry("ἄι", 1, 3),
    FullCaseEntry("ᾌ", 2, 3),
    FullCaseEntry("Ы", 0, 2),
    FullCaseEntry("ы", 1, 2),
    FullCaseEntry("Ḁ", 0, 2),
    FullCaseEntry("ḁ", 1, 2),
    FullCaseEntry("ᾅ", 0, 3),
    FullCaseEntry("ἅι", 1, 3),
    FullCaseEntry("ᾍ", 2, 3),
    FullCaseEntry("Ģ", 0, 2),
    FullCaseEntry("ģ", 1, 2),
    FullCaseEntry("Ь", 0, 2),
    FullCaseEntry("ь", 1, 2),
    FullCaseEntry("ᾆ", 0, 3),
    FullCaseEntry("ἆι", 1, 3),
    FullCaseEntry("ᾎ", 2, 3),
    FullCaseEntry("Э", 0, 2),
    FullCaseEntry("э", 1, 2),
    FullCaseEntry("Ḃ", 0, 2),
    FullCaseEntry("ḃ", 1, 2),
    FullCaseEntry("ᾇ", 0, 3),
    FullCaseEntry("ἇι", 1, 3),
    FullCaseEntry("ᾏ", 2, 3),
    FullCaseEntry("Ĥ", 0, 2),
    FullCaseEntry("ĥ", 1, 2),
    FullCaseEntry("Ю", 0, 2),
    FullCaseEntry("ю", 1, 2),
    FullCaseEntry("ᾈ", 0, 3),
    FullCaseEntry("ἀι", 1, 3),
    FullCaseEntry("ᾀ", 2, 3),
    FullCaseEntry("Я", 0, 2),
    FullCaseEntry("я", 1, 2),
    FullCaseEntry("Ḅ", 0, 2),
    FullCaseEntry("ḅ", 1, 2),
    FullCaseEntry("ᾉ", 0, 3),
    FullCaseEntry("ἁι", 1, 3),
    FullCaseEntry("ᾁ", 2, 3),
    FullCaseEntry("Ħ", 0, 2),
    FullCaseEntry("ħ", 1, 2),
    FullCaseEntry("ᾊ", 0, 3),
    FullCaseEntry("ἂι", 1, 3),
    FullCaseEntry("ᾂ", 2, 3),
    FullCaseEntry("Ḇ", 0, 2),
    FullCaseEntry("ḇ", 1, 2),
    FullCaseEntry("ᾋ", 0, 3),
    FullCaseEntry("ἃι", 1, 3),
    FullCaseEntry("ᾃ", 2, 3),
    FullCaseEntry("Ĩ", 0, 2),
    FullCaseEntry("ĩ", 1, 2),
    FullCaseEntry("ᾌ", 0, 3),
    FullCaseEntry("ἄι", 1, 3),
    FullCaseEntry("ᾄ", 2, 3),
    FullCaseEntry("Ḉ", 0, 2),
    FullCaseEntry("ḉ", 1, 2),
    FullCaseEntry("ᾍ", 0, 3),
    FullCaseEntry("ἅι", 1, 3),
    FullCaseEntry("ᾅ", 2, 3),
    FullCaseEntry("Ī", 0, 2),
    FullCaseEntry("ī", 1, 2),
    FullCaseEntry("ᾎ", 0, 3),
    FullCaseEntry("ἆι", 1, 3),
    FullCaseEntry("ᾆ", 2, 3),
    FullCaseEntry("Ḋ", 0, 2),
    FullCaseEntry("ḋ", 1, 2),
    FullCaseEntry("ᾏ", 0, 3),
    FullCaseEntry("ἇι", 1, 3),
    FullCaseEntry("ᾇ", 2, 3),
    FullCaseEntry("Ĭ", 0, 2),
    FullCaseEntry("ĭ", 1, 2),
    FullCaseEntry("ᾐ", 0, 3),
    FullCaseEntry("ἠι", 1, 3),
    FullCaseEntry("ᾘ", 2, 3),
    FullCaseEntry("Ḍ", 0, 2),
    FullCaseEntry("ḍ", 1, 2),
    FullCaseEntry("ᾑ", 0, 3),
    FullCaseEntry("ἡι", 1, 3),
    FullCaseEntry("ᾙ", 2, 3),
    FullCaseEntry("Į", 0, 2),
    FullCaseEntry("į", 1, 2),
    FullCaseEntry("ᾒ", 0, 3),
    FullCaseEntry("ἢι", 1, 3),
    FullCaseEntry("ᾚ", 2, 3),
    FullCaseEntry("Ḏ", 0, 2),
    FullCaseEntry("ḏ", 1, 2),
    FullCaseEntry("ᾓ", 0, 3),
    FullCaseEntry("ἣι", 1, 3),
    FullCaseEntry("ᾛ", 2, 3),
    FullCaseEntry("İ", 0, 2),
    FullCaseEntry("i̇", 1, 2),
    FullCaseEntry("ᾔ", 0, 3),
    FullCaseEntry("ἤι", 1, 3),
    FullCaseEntry("ᾜ", 2, 3),
    FullCaseEntry("Ḑ", 0, 2),
    FullCaseEntry("ḑ", 1, 2),
    FullCaseEntry("ᾕ", 0, 3),
    FullCaseEntry("ἥι", 1, 3),
    FullCaseEntry("ᾝ", 2, 3),
    FullCaseEntry("Ĳ", 0, 2),
    FullCaseEntry("ĳ", 1, 2),
    FullCaseEntry("ᾖ", 0, 3),
    FullCaseEntry("ἦι", 1, 3),
    FullCaseEntry("ᾞ", 2, 3),
    FullCaseEntry("Ḓ", 0, 2),
    FullCaseEntry("ḓ", 1, 2),
    FullCaseEntry("ᾗ", 0, 3),
    FullCaseEntry("ἧι", 1, 3),
    FullCaseEntry("ᾟ", 2, 3),
    FullCaseEntry("Ĵ", 0, 2),
    FullCaseEntry("ĵ", 1, 2),
    FullCaseEntry("ᾘ", 0, 3),
    FullCaseEntry("ἠι", 1, 3),
    FullCaseEntry("ᾐ", 2, 3),
    FullCaseEntry("Ḕ", 0, 2),
    FullCaseEntry("ḕ", 1, 2),
    FullCaseEntry("ᾙ", 0, 3),
    FullCaseEntry("ἡι", 1, 3),
    FullCaseEntry("ᾑ", 2, 3),
    FullCaseEntry("Ķ", 0, 2),
    FullCaseEntry("ķ", 1, 2),
    FullCaseEntry("ᾚ", 0, 3),
    FullCaseEntry("ἢι", 1, 3),
    FullCaseEntry("ᾒ", 2, 3),
    FullCaseEntry("Ḗ", 0, 2),
    FullCaseEntry("ḗ", 1, 2),
    FullCaseEntry("ᾛ", 0, 3),
    FullCaseEntry("ἣι", 1, 3),
    FullCaseEntry("ᾓ", 2, 3),
    FullCaseEntry("ᾜ", 0, 3),
    FullCaseEntry("ἤι", 1, 3),
    FullCaseEntry("ᾔ", 2, 3),
    FullCaseEntry("Ĺ", 0, 2),
    FullCaseEntry("ĺ", 1, 2),
    FullCaseEntry("Ḙ", 0, 2),
    FullCaseEntry("ḙ", 1, 2),
    FullCaseEntry("ᾝ", 0, 3),
    FullCaseEntry("ἥι", 1, 3),
    FullCaseEntry("ᾕ", 2, 3),
    FullCaseEntry("ᾞ", 0, 3),
    FullCaseEntry("ἦι", 1, 3),
    FullCaseEntry("ᾖ", 2, 3),
    FullCaseEntry("Ļ", 0, 2),
    FullCaseEntry("ļ", 1, 2),
    FullCaseEntry("Ḛ", 0, 2),
    FullCaseEntry("ḛ", 1, 2),
    FullCaseEntry("ᾟ", 0, 3),
    FullCaseEntry("ἧι", 1, 3),
    FullCaseEntry("ᾗ", 2, 3),
    FullCaseEntry("ᾠ", 0, 3),
    FullCaseEntry("ὠι", 1, 3),
    FullCaseEntry("ᾨ", 2, 3),
    FullCaseEntry("Ľ", 0, 2),
    FullCaseEntry("ľ", 1, 2),
    FullCaseEntry("Ḝ", 0, 2),
    FullCaseEntry("ḝ", 1, 2),
    FullCaseEntry("ᾡ", 0, 3),
    FullCaseEntry("ὡι", 1, 3),
    FullCaseEntry("ᾩ", 2, 3),
    FullCaseEntry("Ω", 0, 3),
    FullCaseEntry("ω", 1, 3),
    FullCaseEntry("Ω", 2, 3),
    FullCaseEntry("ᾢ", 0, 3),
    FullCaseEntry("ὢι", 1, 3),
    FullCaseEntry("ᾪ", 2, 3),
    FullCaseEntry("Ŀ", 0, 2),
    FullCaseEntry("ŀ", 1, 2),
    FullCaseEntry("Ḟ", 0, 2),
    FullCaseEntry("ḟ", 1, 2),
    FullCaseEntry("ᾣ", 0, 3),
    FullCaseEntry("ὣι", 1, 3),
    FullCaseEntry("ᾫ", 2, 3),
    FullCaseEntry("ᾤ", 0, 3),
    FullCaseEntry("ὤι", 1, 3),
    FullCaseEntry("ᾬ", 2, 3),
    FullCaseEntry("Ł", 0, 2),
    FullCaseEntry("ł", 1, 2),
    FullCaseEntry("Ḡ", 0, 2),
    FullCaseEntry("ḡ", 1, 2),
    FullCaseEntry("ᾥ", 0, 3),
    FullCaseEntry("ὥι", 1, 3),
    FullCaseEntry("ᾭ", 2, 3),
    FullCaseEntry("K", 0, 3),
    FullCaseEntry("k", 1, 3),
    FullCaseEntry("K", 2, 3),
    FullCaseEntry("ᾦ", 0, 3),
    FullCaseEntry("ὦι", 1, 3),
    FullCaseEntry("ᾮ", 2, 3),
    FullCaseEntry("Å", 0, 3),
    FullCaseEntry("å", 1, 3),
    FullCaseEntry("Å", 2, 3),
    FullCaseEntry("Ń", 0, 2),
    FullCaseEntry("ń", 1, 2),
    FullCaseEntry("Ḣ", 0, 2),
    FullCaseEntry("ḣ", 1, 2),
    FullCaseEntry("ᾧ", 0, 3),
    FullCaseEntry("ὧι", 1, 3),
    FullCaseEntry("ᾯ", 2, 3),
    FullCaseEntry("ᾨ", 0, 3),
    FullCaseEntry("ὠι", 1, 3),
    FullCaseEntry("ᾠ", 2, 3),
    FullCaseEntry("Ņ", 0, 2),
    FullCaseEntry("ņ", 1, 2),
    FullCaseEntry("Ḥ", 0, 2),
    FullCaseEntry("ḥ", 1, 2),
    FullCaseEntry("ᾩ", 0, 3),
    FullCaseEntry("ὡι", 1, 3),
    FullCaseEntry("ᾡ", 2, 3),
    FullCaseEntry("ᾪ", 0, 3),
    FullCaseEntry("ὢι", 1, 3),
    FullCaseEntry("ᾢ", 2, 3),
    FullCaseEntry("Ň", 0, 2),
    FullCaseEntry("ň", 1, 2),
    FullCaseEntry("Ḧ", 0, 2),
    FullCaseEntry("ḧ", 1, 2),
    FullCaseEntry("ᾫ", 0, 3),
    FullCaseEntry("ὣι", 1, 3),
    FullCaseEntry("ᾣ", 2, 3),
    FullCaseEntry("ᾬ", 0, 3),
    FullCaseEntry("ὤι", 1, 3),
    FullCaseEntry("ᾤ", 2, 3),
    FullCaseEntry("ŉ", 0, 2),
    FullCaseEntry("ʼn", 1, 2),
    FullCaseEntry("Ḩ", 0, 2),
    FullCaseEntry("ḩ", 1, 2),
    FullCaseEntry("ᾭ", 0, 3),
    FullCaseEntry("ὥι", 1, 3),
    FullCaseEntry("ᾥ", 2, 3),
    FullCaseEntry("Ⅎ", 0, 2),
    FullCaseEntry("ⅎ", 1, 2),
    FullCaseEntry("Ŋ", 0, 2),
    FullCaseEntry("ŋ", 1, 2),
    FullCaseEntry("ᾮ", 0, 3),
    FullCaseEntry("ὦι", 1, 3),
    FullCaseEntry("ᾦ", 2, 3),
    FullCaseEntry("Ḫ", 0, 2),
    FullCaseEntry("ḫ", 1, 2),
    FullCaseEntry("ᾯ", 0, 3),
    FullCaseEntry("ὧι", 1, 3),
    FullCaseEntry("ᾧ", 2, 3),
    FullCaseEntry("Ō", 0, 2),
    FullCaseEntry("ō", 1, 2),
    FullCaseEntry("Ḭ", 0, 2),
    FullCaseEntry("ḭ", 1, 2),
    FullCaseEntry("Ŏ", 0, 2),
    FullCaseEntry("ŏ", 1, 2),
    FullCaseEntry("ᾲ", 0, 2),
    FullCaseEntry("ὰι", 1, 2),
    FullCaseEntry("Ḯ", 0, 2),
    FullCaseEntry("ḯ", 1, 2),
    FullCaseEntry("ᾳ", 0, 3),
    FullCaseEntry("αι", 1, 3),
    FullCaseEntry("ᾼ", 2, 3),
    FullCaseEntry("Ő", 0, 2),
    FullCaseEntry("ő", 1, 2),
    FullCaseEntry("ᾴ", 0, 2),
    FullCaseEntry("άι", 1, 2),
    FullCaseEntry("Ḱ", 0, 2),
    FullCaseEntry("ḱ", 1, 2),
    FullCaseEntry("Œ", 0, 2),
    FullCaseEntry("œ", 1, 2),
    FullCaseEntry("ᾶ", 0, 2),
    FullCaseEntry("ᾶ", 1, 2),
    FullCaseEntry("Ḳ", 0, 2),
    FullCaseEntry("ḳ", 1, 2),
    FullCaseEntry("ᾷ", 0, 2),
    FullCaseEntry("ᾶι", 1, 2),
    FullCaseEntry("Ŕ", 0, 2),
    FullCaseEntry("ŕ", 1, 2),
    FullCaseEntry("Ᾰ", 0, 2),
    FullCaseEntry("ᾰ", 1, 2),
    FullCaseEntry("Ḵ", 0, 2),
    FullCaseEntry("ḵ", 1, 2),
    FullCaseEntry("Ᾱ", 0, 2),
    FullCaseEntry("ᾱ", 1, 2),
    FullCaseEntry("Ŗ", 0, 2),
    FullCaseEntry("ŗ", 1, 2),
    FullCaseEntry("Ѡ", 0, 2),
    FullCaseEntry("ѡ", 1, 2),
    FullCaseEntry("Ὰ", 0, 2),
    FullCaseEntry("ὰ", 1, 2),
    FullCaseEntry("Ḷ", 0, 2),
    FullCaseEntry("ḷ", 1, 2),
    FullCaseEntry("Ά", 0, 2),
    FullCaseEntry("ά", 1, 2),
    FullCaseEntry("Ř", 0, 2),
    FullCaseEntry("ř", 1, 2),
    FullCaseEntry("Ѣ", 0, 2),
    FullCaseEntry("ѣ", 1, 2),
    FullCaseEntry("ᾼ", 0, 3),
    FullCaseEntry("αι", 1, 3),
    FullCaseEntry("ᾳ", 2, 3),
    FullCaseEntry("Ḹ", 0, 2),
    FullCaseEntry("ḹ", 1, 2),
    FullCaseEntry("Ś", 0, 2),
    FullCaseEntry("ś", 1, 2),
    FullCaseEntry("Ѥ", 0, 2),
    FullCaseEntry("ѥ", 1, 2),
    FullCaseEntry("ι", 0, 4),
    FullCaseEntry("ι", 1, 4),
    FullCaseEntry("ͅ", 2, 4),
    FullCaseEntry("Ι", 3, 4),
    FullCaseEntry("Ḻ", 0, 2),
    FullCaseEntry("ḻ", 1, 2),
    FullCaseEntry("Ŝ", 0, 2),
    FullCaseEntry("ŝ", 1, 2),
    FullCaseEntry("Ѧ", 0, 2),
    FullCaseEntry("ѧ", 1, 2),
    FullCaseEntry("Ḽ", 0, 2),
    FullCaseEntry("ḽ", 1, 2),
    FullCaseEntry("Ş", 0, 2),
    FullCaseEntry("ş", 1, 2),
    FullCaseEntry("Ѩ", 0, 2),
    FullCaseEntry("ѩ", 1, 2),
    FullCaseEntry("ῂ", 0, 2),
    FullCaseEntry("ὴι", 1, 2),
    FullCaseEntry("Ａ", 0, 2),
    FullCaseEntry("ａ", 1, 2),
    FullCaseEntry("Ḿ", 0, 2),
    FullCaseEntry("ḿ", 1, 2),
    FullCaseEntry("ῃ", 0, 3),
    FullCaseEntry("ηι", 1, 3),
    FullCaseEntry("ῌ", 2, 3),
    FullCaseEntry("Ｂ", 0, 2),
    FullCaseEntry("ｂ", 1, 2),
    FullCaseEntry("Š", 0, 2),
    FullCaseEntry("š", 1, 2),
    FullCaseEntry("Ѫ", 0, 2),
    FullCaseEntry("ѫ", 1, 2),
    FullCaseEntry("ῄ", 0, 2),
    FullCaseEntry("ήι", 1, 2),
    FullCaseEntry("Ｃ", 0, 2),
    FullCaseEntry("ｃ", 1, 2),
    FullCaseEntry("Ṁ", 0, 2),
    FullCaseEntry("ṁ", 1, 2),
    FullCaseEntry("Ｄ", 0, 2),
    FullCaseEntry("ｄ", 1, 2),
    FullCaseEntry("Ţ", 0, 2),
    FullCaseEntry("ţ", 1, 2),
    FullCaseEntry("Ѭ", 0, 2),
    FullCaseEntry("ѭ", 1, 2),
    FullCaseEntry("ῆ", 0, 2),
    FullCaseEntry("ῆ", 1, 2),
    FullCaseEntry("Ｅ", 0, 2),
    FullCaseEntry("ｅ", 1, 2),
    FullCaseEntry("Ṃ", 0, 2),
    FullCaseEntry("ṃ", 1, 2),
    FullCaseEntry("ῇ", 0, 2),
    FullCaseEntry("ῆι", 1, 2),
    FullCaseEntry("Ｆ", 0, 2),
    FullCaseEntry("ｆ", 1, 2),
    FullCaseEntry("Ť", 0, 2),
    FullCaseEntry("ť", 1, 2),
    FullCaseEntry("Ѯ", 0, 2),
    FullCaseEntry("ѯ", 1, 2),
    FullCaseEntry("Ὲ", 0, 2),
    FullCaseEntry("ὲ", 1, 2),
    FullCaseEntry("Ｇ", 0, 2),
    FullCaseEntry("ｇ", 1, 2),
    FullCaseEntry("Ṅ", 0, 2),
    FullCaseEntry("ṅ", 1, 2),
    FullCaseEntry("Έ", 0, 2),
    FullCaseEntry("έ", 1, 2),
    FullCaseEntry("Ｈ", 0, 2),
    FullCaseEntry("ｈ", 1, 2),
    FullCaseEntry("Ŧ", 0, 2),
    FullCaseEntry("ŧ", 1, 2),
    FullCaseEntry("Ѱ", 0, 2),
    FullCaseEntry("ѱ", 1, 2),
    FullCaseEntry("Ὴ", 0, 2),
    FullCaseEntry("ὴ", 1, 2),
    FullCaseEntry("Ｉ", 0, 2),
    FullCaseEntry("ｉ", 1, 2),
    FullCaseEntry("Ṇ", 0, 2),
    FullCaseEntry("ṇ", 1, 2),
    FullCaseEntry("Ή", 0, 2),
    FullCaseEntry("ή", 1, 2),
    FullCaseEntry("Ｊ", 0, 2),
    FullCaseEntry("ｊ", 1, 2),
    FullCaseEntry("Ũ", 0, 2),
    FullCaseEntry("ũ", 1, 2),
    FullCaseEntry("Ѳ", 0, 2),
    FullCaseEntry("ѳ", 1, 2),
    FullCaseEntry("ῌ", 0, 3),
    FullCaseEntry("ηι", 1, 3),
    FullCaseEntry("ῃ", 2, 3),
    FullCaseEntry("Ｋ", 0, 2),
    FullCaseEntry("ｋ", 1, 2),
    FullCaseEntry("Ṉ", 0, 2),
    FullCaseEntry("ṉ", 1, 2),
    FullCaseEntry("Ｌ", 0, 2),
    FullCaseEntry("ｌ", 1, 2),
    FullCaseEntry("Ū", 0, 2),
    FullCaseEntry("ū", 1, 2),
    FullCaseEntry("Ѵ", 0, 2),
    FullCaseEntry("ѵ", 1, 2),
    FullCaseEntry("Ｍ", 0, 2),
    FullCaseEntry("ｍ", 1, 2),
    FullCaseEntry("Ṋ", 0, 2),
    FullCaseEntry("ṋ", 1, 2),
    FullCaseEntry("Ｎ", 0, 2),
    FullCaseEntry("ｎ", 1, 2),
    FullCaseEntry("Ŭ", 0, 2),
    FullCaseEntry("ŭ", 1, 2),
    FullCaseEntry("Ѷ", 0, 2),
    FullCaseEntry("ѷ", 1, 2),
    FullCaseEntry("Ｏ", 0, 2),
    FullCaseEntry("ｏ", 1, 2),
    FullCaseEntry("Ṍ", 0, 2),
    FullCaseEntry("ṍ", 1, 2),
    FullCaseEntry("Ｐ", 0, 2),
    FullCaseEntry("ｐ", 1, 2),
    FullCaseEntry("Ů", 0, 2),
    FullCaseEntry("ů", 1, 2),
    FullCaseEntry("Ѹ", 0, 2),
    FullCaseEntry("ѹ", 1, 2),
    FullCaseEntry("Ⴀ", 0, 2),
    FullCaseEntry("ⴀ", 1, 2),
    FullCaseEntry("ῒ", 0, 2),
    FullCaseEntry("ῒ", 1, 2),
    FullCaseEntry("Ｑ", 0, 2),
    FullCaseEntry("ｑ", 1, 2),
    FullCaseEntry("Ⴁ", 0, 2),
    FullCaseEntry("ⴁ", 1, 2),
    FullCaseEntry("Ṏ", 0, 2),
    FullCaseEntry("ṏ", 1, 2),
    FullCaseEntry("ΐ", 0, 3),
    FullCaseEntry("ΐ", 1, 3),
    FullCaseEntry("ΐ", 2, 3),
    FullCaseEntry("Ｒ", 0, 2),
    FullCaseEntry("ｒ", 1, 2),
    FullCaseEntry("Ű", 0, 2),
    FullCaseEntry("ű", 1, 2),
    FullCaseEntry("Ѻ", 0, 2),
    FullCaseEntry("ѻ", 1, 2),
    FullCaseEntry("Ⴂ", 0, 2),
    FullCaseEntry("ⴂ", 1, 2),
    FullCaseEntry("Ｓ", 0, 2),
    FullCaseEntry("ｓ", 1, 2),
    FullCaseEntry("Ⴃ", 0, 2),
    FullCaseEntry("ⴃ", 1, 2),
    FullCaseEntry("Ṑ", 0, 2),
    FullCaseEntry("ṑ", 1, 2),
    FullCaseEntry("Ｔ", 0, 2),
    FullCaseEntry("ｔ", 1, 2),
    FullCaseEntry("Ų", 0, 2),
    FullCaseEntry("ų", 1, 2),
    FullCaseEntry("Ѽ", 0, 2),
    FullCaseEntry("ѽ", 1, 2),
    FullCaseEntry("Ⴄ", 0, 2),
    FullCaseEntry("ⴄ", 1, 2),
    FullCaseEntry("ῖ", 0, 2),
    FullCaseEntry("ῖ", 1, 2),
    FullCaseEntry("Ｕ", 0, 2),
    FullCaseEntry("ｕ", 1, 2),
    FullCaseEntry("Ⴅ", 0, 2),
    FullCaseEntry("ⴅ", 1, 2),
    FullCaseEntry("Ṓ", 0, 2),
    FullCaseEntry("ṓ", 1, 2),
    FullCaseEntry("ῗ", 0, 2),
    FullCaseEntry("ῗ", 1, 2),
    FullCaseEntry("Ｖ", 0, 2),
    FullCaseEntry("ｖ", 1, 2),
    FullCaseEntry("Ŵ", 0, 2),
    FullCaseEntry("ŵ", 1, 2),
    FullCaseEntry("Ѿ", 0, 2),
    FullCaseEntry("ѿ", 1, 2),
    FullCaseEntry("Ⴆ", 0, 2),
    FullCaseEntry("ⴆ", 1, 2),
    FullCaseEntry("Ῐ", 0, 2),
    FullCaseEntry("ῐ", 1, 2),
    FullCaseEntry("Ⰰ", 0, 2),
    FullCaseEntry("ⰰ", 1, 2),
    FullCaseEntry("Ｗ", 0, 2),
    FullCaseEntry("ｗ", 1, 2),
    FullCaseEntry("Ⴇ", 0, 2),
    FullCaseEntry("ⴇ", 1, 2),
    FullCaseEntry("Ṕ", 0, 2),
    FullCaseEntry("ṕ", 1, 2),
    FullCaseEntry("Ῑ", 0, 2),
    FullCaseEntry("ῑ", 1, 2),
    FullCaseEntry("Ⰱ", 0, 2),
    FullCaseEntry("ⰱ", 1, 2),
    FullCaseEntry("Ｘ", 0, 2),
    FullCaseEntry("ｘ", 1, 2),
    FullCaseEntry("Ŷ", 0, 2),
    FullCaseEntry("ŷ", 1, 2),
    FullCaseEntry("Ҁ", 0, 2),
    FullCaseEntry("ҁ", 1, 2),
    FullCaseEntry("Ⴈ", 0, 2),
    FullCaseEntry("ⴈ", 1, 2),
    FullCaseEntry("Ὶ", 0, 2),
    FullCaseEntry("ὶ", 1, 2),
    FullCaseEntry("Ⰲ", 0, 2),
    FullCaseEntry("ⰲ", 1, 2),
    FullCaseEntry("Ｙ", 0, 2),
    FullCaseEntry("ｙ", 1, 2),
    FullCaseEntry("Ⴉ", 0, 2),
    FullCaseEntry("ⴉ", 1, 2),
    FullCaseEntry("Ṗ", 0, 2),
    FullCaseEntry("ṗ", 1, 2),
    FullCaseEntry("Ί", 0, 2),
    FullCaseEntry("ί", 1, 2),
    FullCaseEntry("Ⅰ", 0, 2),
    FullCaseEntry("ⅰ", 1, 2),
    FullCaseEntry("Ⰳ", 0, 2),
    FullCaseEntry("ⰳ", 1, 2),
    FullCaseEntry("Ｚ", 0, 2),
    FullCaseEntry("ｚ", 1, 2),
    FullCaseEntry("Ÿ", 0, 2),
    FullCaseEntry("ÿ", 1, 2),
    FullCaseEntry("Ⴊ", 0, 2),
    FullCaseEntry("ⴊ", 1, 2),
    FullCaseEntry("Ⅱ", 0, 2),
    FullCaseEntry("ⅱ", 1, 2),
    FullCaseEntry("Ⰴ", 0, 2),
    FullCaseEntry("ⰴ", 1, 2),
    FullCaseEntry("Ź", 0, 2),
    FullCaseEntry("ź", 1, 2),
    FullCaseEntry("Ⴋ", 0, 2),
    FullCaseEntry("ⴋ", 1, 2),
    FullCaseEntry("Ṙ", 0, 2),
    FullCaseEntry("ṙ", 1, 2),
    FullCaseEntry("Ⅲ", 0, 2),
    FullCaseEntry("ⅲ", 1, 2),
    FullCaseEntry("Ⰵ", 0, 2),
    FullCaseEntry("ⰵ", 1, 2),
    FullCaseEntry("Ⴌ", 0, 2),
    FullCaseEntry("ⴌ", 1, 2),
    FullCaseEntry("Ⅳ", 0, 2),
    FullCaseEntry("ⅳ", 1, 2),
    FullCaseEntry("Ⰶ", 0, 2),
    FullCaseEntry("ⰶ", 1, 2),
    FullCaseEntry("Ż", 0, 2),
    FullCaseEntry("ż", 1, 2),
    FullCaseEntry("Ⴍ", 0, 2),
    FullCaseEntry("ⴍ", 1, 2),
    FullCaseEntry("Ṛ", 0, 2),
    FullCaseEntry("ṛ", 1, 2),
    FullCaseEntry("Ⅴ", 0, 2),
    FullCaseEntry("ⅴ", 1, 2),
    FullCaseEntry("Ⰷ", 0, 2),
    FullCaseEntry("ⰷ", 1, 2),
    FullCaseEntry("Ⴎ", 0, 2),
    FullCaseEntry("ⴎ", 1, 2),
    FullCaseEntry("Ⅵ", 0, 2),
    FullCaseEntry("ⅵ", 1, 2),
    FullCaseEntry("Ⰸ", 0, 2),
    FullCaseEntry("ⰸ", 1, 2),
    FullCaseEntry("Ž", 0, 2),
    FullCaseEntry("ž", 1, 2),
    FullCaseEntry("Ⴏ", 0, 2),
    FullCaseEntry("ⴏ", 1, 2),
    FullCaseEntry("Ṝ", 0, 2),
    FullCaseEntry("ṝ", 1, 2),
    FullCaseEntry("Ⅶ", 0, 2),
    FullCaseEntry("ⅶ", 1, 2),
    FullCaseEntry("Ⰹ", 0, 2),
    FullCaseEntry("ⰹ", 1, 2),
    FullCaseEntry("Ⴐ", 0, 2),
    FullCaseEntry("ⴐ", 1, 2),
    FullCaseEntry("ῢ", 0, 2),
    FullCaseEntry("ῢ", 1, 2),
    FullCaseEntry("Ⅷ", 0, 2),
    FullCaseEntry("ⅷ", 1, 2),
    FullCaseEntry("Ⰺ", 0, 2),
    FullCaseEntry("ⰺ", 1, 2),
    FullCaseEntry("ſ", 0, 3),
    FullCaseEntry("s", 1, 3),
    FullCaseEntry("S", 2, 3),
    FullCaseEntry("Ⴑ", 0, 2),
    FullCaseEntry("ⴑ", 1, 2),
    FullCaseEntry("Ṟ", 0, 2),
    FullCaseEntry("ṟ", 1, 2),
    FullCaseEntry("ΰ", 0, 3),
    FullCaseEntry("ΰ", 1, 3),
    FullCaseEntry("ΰ", 2, 3),
    FullCaseEntry("Ⅸ", 0, 2),
    FullCaseEntry("ⅸ", 1, 2),
    FullCaseEntry("Ⰻ", 0, 2),
    FullCaseEntry("ⰻ", 1, 2),
    FullCaseEntry("Ҋ", 0, 2),
    FullCaseEntry("ҋ", 1, 2),
    FullCaseEntry("Ⴒ", 0, 2),
    FullCaseEntry("ⴒ", 1, 2),
    FullCaseEntry("ῤ", 0, 2),
    FullCaseEntry("ῤ", 1, 2),
    FullCaseEntry("Ⅹ", 0, 2),
    FullCaseEntry("ⅹ", 1, 2),
    FullCaseEntry("Ⰼ", 0, 2),
    FullCaseEntry("ⰼ", 1, 2),
    FullCaseEntry("Ɓ", 0, 2),
    FullCaseEntry("ɓ", 1, 2),
    FullCaseEntry("Ⴓ", 0, 2),
    FullCaseEntry("ⴓ", 1, 2),
    FullCaseEntry("Ṡ", 0, 3),
    FullCaseEntry("ṡ", 1, 3),
    FullCaseEntry("ẛ", 2, 3),
    FullCaseEntry("Ⅺ", 0, 2),
    FullCaseEntry("ⅺ", 1, 2),
    FullCaseEntry("Ⰽ", 0, 2),
    FullCaseEntry("ⰽ", 1, 2),
    FullCaseEntry("Ꜣ", 0, 2),
    FullCaseEntry("ꜣ", 1, 2),
    FullCaseEntry("Ƃ", 0, 2),
    FullCaseEntry("ƃ", 1, 2),
    FullCaseEntry("Ҍ", 0, 2),
    FullCaseEntry("ҍ", 1, 2),
    FullCaseEntry("Ⴔ", 0, 2),
    FullCaseEntry("ⴔ", 1, 2),
    FullCaseEntry("ῦ", 0, 2),
    FullCaseEntry("ῦ", 1, 2),
    FullCaseEntry("Ⅻ", 0, 2),
    FullCaseEntry("ⅻ", 1, 2),
    FullCaseEntry("Ⰾ", 0, 2),
    FullCaseEntry("ⰾ", 1, 2),
    FullCaseEntry("Ⴕ", 0, 2),
    FullCaseEntry("ⴕ", 1, 2),
    FullCaseEntry("Ṣ", 0, 2),
    FullCaseEntry("ṣ", 1, 2),
    FullCaseEntry("ῧ", 0, 2),
    FullCaseEntry("ῧ", 1, 2),
    FullCaseEntry("Ⅼ", 0, 2),
    FullCaseEntry("ⅼ", 1, 2),
    FullCaseEntry("Ⰿ", 0, 2),
    FullCaseEntry("ⰿ", 1, 2),
    FullCaseEntry("Ꜥ", 0, 2),
    FullCaseEntry("ꜥ", 1, 2),
    FullCaseEntry("Ƅ", 0, 2),
    FullCaseEntry("ƅ", 1, 2),
    FullCaseEntry("Ҏ", 0, 2),
    FullCaseEntry("ҏ", 1, 2),
    FullCaseEntry("Ⴖ", 0, 2),
    FullCaseEntry("ⴖ", 1, 2),
    FullCaseEntry("Ῠ", 0, 2),
    FullCaseEntry("ῠ", 1, 2),
    FullCaseEntry("Ⅽ", 0, 2),
    FullCaseEntry("ⅽ", 1, 2),
    FullCaseEntry("Ⱀ", 0, 2),
    FullCaseEntry("ⱀ", 1, 2),
];



struct UnicodeProperty(T)
{
    string name;
    RleBitSet!T set;
}
immutable unicodeCc = RleBitSet!ubyte.fromRawArray([0x0, 0x20, 0x5f, 0x21]);
immutable unicodeLl = RleBitSet!ubyte.fromRawArray([0x61, 0x1a, 0x3a, 0x1, 0x29, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x1b, 0xc1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x3, 0x3, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0x2c, 0x3f, 0xd, 0x1, 0x22, 0x66, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0xff, 0x0, 0x13, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x35, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xb5, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x6, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8c, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x58, 0x7, 0xc, 0x5, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x2d, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd1, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x9a, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1]);
immutable unicodeKannada = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8e, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2]);
immutable unicodeTelugu = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8]);
immutable unicodeGurmukhi = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xb, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10]);
immutable unicodeLu = RleBitSet!ubyte.fromRawArray([0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0x22, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x54, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0xff, 0x0, 0x7, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x3d, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x86, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xcd, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc9, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xa8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1]);
immutable unicodeInBasic_Latin = RleBitSet!ubyte.fromRawArray([0x0, 0x80]);
immutable unicodeLowercase = RleBitSet!ubyte.fromRawArray([0x61, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x24, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2b, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x4, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0xc0, 0x41, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0x79, 0x1, 0xd, 0x1, 0x10, 0xd, 0x6d, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x21, 0x10, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x4e, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x4d, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8c, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4e, 0x3, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x58, 0x7, 0xc, 0x5, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x2d, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd1, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x9a, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1]);
immutable unicodeGujarati = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8b, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc]);
immutable unicodeInLatin_1_Supplement = RleBitSet!ubyte.fromRawArray([0x80, 0x80]);
immutable unicodeUppercase = RleBitSet!ubyte.fromRawArray([0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0x22, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x54, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0xff, 0x0, 0x7, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x1a, 0x10, 0x13, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x35, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x37, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xcd, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc9, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xa8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1]);
immutable unicodeLao = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4]);
immutable unicodeBengali = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8a, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16]);
immutable unicodeOriya = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12]);
immutable unicodeASCII_Hex_Digit = RleBitSet!ubyte.fromRawArray([0x30, 0xa, 0x7, 0x6, 0x1a, 0x6]);
immutable unicodeTamil = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8d, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15]);
immutable unicodeInCombining_Diacritical_Marks_Supplement = RleBitSet!ushort.fromRawArray([0x1dc0, 0x40]);
immutable unicodeInCJK_Radicals_Supplement = RleBitSet!ushort.fromRawArray([0x2e80, 0x80]);
immutable unicodeInEthiopic_Supplement = RleBitSet!ushort.fromRawArray([0x1380, 0x20]);
immutable unicodeInPhags_pa = RleBitSet!ushort.fromRawArray([0xa840, 0x40]);
immutable unicodeInSyriac = RleBitSet!ushort.fromRawArray([0x700, 0x50]);
immutable unicodeOther_ID_Start = RleBitSet!ushort.fromRawArray([0x2118, 0x1, 0x15, 0x1, 0xf6c, 0x2]);
immutable unicodeInGujarati = RleBitSet!ushort.fromRawArray([0xa80, 0x80]);
immutable unicodeInHangul_Jamo = RleBitSet!ushort.fromRawArray([0x1100, 0x100]);
immutable unicodeRunic = RleBitSet!ushort.fromRawArray([0x16a0, 0x4b, 0x3, 0x3]);
immutable unicodeInKayah_Li = RleBitSet!ushort.fromRawArray([0xa900, 0x30]);
immutable unicodeIDS_Binary_Operator = RleBitSet!ushort.fromRawArray([0x2ff0, 0x2, 0x2, 0x8]);
immutable unicodeTai_Tham = RleBitSet!ushort.fromRawArray([0x1a20, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe]);
immutable unicodeLinear_B = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b]);
immutable unicodeInSupplemental_Arrows_A = RleBitSet!ushort.fromRawArray([0x27f0, 0x10]);
immutable unicodeArmenian = RleBitSet!ushort.fromRawArray([0x531, 0x26, 0x2, 0x7, 0x1, 0x27, 0x2, 0x1, 0x4, 0x1, 0xf583, 0x5]);
immutable unicodeInBlock_Elements = RleBitSet!ushort.fromRawArray([0x2580, 0x20]);
immutable unicodeInBalinese = RleBitSet!ushort.fromRawArray([0x1b00, 0x80]);
immutable unicodeInSupplemental_Arrows_B = RleBitSet!ushort.fromRawArray([0x2900, 0x80]);
immutable unicodeCyrillic = RleBitSet!ushort.fromRawArray([0x400, 0x85, 0x2, 0xa1, 0x1803, 0x1, 0x4c, 0x1, 0x1067, 0x20, 0x7840, 0x58, 0x7, 0x1]);
immutable unicodeWhite_Space = RleBitSet!ushort.fromRawArray([0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x1a, 0x1, 0x15df, 0x1, 0x18d, 0x1, 0x7f1, 0xb, 0x1d, 0x2, 0x5, 0x1, 0x2f, 0x1, 0xfa0, 0x1]);
immutable unicodeBatak = RleBitSet!ushort.fromRawArray([0x1bc0, 0x34, 0x8, 0x4]);
immutable unicodeCherokee = RleBitSet!ushort.fromRawArray([0x13a0, 0x55]);
immutable unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended = RleBitSet!ushort.fromRawArray([0x18b0, 0x50]);
immutable unicodeHiragana = RleBitSet!ushort.fromRawArray([0x3041, 0x56, 0x6, 0x3, 0xffff, 0x0, 0x7f62, 0x1, 0x41fe, 0x1]);
immutable unicodeGrapheme_Extend = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x113, 0x7, 0x107, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x1, 0x4, 0x8, 0x1, 0x8, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x1, 0x1, 0x1, 0xc, 0x1, 0x9, 0x1, 0x66, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x2, 0x1, 0x3, 0x1, 0x5, 0x2, 0x7, 0x2, 0xb, 0x2, 0x5a, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x66, 0x1, 0x4, 0x1, 0x2, 0x3, 0x1, 0x1, 0x8, 0x1, 0x51, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x2bf, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x20c, 0x2, 0xc2, 0x21, 0xbfe, 0x3, 0x8d, 0x1, 0x60, 0x20, 0x22a, 0x6, 0x69, 0x2, 0x75d4, 0x4, 0x1, 0xa, 0x21, 0x1, 0x50, 0x2, 0x110, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x2e1, 0x10, 0x10, 0x7, 0x177, 0x2, 0x25d, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x4, 0x61d2, 0x1, 0x1, 0x3, 0x4, 0x5, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2ec7, 0xf0]);
immutable unicodeInCJK_Compatibility_Ideographs = RleBitSet!ushort.fromRawArray([0xf900, 0x200]);
immutable unicodePattern_Syntax = RleBitSet!ushort.fromRawArray([0x21, 0xf, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x4, 0x22, 0x7, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x4, 0x1, 0x4, 0x1, 0x3, 0x1, 0x17, 0x1, 0x1f, 0x1, 0x1f18, 0x18, 0x8, 0xf, 0x2, 0x13, 0x1, 0xa, 0x131, 0x2d0, 0xa0, 0x276, 0x1e, 0x46c, 0x200, 0x80, 0x181, 0x3, 0x4, 0x19, 0xf, 0x1, 0xcd0d, 0x2, 0x105, 0x2]);
immutable unicodeNew_Tai_Lue = RleBitSet!ushort.fromRawArray([0x1980, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x2]);
immutable unicodeArabic = RleBitSet!ushort.fromRawArray([0x600, 0x5, 0x1, 0x6, 0x1, 0xe, 0x3, 0x1, 0x1, 0x20, 0x1, 0xa, 0xb, 0x9, 0xb, 0x6, 0x1, 0x6c, 0x1, 0x22, 0x50, 0x30, 0x120, 0x1, 0x1, 0xb, 0x37, 0x1b, 0xf251, 0x72, 0x11, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xd, 0x73, 0x5, 0x1, 0x87, 0xf63, 0x1f, 0xdf81, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2]);
immutable unicodeBrahmi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1001, 0x4e, 0x4, 0x1e]);
immutable unicodeInControl_Pictures = RleBitSet!ushort.fromRawArray([0x2400, 0x40]);
immutable unicodeOther_ID_Continue = RleBitSet!ushort.fromRawArray([0xb7, 0x1, 0x2cf, 0x1, 0xfe1, 0x9, 0x668, 0x1]);
immutable unicodeInOl_Chiki = RleBitSet!ushort.fromRawArray([0x1c50, 0x30]);
immutable unicodeInArmenian = RleBitSet!ushort.fromRawArray([0x530, 0x60]);
immutable unicodeInCyrillic = RleBitSet!ushort.fromRawArray([0x400, 0x100]);
immutable unicodeInHigh_Private_Use_Surrogates = RleBitSet!ushort.fromRawArray([0xdb80, 0x80]);
immutable unicodeInNew_Tai_Lue = RleBitSet!ushort.fromRawArray([0x1980, 0x60]);
immutable unicodeInHigh_Surrogates = RleBitSet!ushort.fromRawArray([0xd800, 0x380]);
immutable unicodeQuotation_Mark = RleBitSet!ushort.fromRawArray([0x22, 0x1, 0x4, 0x1, 0x83, 0x1, 0xf, 0x1, 0x1f5c, 0x8, 0x19, 0x2, 0xfd1, 0x4, 0xd, 0x3, 0xce21, 0x4, 0xbd, 0x1, 0x4, 0x1, 0x5a, 0x2]);
immutable unicodeTai_Le = RleBitSet!ushort.fromRawArray([0x1950, 0x1e, 0x2, 0x5]);
immutable unicodeMiao = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x6f01, 0x45, 0xb, 0x2f, 0x10, 0x11]);
immutable unicodeInCherokee = RleBitSet!ushort.fromRawArray([0x13a0, 0x60]);
immutable unicodeCoptic = RleBitSet!ushort.fromRawArray([0x3e2, 0xe, 0x2890, 0x74, 0x5, 0x7]);
immutable unicodeInCyrillic_Supplement = RleBitSet!ushort.fromRawArray([0x500, 0x30]);
immutable unicodeCf = RleBitSet!ushort.fromRawArray([0xad, 0x1, 0x552, 0x5, 0xd8, 0x1, 0x31, 0x1, 0x18fb, 0x5, 0x1a, 0x5, 0x31, 0x5, 0x5, 0x6, 0xde8f, 0x1, 0xf9, 0x3, 0x10c1, 0x1, 0xc0b5, 0x8, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2e92, 0x1, 0x1e, 0x60]);
immutable unicodeInHiragana = RleBitSet!ushort.fromRawArray([0x3040, 0x60]);
immutable unicodeInIPA_Extensions = RleBitSet!ushort.fromRawArray([0x250, 0x60]);
immutable unicodeOgham = RleBitSet!ushort.fromRawArray([0x1680, 0x1d]);
immutable unicodeInCJK_Compatibility_Forms = RleBitSet!ushort.fromRawArray([0xfe30, 0x20]);
immutable unicodeCn = RleBitSet!ushort.fromRawArray([0x378, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0x185, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x1, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xb, 0x5, 0x1, 0x16, 0x2, 0xf0, 0x1, 0x3c, 0x2, 0x65, 0xe, 0x3b, 0x5, 0x2e, 0x2, 0xf, 0x1, 0x1c, 0x2, 0x1, 0x41, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x78, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16, 0x5, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc, 0xf, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12, 0xa, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3, 0xc, 0x3a, 0x4, 0x1d, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0xd, 0x25, 0xc6, 0x1, 0x1, 0x5, 0x1, 0x2, 0x179, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x29d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x7, 0xb, 0x17, 0x9, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x6, 0xf, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x3e, 0x2, 0x41, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe, 0x52, 0x4c, 0x4, 0x2d, 0x3, 0x74, 0x8, 0x3c, 0x3, 0xf, 0x3, 0x33, 0x40, 0x8, 0x8, 0x27, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0x65, 0x5, 0x8, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1a, 0x16, 0x21, 0xf, 0x8a, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0x44c, 0x3, 0xa, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x94, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xe, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x5c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x4, 0x40, 0x1, 0x56, 0x2, 0x67, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0xdf, 0x1, 0x1ab6, 0xa, 0x520d, 0x33, 0x48d, 0x3, 0x37, 0x9, 0x15c, 0x14, 0x58, 0x7, 0x59, 0x8, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x34, 0x4, 0xa, 0x6, 0x38, 0x8, 0x45, 0x9, 0xc, 0x6, 0x1c, 0x4, 0x54, 0xb, 0x1e, 0x3, 0x4e, 0x1, 0xb, 0x4, 0x2, 0x20, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x20, 0x4, 0x43, 0x18, 0x1c, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2e, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x4, 0x226e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x16d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x2, 0x1a, 0x6, 0x7, 0x9, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x87, 0x2, 0x1, 0x1, 0xbe, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xa, 0x5, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2e, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9, 0x7, 0x20, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x49, 0x217, 0x1f, 0x181, 0x4e, 0x4, 0x1e, 0x10, 0x42, 0xe, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xe, 0x3c, 0x49, 0x7, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xd, 0x4, 0xb8c, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x1ffe, 0xf6, 0xa, 0x27, 0x2, 0xb5, 0x22, 0x46, 0xba, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x10e, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88c, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x5ee, 0x1, 0x1e, 0x60, 0x80, 0xf0, 0xfe10, 0xfffe, 0x2, 0xfffe, 0x2]);
immutable unicodeMath = RleBitSet!ushort.fromRawArray([0x2b, 0x1, 0x10, 0x3, 0x1f, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x2d8, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x3, 0x20f, 0x3, 0x1a0d, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x3, 0x1, 0xd, 0x1, 0xe, 0x4, 0x15, 0x5, 0xb, 0x5, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0xe, 0x1, 0x1, 0x44, 0x18, 0x1, 0x6, 0x1, 0x2, 0x4, 0x2, 0x4, 0x20, 0x1, 0x1, 0x6, 0x2, 0xe, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x1b, 0x1, 0x1, 0x18, 0x1, 0xb, 0x7, 0x1bd, 0x2, 0xc, 0xa, 0x4, 0x6, 0x4, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0xb, 0x8, 0x5, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x3, 0x150, 0x40, 0x100, 0x200, 0x30, 0x15, 0x2, 0x6, 0xcfdc, 0x1, 0x337, 0x6, 0x1, 0x1, 0xa2, 0x1, 0x10, 0x3, 0x1d, 0x1, 0x1, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x83, 0x1, 0x6, 0x4, 0xd413, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2]);
immutable unicodeSora_Sompeng = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x10d1, 0x19, 0x7, 0xa]);
immutable unicodeInYi_Syllables = RleBitSet!ushort.fromRawArray([0xa000, 0x490]);
immutable unicodeCs = RleBitSet!ushort.fromRawArray([0xd800, 0x800]);
immutable unicodeInHangul_Jamo_Extended_A = RleBitSet!ushort.fromRawArray([0xa960, 0x20]);
immutable unicodeInGlagolitic = RleBitSet!ushort.fromRawArray([0x2c00, 0x60]);
immutable unicodeInHangul_Jamo_Extended_B = RleBitSet!ushort.fromRawArray([0xd7b0, 0x50]);
immutable unicodeBopomofo = RleBitSet!ushort.fromRawArray([0x2ea, 0x2, 0x2e19, 0x29, 0x72, 0x1b]);
immutable unicodeInSpecials = RleBitSet!ushort.fromRawArray([0xfff0, 0x10]);
immutable unicodeInBamum = RleBitSet!ushort.fromRawArray([0xa6a0, 0x60]);
immutable unicodeInArabic = RleBitSet!ushort.fromRawArray([0x600, 0x100]);
immutable unicodeInMathematical_Operators = RleBitSet!ushort.fromRawArray([0x2200, 0x100]);
immutable unicodeMalayalam = RleBitSet!ushort.fromRawArray([0xd02, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7]);
immutable unicodeInPhonetic_Extensions_Supplement = RleBitSet!ushort.fromRawArray([0x1d80, 0x40]);
immutable unicodeInCJK_Unified_Ideographs_Extension_A = RleBitSet!ushort.fromRawArray([0x3400, 0x19c0]);
immutable unicodeInYijing_Hexagram_Symbols = RleBitSet!ushort.fromRawArray([0x4dc0, 0x40]);
immutable unicodeInTibetan = RleBitSet!ushort.fromRawArray([0xf00, 0x100]);
immutable unicodeSharada = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1181, 0x49, 0x7, 0xa]);
immutable unicodeTakri = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1681, 0x38, 0x8, 0xa]);
immutable unicodeMeroitic_Cursive = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x9a1, 0x18, 0x6, 0x2]);
immutable unicodePattern_White_Space = RleBitSet!ushort.fromRawArray([0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x1f88, 0x2, 0x18, 0x2]);
immutable unicodeInYi_Radicals = RleBitSet!ushort.fromRawArray([0xa490, 0x40]);
immutable unicodeInBraille_Patterns = RleBitSet!ushort.fromRawArray([0x2800, 0x100]);
immutable unicodeInscriptional_Pahlavi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb61, 0x13, 0x5, 0x8]);
immutable unicodeInCoptic = RleBitSet!ushort.fromRawArray([0x2c80, 0x80]);
immutable unicodeInDevanagari = RleBitSet!ushort.fromRawArray([0x900, 0x80]);
immutable unicodeSTerm = RleBitSet!ushort.fromRawArray([0x21, 0x1, 0xc, 0x1, 0x10, 0x1, 0x51c, 0x1, 0x1, 0x1, 0x2a, 0x1, 0x95, 0x1, 0xb4, 0x1, 0x2b, 0x3, 0xf6, 0x1, 0x16a, 0x2, 0x6e4, 0x2, 0x316, 0x1, 0x4, 0x2, 0x305, 0x1, 0xc6, 0x2, 0xcc, 0x1, 0x5, 0x1, 0x13a, 0x2, 0x162, 0x4, 0xae, 0x2, 0x2, 0x2, 0xdb, 0x2, 0x41, 0x2, 0x3bc, 0x2, 0x9, 0x3, 0xde4, 0x1, 0x1d3, 0x1, 0x74fc, 0x1, 0x10e, 0x2, 0xe3, 0x1, 0x3, 0x1, 0x17e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x98, 0x2, 0x93, 0x3, 0x90, 0x2, 0xf9, 0x1, 0x5266, 0x1, 0x3, 0x2, 0xa9, 0x1, 0xc, 0x1, 0x10, 0x1, 0x41, 0x1, 0xaf4, 0x2, 0x5ef, 0x2, 0x75, 0x4, 0x7f, 0x3, 0x81, 0x2]);
immutable unicodeXID_Start = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x81, 0x5, 0x1, 0x2, 0x3, 0x3, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x1, 0xd, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x1, 0xa, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x226, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x8b, 0x6, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x77, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x38, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x42, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInTai_Viet = RleBitSet!ushort.fromRawArray([0xaa80, 0x60]);
immutable unicodeHebrew = RleBitSet!ushort.fromRawArray([0x591, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xf528, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0xa]);
immutable unicodeLisu = RleBitSet!ushort.fromRawArray([0xa4d0, 0x30]);
immutable unicodeUgaritic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x381, 0x1e, 0x1, 0x1]);
immutable unicodeInMongolian = RleBitSet!ushort.fromRawArray([0x1800, 0xb0]);
immutable unicodeInBopomofo = RleBitSet!ushort.fromRawArray([0x3100, 0x30]);
immutable unicodeOld_Persian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x3a1, 0x24, 0x4, 0xe]);
immutable unicodeInSundanese_Supplement = RleBitSet!ushort.fromRawArray([0x1cc0, 0x10]);
immutable unicodePhoenician = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x901, 0x1c, 0x3, 0x1]);
immutable unicodeInLisu = RleBitSet!ushort.fromRawArray([0xa4d0, 0x30]);
immutable unicodeInLow_Surrogates = RleBitSet!ushort.fromRawArray([0xdc00, 0x400]);
immutable unicodeBidi_Control = RleBitSet!ushort.fromRawArray([0x200e, 0x2, 0x1a, 0x5]);
immutable unicodeKatakana = RleBitSet!ushort.fromRawArray([0x30a1, 0x5a, 0x2, 0x3, 0xf0, 0x10, 0xd0, 0x2f, 0x1, 0x58, 0xcc0e, 0xa, 0x1, 0x2d, 0xb062, 0x1]);
immutable unicodeInTamil = RleBitSet!ushort.fromRawArray([0xb80, 0x80]);
immutable unicodeInSupplemental_Punctuation = RleBitSet!ushort.fromRawArray([0x2e00, 0x80]);
immutable unicodeInKanbun = RleBitSet!ushort.fromRawArray([0x3190, 0x10]);
immutable unicodeGrapheme_Base = RleBitSet!ushort.fromRawArray([0x20, 0x5f, 0x21, 0xd, 0x1, 0x252, 0x70, 0x8, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0xe0, 0x7, 0x9e, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x2e, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x9, 0x1b, 0x5, 0x5, 0x11, 0xa, 0xb, 0x1, 0x2, 0x2d, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0x6, 0x2, 0x2, 0x1, 0x4, 0x20, 0x2, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0xe, 0x2b, 0x9, 0x7, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x7, 0xf, 0x1, 0x19, 0x5, 0x1, 0x41, 0x1, 0x1, 0xb, 0x56, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x14, 0x1, 0x7, 0x2, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x1, 0x2, 0x6, 0x2, 0x2, 0x2, 0x1, 0x1, 0xd, 0x2, 0x1, 0x3, 0x4, 0x16, 0x7, 0x1, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x3, 0x18, 0x4, 0x1, 0x1, 0x7, 0xa, 0x2, 0x3, 0xe, 0x1, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x4, 0x8, 0x1, 0x1, 0x2, 0x3, 0x1, 0xf, 0x2, 0x4, 0xc, 0x10, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x2, 0x1, 0x6, 0x2, 0x2, 0x2, 0xf, 0x2, 0x1, 0x3, 0x4, 0x12, 0xb, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x5, 0x1, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x15, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x3, 0x4, 0x13, 0x2, 0x6, 0x2, 0x4, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x2, 0x1, 0x2, 0x12, 0x1, 0x1, 0x2, 0x4, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x1, 0x2, 0x5, 0x3, 0x1, 0x3, 0x1, 0x1, 0x11, 0x2, 0x4, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x9, 0x2, 0x6, 0x7, 0x13, 0x3, 0xc, 0x30, 0x1, 0x2, 0xb, 0x8, 0x8, 0xd, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x9, 0xa, 0x2, 0x4, 0x20, 0x18, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0xe, 0x1, 0x24, 0x12, 0x1, 0x5, 0x1, 0x2, 0x5, 0x31, 0x8, 0x1, 0x6, 0x1, 0xd, 0x25, 0x2d, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x28, 0x1, 0x1, 0x5, 0x1, 0x2, 0x179, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x5, 0x1d, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x29d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0x3, 0x2, 0x9, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x3, 0xa, 0x6, 0xa, 0x6, 0xb, 0x3, 0x1, 0x1, 0xa, 0x6, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x6, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x7, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x39, 0x2, 0x3, 0x2, 0x38, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0xd, 0xa, 0x6, 0xa, 0x6, 0xe, 0x56, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x9, 0x4, 0x1b, 0x9, 0x9, 0x5, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x8, 0x30, 0x8, 0x2, 0x5, 0xf, 0x3, 0x33, 0x40, 0x8, 0xb, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0xb, 0x5, 0x18, 0x7, 0x31, 0x10, 0x2, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1a, 0x46, 0x8a, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0x44c, 0x3, 0xa, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x8f, 0x3, 0x2, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xf, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x21, 0x3c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x4, 0x2a, 0x6, 0x10, 0x1, 0x56, 0x4, 0x65, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0xdf, 0x1, 0x1ab6, 0xa, 0x520d, 0x33, 0x48d, 0x3, 0x37, 0x9, 0x15c, 0x14, 0x2f, 0x4, 0x1, 0xa, 0x1a, 0x8, 0x50, 0x2, 0x6, 0x8, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x5, 0x4, 0xa, 0x6, 0x38, 0x8, 0x44, 0xa, 0xc, 0x18, 0xa, 0x4, 0x26, 0x8, 0x19, 0xb, 0x2, 0xb, 0x1e, 0x6, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x11, 0x1, 0xb, 0x4, 0x2, 0x20, 0x29, 0x6, 0x2, 0x2, 0x2, 0xb, 0x3, 0x1, 0x8, 0x1, 0x1, 0x2, 0xa, 0x2, 0x20, 0x4, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x11, 0x2, 0x8, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x25, 0x1, 0x2, 0x1, 0x4, 0x3, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0x18, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x16d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x87, 0x4, 0x9d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xd, 0x2, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2d, 0x83, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0xc, 0x8, 0x8, 0x9, 0x7, 0x20, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x49, 0x217, 0x1f, 0x181, 0x1, 0x1, 0x36, 0xf, 0x7, 0x4, 0x1e, 0x12, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x4, 0xe, 0x19, 0x7, 0xa, 0x9, 0x24, 0x5, 0x1, 0x9, 0xe, 0x3e, 0x34, 0x9, 0xa, 0x7, 0xa, 0x4a6, 0x2b, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x9, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xd, 0x4, 0xb8c, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0x4060, 0x2, 0x1ffe, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x1, 0x1, 0x3, 0x4, 0x15, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0xba, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x10e, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88c, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInHebrew = RleBitSet!ushort.fromRawArray([0x590, 0x70]);
immutable unicodeTai_Viet = RleBitSet!ushort.fromRawArray([0xaa80, 0x43, 0x18, 0x5]);
immutable unicodeInHanunoo = RleBitSet!ushort.fromRawArray([0x1720, 0x20]);
immutable unicodeOther_Lowercase = RleBitSet!ushort.fromRawArray([0xaa, 0x1, 0xf, 0x1, 0x1f5, 0x9, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x34, 0x1, 0x19b1, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x2b1, 0x1, 0xd, 0x1, 0x10, 0xd, 0xd3, 0x10, 0x350, 0x1a, 0x792, 0x2, 0x7af2, 0x1, 0x87, 0x2]);
immutable unicodeDash = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x55c, 0x1, 0x33, 0x1, 0xe41, 0x1, 0x405, 0x1, 0x809, 0x6, 0x3d, 0x1, 0x27, 0x1, 0xf, 0x1, 0x186, 0x1, 0xc04, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x1e0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xcd90, 0x2, 0x25, 0x1, 0xa, 0x1, 0xa9, 0x1]);
immutable unicodeInSinhala = RleBitSet!ushort.fromRawArray([0xd80, 0x80]);
immutable unicodeInSundanese = RleBitSet!ushort.fromRawArray([0x1b80, 0x40]);
immutable unicodeInEthiopic_Extended_A = RleBitSet!ushort.fromRawArray([0xab00, 0x30]);
immutable unicodeTibetan = RleBitSet!ushort.fromRawArray([0xf00, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0x7, 0x4, 0x2]);
immutable unicodeSamaritan = RleBitSet!ushort.fromRawArray([0x800, 0x2e, 0x2, 0xf]);
immutable unicodeInOptical_Character_Recognition = RleBitSet!ushort.fromRawArray([0x2440, 0x20]);
immutable unicodeInVariation_Selectors = RleBitSet!ushort.fromRawArray([0xfe00, 0x10]);
immutable unicodeInKatakana = RleBitSet!ushort.fromRawArray([0x30a0, 0x60]);
immutable unicodeOld_Italic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x301, 0x1f, 0x1, 0x4]);
immutable unicodeInEnclosed_CJK_Letters_and_Months = RleBitSet!ushort.fromRawArray([0x3200, 0x100]);
immutable unicodeHan = RleBitSet!ushort.fromRawArray([0x2e80, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x2f, 0x1, 0x1, 0x1, 0x19, 0x9, 0xe, 0x4, 0x3c4, 0x19b6, 0x4a, 0x51cd, 0x5933, 0x16e, 0x2, 0x6a, 0xffff, 0x0, 0x527, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInMyanmar = RleBitSet!ushort.fromRawArray([0x1000, 0xa0]);
immutable unicodeSaurashtra = RleBitSet!ushort.fromRawArray([0xa880, 0x45, 0x9, 0xc]);
immutable unicodeLm = RleBitSet!ushort.fromRawArray([0x2b0, 0x12, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x85, 0x1, 0x5, 0x1, 0x1de, 0x1, 0xe6, 0x1, 0xa4, 0x2, 0x10d, 0x2, 0x4, 0x1, 0x1f, 0x1, 0x9, 0x1, 0x3, 0x1, 0x148, 0x1, 0x4d4, 0x1, 0x7f, 0x1, 0x235, 0x1, 0x6da, 0x1, 0x6b, 0x1, 0x263, 0x1, 0x1d0, 0x6, 0xae, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x2b1, 0x1, 0xd, 0x1, 0x10, 0xd, 0xbdf, 0x2, 0xf1, 0x1, 0xbf, 0x1, 0x1d5, 0x1, 0x2b, 0x5, 0x5, 0x1, 0x61, 0x2, 0x5d, 0x3, 0x6f16, 0x1, 0x4e2, 0x6, 0x10e, 0x1, 0x72, 0x1, 0x97, 0x9, 0x50, 0x1, 0x17, 0x1, 0x6f, 0x2, 0x1d5, 0x1, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0x547b, 0x1, 0x2d, 0x2, 0x6ff3, 0xd]);
immutable unicodeInKannada = RleBitSet!ushort.fromRawArray([0xc80, 0x80]);
immutable unicodeMc = RleBitSet!ushort.fromRawArray([0x903, 0x1, 0x37, 0x1, 0x2, 0x3, 0x8, 0x4, 0x1, 0x2, 0x32, 0x2, 0x3a, 0x3, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x2b, 0x1, 0x3a, 0x3, 0x42, 0x1, 0x3a, 0x3, 0x8, 0x1, 0x1, 0x2, 0x35, 0x2, 0x3a, 0x1, 0x1, 0x1, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x66, 0x2, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3d, 0x4, 0x3d, 0x2, 0x3a, 0x1, 0x1, 0x5, 0x2, 0x2, 0x1, 0x2, 0x9, 0x2, 0x2b, 0x2, 0x3a, 0x3, 0x5, 0x3, 0x1, 0x3, 0xa, 0x1, 0x2a, 0x2, 0x4b, 0x3, 0x6, 0x8, 0x12, 0x2, 0x14a, 0x2, 0x3f, 0x1, 0xab, 0x2, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x19, 0x2, 0xa, 0x3, 0x2, 0x7, 0x15, 0x2, 0x2, 0x6, 0x2, 0x1, 0xa, 0x3, 0x719, 0x1, 0x7, 0x8, 0x1, 0x2, 0x15a, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x77, 0x11, 0x7, 0x2, 0x4f, 0x3, 0x39, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0x91, 0x1, 0x30, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x2, 0x3d, 0x1, 0x1e, 0x1, 0x4, 0x2, 0x2, 0x1, 0x1, 0x2, 0x39, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x30, 0x8, 0x8, 0x2, 0xab, 0x1, 0x10, 0x2, 0x133a, 0x2, 0x77f3, 0x2, 0x2, 0x1, 0x58, 0x2, 0x32, 0x10, 0x8e, 0x2, 0x2f, 0x1, 0x30, 0x2, 0x4, 0x2, 0x1, 0x4, 0x6e, 0x2, 0x2, 0x2, 0x18, 0x1, 0x2d, 0x1, 0x6f, 0x1, 0x2, 0x2, 0x5, 0x1, 0xed, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x6413, 0x1, 0x1, 0x1, 0x7f, 0x1, 0x2d, 0x3, 0x4, 0x2, 0x73, 0x1, 0x55, 0x1, 0x30, 0x3, 0x9, 0x2, 0x4eb, 0x1, 0x1, 0x2, 0x6, 0x1, 0x589a, 0x2e, 0x61e6, 0x2, 0x6, 0x6]);
immutable unicodeInLimbu = RleBitSet!ushort.fromRawArray([0x1900, 0x50]);
immutable unicodeLo = RleBitSet!ushort.fromRawArray([0xaa, 0x1, 0xf, 0x1, 0x100, 0x1, 0x4, 0x4, 0xd0, 0x1, 0x33b, 0x1b, 0x5, 0x3, 0x2d, 0x20, 0x1, 0xa, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0x18, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x15, 0x16, 0x2a, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0x10, 0x6, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x6, 0x3b, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x17, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x41, 0x2b, 0x2, 0x14c, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x15, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x28, 0x1, 0x43, 0x23, 0x1, 0x34, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0xb0, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x1e, 0x71, 0x4, 0x1, 0x4, 0x3, 0x2, 0x43e, 0x4, 0xbf7, 0x38, 0x18, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x227, 0x1, 0x35, 0x1, 0x4, 0x56, 0x8, 0x1, 0x1, 0x5a, 0x4, 0x1, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x15, 0x1, 0x477, 0x43, 0x28, 0x8, 0x10c, 0x4, 0x10, 0xa, 0x2, 0x42, 0x1, 0x31, 0x46, 0x115, 0x7, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x4d, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x10, 0x1, 0x6, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x2, 0x3, 0xb, 0x7, 0x1, 0xe, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x43, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x69, 0xa, 0x1, 0x2d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x185, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x11, 0x1, 0x8, 0x36, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x80, 0x4e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0xc91, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x40af, 0x2, 0x3dfe, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeMe = RleBitSet!ushort.fromRawArray([0x488, 0x2, 0x1c53, 0x4, 0x1, 0x3, 0x858b, 0x3]);
immutable unicodeInMeetei_Mayek = RleBitSet!ushort.fromRawArray([0xabc0, 0x40]);
immutable unicodeLt = RleBitSet!ushort.fromRawArray([0x1c5, 0x1, 0x2, 0x1, 0x2, 0x1, 0x26, 0x1, 0x1d95, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x1, 0xf, 0x1, 0x2f, 0x1]);
immutable unicodeInKhmer = RleBitSet!ushort.fromRawArray([0x1780, 0x80]);
immutable unicodeInEthiopic_Extended = RleBitSet!ushort.fromRawArray([0x2d80, 0x60]);
immutable unicodeInVedic_Extensions = RleBitSet!ushort.fromRawArray([0x1cd0, 0x30]);
immutable unicodeMn = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x113, 0x5, 0x109, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x2bf, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x2d0, 0xd, 0x4, 0x1, 0x3, 0xc, 0xbfe, 0x3, 0x8d, 0x1, 0x60, 0x20, 0x22a, 0x4, 0x6b, 0x2, 0x75d4, 0x1, 0x4, 0xa, 0x21, 0x1, 0x50, 0x2, 0x110, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x2e1, 0x10, 0x10, 0x7, 0x3d6, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x4, 0x61d4, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2ec7, 0xf0]);
immutable unicodeNd = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x626, 0xa, 0x86, 0xa, 0xc6, 0xa, 0x19c, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0xe0, 0xa, 0x76, 0xa, 0x46, 0xa, 0x116, 0xa, 0x46, 0xa, 0x746, 0xa, 0x26, 0xa, 0x12c, 0xa, 0x80, 0xa, 0xa6, 0xa, 0x6, 0xa, 0xb6, 0xa, 0x56, 0xa, 0x86, 0xa, 0x6, 0xa, 0x89c6, 0xa, 0x2a6, 0xa, 0x26, 0xa, 0xc6, 0xa, 0x76, 0xa, 0x196, 0xa, 0x5316, 0xa, 0x586, 0xa, 0xbbc, 0xa, 0x80, 0xa, 0x3c, 0xa, 0x90, 0xa, 0x4e6, 0xa, 0xc104, 0x32]);
immutable unicodeBamum = RleBitSet!ushort.fromRawArray([0xa6a0, 0x58, 0xc108, 0x239]);
immutable unicodeJavanese = RleBitSet!ushort.fromRawArray([0xa980, 0x4e, 0x1, 0xb, 0x4, 0x2]);
immutable unicodeTifinagh = RleBitSet!ushort.fromRawArray([0x2d30, 0x38, 0x7, 0x2, 0xe, 0x1]);
immutable unicodeInHalfwidth_and_Fullwidth_Forms = RleBitSet!ushort.fromRawArray([0xff00, 0xf0]);
immutable unicodeInDevanagari_Extended = RleBitSet!ushort.fromRawArray([0xa8e0, 0x20]);
immutable unicodeInIdeographic_Description_Characters = RleBitSet!ushort.fromRawArray([0x2ff0, 0x10]);
immutable unicodeNl = RleBitSet!ushort.fromRawArray([0x16ee, 0x3, 0xa6f, 0x23, 0x2, 0x4, 0xe7e, 0x1, 0x19, 0x9, 0xe, 0x3, 0x76ab, 0xa, 0x5a50, 0x35, 0x1cc, 0x1, 0x8, 0x1, 0x86, 0x5, 0x202a, 0x63]);
immutable unicodeInHangul_Compatibility_Jamo = RleBitSet!ushort.fromRawArray([0x3130, 0x60]);
immutable unicodeNo = RleBitSet!ushort.fromRawArray([0xb2, 0x2, 0x5, 0x1, 0x2, 0x3, 0x935, 0x6, 0x178, 0x6, 0x78, 0x3, 0x85, 0x7, 0xf1, 0x6, 0x1b4, 0xa, 0x435, 0x14, 0x473, 0xa, 0x1e0, 0x1, 0x695, 0x1, 0x3, 0x6, 0x6, 0xa, 0xc6, 0x10, 0x29, 0x1, 0x2d6, 0x3c, 0x4e, 0x16, 0x276, 0x1e, 0x569, 0x1, 0x494, 0x4, 0x8a, 0xa, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0x7570, 0x6, 0x58d1, 0x2d, 0x41, 0x4, 0x11, 0x1, 0x195, 0x4, 0x534, 0x8, 0xb6, 0x6, 0x124, 0x8, 0x35, 0x2, 0xd9, 0x8, 0x18, 0x8, 0x2e0, 0x1f, 0x1d3, 0x14, 0xc2fa, 0x12, 0x1d8e, 0xb]);
immutable unicodeInOriya = RleBitSet!ushort.fromRawArray([0xb00, 0x80]);
immutable unicodeLogical_Order_Exception = RleBitSet!ushort.fromRawArray([0xe40, 0x5, 0x7b, 0x5, 0x9bf0, 0x2, 0x2, 0x1, 0x1, 0x2]);
immutable unicodeCased = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0xc3, 0x1, 0x4, 0x4, 0xd0, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2a, 0x4, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0xa, 0x27, 0xb18, 0x26, 0x1, 0x1, 0x5, 0x1, 0xc32, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x6, 0x4, 0x1, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x20, 0x3, 0x2, 0x331, 0x34, 0x716, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x7912, 0x2e, 0x12, 0x18, 0x8a, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x3, 0x5305, 0x7, 0xc, 0x5, 0x409, 0x1a, 0x6, 0x1a, 0x4a5, 0x50, 0xcfb0, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8]);
immutable unicodeInscriptional_Parthian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb41, 0x16, 0x2, 0x8]);
immutable unicodeSyloti_Nagri = RleBitSet!ushort.fromRawArray([0xa800, 0x2c]);
immutable unicodeInBengali = RleBitSet!ushort.fromRawArray([0x980, 0x80]);
immutable unicodeInTagalog = RleBitSet!ushort.fromRawArray([0x1700, 0x20]);
immutable unicodeInMyanmar_Extended_A = RleBitSet!ushort.fromRawArray([0xaa60, 0x20]);
immutable unicodePc = RleBitSet!ushort.fromRawArray([0x5f, 0x1, 0x1fdf, 0x2, 0x13, 0x1, 0xddde, 0x2, 0x18, 0x3, 0xef, 0x1]);
immutable unicodeInCyrillic_Extended_A = RleBitSet!ushort.fromRawArray([0x2de0, 0x20]);
immutable unicodePd = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x55c, 0x1, 0x33, 0x1, 0xe41, 0x1, 0x405, 0x1, 0x809, 0x6, 0xe01, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x1e0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xcd90, 0x2, 0x25, 0x1, 0xa, 0x1, 0xa9, 0x1]);
immutable unicodeInCyrillic_Extended_B = RleBitSet!ushort.fromRawArray([0xa640, 0x60]);
immutable unicodePe = RleBitSet!ushort.fromRawArray([0x29, 0x1, 0x33, 0x1, 0x1f, 0x1, 0xebd, 0x1, 0x1, 0x1, 0x75e, 0x1, 0x9a9, 0x1, 0x37, 0x1, 0xf, 0x1, 0x29b, 0x1, 0x43e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x194, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x425, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1df, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0xcd1f, 0x1, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0xaa, 0x1, 0x33, 0x1, 0x1f, 0x1, 0x2, 0x1, 0x2, 0x1]);
immutable unicodeHanunoo = RleBitSet!ushort.fromRawArray([0x1720, 0x15]);
immutable unicodePf = RleBitSet!ushort.fromRawArray([0xbb, 0x1, 0x1f5d, 0x1, 0x3, 0x1, 0x1c, 0x1, 0xdc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1]);
immutable unicodePi = RleBitSet!ushort.fromRawArray([0xab, 0x1, 0x1f6c, 0x1, 0x2, 0x2, 0x2, 0x1, 0x19, 0x1, 0xdc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1]);
immutable unicodeSinhala = RleBitSet!ushort.fromRawArray([0xd82, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3]);
immutable unicodeInJavanese = RleBitSet!ushort.fromRawArray([0xa980, 0x60]);
immutable unicodeInTifinagh = RleBitSet!ushort.fromRawArray([0x2d30, 0x50]);
immutable unicodeInGeometric_Shapes = RleBitSet!ushort.fromRawArray([0x25a0, 0x60]);
immutable unicodeInArabic_Presentation_Forms_A = RleBitSet!ushort.fromRawArray([0xfb50, 0x2b0]);
immutable unicodeInArabic_Presentation_Forms_B = RleBitSet!ushort.fromRawArray([0xfe70, 0x90]);
immutable unicodePo = RleBitSet!ushort.fromRawArray([0x21, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x44, 0x1, 0x5, 0x1, 0xe, 0x2, 0x7, 0x1, 0x2be, 0x1, 0x8, 0x1, 0x1d2, 0x6, 0x29, 0x1, 0x36, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2c, 0x2, 0x14, 0x2, 0x1, 0x2, 0xd, 0x1, 0x2, 0x2, 0x4a, 0x4, 0x66, 0x1, 0x2b, 0xe, 0xe9, 0x3, 0x36, 0xf, 0x1f, 0x1, 0x105, 0x2, 0xa, 0x1, 0x17f, 0x1, 0x303, 0x1, 0x5a, 0x1, 0xa, 0x2, 0xa8, 0xf, 0x1, 0x1, 0x70, 0x1, 0x4a, 0x5, 0x4, 0x2, 0x6f, 0x6, 0xab, 0x1, 0x264, 0x9, 0x304, 0x2, 0x7c, 0x3, 0x47, 0x2, 0x9d, 0x3, 0x1, 0x3, 0x25, 0x6, 0x1, 0x4, 0x139, 0x2, 0xd8, 0x2, 0x80, 0x7, 0x1, 0x6, 0xac, 0x7, 0x9b, 0x4, 0x3b, 0x5, 0x3e, 0x2, 0x40, 0x8, 0xb, 0x1, 0x342, 0x2, 0x8, 0x8, 0x8, 0x9, 0x2, 0x4, 0x2, 0x3, 0x3, 0xb, 0x1, 0x1, 0x1, 0xa, 0xc9a, 0x4, 0x1, 0x2, 0x70, 0x1, 0x8f, 0x2, 0x4, 0x3, 0x2, 0x1, 0x2, 0x9, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0xa, 0x5, 0x1, 0xa, 0x1c7, 0x3, 0x39, 0x1, 0xbd, 0x1, 0x7402, 0x2, 0x10d, 0x3, 0x63, 0x1, 0xa, 0x1, 0x73, 0x6, 0x17c, 0x4, 0x56, 0x2, 0x28, 0x3, 0x33, 0x2, 0x2f, 0x1, 0x61, 0xd, 0x10, 0x2, 0x7c, 0x4, 0x7e, 0x2, 0x10, 0x2, 0xf9, 0x1, 0x5224, 0x7, 0x2, 0x1, 0x16, 0x1, 0x14, 0x2, 0x2, 0x4, 0x3, 0x3, 0x1, 0x4, 0x7, 0x3, 0x6, 0x1, 0x1, 0x2, 0x95, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x24, 0x1, 0x2, 0x2, 0x19a, 0x3, 0x29c, 0x1, 0x30, 0x1, 0x486, 0x1, 0xc7, 0x1, 0x1f, 0x1, 0x110, 0x9, 0x26, 0x1, 0xb9, 0x7, 0x507, 0x7, 0x6d, 0x2, 0x1, 0x4, 0x7e, 0x4, 0x81, 0x4, 0x12a7, 0x4]);
immutable unicodeTerminal_Punctuation = RleBitSet!ushort.fromRawArray([0x21, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x33e, 0x1, 0x8, 0x1, 0x201, 0x1, 0x39, 0x1, 0x48, 0x1, 0xe, 0x1, 0x3, 0x1, 0xb4, 0x1, 0x2b, 0xb, 0x1, 0x1, 0xeb, 0x2, 0x36, 0xf, 0x1f, 0x1, 0x105, 0x2, 0x4f4, 0x2, 0xac, 0x1, 0x4, 0x6, 0x137, 0x2, 0x315, 0x8, 0x304, 0x2, 0x7c, 0x3, 0xe6, 0x3, 0x3, 0x1, 0x27, 0x4, 0x2, 0x2, 0x13a, 0x2, 0x162, 0x4, 0xae, 0x2, 0x1, 0x3, 0xdb, 0x5, 0x3e, 0x2, 0x3bc, 0x2, 0x9, 0x3, 0xde4, 0x1, 0x1d2, 0x2, 0x74fb, 0x2, 0x10d, 0x3, 0xe3, 0x5, 0x17e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x97, 0x3, 0x93, 0x3, 0x7f, 0x1, 0x10, 0x2, 0xf9, 0x1, 0x5264, 0x3, 0x1, 0x4, 0xa9, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x41, 0x1, 0x2, 0x1, 0x43a, 0x1, 0x30, 0x1, 0x486, 0x1, 0xc7, 0x1, 0x21a, 0x6, 0x507, 0x7, 0x70, 0x4, 0x7f, 0x3, 0x81, 0x2, 0x12a9, 0x4]);
immutable unicodePs = RleBitSet!ushort.fromRawArray([0x28, 0x1, 0x32, 0x1, 0x1f, 0x1, 0xebe, 0x1, 0x1, 0x1, 0x75e, 0x1, 0x97e, 0x1, 0x3, 0x1, 0x26, 0x1, 0x37, 0x1, 0xf, 0x1, 0x29b, 0x1, 0x43e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x194, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x425, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1df, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0xcd20, 0x1, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0xaa, 0x1, 0x32, 0x1, 0x1f, 0x1, 0x3, 0x1, 0x2, 0x1]);
immutable unicodeInSpacing_Modifier_Letters = RleBitSet!ushort.fromRawArray([0x2b0, 0x50]);
immutable unicodeOther_Alphabetic = RleBitSet!ushort.fromRawArray([0x345, 0x1, 0x26a, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0xd, 0x1, 0x7, 0x10, 0x1, 0x65, 0x7, 0x4, 0x4, 0x2, 0x2, 0x4, 0x1, 0x23, 0x1, 0x1e, 0x10, 0x66, 0xb, 0x65, 0x2, 0x3, 0x9, 0x1, 0x3, 0x1, 0x4, 0xb7, 0x6, 0x6, 0xf, 0x1, 0x4, 0x36, 0x2, 0x2, 0xf, 0x1, 0x2, 0x5, 0x3, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0xa, 0x1, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x3, 0x3a, 0x8, 0x1, 0x3, 0x1, 0x2, 0x15, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x5, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0xa, 0x1, 0xa, 0x2, 0x1e, 0x2, 0x4b, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0x3d, 0x1, 0x2, 0x7, 0x12, 0x1, 0x63, 0x1, 0x2, 0x6, 0x1, 0x2, 0x10, 0x1, 0xa3, 0x11, 0xb, 0xb, 0x1, 0x24, 0x6e, 0xc, 0x1, 0x1, 0x2, 0x4, 0x17, 0x4, 0x4, 0x3, 0x1, 0x1, 0x4, 0x2, 0x8, 0x4, 0xd, 0x5, 0x15, 0x2, 0x2c1, 0x1, 0x3b2, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x42, 0x13, 0xe0, 0x1, 0x76, 0xc, 0x4, 0x9, 0x77, 0x11, 0x7, 0x2, 0x4d, 0x5, 0x39, 0xa, 0x2, 0x14, 0x8b, 0x5, 0x30, 0xf, 0x3c, 0x3, 0x1e, 0x9, 0x2, 0x2, 0x39, 0xb, 0x32, 0x12, 0xbc, 0x2, 0x7c2, 0x34, 0x8f6, 0x20, 0x7874, 0x8, 0x23, 0x1, 0x183, 0x5, 0x58, 0x2, 0x32, 0x10, 0x62, 0x5, 0x1c, 0xc, 0x2d, 0x4, 0x30, 0xc, 0x69, 0xe, 0xc, 0x1, 0x8, 0x2, 0x62, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x1, 0x2c, 0x5, 0x5, 0x1, 0xed, 0x8, 0x4f33, 0x1, 0xee2, 0x3, 0x1, 0x2, 0x5, 0x4, 0x5f0, 0x3, 0x35, 0xe, 0x3c, 0x1, 0x2d, 0x9, 0x47, 0x3, 0x24, 0xc, 0x4d, 0x3, 0x30, 0xd, 0x4eb, 0xb, 0x589b, 0x2e]);
immutable unicodeLepcha = RleBitSet!ushort.fromRawArray([0x1c00, 0x38, 0x3, 0xf, 0x3, 0x3]);
immutable unicodeKayah_Li = RleBitSet!ushort.fromRawArray([0xa900, 0x30]);
immutable unicodeNko = RleBitSet!ushort.fromRawArray([0x7c0, 0x3b]);
immutable unicodeInLao = RleBitSet!ushort.fromRawArray([0xe80, 0x80]);
immutable unicodeInNKo = RleBitSet!ushort.fromRawArray([0x7c0, 0x40]);
immutable unicodeInGreek_and_Coptic = RleBitSet!ushort.fromRawArray([0x370, 0x90]);
immutable unicodePhags_Pa = RleBitSet!ushort.fromRawArray([0xa840, 0x38]);
immutable unicodeCypriot = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x801, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x1]);
immutable unicodeInModifier_Tone_Letters = RleBitSet!ushort.fromRawArray([0xa700, 0x20]);
immutable unicodeMyanmar = RleBitSet!ushort.fromRawArray([0x1000, 0xa0, 0x99c0, 0x1c]);
immutable unicodeSc = RleBitSet!ushort.fromRawArray([0x24, 0x1, 0x7d, 0x4, 0x4e9, 0x1, 0x7b, 0x1, 0x3e6, 0x2, 0x7, 0x1, 0xf5, 0x1, 0x107, 0x1, 0x245, 0x1, 0x99b, 0x1, 0x8c4, 0x1a, 0x877e, 0x1, 0x55c3, 0x1, 0x6c, 0x1, 0x9a, 0x1, 0xdb, 0x2, 0x3, 0x2]);
immutable unicodeInPrivate_Use_Area = RleBitSet!ushort.fromRawArray([0xe000, 0x1900]);
immutable unicodeInPhonetic_Extensions = RleBitSet!ushort.fromRawArray([0x1d00, 0x80]);
immutable unicodeInCombining_Diacritical_Marks = RleBitSet!ushort.fromRawArray([0x300, 0x70]);
immutable unicodeCham = RleBitSet!ushort.fromRawArray([0xaa00, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x4]);
immutable unicodeInArabic_Supplement = RleBitSet!ushort.fromRawArray([0x750, 0x30]);
immutable unicodeSk = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x3, 0x1, 0x209, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0xe, 0x2, 0x1c37, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0x109c, 0x2, 0x7663, 0x17, 0x9, 0x2, 0x67, 0x2, 0x5427, 0x10, 0x37c, 0x1, 0x1, 0x1, 0xa2, 0x1]);
immutable unicodeImperial_Aramaic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x841, 0x16, 0x1, 0x9]);
immutable unicodeSm = RleBitSet!ushort.fromRawArray([0x2b, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x2fe, 0x1, 0x20f, 0x3, 0x1a3b, 0x1, 0xd, 0x1, 0x27, 0x3, 0xd, 0x3, 0x8b, 0x1, 0x27, 0x5, 0x6, 0x1, 0x44, 0x5, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x1d5, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x150, 0x5, 0x2, 0x1f, 0xa, 0x10, 0x100, 0x83, 0x16, 0x3f, 0x4, 0x20, 0x2, 0x102, 0x30, 0x15, 0x2, 0x6, 0xcfdc, 0x1, 0x338, 0x1, 0x1, 0x3, 0xa4, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x83, 0x1, 0x6, 0x4, 0xd6d4, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x172c, 0x2]);
immutable unicodeKharoshthi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xa01, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9]);
immutable unicodeInCombining_Half_Marks = RleBitSet!ushort.fromRawArray([0xfe20, 0x10]);
immutable unicodeSo = RleBitSet!ushort.fromRawArray([0xa6, 0x1, 0x2, 0x1, 0x4, 0x1, 0x1, 0x1, 0x3d1, 0x1, 0x18b, 0x2, 0xce, 0x1, 0xa, 0x1, 0x13, 0x2, 0xf7, 0x1, 0x203, 0x1, 0x175, 0x1, 0x82, 0x6, 0x1, 0x1, 0x84, 0x1, 0xf9, 0x1, 0x187, 0x3, 0xf, 0x1, 0x1, 0x3, 0x2, 0x6, 0x14, 0x1, 0x1, 0x1, 0x1, 0x1, 0x85, 0x8, 0x1, 0x6, 0x1, 0x2, 0x5, 0x4, 0xc5, 0x2, 0x2f0, 0xa, 0x5a6, 0x1, 0x9d, 0x22, 0x161, 0xa, 0x9, 0x9, 0x583, 0x2, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0xe, 0x1, 0x1, 0x2, 0x1, 0x1, 0x45, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x7, 0x2, 0x51, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x12, 0xc, 0x27, 0x19, 0xb, 0x51, 0x4e, 0x16, 0xb7, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x90, 0x1, 0x67, 0x2c, 0x2c, 0x40, 0x100, 0x200, 0x30, 0x15, 0x2, 0x9, 0xa, 0x18b, 0x6, 0x195, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x8, 0x1, 0xd, 0x2, 0xc, 0x1, 0x15, 0x2, 0x6, 0x2, 0x150, 0x2, 0x4, 0xa, 0x20, 0x24, 0x1c, 0x1f, 0xb, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0x3f, 0x1, 0x100, 0x19c0, 0x40, 0x5690, 0x37, 0x361, 0x4, 0xa, 0x2, 0x1, 0x1, 0x23d, 0x3, 0x5383, 0x1, 0x1e6, 0x1, 0x3, 0x1, 0x4, 0x2, 0xd, 0x2, 0x139, 0x9, 0x39, 0x11, 0x6, 0xc, 0x34, 0x2d, 0xce03, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x5, 0x3, 0x16, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0xba, 0x57, 0x1ca9, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x30, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74]);
immutable unicodeInTai_Le = RleBitSet!ushort.fromRawArray([0x1950, 0x30]);
immutable unicodeInMandaic = RleBitSet!ushort.fromRawArray([0x840, 0x20]);
immutable unicodeCase_Ignorable = RleBitSet!ushort.fromRawArray([0x27, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x47, 0x1, 0x4, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x2, 0x1f7, 0xc0, 0x4, 0x2, 0x4, 0x1, 0x9, 0x2, 0x1, 0x1, 0xfb, 0x7, 0xcf, 0x1, 0x37, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2c, 0x1, 0xb, 0x5, 0xb, 0xb, 0x25, 0x1, 0xa, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0xa, 0x1, 0x4, 0x21, 0x1, 0x1, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x4, 0x1, 0x1b, 0x18, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0xd, 0x1, 0xf, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xb, 0x9, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0x9, 0x1, 0x1, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x5e, 0x1, 0x260, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x3, 0x1, 0x5, 0x1, 0x2d, 0x3, 0x35, 0x1, 0x65, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x27, 0x1, 0x58, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x40, 0x6, 0x52, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0xd, 0x1, 0x22, 0x4c, 0x15, 0x4, 0x1bd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0xc, 0x5, 0x8, 0x2, 0xa, 0x1, 0x2, 0x1, 0x2, 0x5, 0x31, 0x5, 0x5, 0x6, 0x1, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0x21, 0xb8b, 0x2, 0x71, 0x3, 0x7d, 0x1, 0xf, 0x1, 0x60, 0x20, 0x2f, 0x1, 0x1d5, 0x1, 0x24, 0x4, 0x3, 0x5, 0x5, 0x1, 0x5d, 0x6, 0x5d, 0x3, 0x6f16, 0x1, 0x4e2, 0x6, 0x10e, 0x1, 0x62, 0x4, 0x1, 0xa, 0x1, 0x1, 0x1f, 0x1, 0x50, 0x2, 0xe, 0x22, 0x4e, 0x1, 0x17, 0x3, 0x6d, 0x2, 0x8, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x12, 0x1, 0x59, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x23, 0x1, 0x3f, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1b, 0x1, 0xe, 0x2, 0x5, 0x2, 0x1, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x93, 0x10, 0x23e, 0x10, 0x3, 0x1, 0xc, 0x7, 0x2b, 0x1, 0x2, 0x1, 0xa9, 0x1, 0x7, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x15, 0x3, 0x201, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x42, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x11, 0x61c7, 0x3, 0x9, 0x10, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2dc8, 0x1, 0x1e, 0x60, 0x80, 0xf0]);
immutable unicodeInLepcha = RleBitSet!ushort.fromRawArray([0x1c00, 0x50]);
immutable unicodeCanadian_Aboriginal = RleBitSet!ushort.fromRawArray([0x1400, 0x280, 0x230, 0x46]);
immutable unicodeInGreek_Extended = RleBitSet!ushort.fromRawArray([0x1f00, 0x100]);
immutable unicodeInCJK_Unified_Ideographs = RleBitSet!ushort.fromRawArray([0x4e00, 0x5200]);
immutable unicodeIDS_Trinary_Operator = RleBitSet!ushort.fromRawArray([0x2ff2, 0x2]);
immutable unicodeInMiscellaneous_Symbols = RleBitSet!ushort.fromRawArray([0x2600, 0x100]);
immutable unicodeInLatin_Extended_Additional = RleBitSet!ushort.fromRawArray([0x1e00, 0x100]);
immutable unicodeChakma = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1101, 0x35, 0x1, 0xe]);
immutable unicodeRadical = RleBitSet!ushort.fromRawArray([0x2e80, 0x1a, 0x1, 0x59, 0xc, 0xd6]);
immutable unicodeMongolian = RleBitSet!ushort.fromRawArray([0x1800, 0x2, 0x2, 0x1, 0x1, 0x9, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b]);
immutable unicodeInVai = RleBitSet!ushort.fromRawArray([0xa500, 0x140]);
immutable unicodeLatin = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1c1, 0x27, 0x5, 0x1a1b, 0x26, 0x6, 0x31, 0x5, 0x4, 0x5, 0xd, 0x1, 0x46, 0x41, 0x100, 0x171, 0x1, 0xd, 0x1, 0x10, 0xd, 0x8d, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0xad7, 0x20, 0x7aa2, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x8, 0x5300, 0x7, 0x41a, 0x1a, 0x6, 0x1a]);
immutable unicodeTagalog = RleBitSet!ushort.fromRawArray([0x1700, 0xd, 0x1, 0x7]);
immutable unicodeRejang = RleBitSet!ushort.fromRawArray([0xa930, 0x24, 0xb, 0x1]);
immutable unicodeInCombining_Diacritical_Marks_for_Symbols = RleBitSet!ushort.fromRawArray([0x20d0, 0x30]);
immutable unicodeInSupplemental_Mathematical_Operators = RleBitSet!ushort.fromRawArray([0x2a00, 0x100]);
immutable unicodeInCham = RleBitSet!ushort.fromRawArray([0xaa00, 0x60]);
immutable unicodeAvestan = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb01, 0x36, 0x3, 0x7]);
immutable unicodeInMiscellaneous_Mathematical_Symbols_A = RleBitSet!ushort.fromRawArray([0x27c0, 0x30]);
immutable unicodeInMiscellaneous_Mathematical_Symbols_B = RleBitSet!ushort.fromRawArray([0x2980, 0x80]);
immutable unicodeInTelugu = RleBitSet!ushort.fromRawArray([0xc00, 0x80]);
immutable unicodeLimbu = RleBitSet!ushort.fromRawArray([0x1900, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0xc]);
immutable unicodeInGeneral_Punctuation = RleBitSet!ushort.fromRawArray([0x2000, 0x70]);
immutable unicodeUnified_Ideograph = RleBitSet!ushort.fromRawArray([0x3400, 0x19b6, 0x4a, 0x51cd, 0x5a41, 0x2, 0x1, 0x1, 0x1, 0x2, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0xffff, 0x0, 0x5d7, 0xa6d7, 0x29, 0x1035, 0xb, 0xde]);
immutable unicodeInBuhid = RleBitSet!ushort.fromRawArray([0x1740, 0x20]);
immutable unicodeKhmer = RleBitSet!ushort.fromRawArray([0x1780, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x1e6, 0x20]);
immutable unicodeXID_Continue = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x3, 0x3, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x1, 0x5, 0x2, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x205, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x2, 0x2, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x8b, 0x6, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x6, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x21, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x88, 0x1, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x2163, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0x1bb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x6ed, 0xf0]);
immutable unicodeInLatin_Extended_A = RleBitSet!ushort.fromRawArray([0x100, 0x80]);
immutable unicodeInLatin_Extended_B = RleBitSet!ushort.fromRawArray([0x180, 0xd0]);
immutable unicodeInLatin_Extended_C = RleBitSet!ushort.fromRawArray([0x2c60, 0x20]);
immutable unicodeInLatin_Extended_D = RleBitSet!ushort.fromRawArray([0xa720, 0xe0]);
immutable unicodeInCJK_Compatibility = RleBitSet!ushort.fromRawArray([0x3300, 0x100]);
immutable unicodeBuginese = RleBitSet!ushort.fromRawArray([0x1a00, 0x1c, 0x2, 0x2]);
immutable unicodeInGeorgian_Supplement = RleBitSet!ushort.fromRawArray([0x2d00, 0x30]);
immutable unicodeDefault_Ignorable_Code_Point = RleBitSet!ushort.fromRawArray([0xad, 0x1, 0x2a1, 0x1, 0xe0f, 0x2, 0x653, 0x2, 0x55, 0x3, 0x7fd, 0x5, 0x1a, 0x5, 0x31, 0x10, 0x10f4, 0x1, 0xcc9b, 0x10, 0xef, 0x1, 0xa0, 0x1, 0x4f, 0x9, 0xd17a, 0x8, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2e91, 0x1000]);
immutable unicodeInCJK_Strokes = RleBitSet!ushort.fromRawArray([0x31c0, 0x30]);
immutable unicodeVai = RleBitSet!ushort.fromRawArray([0xa500, 0x12c]);
immutable unicodeHangul = RleBitSet!ushort.fromRawArray([0x1100, 0x100, 0x1e2e, 0x2, 0x101, 0x5e, 0x71, 0x1f, 0x41, 0x1f, 0x76e1, 0x1d, 0x283, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x27a4, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3]);
immutable unicodeInRejang = RleBitSet!ushort.fromRawArray([0xa930, 0x30]);
immutable unicodeInMiscellaneous_Technical = RleBitSet!ushort.fromRawArray([0x2300, 0x100]);
immutable unicodeHyphen = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x7f, 0x1, 0x4dc, 0x1, 0x127b, 0x1, 0x809, 0x2, 0xe05, 0x1, 0x2e3, 0x1, 0xcd67, 0x1, 0xa9, 0x1, 0x57, 0x1]);
immutable unicodeThai = RleBitSet!ushort.fromRawArray([0xe01, 0x3a, 0x5, 0x1c]);
immutable unicodeSundanese = RleBitSet!ushort.fromRawArray([0x1b80, 0x40, 0x100, 0x8]);
immutable unicodeInRunic = RleBitSet!ushort.fromRawArray([0x16a0, 0x60]);
immutable unicodeDiacritic = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x2, 0x2, 0x1f7, 0x9f, 0x1, 0x8, 0x5, 0x6, 0x11, 0x2, 0x4, 0x1, 0x9, 0x2, 0xfd, 0x5, 0xd1, 0x1, 0x37, 0x11, 0x1, 0x1b, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x86, 0x8, 0x4, 0x2, 0x86, 0x2, 0x4, 0x2, 0x3, 0x3, 0x43, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x22, 0x2, 0xca, 0x1b, 0x3d, 0x1, 0x10, 0x1, 0x3, 0x4, 0x1c, 0x1, 0x4a, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x7c, 0x6, 0x1, 0x1, 0x79, 0x5, 0x4b, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x42, 0x3, 0x1, 0x2, 0x3e, 0x1, 0x70, 0x1, 0x1, 0x2, 0x4c, 0x7, 0x1, 0x1, 0xa, 0x2, 0x72d, 0xb, 0x9, 0x1, 0x15b, 0x3, 0x139, 0x8, 0x2, 0x1, 0xb4, 0x1, 0xf, 0x1, 0x26, 0x9, 0x36, 0x2, 0x8a, 0x2, 0x40, 0x6, 0x52, 0x19, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0x59, 0xc, 0x2d, 0x3, 0x1bd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0xcf0, 0x3, 0x13d, 0x1, 0x1fa, 0x6, 0x69, 0x4, 0x5f, 0x1, 0x7572, 0x1, 0xc, 0x2, 0x1, 0x1, 0x70, 0x2, 0x25, 0xb, 0x66, 0x1, 0x6f, 0x2, 0xca, 0x1, 0x1b, 0x12, 0x39, 0x4, 0x24, 0x1, 0x5f, 0x1, 0xc, 0x1, 0xba, 0x1, 0x43, 0x4, 0x33, 0x1, 0xf5, 0x2, 0x4f30, 0x1, 0x301, 0x7, 0x117, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x10d5, 0x2, 0x78, 0x2, 0x8b, 0x1, 0x4f5, 0x2, 0x58d7, 0x11, 0x61c7, 0x3, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4]);
immutable unicodeYi = RleBitSet!ushort.fromRawArray([0xa000, 0x48d, 0x3, 0x37]);
immutable unicodeInAlphabetic_Presentation_Forms = RleBitSet!ushort.fromRawArray([0xfb00, 0x50]);
immutable unicodeExtender = RleBitSet!ushort.fromRawArray([0xb7, 0x1, 0x218, 0x2, 0x36e, 0x1, 0x1b9, 0x1, 0x64b, 0x1, 0x7f, 0x1, 0x943, 0x1, 0x38, 0x1, 0x263, 0x1, 0x18e, 0x1, 0x44, 0x1, 0x1389, 0x1, 0x2b, 0x5, 0x67, 0x2, 0x5d, 0x3, 0x6f16, 0x1, 0x5f6, 0x1, 0x3c2, 0x1, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0x547b, 0x1]);
immutable unicodeGlagolitic = RleBitSet!ushort.fromRawArray([0x2c00, 0x2f, 0x1, 0x2f]);
immutable unicodeInSuperscripts_and_Subscripts = RleBitSet!ushort.fromRawArray([0x2070, 0x30]);
immutable unicodeInMalayalam = RleBitSet!ushort.fromRawArray([0xd00, 0x80]);
immutable unicodeJoin_Control = RleBitSet!ushort.fromRawArray([0x200c, 0x2]);
immutable unicodeInBatak = RleBitSet!ushort.fromRawArray([0x1bc0, 0x40]);
immutable unicodeThaana = RleBitSet!ushort.fromRawArray([0x780, 0x32]);
immutable unicodeSoft_Dotted = RleBitSet!ushort.fromRawArray([0x69, 0x2, 0xc4, 0x1, 0x119, 0x1, 0x1e, 0x1, 0x34, 0x1, 0x14, 0x1, 0x140, 0x1, 0x62, 0x1, 0x1, 0x1, 0x1909, 0x1, 0x33, 0x1, 0xd, 0x1, 0x3, 0x1, 0x84, 0x1, 0x9d, 0x1, 0x1a5, 0x1, 0xd6, 0x2, 0xb32, 0x1, 0xffff, 0x0, 0xa7a6, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2]);
immutable unicodeBraille = RleBitSet!ushort.fromRawArray([0x2800, 0x100]);
immutable unicodeInGurmukhi = RleBitSet!ushort.fromRawArray([0xa00, 0x80]);
immutable unicodeMandaic = RleBitSet!ushort.fromRawArray([0x840, 0x1c, 0x2, 0x1]);
immutable unicodeInUnified_Canadian_Aboriginal_Syllabics = RleBitSet!ushort.fromRawArray([0x1400, 0x280]);
immutable unicodeInDingbats = RleBitSet!ushort.fromRawArray([0x2700, 0xc0]);
immutable unicodeZl = RleBitSet!ushort.fromRawArray([0x2028, 0x1]);
immutable unicodeInBuginese = RleBitSet!ushort.fromRawArray([0x1a00, 0x20]);
immutable unicodeInSaurashtra = RleBitSet!ushort.fromRawArray([0xa880, 0x60]);
immutable unicodeInCJK_Symbols_and_Punctuation = RleBitSet!ushort.fromRawArray([0x3000, 0x40]);
immutable unicodeInKangxi_Radicals = RleBitSet!ushort.fromRawArray([0x2f00, 0xe0]);
immutable unicodeZp = RleBitSet!ushort.fromRawArray([0x2029, 0x1]);
immutable unicodeHex_Digit = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x6, 0x1a, 0x6, 0xfea9, 0xa, 0x7, 0x6, 0x1a, 0x6]);
immutable unicodeZs = RleBitSet!ushort.fromRawArray([0x20, 0x1, 0x7f, 0x1, 0x15df, 0x1, 0x18d, 0x1, 0x7f1, 0xb, 0x24, 0x1, 0x2f, 0x1, 0xfa0, 0x1]);
immutable unicodeInThai = RleBitSet!ushort.fromRawArray([0xe00, 0x80]);
immutable unicodeDevanagari = RleBitSet!ushort.fromRawArray([0x900, 0x51, 0x2, 0x11, 0x2, 0x12, 0x1, 0x7, 0x9f60, 0x1c]);
immutable unicodeInArrows = RleBitSet!ushort.fromRawArray([0x2190, 0x70]);
immutable unicodeEthiopic = RleBitSet!ushort.fromRawArray([0x1200, 0x49, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x19e6, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x7d22, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7]);
immutable unicodeInCurrency_Symbols = RleBitSet!ushort.fromRawArray([0x20a0, 0x30]);
immutable unicodeGreek = RleBitSet!ushort.fromRawArray([0x370, 0x4, 0x1, 0x3, 0x2, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x3f, 0xe, 0x10, 0x1926, 0x5, 0x32, 0x5, 0x4, 0x5, 0x54, 0x1, 0x140, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x127, 0x1, 0xe019, 0x4b, 0xd075, 0x46]);
immutable unicodeOl_Chiki = RleBitSet!ushort.fromRawArray([0x1c50, 0x30]);
immutable unicodeID_Start = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x81, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x226, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x4, 0x5, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x42, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeID_Continue = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x2, 0x4, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x1, 0x5, 0x2, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x205, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x7, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x4, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x20, 0x5, 0x1, 0x87, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x88, 0x1, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x2163, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0x1bb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x6ed, 0xf0]);
immutable unicodeTagbanwa = RleBitSet!ushort.fromRawArray([0x1760, 0xd, 0x1, 0x3, 0x1, 0x2]);
immutable unicodeOther_Uppercase = RleBitSet!ushort.fromRawArray([0x2160, 0x10, 0x346, 0x1a]);
immutable unicodeInOgham = RleBitSet!ushort.fromRawArray([0x1680, 0x20]);
immutable unicodeInThaana = RleBitSet!ushort.fromRawArray([0x780, 0x40]);
immutable unicodeInKhmer_Symbols = RleBitSet!ushort.fromRawArray([0x19e0, 0x20]);
immutable unicodeCommon = RleBitSet!ushort.fromRawArray([0x0, 0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1c1, 0x27, 0x5, 0x5, 0x2, 0x14, 0x74, 0x1, 0x9, 0x1, 0x6, 0x1, 0x1, 0x1, 0x201, 0x1, 0x82, 0x1, 0xe, 0x1, 0x3, 0x1, 0x20, 0x1, 0x1f, 0xa, 0x73, 0x1, 0x286, 0x2, 0x4d9, 0x1, 0x195, 0x4, 0x122, 0x1, 0x5ef, 0x3, 0x47, 0x2, 0xcb, 0x2, 0x1, 0x1, 0x4cd, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x309, 0xc, 0x2, 0x57, 0x5, 0x7, 0x3, 0xb, 0x1, 0xf, 0x11, 0x1a, 0x46, 0x26, 0x1, 0x3, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0x1, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0xff, 0x100, 0x24d, 0x3, 0xa, 0x2a6, 0x3c, 0x1b4, 0xc, 0x4, 0x5, 0x1, 0x1, 0x1, 0x19, 0xf, 0x8, 0x4, 0x4, 0x5b, 0x2, 0x3, 0x1, 0x5a, 0x2, 0x93, 0x10, 0x20, 0x24, 0x3c, 0x40, 0x1f, 0x51, 0x88, 0xa8, 0x19c0, 0x40, 0x5900, 0x22, 0x66, 0x3, 0xa5, 0xa, 0x5504, 0x2, 0xbd, 0x1, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x93, 0x1, 0x1, 0x20, 0x1a, 0x6, 0x1a, 0xb, 0xa, 0x1, 0x2d, 0x2, 0x40, 0x7, 0x1, 0x7, 0xa, 0x5, 0x102, 0x3, 0x4, 0x2d, 0x3, 0x9, 0x50, 0xc, 0x34, 0x2d, 0xce03, 0xf6, 0xa, 0x27, 0x2, 0x3e, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x122, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1800, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1a, 0x1, 0x2, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x899, 0x1, 0x1e, 0x60]);
immutable unicodeInCommon_Indic_Number_Forms = RleBitSet!ushort.fromRawArray([0xa830, 0x10]);
immutable unicodeInSmall_Form_Variants = RleBitSet!ushort.fromRawArray([0xfe50, 0x20]);
immutable unicodeIdeographic = RleBitSet!ushort.fromRawArray([0x3006, 0x2, 0x19, 0x9, 0xe, 0x3, 0x3c5, 0x19b6, 0x4a, 0x51cd, 0x5933, 0x16e, 0x2, 0x6a, 0xffff, 0x0, 0x527, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeGrapheme_Link = RleBitSet!ushort.fromRawArray([0x94d, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x6f, 0x1, 0x149, 0x1, 0xb4, 0x2, 0x6d9, 0x1, 0x1f, 0x1, 0x9d, 0x1, 0x28d, 0x1, 0xe3, 0x1, 0x65, 0x2, 0x46, 0x2, 0x118b, 0x1, 0x7a86, 0x1, 0xbd, 0x1, 0x8e, 0x1, 0x6c, 0x1, 0x135, 0x1, 0xf6, 0x1, 0x5e51, 0x1, 0x606, 0x1, 0x72, 0x1, 0x79, 0x2, 0x8b, 0x1, 0x4f5, 0x1]);
immutable unicodeGeorgian = RleBitSet!ushort.fromRawArray([0x10a0, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x4, 0x1c00, 0x26, 0x1, 0x1, 0x5, 0x1]);
immutable unicodeOsmanya = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x481, 0x1e, 0x2, 0xa]);
immutable unicodeInEthiopic = RleBitSet!ushort.fromRawArray([0x1200, 0x180]);
immutable unicodeInEnclosed_Alphanumerics = RleBitSet!ushort.fromRawArray([0x2460, 0xa0]);
immutable unicodeCuneiform = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x2001, 0x36f, 0x91, 0x63, 0xd, 0x4]);
immutable unicodeSyriac = RleBitSet!ushort.fromRawArray([0x700, 0xe, 0x1, 0x3c, 0x2, 0x3]);
immutable unicodeInVertical_Forms = RleBitSet!ushort.fromRawArray([0xfe10, 0x10]);
immutable unicodeNoncharacter_Code_Point = RleBitSet!ushort.fromRawArray([0xfdd0, 0x20, 0x20e, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2]);
immutable unicodeInMiscellaneous_Symbols_and_Arrows = RleBitSet!ushort.fromRawArray([0x2b00, 0x100]);
immutable unicodeInMeetei_Mayek_Extensions = RleBitSet!ushort.fromRawArray([0xaae0, 0x20]);
immutable unicodeMeetei_Mayek = RleBitSet!ushort.fromRawArray([0xaae0, 0x17, 0xc9, 0x2e, 0x2, 0xa]);
immutable unicodeOther_Grapheme_Extend = RleBitSet!ushort.fromRawArray([0x9be, 0x1, 0x18, 0x1, 0x166, 0x1, 0x18, 0x1, 0x66, 0x1, 0x18, 0x1, 0xea, 0x1, 0x12, 0x2, 0x67, 0x1, 0x18, 0x1, 0x77, 0x1, 0xf, 0x1, 0x122c, 0x2, 0x1020, 0x2, 0xcf6e, 0x2, 0xd1c5, 0x1, 0x8, 0x5]);
immutable unicodeOther_Math = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x371, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x2, 0x1c20, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x20, 0x4, 0x18, 0x2, 0xe, 0x2, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0x4, 0x5, 0x5, 0x4b, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x5, 0x2, 0x2, 0x4, 0x2, 0x4, 0x12, 0x2, 0x2, 0x1, 0x1, 0x1, 0x7, 0x1, 0x1, 0x6, 0x2, 0x1ce, 0x2, 0x1, 0x1, 0x18, 0x1, 0x11, 0x1, 0x1bd, 0x2, 0xc, 0x9, 0x5, 0x5, 0x5, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0x18, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x2, 0x156, 0x2, 0x1f, 0xa, 0x193, 0x16, 0x3f, 0x4, 0x20, 0x2, 0xd463, 0x1, 0x1, 0x1, 0x4, 0x1, 0xd3, 0x1, 0x1, 0x1, 0xd4c1, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11]);
immutable unicodeInBox_Drawing = RleBitSet!ushort.fromRawArray([0x2500, 0x80]);
immutable unicodeInTagbanwa = RleBitSet!ushort.fromRawArray([0x1760, 0x20]);
immutable unicodeInHangul_Syllables = RleBitSet!ushort.fromRawArray([0xac00, 0x2bb0]);
immutable unicodeLydian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x921, 0x1a, 0x5, 0x1]);
immutable unicodeInKatakana_Phonetic_Extensions = RleBitSet!ushort.fromRawArray([0x31f0, 0x10]);
immutable unicodeInTai_Tham = RleBitSet!ushort.fromRawArray([0x1a20, 0x90]);
immutable unicodeInNumber_Forms = RleBitSet!ushort.fromRawArray([0x2150, 0x40]);
immutable unicodeInBopomofo_Extended = RleBitSet!ushort.fromRawArray([0x31a0, 0x20]);
immutable unicodeInherited = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x115, 0x2, 0x1c4, 0xb, 0x9, 0x1, 0x10, 0x1, 0x2e0, 0x2, 0x137d, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x20c, 0x2, 0xc2, 0x21, 0xf39, 0x4, 0x6b, 0x2, 0xcd65, 0x10, 0x10, 0x7, 0x3d6, 0x1, 0xcf69, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2f5e, 0xf0]);
immutable unicodeInLetterlike_Symbols = RleBitSet!ushort.fromRawArray([0x2100, 0x50]);
immutable unicodeBuhid = RleBitSet!ushort.fromRawArray([0x1740, 0x14]);
immutable unicodeInArabic_Extended_A = RleBitSet!ushort.fromRawArray([0x8a0, 0x60]);
immutable unicodeInSyloti_Nagri = RleBitSet!ushort.fromRawArray([0xa800, 0x30]);
immutable unicodeInSamaritan = RleBitSet!ushort.fromRawArray([0x800, 0x40]);
immutable unicodeInGeorgian = RleBitSet!ushort.fromRawArray([0x10a0, 0x60]);
immutable unicodeAlphabetic = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x56, 0x1, 0x2a, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x28, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x38, 0x1, 0x7, 0xe, 0x66, 0x1, 0x8, 0x4, 0x8, 0x4, 0x3, 0xa, 0x3, 0x2, 0x1, 0x10, 0x30, 0xd, 0x65, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x18, 0x2, 0x13, 0x13, 0x19, 0x47, 0x1, 0x1, 0xb, 0x37, 0x6, 0x6, 0xf, 0x1, 0x3c, 0x1, 0x10, 0x1, 0x3, 0x4, 0xf, 0xd, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0xc, 0x2, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x7, 0x4, 0x1, 0x1, 0x11, 0x6, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x9, 0x1, 0x3, 0x1, 0x2, 0x3, 0x1, 0xf, 0x4, 0x1d, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0x4, 0x2, 0x1, 0x5, 0xd, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x6, 0x1, 0x29, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x1, 0x2, 0x6, 0x4, 0x1e, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x7, 0x1, 0x1, 0x4, 0xd, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x3, 0x1, 0x1, 0x8, 0x1, 0x8, 0x4, 0x16, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x8, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0x7, 0x6, 0x1, 0x33, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x6, 0x1, 0xe, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x4, 0x11, 0x6, 0x10, 0x1, 0x24, 0x43, 0x37, 0x1, 0x1, 0x2, 0x5, 0x10, 0x13, 0x2, 0x4, 0x5, 0x19, 0x7, 0x1, 0xd, 0x2, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x4, 0x1, 0x20, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x6, 0xc, 0x14, 0xc, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x34, 0x2, 0x13, 0xe, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0x9, 0x17, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x36, 0x1c, 0x4, 0x3f, 0x2, 0x14, 0x32, 0x1, 0x58, 0x34, 0x1, 0xf, 0x1, 0x7, 0x34, 0x2a, 0x2, 0x4, 0xa, 0x2c, 0x1, 0xb, 0xe, 0x36, 0x17, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x32d, 0x34, 0x716, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x2f, 0x1, 0x1d5, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x5, 0x8, 0x3, 0x19, 0x7, 0x51, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x1c, 0x18, 0x34, 0xc, 0x44, 0x2e, 0x6, 0x3, 0x1, 0xe, 0x21, 0x5, 0x23, 0xd, 0x1d, 0x3, 0x33, 0x1, 0xc, 0xf, 0x1, 0x30, 0x37, 0x9, 0xe, 0x12, 0x17, 0x3, 0x1, 0x5, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0x10, 0x2, 0x4, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x15, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x46, 0x3c, 0x37, 0x17, 0x19, 0x17, 0x33, 0x4d, 0x40, 0x1, 0x4, 0x4bb, 0x36, 0x94a, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeBalinese = RleBitSet!ushort.fromRawArray([0x1b00, 0x4c, 0x4, 0x2d]);
immutable unicodeInLydian = RleBitSet!uint.fromRawArray([0x10920, 0x20]);
immutable unicodeInKana_Supplement = RleBitSet!uint.fromRawArray([0x1b000, 0x100]);
immutable unicodeInOld_Italic = RleBitSet!uint.fromRawArray([0x10300, 0x30]);
immutable unicodeInUgaritic = RleBitSet!uint.fromRawArray([0x10380, 0x20]);
immutable unicodeInLinear_B_Syllabary = RleBitSet!uint.fromRawArray([0x10000, 0x80]);
immutable unicodeInEgyptian_Hieroglyphs = RleBitSet!uint.fromRawArray([0x13000, 0x430]);
immutable unicodeInLycian = RleBitSet!uint.fromRawArray([0x10280, 0x20]);
immutable unicodeOld_South_Arabian = RleBitSet!uint.fromRawArray([0x10a60, 0x20]);
immutable unicodeInBamum_Supplement = RleBitSet!uint.fromRawArray([0x16800, 0x240]);
immutable unicodeInEmoticons = RleBitSet!uint.fromRawArray([0x1f600, 0x50]);
immutable unicodeInDeseret = RleBitSet!uint.fromRawArray([0x10400, 0x50]);
immutable unicodeInByzantine_Musical_Symbols = RleBitSet!uint.fromRawArray([0x1d000, 0x100]);
immutable unicodeInTransport_And_Map_Symbols = RleBitSet!uint.fromRawArray([0x1f680, 0x80]);
immutable unicodeInTai_Xuan_Jing_Symbols = RleBitSet!uint.fromRawArray([0x1d300, 0x60]);
immutable unicodeEgyptian_Hieroglyphs = RleBitSet!uint.fromRawArray([0x13000, 0x42f]);
immutable unicodeInChakma = RleBitSet!uint.fromRawArray([0x11100, 0x50]);
immutable unicodeInOld_Persian = RleBitSet!uint.fromRawArray([0x103a0, 0x40]);
immutable unicodeInCypriot_Syllabary = RleBitSet!uint.fromRawArray([0x10800, 0x40]);
immutable unicodeInSupplementary_Private_Use_Area_A = RleBitSet!uint.fromRawArray([0xf0000, 0x10000]);
immutable unicodeShavian = RleBitSet!uint.fromRawArray([0x10450, 0x30]);
immutable unicodeInRumi_Numeral_Symbols = RleBitSet!uint.fromRawArray([0x10e60, 0x20]);
immutable unicodeInSharada = RleBitSet!uint.fromRawArray([0x11180, 0x60]);
immutable unicodeInSupplementary_Private_Use_Area_B = RleBitSet!uint.fromRawArray([0x100000, 0x10000]);
immutable unicodeInCuneiform = RleBitSet!uint.fromRawArray([0x12000, 0x400]);
immutable unicodeInAvestan = RleBitSet!uint.fromRawArray([0x10b00, 0x40]);
immutable unicodeInCJK_Compatibility_Ideographs_Supplement = RleBitSet!uint.fromRawArray([0x2f800, 0x220]);
immutable unicodeLycian = RleBitSet!uint.fromRawArray([0x10280, 0x1d]);
immutable unicodeInPhaistos_Disc = RleBitSet!uint.fromRawArray([0x101d0, 0x30]);
immutable unicodeInOld_South_Arabian = RleBitSet!uint.fromRawArray([0x10a60, 0x20]);
immutable unicodeInPhoenician = RleBitSet!uint.fromRawArray([0x10900, 0x20]);
immutable unicodeInTakri = RleBitSet!uint.fromRawArray([0x11680, 0x50]);
immutable unicodeCo = RleBitSet!uint.fromRawArray([0xe000, 0x1900, 0xe0700, 0xfffe, 0x2, 0xfffe]);
immutable unicodeInInscriptional_Pahlavi = RleBitSet!uint.fromRawArray([0x10b60, 0x20]);
immutable unicodeInCarian = RleBitSet!uint.fromRawArray([0x102a0, 0x40]);
immutable unicodeInMiscellaneous_Symbols_And_Pictographs = RleBitSet!uint.fromRawArray([0x1f300, 0x300]);
immutable unicodeInBrahmi = RleBitSet!uint.fromRawArray([0x11000, 0x80]);
immutable unicodeInOld_Turkic = RleBitSet!uint.fromRawArray([0x10c00, 0x50]);
immutable unicodeDeprecated = RleBitSet!uint.fromRawArray([0x149, 0x1, 0x529, 0x1, 0x903, 0x1, 0x1, 0x1, 0x829, 0x2, 0x8c5, 0x6, 0x2b9, 0x2, 0xddcd6, 0x1, 0x1e, 0x60]);
immutable unicodeInImperial_Aramaic = RleBitSet!uint.fromRawArray([0x10840, 0x20]);
immutable unicodeInVariation_Selectors_Supplement = RleBitSet!uint.fromRawArray([0xe0100, 0xf0]);
immutable unicodeInCJK_Unified_Ideographs_Extension_B = RleBitSet!uint.fromRawArray([0x20000, 0xa6e0]);
immutable unicodeInMahjong_Tiles = RleBitSet!uint.fromRawArray([0x1f000, 0x30]);
immutable unicodeInTags = RleBitSet!uint.fromRawArray([0xe0000, 0x80]);
immutable unicodeInShavian = RleBitSet!uint.fromRawArray([0x10450, 0x30]);
immutable unicodeInCJK_Unified_Ideographs_Extension_C = RleBitSet!uint.fromRawArray([0x2a700, 0x1040]);
immutable unicodeInCounting_Rod_Numerals = RleBitSet!uint.fromRawArray([0x1d360, 0x20]);
immutable unicodeInCuneiform_Numbers_and_Punctuation = RleBitSet!uint.fromRawArray([0x12400, 0x80]);
immutable unicodeInCJK_Unified_Ideographs_Extension_D = RleBitSet!uint.fromRawArray([0x2b740, 0xe0]);
immutable unicodeCarian = RleBitSet!uint.fromRawArray([0x102a0, 0x31]);
immutable unicodeInSora_Sompeng = RleBitSet!uint.fromRawArray([0x110d0, 0x30]);
immutable unicodeInOsmanya = RleBitSet!uint.fromRawArray([0x10480, 0x30]);
immutable unicodeOld_Turkic = RleBitSet!uint.fromRawArray([0x10c00, 0x49]);
immutable unicodeInLinear_B_Ideograms = RleBitSet!uint.fromRawArray([0x10080, 0x80]);
immutable unicodeVariation_Selector = RleBitSet!uint.fromRawArray([0x180b, 0x3, 0xe5f2, 0x10, 0xd02f0, 0xf0]);
immutable unicodeInAegean_Numbers = RleBitSet!uint.fromRawArray([0x10100, 0x40]);
immutable unicodeInGothic = RleBitSet!uint.fromRawArray([0x10330, 0x20]);
immutable unicodeInMeroitic_Cursive = RleBitSet!uint.fromRawArray([0x109a0, 0x60]);
immutable unicodeInAncient_Greek_Numbers = RleBitSet!uint.fromRawArray([0x10140, 0x50]);
immutable unicodeDeseret = RleBitSet!uint.fromRawArray([0x10400, 0x50]);
immutable unicodeInEnclosed_Alphanumeric_Supplement = RleBitSet!uint.fromRawArray([0x1f100, 0x100]);
immutable unicodeInMathematical_Alphanumeric_Symbols = RleBitSet!uint.fromRawArray([0x1d400, 0x400]);
immutable unicodeInPlaying_Cards = RleBitSet!uint.fromRawArray([0x1f0a0, 0x60]);
immutable unicodeInKaithi = RleBitSet!uint.fromRawArray([0x11080, 0x50]);
immutable unicodeInMusical_Symbols = RleBitSet!uint.fromRawArray([0x1d100, 0x100]);
immutable unicodeInAncient_Symbols = RleBitSet!uint.fromRawArray([0x10190, 0x40]);
immutable unicodeInDomino_Tiles = RleBitSet!uint.fromRawArray([0x1f030, 0x70]);
immutable unicodeInKharoshthi = RleBitSet!uint.fromRawArray([0x10a00, 0x60]);
immutable unicodeGothic = RleBitSet!uint.fromRawArray([0x10330, 0x1b]);
immutable unicodeInAncient_Greek_Musical_Notation = RleBitSet!uint.fromRawArray([0x1d200, 0x50]);
immutable unicodeInInscriptional_Parthian = RleBitSet!uint.fromRawArray([0x10b40, 0x20]);
immutable unicodeInArabic_Mathematical_Alphabetic_Symbols = RleBitSet!uint.fromRawArray([0x1ee00, 0x100]);
immutable unicodeOther_Default_Ignorable_Code_Point = RleBitSet!uint.fromRawArray([0x34f, 0x1, 0xe0f, 0x2, 0x653, 0x2, 0x8af, 0x5, 0x10fa, 0x1, 0xce3b, 0x1, 0x4f, 0x9, 0xd0007, 0x1, 0x1, 0x1e, 0x60, 0x80, 0xf0, 0xe10]);
immutable unicodeMeroitic_Hieroglyphs = RleBitSet!uint.fromRawArray([0x10980, 0x20]);
immutable unicodeInMiao = RleBitSet!uint.fromRawArray([0x16f00, 0xa0]);
immutable unicodeInAlchemical_Symbols = RleBitSet!uint.fromRawArray([0x1f700, 0x80]);
immutable unicodeInMeroitic_Hieroglyphs = RleBitSet!uint.fromRawArray([0x10980, 0x20]);
immutable unicodeKaithi = RleBitSet!uint.fromRawArray([0x11080, 0x42]);
immutable unicodeInEnclosed_Ideographic_Supplement = RleBitSet!uint.fromRawArray([0x1f200, 0x100]);

immutable UnicodeProperty!ubyte[] tinyUnicodeProps = [
immutable(UnicodeProperty!ubyte)("ASCII_Hex_Digit", unicodeASCII_Hex_Digit),
immutable(UnicodeProperty!ubyte)("Bengali", unicodeBengali),
immutable(UnicodeProperty!ubyte)("Cc", unicodeCc),
immutable(UnicodeProperty!ubyte)("Control", unicodeCc),
immutable(UnicodeProperty!ubyte)("Gujarati", unicodeGujarati),
immutable(UnicodeProperty!ubyte)("Gurmukhi", unicodeGurmukhi),
immutable(UnicodeProperty!ubyte)("InBasic Latin", unicodeInBasic_Latin),
immutable(UnicodeProperty!ubyte)("InLatin-1 Supplement", unicodeInLatin_1_Supplement),
immutable(UnicodeProperty!ubyte)("Kannada", unicodeKannada),
immutable(UnicodeProperty!ubyte)("Lao", unicodeLao),
immutable(UnicodeProperty!ubyte)("Ll", unicodeLl),
immutable(UnicodeProperty!ubyte)("Lowercase", unicodeLowercase),
immutable(UnicodeProperty!ubyte)("Lowercase_Letter", unicodeLl),
immutable(UnicodeProperty!ubyte)("Lu", unicodeLu),
immutable(UnicodeProperty!ubyte)("Oriya", unicodeOriya),
immutable(UnicodeProperty!ubyte)("Tamil", unicodeTamil),
immutable(UnicodeProperty!ubyte)("Telugu", unicodeTelugu),
immutable(UnicodeProperty!ubyte)("Uppercase", unicodeUppercase),
immutable(UnicodeProperty!ubyte)("Uppercase_Letter", unicodeLu),
];

immutable UnicodeProperty!ushort[] smallUnicodeProps = [
immutable(UnicodeProperty!ushort)("Alphabetic", unicodeAlphabetic),
immutable(UnicodeProperty!ushort)("Arabic", unicodeArabic),
immutable(UnicodeProperty!ushort)("Armenian", unicodeArmenian),
immutable(UnicodeProperty!ushort)("Avestan", unicodeAvestan),
immutable(UnicodeProperty!ushort)("Balinese", unicodeBalinese),
immutable(UnicodeProperty!ushort)("Bamum", unicodeBamum),
immutable(UnicodeProperty!ushort)("Batak", unicodeBatak),
immutable(UnicodeProperty!ushort)("Bidi_Control", unicodeBidi_Control),
immutable(UnicodeProperty!ushort)("Bopomofo", unicodeBopomofo),
immutable(UnicodeProperty!ushort)("Brahmi", unicodeBrahmi),
immutable(UnicodeProperty!ushort)("Braille", unicodeBraille),
immutable(UnicodeProperty!ushort)("Buginese", unicodeBuginese),
immutable(UnicodeProperty!ushort)("Buhid", unicodeBuhid),
immutable(UnicodeProperty!ushort)("Canadian_Aboriginal", unicodeCanadian_Aboriginal),
immutable(UnicodeProperty!ushort)("Cased", unicodeCased),
immutable(UnicodeProperty!ushort)("Case_Ignorable", unicodeCase_Ignorable),
immutable(UnicodeProperty!ushort)("Cf", unicodeCf),
immutable(UnicodeProperty!ushort)("Chakma", unicodeChakma),
immutable(UnicodeProperty!ushort)("Cham", unicodeCham),
immutable(UnicodeProperty!ushort)("Cherokee", unicodeCherokee),
immutable(UnicodeProperty!ushort)("Close_Punctuation", unicodePe),
immutable(UnicodeProperty!ushort)("Cn", unicodeCn),
immutable(UnicodeProperty!ushort)("Common", unicodeCommon),
immutable(UnicodeProperty!ushort)("Connector_Punctuation", unicodePc),
immutable(UnicodeProperty!ushort)("Coptic", unicodeCoptic),
immutable(UnicodeProperty!ushort)("Cs", unicodeCs),
immutable(UnicodeProperty!ushort)("Cuneiform", unicodeCuneiform),
immutable(UnicodeProperty!ushort)("Currency_Symbol", unicodeSc),
immutable(UnicodeProperty!ushort)("Cypriot", unicodeCypriot),
immutable(UnicodeProperty!ushort)("Cyrillic", unicodeCyrillic),
immutable(UnicodeProperty!ushort)("Dash", unicodeDash),
immutable(UnicodeProperty!ushort)("Dash_Punctuation", unicodePd),
immutable(UnicodeProperty!ushort)("Decimal_Number", unicodeNd),
immutable(UnicodeProperty!ushort)("Default_Ignorable_Code_Point", unicodeDefault_Ignorable_Code_Point),
immutable(UnicodeProperty!ushort)("Devanagari", unicodeDevanagari),
immutable(UnicodeProperty!ushort)("Diacritic", unicodeDiacritic),
immutable(UnicodeProperty!ushort)("Enclosing_Mark", unicodeMe),
immutable(UnicodeProperty!ushort)("Ethiopic", unicodeEthiopic),
immutable(UnicodeProperty!ushort)("Extender", unicodeExtender),
immutable(UnicodeProperty!ushort)("Final_Punctuation", unicodePf),
immutable(UnicodeProperty!ushort)("Format", unicodeCf),
immutable(UnicodeProperty!ushort)("Georgian", unicodeGeorgian),
immutable(UnicodeProperty!ushort)("Glagolitic", unicodeGlagolitic),
immutable(UnicodeProperty!ushort)("Grapheme_Base", unicodeGrapheme_Base),
immutable(UnicodeProperty!ushort)("Grapheme_Extend", unicodeGrapheme_Extend),
immutable(UnicodeProperty!ushort)("Grapheme_Link", unicodeGrapheme_Link),
immutable(UnicodeProperty!ushort)("Greek", unicodeGreek),
immutable(UnicodeProperty!ushort)("Han", unicodeHan),
immutable(UnicodeProperty!ushort)("Hangul", unicodeHangul),
immutable(UnicodeProperty!ushort)("Hanunoo", unicodeHanunoo),
immutable(UnicodeProperty!ushort)("Hebrew", unicodeHebrew),
immutable(UnicodeProperty!ushort)("Hex_Digit", unicodeHex_Digit),
immutable(UnicodeProperty!ushort)("Hiragana", unicodeHiragana),
immutable(UnicodeProperty!ushort)("Hyphen", unicodeHyphen),
immutable(UnicodeProperty!ushort)("ID_Continue", unicodeID_Continue),
immutable(UnicodeProperty!ushort)("Ideographic", unicodeIdeographic),
immutable(UnicodeProperty!ushort)("IDS_Binary_Operator", unicodeIDS_Binary_Operator),
immutable(UnicodeProperty!ushort)("ID_Start", unicodeID_Start),
immutable(UnicodeProperty!ushort)("IDS_Trinary_Operator", unicodeIDS_Trinary_Operator),
immutable(UnicodeProperty!ushort)("Imperial_Aramaic", unicodeImperial_Aramaic),
immutable(UnicodeProperty!ushort)("InAlphabetic Presentation Forms", unicodeInAlphabetic_Presentation_Forms),
immutable(UnicodeProperty!ushort)("InArabic", unicodeInArabic),
immutable(UnicodeProperty!ushort)("InArabic Extended-A", unicodeInArabic_Extended_A),
immutable(UnicodeProperty!ushort)("InArabic Presentation Forms-A", unicodeInArabic_Presentation_Forms_A),
immutable(UnicodeProperty!ushort)("InArabic Presentation Forms-B", unicodeInArabic_Presentation_Forms_B),
immutable(UnicodeProperty!ushort)("InArabic Supplement", unicodeInArabic_Supplement),
immutable(UnicodeProperty!ushort)("InArmenian", unicodeInArmenian),
immutable(UnicodeProperty!ushort)("InArrows", unicodeInArrows),
immutable(UnicodeProperty!ushort)("InBalinese", unicodeInBalinese),
immutable(UnicodeProperty!ushort)("InBamum", unicodeInBamum),
immutable(UnicodeProperty!ushort)("InBatak", unicodeInBatak),
immutable(UnicodeProperty!ushort)("InBengali", unicodeInBengali),
immutable(UnicodeProperty!ushort)("InBlock Elements", unicodeInBlock_Elements),
immutable(UnicodeProperty!ushort)("InBopomofo", unicodeInBopomofo),
immutable(UnicodeProperty!ushort)("InBopomofo Extended", unicodeInBopomofo_Extended),
immutable(UnicodeProperty!ushort)("InBox Drawing", unicodeInBox_Drawing),
immutable(UnicodeProperty!ushort)("InBraille Patterns", unicodeInBraille_Patterns),
immutable(UnicodeProperty!ushort)("InBuginese", unicodeInBuginese),
immutable(UnicodeProperty!ushort)("InBuhid", unicodeInBuhid),
immutable(UnicodeProperty!ushort)("InCham", unicodeInCham),
immutable(UnicodeProperty!ushort)("InCherokee", unicodeInCherokee),
immutable(UnicodeProperty!ushort)("InCJK Compatibility", unicodeInCJK_Compatibility),
immutable(UnicodeProperty!ushort)("InCJK Compatibility Forms", unicodeInCJK_Compatibility_Forms),
immutable(UnicodeProperty!ushort)("InCJK Compatibility Ideographs", unicodeInCJK_Compatibility_Ideographs),
immutable(UnicodeProperty!ushort)("InCJK Radicals Supplement", unicodeInCJK_Radicals_Supplement),
immutable(UnicodeProperty!ushort)("InCJK Strokes", unicodeInCJK_Strokes),
immutable(UnicodeProperty!ushort)("InCJK Symbols and Punctuation", unicodeInCJK_Symbols_and_Punctuation),
immutable(UnicodeProperty!ushort)("InCJK Unified Ideographs", unicodeInCJK_Unified_Ideographs),
immutable(UnicodeProperty!ushort)("InCJK Unified Ideographs Extension A", unicodeInCJK_Unified_Ideographs_Extension_A),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks", unicodeInCombining_Diacritical_Marks),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks for Symbols", unicodeInCombining_Diacritical_Marks_for_Symbols),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks Supplement", unicodeInCombining_Diacritical_Marks_Supplement),
immutable(UnicodeProperty!ushort)("InCombining Half Marks", unicodeInCombining_Half_Marks),
immutable(UnicodeProperty!ushort)("InCommon Indic Number Forms", unicodeInCommon_Indic_Number_Forms),
immutable(UnicodeProperty!ushort)("InControl Pictures", unicodeInControl_Pictures),
immutable(UnicodeProperty!ushort)("InCoptic", unicodeInCoptic),
immutable(UnicodeProperty!ushort)("InCurrency Symbols", unicodeInCurrency_Symbols),
immutable(UnicodeProperty!ushort)("InCyrillic", unicodeInCyrillic),
immutable(UnicodeProperty!ushort)("InCyrillic Extended-A", unicodeInCyrillic_Extended_A),
immutable(UnicodeProperty!ushort)("InCyrillic Extended-B", unicodeInCyrillic_Extended_B),
immutable(UnicodeProperty!ushort)("InCyrillic Supplement", unicodeInCyrillic_Supplement),
immutable(UnicodeProperty!ushort)("InDevanagari", unicodeInDevanagari),
immutable(UnicodeProperty!ushort)("InDevanagari Extended", unicodeInDevanagari_Extended),
immutable(UnicodeProperty!ushort)("InDingbats", unicodeInDingbats),
immutable(UnicodeProperty!ushort)("InEnclosed Alphanumerics", unicodeInEnclosed_Alphanumerics),
immutable(UnicodeProperty!ushort)("InEnclosed CJK Letters and Months", unicodeInEnclosed_CJK_Letters_and_Months),
immutable(UnicodeProperty!ushort)("InEthiopic", unicodeInEthiopic),
immutable(UnicodeProperty!ushort)("InEthiopic Extended", unicodeInEthiopic_Extended),
immutable(UnicodeProperty!ushort)("InEthiopic Extended-A", unicodeInEthiopic_Extended_A),
immutable(UnicodeProperty!ushort)("InEthiopic Supplement", unicodeInEthiopic_Supplement),
immutable(UnicodeProperty!ushort)("InGeneral Punctuation", unicodeInGeneral_Punctuation),
immutable(UnicodeProperty!ushort)("InGeometric Shapes", unicodeInGeometric_Shapes),
immutable(UnicodeProperty!ushort)("InGeorgian", unicodeInGeorgian),
immutable(UnicodeProperty!ushort)("InGeorgian Supplement", unicodeInGeorgian_Supplement),
immutable(UnicodeProperty!ushort)("InGlagolitic", unicodeInGlagolitic),
immutable(UnicodeProperty!ushort)("InGreek and Coptic", unicodeInGreek_and_Coptic),
immutable(UnicodeProperty!ushort)("InGreek Extended", unicodeInGreek_Extended),
immutable(UnicodeProperty!ushort)("InGujarati", unicodeInGujarati),
immutable(UnicodeProperty!ushort)("InGurmukhi", unicodeInGurmukhi),
immutable(UnicodeProperty!ushort)("InHalfwidth and Fullwidth Forms", unicodeInHalfwidth_and_Fullwidth_Forms),
immutable(UnicodeProperty!ushort)("InHangul Compatibility Jamo", unicodeInHangul_Compatibility_Jamo),
immutable(UnicodeProperty!ushort)("InHangul Jamo", unicodeInHangul_Jamo),
immutable(UnicodeProperty!ushort)("InHangul Jamo Extended-A", unicodeInHangul_Jamo_Extended_A),
immutable(UnicodeProperty!ushort)("InHangul Jamo Extended-B", unicodeInHangul_Jamo_Extended_B),
immutable(UnicodeProperty!ushort)("InHangul Syllables", unicodeInHangul_Syllables),
immutable(UnicodeProperty!ushort)("InHanunoo", unicodeInHanunoo),
immutable(UnicodeProperty!ushort)("InHebrew", unicodeInHebrew),
immutable(UnicodeProperty!ushort)("Inherited", unicodeInherited),
immutable(UnicodeProperty!ushort)("InHigh Private Use Surrogates", unicodeInHigh_Private_Use_Surrogates),
immutable(UnicodeProperty!ushort)("InHigh Surrogates", unicodeInHigh_Surrogates),
immutable(UnicodeProperty!ushort)("InHiragana", unicodeInHiragana),
immutable(UnicodeProperty!ushort)("InIdeographic Description Characters", unicodeInIdeographic_Description_Characters),
immutable(UnicodeProperty!ushort)("InIPA Extensions", unicodeInIPA_Extensions),
immutable(UnicodeProperty!ushort)("Initial_Punctuation", unicodePi),
immutable(UnicodeProperty!ushort)("InJavanese", unicodeInJavanese),
immutable(UnicodeProperty!ushort)("InKanbun", unicodeInKanbun),
immutable(UnicodeProperty!ushort)("InKangxi Radicals", unicodeInKangxi_Radicals),
immutable(UnicodeProperty!ushort)("InKannada", unicodeInKannada),
immutable(UnicodeProperty!ushort)("InKatakana", unicodeInKatakana),
immutable(UnicodeProperty!ushort)("InKatakana Phonetic Extensions", unicodeInKatakana_Phonetic_Extensions),
immutable(UnicodeProperty!ushort)("InKayah Li", unicodeInKayah_Li),
immutable(UnicodeProperty!ushort)("InKhmer", unicodeInKhmer),
immutable(UnicodeProperty!ushort)("InKhmer Symbols", unicodeInKhmer_Symbols),
immutable(UnicodeProperty!ushort)("InLao", unicodeInLao),
immutable(UnicodeProperty!ushort)("InLatin Extended-A", unicodeInLatin_Extended_A),
immutable(UnicodeProperty!ushort)("InLatin Extended Additional", unicodeInLatin_Extended_Additional),
immutable(UnicodeProperty!ushort)("InLatin Extended-B", unicodeInLatin_Extended_B),
immutable(UnicodeProperty!ushort)("InLatin Extended-C", unicodeInLatin_Extended_C),
immutable(UnicodeProperty!ushort)("InLatin Extended-D", unicodeInLatin_Extended_D),
immutable(UnicodeProperty!ushort)("InLepcha", unicodeInLepcha),
immutable(UnicodeProperty!ushort)("InLetterlike Symbols", unicodeInLetterlike_Symbols),
immutable(UnicodeProperty!ushort)("InLimbu", unicodeInLimbu),
immutable(UnicodeProperty!ushort)("InLisu", unicodeInLisu),
immutable(UnicodeProperty!ushort)("InLow Surrogates", unicodeInLow_Surrogates),
immutable(UnicodeProperty!ushort)("InMalayalam", unicodeInMalayalam),
immutable(UnicodeProperty!ushort)("InMandaic", unicodeInMandaic),
immutable(UnicodeProperty!ushort)("InMathematical Operators", unicodeInMathematical_Operators),
immutable(UnicodeProperty!ushort)("InMeetei Mayek", unicodeInMeetei_Mayek),
immutable(UnicodeProperty!ushort)("InMeetei Mayek Extensions", unicodeInMeetei_Mayek_Extensions),
immutable(UnicodeProperty!ushort)("InMiscellaneous Mathematical Symbols-A", unicodeInMiscellaneous_Mathematical_Symbols_A),
immutable(UnicodeProperty!ushort)("InMiscellaneous Mathematical Symbols-B", unicodeInMiscellaneous_Mathematical_Symbols_B),
immutable(UnicodeProperty!ushort)("InMiscellaneous Symbols", unicodeInMiscellaneous_Symbols),
immutable(UnicodeProperty!ushort)("InMiscellaneous Symbols and Arrows", unicodeInMiscellaneous_Symbols_and_Arrows),
immutable(UnicodeProperty!ushort)("InMiscellaneous Technical", unicodeInMiscellaneous_Technical),
immutable(UnicodeProperty!ushort)("InModifier Tone Letters", unicodeInModifier_Tone_Letters),
immutable(UnicodeProperty!ushort)("InMongolian", unicodeInMongolian),
immutable(UnicodeProperty!ushort)("InMyanmar", unicodeInMyanmar),
immutable(UnicodeProperty!ushort)("InMyanmar Extended-A", unicodeInMyanmar_Extended_A),
immutable(UnicodeProperty!ushort)("InNew Tai Lue", unicodeInNew_Tai_Lue),
immutable(UnicodeProperty!ushort)("InNKo", unicodeInNKo),
immutable(UnicodeProperty!ushort)("InNumber Forms", unicodeInNumber_Forms),
immutable(UnicodeProperty!ushort)("InOgham", unicodeInOgham),
immutable(UnicodeProperty!ushort)("InOl Chiki", unicodeInOl_Chiki),
immutable(UnicodeProperty!ushort)("InOptical Character Recognition", unicodeInOptical_Character_Recognition),
immutable(UnicodeProperty!ushort)("InOriya", unicodeInOriya),
immutable(UnicodeProperty!ushort)("InPhags-pa", unicodeInPhags_pa),
immutable(UnicodeProperty!ushort)("InPhonetic Extensions", unicodeInPhonetic_Extensions),
immutable(UnicodeProperty!ushort)("InPhonetic Extensions Supplement", unicodeInPhonetic_Extensions_Supplement),
immutable(UnicodeProperty!ushort)("InPrivate Use Area", unicodeInPrivate_Use_Area),
immutable(UnicodeProperty!ushort)("InRejang", unicodeInRejang),
immutable(UnicodeProperty!ushort)("InRunic", unicodeInRunic),
immutable(UnicodeProperty!ushort)("InSamaritan", unicodeInSamaritan),
immutable(UnicodeProperty!ushort)("InSaurashtra", unicodeInSaurashtra),
immutable(UnicodeProperty!ushort)("Inscriptional_Pahlavi", unicodeInscriptional_Pahlavi),
immutable(UnicodeProperty!ushort)("Inscriptional_Parthian", unicodeInscriptional_Parthian),
immutable(UnicodeProperty!ushort)("InSinhala", unicodeInSinhala),
immutable(UnicodeProperty!ushort)("InSmall Form Variants", unicodeInSmall_Form_Variants),
immutable(UnicodeProperty!ushort)("InSpacing Modifier Letters", unicodeInSpacing_Modifier_Letters),
immutable(UnicodeProperty!ushort)("InSpecials", unicodeInSpecials),
immutable(UnicodeProperty!ushort)("InSundanese", unicodeInSundanese),
immutable(UnicodeProperty!ushort)("InSundanese Supplement", unicodeInSundanese_Supplement),
immutable(UnicodeProperty!ushort)("InSuperscripts and Subscripts", unicodeInSuperscripts_and_Subscripts),
immutable(UnicodeProperty!ushort)("InSupplemental Arrows-A", unicodeInSupplemental_Arrows_A),
immutable(UnicodeProperty!ushort)("InSupplemental Arrows-B", unicodeInSupplemental_Arrows_B),
immutable(UnicodeProperty!ushort)("InSupplemental Mathematical Operators", unicodeInSupplemental_Mathematical_Operators),
immutable(UnicodeProperty!ushort)("InSupplemental Punctuation", unicodeInSupplemental_Punctuation),
immutable(UnicodeProperty!ushort)("InSyloti Nagri", unicodeInSyloti_Nagri),
immutable(UnicodeProperty!ushort)("InSyriac", unicodeInSyriac),
immutable(UnicodeProperty!ushort)("InTagalog", unicodeInTagalog),
immutable(UnicodeProperty!ushort)("InTagbanwa", unicodeInTagbanwa),
immutable(UnicodeProperty!ushort)("InTai Le", unicodeInTai_Le),
immutable(UnicodeProperty!ushort)("InTai Tham", unicodeInTai_Tham),
immutable(UnicodeProperty!ushort)("InTai Viet", unicodeInTai_Viet),
immutable(UnicodeProperty!ushort)("InTamil", unicodeInTamil),
immutable(UnicodeProperty!ushort)("InTelugu", unicodeInTelugu),
immutable(UnicodeProperty!ushort)("InThaana", unicodeInThaana),
immutable(UnicodeProperty!ushort)("InThai", unicodeInThai),
immutable(UnicodeProperty!ushort)("InTibetan", unicodeInTibetan),
immutable(UnicodeProperty!ushort)("InTifinagh", unicodeInTifinagh),
immutable(UnicodeProperty!ushort)("InUnified Canadian Aboriginal Syllabics", unicodeInUnified_Canadian_Aboriginal_Syllabics),
immutable(UnicodeProperty!ushort)("InUnified Canadian Aboriginal Syllabics Extended", unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended),
immutable(UnicodeProperty!ushort)("InVai", unicodeInVai),
immutable(UnicodeProperty!ushort)("InVariation Selectors", unicodeInVariation_Selectors),
immutable(UnicodeProperty!ushort)("InVedic Extensions", unicodeInVedic_Extensions),
immutable(UnicodeProperty!ushort)("InVertical Forms", unicodeInVertical_Forms),
immutable(UnicodeProperty!ushort)("InYijing Hexagram Symbols", unicodeInYijing_Hexagram_Symbols),
immutable(UnicodeProperty!ushort)("InYi Radicals", unicodeInYi_Radicals),
immutable(UnicodeProperty!ushort)("InYi Syllables", unicodeInYi_Syllables),
immutable(UnicodeProperty!ushort)("Javanese", unicodeJavanese),
immutable(UnicodeProperty!ushort)("Join_Control", unicodeJoin_Control),
immutable(UnicodeProperty!ushort)("Katakana", unicodeKatakana),
immutable(UnicodeProperty!ushort)("Kayah_Li", unicodeKayah_Li),
immutable(UnicodeProperty!ushort)("Kharoshthi", unicodeKharoshthi),
immutable(UnicodeProperty!ushort)("Khmer", unicodeKhmer),
immutable(UnicodeProperty!ushort)("Latin", unicodeLatin),
immutable(UnicodeProperty!ushort)("Lepcha", unicodeLepcha),
immutable(UnicodeProperty!ushort)("Letter_Number", unicodeNl),
immutable(UnicodeProperty!ushort)("Limbu", unicodeLimbu),
immutable(UnicodeProperty!ushort)("Linear_B", unicodeLinear_B),
immutable(UnicodeProperty!ushort)("Line_Separator", unicodeZl),
immutable(UnicodeProperty!ushort)("Lisu", unicodeLisu),
immutable(UnicodeProperty!ushort)("Lm", unicodeLm),
immutable(UnicodeProperty!ushort)("Lo", unicodeLo),
immutable(UnicodeProperty!ushort)("Logical_Order_Exception", unicodeLogical_Order_Exception),
immutable(UnicodeProperty!ushort)("Lt", unicodeLt),
immutable(UnicodeProperty!ushort)("Lydian", unicodeLydian),
immutable(UnicodeProperty!ushort)("Malayalam", unicodeMalayalam),
immutable(UnicodeProperty!ushort)("Mandaic", unicodeMandaic),
immutable(UnicodeProperty!ushort)("Math", unicodeMath),
immutable(UnicodeProperty!ushort)("Math_Symbol", unicodeSm),
immutable(UnicodeProperty!ushort)("Mc", unicodeMc),
immutable(UnicodeProperty!ushort)("Me", unicodeMe),
immutable(UnicodeProperty!ushort)("Meetei_Mayek", unicodeMeetei_Mayek),
immutable(UnicodeProperty!ushort)("Meroitic_Cursive", unicodeMeroitic_Cursive),
immutable(UnicodeProperty!ushort)("Miao", unicodeMiao),
immutable(UnicodeProperty!ushort)("Mn", unicodeMn),
immutable(UnicodeProperty!ushort)("Modifier_Letter", unicodeLm),
immutable(UnicodeProperty!ushort)("Modifier_Symbol", unicodeSk),
immutable(UnicodeProperty!ushort)("Mongolian", unicodeMongolian),
immutable(UnicodeProperty!ushort)("Myanmar", unicodeMyanmar),
immutable(UnicodeProperty!ushort)("Nd", unicodeNd),
immutable(UnicodeProperty!ushort)("New_Tai_Lue", unicodeNew_Tai_Lue),
immutable(UnicodeProperty!ushort)("Nko", unicodeNko),
immutable(UnicodeProperty!ushort)("Nl", unicodeNl),
immutable(UnicodeProperty!ushort)("No", unicodeNo),
immutable(UnicodeProperty!ushort)("Noncharacter_Code_Point", unicodeNoncharacter_Code_Point),
immutable(UnicodeProperty!ushort)("Nonspacing_Mark", unicodeMn),
immutable(UnicodeProperty!ushort)("Ogham", unicodeOgham),
immutable(UnicodeProperty!ushort)("Ol_Chiki", unicodeOl_Chiki),
immutable(UnicodeProperty!ushort)("Old_Italic", unicodeOld_Italic),
immutable(UnicodeProperty!ushort)("Old_Persian", unicodeOld_Persian),
immutable(UnicodeProperty!ushort)("Open_Punctuation", unicodePs),
immutable(UnicodeProperty!ushort)("Osmanya", unicodeOsmanya),
immutable(UnicodeProperty!ushort)("Other_Alphabetic", unicodeOther_Alphabetic),
immutable(UnicodeProperty!ushort)("Other_Grapheme_Extend", unicodeOther_Grapheme_Extend),
immutable(UnicodeProperty!ushort)("Other_ID_Continue", unicodeOther_ID_Continue),
immutable(UnicodeProperty!ushort)("Other_ID_Start", unicodeOther_ID_Start),
immutable(UnicodeProperty!ushort)("Other_Letter", unicodeLo),
immutable(UnicodeProperty!ushort)("Other_Lowercase", unicodeOther_Lowercase),
immutable(UnicodeProperty!ushort)("Other_Math", unicodeOther_Math),
immutable(UnicodeProperty!ushort)("Other_Number", unicodeNo),
immutable(UnicodeProperty!ushort)("Other_Punctuation", unicodePo),
immutable(UnicodeProperty!ushort)("Other_Symbol", unicodeSo),
immutable(UnicodeProperty!ushort)("Other_Uppercase", unicodeOther_Uppercase),
immutable(UnicodeProperty!ushort)("Paragraph_Separator", unicodeZp),
immutable(UnicodeProperty!ushort)("Pattern_Syntax", unicodePattern_Syntax),
immutable(UnicodeProperty!ushort)("Pattern_White_Space", unicodePattern_White_Space),
immutable(UnicodeProperty!ushort)("Pc", unicodePc),
immutable(UnicodeProperty!ushort)("Pd", unicodePd),
immutable(UnicodeProperty!ushort)("Pe", unicodePe),
immutable(UnicodeProperty!ushort)("Pf", unicodePf),
immutable(UnicodeProperty!ushort)("Phags_Pa", unicodePhags_Pa),
immutable(UnicodeProperty!ushort)("Phoenician", unicodePhoenician),
immutable(UnicodeProperty!ushort)("Pi", unicodePi),
immutable(UnicodeProperty!ushort)("Po", unicodePo),
immutable(UnicodeProperty!ushort)("Ps", unicodePs),
immutable(UnicodeProperty!ushort)("Quotation_Mark", unicodeQuotation_Mark),
immutable(UnicodeProperty!ushort)("Radical", unicodeRadical),
immutable(UnicodeProperty!ushort)("Rejang", unicodeRejang),
immutable(UnicodeProperty!ushort)("Runic", unicodeRunic),
immutable(UnicodeProperty!ushort)("Samaritan", unicodeSamaritan),
immutable(UnicodeProperty!ushort)("Saurashtra", unicodeSaurashtra),
immutable(UnicodeProperty!ushort)("Sc", unicodeSc),
immutable(UnicodeProperty!ushort)("Sharada", unicodeSharada),
immutable(UnicodeProperty!ushort)("Sinhala", unicodeSinhala),
immutable(UnicodeProperty!ushort)("Sk", unicodeSk),
immutable(UnicodeProperty!ushort)("Sm", unicodeSm),
immutable(UnicodeProperty!ushort)("So", unicodeSo),
immutable(UnicodeProperty!ushort)("Soft_Dotted", unicodeSoft_Dotted),
immutable(UnicodeProperty!ushort)("Sora_Sompeng", unicodeSora_Sompeng),
immutable(UnicodeProperty!ushort)("Space_Separator", unicodeZs),
immutable(UnicodeProperty!ushort)("Spacing_Mark", unicodeMc),
immutable(UnicodeProperty!ushort)("STerm", unicodeSTerm),
immutable(UnicodeProperty!ushort)("Sundanese", unicodeSundanese),
immutable(UnicodeProperty!ushort)("Surrogate", unicodeCs),
immutable(UnicodeProperty!ushort)("Syloti_Nagri", unicodeSyloti_Nagri),
immutable(UnicodeProperty!ushort)("Syriac", unicodeSyriac),
immutable(UnicodeProperty!ushort)("Tagalog", unicodeTagalog),
immutable(UnicodeProperty!ushort)("Tagbanwa", unicodeTagbanwa),
immutable(UnicodeProperty!ushort)("Tai_Le", unicodeTai_Le),
immutable(UnicodeProperty!ushort)("Tai_Tham", unicodeTai_Tham),
immutable(UnicodeProperty!ushort)("Tai_Viet", unicodeTai_Viet),
immutable(UnicodeProperty!ushort)("Takri", unicodeTakri),
immutable(UnicodeProperty!ushort)("Terminal_Punctuation", unicodeTerminal_Punctuation),
immutable(UnicodeProperty!ushort)("Thaana", unicodeThaana),
immutable(UnicodeProperty!ushort)("Thai", unicodeThai),
immutable(UnicodeProperty!ushort)("Tibetan", unicodeTibetan),
immutable(UnicodeProperty!ushort)("Tifinagh", unicodeTifinagh),
immutable(UnicodeProperty!ushort)("Titlecase_Letter", unicodeLt),
immutable(UnicodeProperty!ushort)("Ugaritic", unicodeUgaritic),
immutable(UnicodeProperty!ushort)("Unassigned", unicodeCn),
immutable(UnicodeProperty!ushort)("Unified_Ideograph", unicodeUnified_Ideograph),
immutable(UnicodeProperty!ushort)("Vai", unicodeVai),
immutable(UnicodeProperty!ushort)("White_Space", unicodeWhite_Space),
immutable(UnicodeProperty!ushort)("XID_Continue", unicodeXID_Continue),
immutable(UnicodeProperty!ushort)("XID_Start", unicodeXID_Start),
immutable(UnicodeProperty!ushort)("Yi", unicodeYi),
immutable(UnicodeProperty!ushort)("Zl", unicodeZl),
immutable(UnicodeProperty!ushort)("Zp", unicodeZp),
immutable(UnicodeProperty!ushort)("Zs", unicodeZs),
];

immutable UnicodeProperty!uint[] fullUnicodeProps = [
immutable(UnicodeProperty!uint)("Carian", unicodeCarian),
immutable(UnicodeProperty!uint)("Co", unicodeCo),
immutable(UnicodeProperty!uint)("Deprecated", unicodeDeprecated),
immutable(UnicodeProperty!uint)("Deseret", unicodeDeseret),
immutable(UnicodeProperty!uint)("Egyptian_Hieroglyphs", unicodeEgyptian_Hieroglyphs),
immutable(UnicodeProperty!uint)("Gothic", unicodeGothic),
immutable(UnicodeProperty!uint)("InAegean Numbers", unicodeInAegean_Numbers),
immutable(UnicodeProperty!uint)("InAlchemical Symbols", unicodeInAlchemical_Symbols),
immutable(UnicodeProperty!uint)("InAncient Greek Musical Notation", unicodeInAncient_Greek_Musical_Notation),
immutable(UnicodeProperty!uint)("InAncient Greek Numbers", unicodeInAncient_Greek_Numbers),
immutable(UnicodeProperty!uint)("InAncient Symbols", unicodeInAncient_Symbols),
immutable(UnicodeProperty!uint)("InArabic Mathematical Alphabetic Symbols", unicodeInArabic_Mathematical_Alphabetic_Symbols),
immutable(UnicodeProperty!uint)("InAvestan", unicodeInAvestan),
immutable(UnicodeProperty!uint)("InBamum Supplement", unicodeInBamum_Supplement),
immutable(UnicodeProperty!uint)("InBrahmi", unicodeInBrahmi),
immutable(UnicodeProperty!uint)("InByzantine Musical Symbols", unicodeInByzantine_Musical_Symbols),
immutable(UnicodeProperty!uint)("InCarian", unicodeInCarian),
immutable(UnicodeProperty!uint)("InChakma", unicodeInChakma),
immutable(UnicodeProperty!uint)("InCJK Compatibility Ideographs Supplement", unicodeInCJK_Compatibility_Ideographs_Supplement),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension B", unicodeInCJK_Unified_Ideographs_Extension_B),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension C", unicodeInCJK_Unified_Ideographs_Extension_C),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension D", unicodeInCJK_Unified_Ideographs_Extension_D),
immutable(UnicodeProperty!uint)("InCounting Rod Numerals", unicodeInCounting_Rod_Numerals),
immutable(UnicodeProperty!uint)("InCuneiform", unicodeInCuneiform),
immutable(UnicodeProperty!uint)("InCuneiform Numbers and Punctuation", unicodeInCuneiform_Numbers_and_Punctuation),
immutable(UnicodeProperty!uint)("InCypriot Syllabary", unicodeInCypriot_Syllabary),
immutable(UnicodeProperty!uint)("InDeseret", unicodeInDeseret),
immutable(UnicodeProperty!uint)("InDomino Tiles", unicodeInDomino_Tiles),
immutable(UnicodeProperty!uint)("InEgyptian Hieroglyphs", unicodeInEgyptian_Hieroglyphs),
immutable(UnicodeProperty!uint)("InEmoticons", unicodeInEmoticons),
immutable(UnicodeProperty!uint)("InEnclosed Alphanumeric Supplement", unicodeInEnclosed_Alphanumeric_Supplement),
immutable(UnicodeProperty!uint)("InEnclosed Ideographic Supplement", unicodeInEnclosed_Ideographic_Supplement),
immutable(UnicodeProperty!uint)("InGothic", unicodeInGothic),
immutable(UnicodeProperty!uint)("InImperial Aramaic", unicodeInImperial_Aramaic),
immutable(UnicodeProperty!uint)("InInscriptional Pahlavi", unicodeInInscriptional_Pahlavi),
immutable(UnicodeProperty!uint)("InInscriptional Parthian", unicodeInInscriptional_Parthian),
immutable(UnicodeProperty!uint)("InKaithi", unicodeInKaithi),
immutable(UnicodeProperty!uint)("InKana Supplement", unicodeInKana_Supplement),
immutable(UnicodeProperty!uint)("InKharoshthi", unicodeInKharoshthi),
immutable(UnicodeProperty!uint)("InLinear B Ideograms", unicodeInLinear_B_Ideograms),
immutable(UnicodeProperty!uint)("InLinear B Syllabary", unicodeInLinear_B_Syllabary),
immutable(UnicodeProperty!uint)("InLycian", unicodeInLycian),
immutable(UnicodeProperty!uint)("InLydian", unicodeInLydian),
immutable(UnicodeProperty!uint)("InMahjong Tiles", unicodeInMahjong_Tiles),
immutable(UnicodeProperty!uint)("InMathematical Alphanumeric Symbols", unicodeInMathematical_Alphanumeric_Symbols),
immutable(UnicodeProperty!uint)("InMeroitic Cursive", unicodeInMeroitic_Cursive),
immutable(UnicodeProperty!uint)("InMeroitic Hieroglyphs", unicodeInMeroitic_Hieroglyphs),
immutable(UnicodeProperty!uint)("InMiao", unicodeInMiao),
immutable(UnicodeProperty!uint)("InMiscellaneous Symbols And Pictographs", unicodeInMiscellaneous_Symbols_And_Pictographs),
immutable(UnicodeProperty!uint)("InMusical Symbols", unicodeInMusical_Symbols),
immutable(UnicodeProperty!uint)("InOld Italic", unicodeInOld_Italic),
immutable(UnicodeProperty!uint)("InOld Persian", unicodeInOld_Persian),
immutable(UnicodeProperty!uint)("InOld South Arabian", unicodeInOld_South_Arabian),
immutable(UnicodeProperty!uint)("InOld Turkic", unicodeInOld_Turkic),
immutable(UnicodeProperty!uint)("InOsmanya", unicodeInOsmanya),
immutable(UnicodeProperty!uint)("InPhaistos Disc", unicodeInPhaistos_Disc),
immutable(UnicodeProperty!uint)("InPhoenician", unicodeInPhoenician),
immutable(UnicodeProperty!uint)("InPlaying Cards", unicodeInPlaying_Cards),
immutable(UnicodeProperty!uint)("InRumi Numeral Symbols", unicodeInRumi_Numeral_Symbols),
immutable(UnicodeProperty!uint)("InSharada", unicodeInSharada),
immutable(UnicodeProperty!uint)("InShavian", unicodeInShavian),
immutable(UnicodeProperty!uint)("InSora Sompeng", unicodeInSora_Sompeng),
immutable(UnicodeProperty!uint)("InSupplementary Private Use Area-A", unicodeInSupplementary_Private_Use_Area_A),
immutable(UnicodeProperty!uint)("InSupplementary Private Use Area-B", unicodeInSupplementary_Private_Use_Area_B),
immutable(UnicodeProperty!uint)("InTags", unicodeInTags),
immutable(UnicodeProperty!uint)("InTai Xuan Jing Symbols", unicodeInTai_Xuan_Jing_Symbols),
immutable(UnicodeProperty!uint)("InTakri", unicodeInTakri),
immutable(UnicodeProperty!uint)("InTransport And Map Symbols", unicodeInTransport_And_Map_Symbols),
immutable(UnicodeProperty!uint)("InUgaritic", unicodeInUgaritic),
immutable(UnicodeProperty!uint)("InVariation Selectors Supplement", unicodeInVariation_Selectors_Supplement),
immutable(UnicodeProperty!uint)("Kaithi", unicodeKaithi),
immutable(UnicodeProperty!uint)("Lycian", unicodeLycian),
immutable(UnicodeProperty!uint)("Meroitic_Hieroglyphs", unicodeMeroitic_Hieroglyphs),
immutable(UnicodeProperty!uint)("Old_South_Arabian", unicodeOld_South_Arabian),
immutable(UnicodeProperty!uint)("Old_Turkic", unicodeOld_Turkic),
immutable(UnicodeProperty!uint)("Other_Default_Ignorable_Code_Point", unicodeOther_Default_Ignorable_Code_Point),
immutable(UnicodeProperty!uint)("Private_Use", unicodeCo),
immutable(UnicodeProperty!uint)("Shavian", unicodeShavian),
immutable(UnicodeProperty!uint)("Variation_Selector", unicodeVariation_Selector),
];
immutable NFC_QCN = RleBitSet!uint.fromRawArray([0x340, 0x2, 0x1, 0x2, 0x2f, 0x1, 0x9, 0x1, 0x8, 0x1, 0x5d0, 0x8, 0x7c, 0x2, 0x1, 0x1, 0x53, 0x1, 0x2, 0x1, 0x22, 0x3, 0x2, 0x1, 0xfd, 0x2, 0x3e5, 0x1, 0x9, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xc, 0x1, 0x9, 0x1, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1, 0x11, 0x1, 0x9, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xc, 0x1, 0xfb7, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3d, 0x1, 0x2, 0x1, 0xa, 0x1, 0x1, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x2, 0x2, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x124, 0x1, 0x3, 0x2, 0x1fd, 0x2, 0x7b1, 0x1, 0xce23, 0x10e, 0x2, 0x1, 0x1, 0x1, 0x2, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0x44, 0x2, 0x6a, 0x43, 0x1, 0x1, 0x1, 0xa, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x9, 0xd60f, 0x7, 0x56, 0x6, 0x1263f, 0x21e]);immutable NFC_QCM = RleBitSet!uint.fromRawArray([0x300, 0x5, 0x1, 0x7, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x7, 0x6, 0x4, 0x2, 0x1, 0x2, 0x6, 0x1, 0x9, 0x1, 0x2, 0x1, 0x30d, 0x3, 0x2e6, 0x1, 0x81, 0x1, 0x18, 0x1, 0x166, 0x1, 0x17, 0x2, 0x66, 0x1, 0x18, 0x1, 0x7e, 0x1, 0x6b, 0x1, 0x12, 0x2, 0x67, 0x1, 0x18, 0x1, 0x72, 0x1, 0x4, 0x1, 0xf, 0x1, 0x24e, 0x1, 0x132, 0x15, 0x32, 0x1b, 0x972, 0x1, 0x1563, 0x2, 0xe01f, 0x1, 0x6c, 0x1]);
