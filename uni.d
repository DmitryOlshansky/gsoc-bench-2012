// Written in the D programming language.

/++
    Functions which operate on Unicode characters.

    For functions which operate on ASCII characters and ignore Unicode
    characters, see $(LINK2 std_ascii.html, std.ascii).

    (Short introduction to come)

    Synopsis:
    ---
    unittest
    {
        import std.uni;
        //intialize codepoint sets using regex notation
        //$(D set) contains codepoints from both scripts.
        auto set = CodepointSet("[\p{Cyrilic}||\p{Armenian}]");
        auto ascii = CodepointSet("[\p{ASCII}]");
        auto currency = CodepointSet("[\p{Currency_Symbol}]");

        //easy set ops
        auto a = set & ascii;
        assert(a.empty); //as it has no intersection with ascii
        a = set | ascii;
        auto b = currency - a; //subtract all ASCII, cyrilic and armenian

        //some properties of codepoint sets
        assert(b.length == 46); //only 46 left per unicode 6.1
        assert(!b['$']);    //testing is not really fast but works

        //building lookup tables
        auto oneTrie = a.buildTrie!1; //1-level Trie lookup table
        assert(oneTrie['£']);
        //pick best trie level, and bind it as a functor
        auto cyrilicOrArmenian = set.buildLookup;
        import std.algorithm;
        auto balance = find!(cyrilicOrArmenian)("Hello ընկեր!");
        assert(balance == "ընկեր!");

        //Normalization
        string s = "Plain ascii (and not only), is always normalized!";
        assert(s is normalize(s));//same string
        string nonS = "eﬃcient?"); //ffi ligature
        auto nS = normalize(nonS);
        assert(nS == "efficient?");
        assert(nS != n);
        //to NFKD, if available
        asert(normalize!NFKD("2¹⁰") == "210");
    }
    ---

    References:
        $(WEB www.digitalmars.com/d/ascii-table.html, ASCII Table),
        $(WEB en.wikipedia.org/wiki/Unicode, Wikipedia),
        $(WEB www.unicode.org, The Unicode Consortium)

    Trademarks:
        Unicode(tm) is a trademark of Unicode, Inc.

    Macros:
        WIKI=Phobos/StdUni

    Copyright: Copyright 2000 -
    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).
    Authors:   $(WEB digitalmars.com, Walter Bright), Jonathan M Davis, and Kenji Hara
    Source:    $(PHOBOSSRC std/_uni.d)
  +/
module uni;

static import std.ascii;
import std.traits, std.range, std.algorithm, std.typecons,
    std.format, std.conv, std.typetuple;
import std.array; //@@BUG UFCS doesn't work with 'local' imports

enum dchar lineSep = '\u2028'; /// UTF line separator
enum dchar paraSep = '\u2029'; /// UTF paragraph separator

//debug = std_uni;

//debug(std_uni) import std.stdio;
import std.stdio;

private:

enum lastDchar = 0x10FFFF;

auto force(T, F)(F from)
	if(isIntegral!T && !is(T == F))
{
	assert(from <= T.max && from >= T.min);
	return cast(T)from;
}

auto force(T, F)(F from)
    if(is(T == F))
{
    return from;
}

//cheap algorithm grease ;)
auto adaptIntRange(T, F)(F[] src)
{
	static struct ConvertIntegers//@@@BUG when in the 9 hells will map be copyable again?!
	{
		private F[] data;

		@property T front()
		{
			return force!T(data.front);
		}

		void popFront(){ data.popFront(); }

		@property bool empty()const { return data.empty; }

		@property size_t length()const { return data.length; }

		auto opSlice(size_t s, size_t e)
		{
		    return ConvertIntegers(data[s..e]);
        }

        //doesn't work with slices @@@BUG 7097
        @property size_t opDollar(){   return data.length; }
	}
	return ConvertIntegers(src);
}

//repeat bit X times pattern in val assuming it's length is 'bits'
size_t replicateBits(size_t times, size_t bits)(size_t val)
{
    static if(times == 1)
        return val;
    else static if(times % 2)
        return (replicateBits!(times-1, bits)(val)<<bits) | val;
    else
        return replicateBits!(times/2, bits*2)(val<<bits | val);
}

unittest
{//for replicate
    size_t m = 0b111;
    foreach(i; TypeTuple!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    {
        assert(replicateBits!(i, 3)(m)+1 == (1<<(3*i)));
        //writefln("%2d:%32b", i, replicateBits!(i, 3)(m));
    }
}

//multiple arrays squashed into one memory block
struct MultiArray(Types...)
{
    this(size_t[] sizes...)
    {
        size_t full_size;
        foreach(i, v; Types)
        {
            full_size += spaceFor!(bitSizeOf!v)(sizes[i]);
            sz[i] = sizes[i];
            static if(i >= 1)
                offsets[i] = offsets[i-1] +
                    spaceFor!(bitSizeOf!(Types[i-1]))(sizes[i-1]);
        }

        storage = new size_t[full_size];
    }

    @property auto slice(size_t n)()inout
    {
        return packedArrayView!(Unpack!(Types[n]), bitSizeOf!(Types[n]))(raw_ptr!n[0..length!n()]);
    }

    @property size_t length(size_t n)()const{ return sz[n]; }

    @property void length(size_t n)(size_t new_size)
    {
        if(new_size > sz[n])
        {//extend
            size_t delta = (new_size - sz[n]);
            sz[n] += delta;
			delta = spaceFor!(bitSizeOf!(Types[n]))(delta);
            storage.length +=  delta;//extend space at end
            //raw_slice!x must follow resize as it could be moved!
            //next stmts move all data past this array, last-one-goes-first
            static if(n != dim-1)
            {
                auto start = raw_ptr!(n+1);
				//len includes delta
                size_t len = (storage.ptr+storage.length-start);

                copy(retro(start[0..len-delta])
                    , retro(start[delta..len]));

                start[0..delta] = 0;
                //offsets are used for raw_slice, ptr etc.
                foreach(i; n+1..dim)
                    offsets[i] += delta;
            }
        }
        else if(new_size < sz[n])
        {//shrink
            size_t delta = (sz[n] - new_size);
			sz[n] -= delta;
            delta = spaceFor!(bitSizeOf!(Types[n]))(delta);            
            //move all data past this array, forward direction
            static if(n != dim-1)
            {
                auto start = raw_ptr!(n+1);
                size_t len = storage.length;
                copy(start[delta..len]
                 , start[0..len-delta]);
                
                //adjust offsets last, they affect raw_slice
                foreach(i; n+1..dim)
                    offsets[i] -= delta;
            }
			storage.length -= delta;
        }
        //else - NOP
    }

	@property size_t bytes(size_t n=size_t.max)() const
	{
		static if(n == size_t.max)
			return storage.length*size_t.sizeof;
		else static if(n != Types.length-1)
			return (raw_ptr!(n+1)-raw_ptr!n)*size_t.sizeof;
		else
			return (storage.ptr+storage.length - raw_ptr!n)*size_t.sizeof;
	}

    void store(OutputRange)(OutputRange sink)
        if(isOutputRange!(OutputRange, ubyte))         
    {
        formattedWrite(sink, "[%( 0x%x, %)]", offsets[]);
        formattedWrite(sink, ", [%( 0x%x, %)]", sz[]);
        formattedWrite(sink, ", [%( 0x%x, %)]", storage);
    }
    
    static MultiArray fromRawArray(size_t[] raw_offsets, size_t[] raw_sizes, size_t[] data)
    {
        MultiArray tmp;
        tmp.offsets[] = raw_offsets[];
        tmp.sz[] = raw_sizes[];
        tmp.storage = data;
        return tmp;
    }
private:
    @property auto raw_ptr(size_t n)()inout
    {
        static if(n == 0)
            return storage.ptr;
        else
        {
            return storage.ptr+offsets[n];
        }
    }
    size_t[Types.length] offsets;//offset for level x
    size_t[Types.length] sz;//size of level x
    enum dim = Types.length;
    static bool needNotifyGc()
    {
        bool yes = false;
        foreach(v; staticMap!(hasIndirections, Types))
            yes = yes || v;
        return yes;
    }
    template Unpack(T)
    {
         //TODO: hackish! do proper pattern matching with BitPacked!(sz, T)
        static if(is(typeof(T.bitSize)) && is(T.entity) )
        {
            alias T.entity Unpack;
        }
        else
            alias T Unpack;
    }
    alias staticMap!(bitSizeOf, Types) bitWidth;
    enum indirections = needNotifyGc();
    size_t[] storage;
}

unittest
{
    // sizes are:
    //lvl0: 3, lvl1 : 2, lvl2: 1
    auto m = MultiArray!(int, ubyte, int)(3,2,1);

    static void check(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            assert(m.slice!(k)[i] == i+1, text("level:",i," : ",m.slice!(k)[0..n]));
    }

    static void checkB(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            assert(m.slice!(k)[i] == n-i, text("level:",i," : ",m.slice!(k)[0..n]));
    }

    static void fill(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            m.slice!(k)[i] = force!ubyte(i+1);
    }

    static void fillB(size_t k, T)(ref T m, int n)
    {
        foreach(i; 0..n)
            m.slice!(k)[i] = force!ubyte(n-i);
    }

    m.length!1 = 100;
    fill!1(m, 100);
    check!1(m, 100);

    m.length!0 = 220;
    fill!0(m, 220);
    check!1(m, 100);
    check!0(m, 220);

    m.length!2 = 17;
    fillB!2(m, 17);
    checkB!2(m, 17);
    check!0(m, 220);
    check!1(m, 100);

    m.length!2 = 33;
    checkB!2(m, 17);
    fillB!2(m, 33);
    checkB!2(m, 33);
    check!0(m, 220);
    check!1(m, 100);

    m.length!1 = 195;
    fillB!1(m, 195);
    checkB!1(m, 195);
    checkB!2(m, 33);
    check!0(m, 220);

    auto marr = MultiArray!(BitPacked!(4, uint), BitPacked!(6, uint))(20, 10);
    marr.length!0 = 15;
    marr.length!1 = 30;
    fill!1(marr, 30);
    fill!0(marr, 15);
    check!1(marr, 30);
    check!0(marr, 15);
}

unittest
{//more bitpacking tests
    alias MultiArray!(BitPacked!(3, size_t)
                , BitPacked!(4, size_t)
                , BitPacked!(3, size_t)
                , BitPacked!(6, size_t)
                , bool) Bitty;
    alias sliceBits!(13, 16).entity fn1;
    alias sliceBits!( 9, 13).entity fn2;
    alias sliceBits!( 6,  9).entity fn3;
    alias sliceBits!( 0,  6).entity fn4;
    static void check(size_t lvl, MA)(ref MA arr){
        for(size_t i = 0; i< arr.length!lvl; i++)
            assert(arr.slice!(lvl)[i] == i, text("Mismatch on lvl ", lvl, " idx ", i, " value: ", arr.slice!(lvl)[i]));
    }

    static void fillIdx(size_t lvl, MA)(ref MA arr){
        for(size_t i = 0; i< arr.length!lvl; i++)
            arr.slice!(lvl)[i] = i;
    }
    Bitty m1;
    
    m1.length!4 = 10;
    m1.length!3 = 2^^6;
    m1.length!2 = 2^^3;
    m1.length!1 = 2^^4;
    m1.length!0 = 2^^3;

    m1.length!4 = 2^^16;

    for(size_t i = 0; i< m1.length!4; i++)
        m1.slice!(4)[i] = i % 2;

    fillIdx!1(m1);
    check!1(m1);
    fillIdx!2(m1);
    check!2(m1);
    fillIdx!3(m1);
    check!3(m1);
    fillIdx!0(m1);
    check!0(m1);
    check!3(m1);
    check!2(m1);
    check!1(m1);
    for(size_t i=0; i < 2^^16; i++)
    {
        m1.slice!(4)[i] = i % 2;
        m1.slice!(0)[fn1(i)] = fn1(i);
        m1.slice!(1)[fn2(i)] = fn2(i);
        m1.slice!(2)[fn3(i)] = fn3(i);
        m1.slice!(3)[fn4(i)] = fn4(i);
    }
    for(size_t i=0; i < 2^^16; i++)
    {
        assert(m1.slice!(4)[i] == i % 2);
        assert(m1.slice!(0)[fn1(i)] == fn1(i));
        assert(m1.slice!(1)[fn2(i)] == fn2(i));
        assert(m1.slice!(2)[fn3(i)] == fn3(i));
        assert(m1.slice!(3)[fn4(i)] == fn4(i));
    }
}

//test bit packing with MultiArrays

size_t spaceFor(size_t bits)(size_t new_len)
{
    static if(bits > 8*size_t.sizeof)
    {
        static assert(bits % (size_t.sizeof*8) == 0);
        return new_len * bits/(8*size_t.sizeof);
    }
    else
    {
        enum factor = size_t.sizeof*8/bits;
        return (new_len+factor-1)/factor;
    }
}

//only per word packing, speed is more important
//doesn't own memory, only provides access
struct PackedArrayView(T, size_t bits)
{
    import core.bitop;
    this(inout(size_t)[] arr)inout
    {
        original = arr;
    }

    static if(bits % 8)
    {
        T opIndex(size_t idx)inout
        in
        {
            assert(idx/factor < original.length, text(idx/factor, " vs ", original.length));
        }
        body
        {        
            /*static if(bits == 1)
            {
                
                T t = cast(T)bt(original.ptr, idx);
                return t;
            }
            else*/
            {

                return cast(T)
                ((original[idx/factor] >> bits*(idx%factor))
                     & mask);       
            }
        }

        void opIndexAssign(T val, size_t idx)
        in
        {
            static if(isIntegral!T)
                assert(val <= mask, text("mask: ",mask, " bits: ", bits, "value:", val, " > ", mask));
        }
        body
        {
            /*static if(bits == 1)
            {
                val ? bts(original.ptr, idx) : btr(original.ptr, idx);
                assert(this[idx] == val);
            }
            else*/
            {
                size_t tgt_shift = bits*(idx%(factor));
                original[idx/factor] &= ~(mask<<tgt_shift);
                original[idx/factor] |= cast(size_t)val << tgt_shift;
            }
        }
    }
    else
    {//by byte granular type itself
        ref inout(T) opIndex(size_t idx)inout
        {
            return (cast(inout(T)*)original.ptr)[idx];
        }
    }

    void opSliceAssign(T val, size_t start, size_t end)
    {
        //rounded to factor granuarity
        /*size_t pad_start = (start+factor/2)/factor*factor;//rounded up
        size_t pad_end = end/factor*factor; //rounded down
        size_t i;
        for(i=start; i<pad_start; i++)
            this[i] = val;
        writeln("!!~!~!!");
        //all in between is x*factor elements
        if(pad_start != pad_end)
        {
            size_t repval = replicateBits!(factor, bits)(val);
            for(size_t j=i/factor; i<pad_end; i+=factor, j++)
                original[j] = repval;//so speed it up by factor
        }
        for(; i<end; i++)
            this[i] = val;*/
        for(size_t i=start; i<end; i++)
            this[i] = val;
    }

    auto opSlice(size_t from, size_t to)
    {
        return SliceOverIndexed!PackedArrayView(from, to, &this);
    }

    auto opSlice(){ return opSlice(0, length); }

    bool opEquals(T)(const ref T arr) const
    {
        if(length != arr.length)
           return false;
        for(size_t i=0;i<length; i++)
            if(this[i] != arr[i])
                return false;
        return true;
    }

    @property size_t length()const{ return original.length*factor; }

private:

    //factor - number of elements in one machine word
    enum factor = size_t.sizeof*8/bits, mask = 2^^bits-1;
    size_t[] original;
}


private struct SliceOverIndexed(T)
{
    auto opIndex(size_t idx)const
    in
    {
        assert(idx < to - from);
    }
    body
    {
        return arr.opIndex(from+idx);
    }

    void opIndexAssign(Item val, size_t idx)
    in
    {
        assert(idx < to - from);
    }
    body
    {
       (*arr)[from+idx] = val;
    }

    auto opSlice(size_t a, size_t b)
    {
        return SliceOverIndexed(from+a, from+b, arr);
    }

    void opSliceAssign(T)(T val, size_t start, size_t end)
    {
        return arr.opSliceAssign(val, start+from, end+from);
    }

    auto opSlice()
    {
        return opSlice(from, to);
    }

    @property size_t length()const{ return to-from;}

    @property bool empty()const { return from == to; }

    @property auto front()const { return (*arr)[from]; }

    @property void front(Item val) { (*arr)[from] = val; }

    @property auto back()const { return (*arr)[to-1]; }

    @property void back(Item val) { (*arr)[to-1] = val; }

    @property auto save() { return this; }

    void popFront() {   from++; }

    void popBack() {   to--; }

    bool opEquals(T)(const ref T arr) const
    {
        if(arr.length != length)
            return false;
        for(size_t i=0; i <length; i++)
            if(this[i] != arr[i])
                return false;
        return true;
    }
private:
    alias typeof(T.init[0]) Item;
     size_t from, to;
     T* arr;
}

private auto packedArrayView(T, size_t bits)(inout(size_t)[] arr)inout
{
    return inout(PackedArrayView!(T, bits))(arr);
}

/*
unittest
{
    size_t[] sample = new size_t[328];
    auto parr = packedArrayView!(uint, 7)(sample);
    foreach(i; 0..parr.length)
        parr[i] = i % 128;
    writefln("%(%x%)", sample);

    foreach(i; 0..parr.length)
        assert(parr[i] == i % 128, text(i, " vs ", parr[i]));

    auto parr2 = packedArrayView!(uint, 14)(sample);
    //re-viewing it as doubly sized is supported cleanly
    for(int i=0; i<parr2.length; i++)
        assert(parr2[i] == ((((2*i+1) % 128)<<7) | (2*i % 128)), text(i, " vs ", parr2[i]));
    equal(parr2[0..2],  [128, 384+2]);
}

*/
@safe:
//hope to see simillar stuff in public interface... once Allocators are out
//@@@BUG moveFront and friends? dunno, for now it's POD-only

@trusted size_t genericReplace(Policy=void, T, Range)
    (ref T dest, size_t from, size_t to, Range stuff)
{
    size_t delta = to - from;
    size_t stuff_end = from+stuff.length;
    if(stuff.length > delta)
    {//replace increases length
        delta = stuff.length - delta;//now, new is > old  by delta
        static if(is(Policy == void))
            dest.length = dest.length+delta;//@@@BUG lame @property
        else
            dest = Policy.realloc(dest, dest.length+delta);
        auto rem = copy(retro(dest[to..dest.length-delta])
             , retro(dest[to+delta..dest.length]));
        assert(rem.empty);
        copy(stuff, dest[from..stuff_end]);
    }
    else if(stuff.length == delta)
    {
        copy(stuff, dest[from..to]);
    }
    else
    {//replace decreases length by delta
        delta = delta - stuff.length;
        copy(stuff, dest[from..stuff_end]);
        auto rem =  copy(dest[to..dest.length]
             , dest[stuff_end..dest.length-delta]);
        static if(is(Policy == void))
            dest.length = dest.length - delta;//@@@BUG lame @property
        else
            dest = Policy.realloc(dest, dest.length-delta);
        assert(rem.empty);
    }
    return stuff_end;
}

//Simple storage manipulation policy
//TODO: stop working around the bugs rorts them!
@trusted public struct GcPolicy
{
    static T[] dup(T)(const T[] arr)
    {
        return arr.dup;
    }

    static T[] realloc(T)(T[] arr, size_t sz)
    {
        arr.length = sz;
        return arr;
    }

    static void replaceImpl(T, Range)(ref T[] dest, size_t from, size_t to, Range stuff)
    {
        replaceInPlace(dest, from, to, stuff);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(!isInputRange!V)
    {
        arr ~= force!T(value);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(isInputRange!V)
    {
        insertInPlace(arr, arr.length, value);
    }

    static void destroy(T)(ref T arr)
        if(isDynamicArray!T && is(Unqual!T == T))
    {
        debug 
        {
            arr[] = cast(typeof(T.init[0]))(0xdead_beef); 
        }
    }

    static void destroy(T)(ref T arr)
        if(isDynamicArray!T && !is(Unqual!T == T))
    { /*NOP*/ }
}

//ditto
@trusted struct ReallocPolicy
{
    import std.exception, core.stdc.stdlib;
    static T[] dup(T)(const T[] arr)
    {
        auto result = alloc!T(arr.length);
        result[] = arr[];
        return result;
    }

    static T[] alloc(T)(size_t size)
    {
        auto ptr = cast(T*)enforce(malloc(T.sizeof*size), "out of memory on C heap");
        return ptr[0..size];
    }

    static T[] realloc(T)(T[] arr, size_t size)
    {
        if(!size)
        {
            destroy(arr);
            return null;
        }
        auto ptr = cast(T*)enforce(core.stdc.stdlib.realloc(
                             arr.ptr, T.sizeof*size), "out of memory on C heap");
        return ptr[0..size];
    }

    static void replaceImpl(T, Range)(ref T[] dest, size_t from, size_t to, Range stuff)
    {
        genericReplace!(ReallocPolicy)(dest, from, to, stuff);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(!isInputRange!V)
    {
        arr = realloc(arr, arr.length+1);
        arr[$-1] = force!T(value);
    }

    static void append(T, V)(ref T[] arr, V value)
        if(isInputRange!V && hasLength!V)
    {
        arr = realloc(arr, arr.length+value.length);
        copy(value, arr[$-value.length..$]);
    }

    static void destroy(T)(ref T[] arr)
    {
        if(arr.ptr)
            free(arr.ptr);
        arr = null;
    }
}

unittest
{
    with(ReallocPolicy)
    {
        bool test(T, U, V)(T orig, size_t from, size_t to, U toReplace, V result,
                   string file = __FILE__, size_t line = __LINE__)
        {
            {
                replaceImpl(orig, from, to, toReplace);
                scope(exit) destroy(orig);
                if(!std.algorithm.equal(orig, result))
                    return false;
            }
            return true;
        }
        static T[] arr(T)(T[] args... )
        {
            return dup(args);
        }

        assert(test(arr([1, 2, 3, 4]), 0, 0, [5, 6, 7], [5, 6, 7, 1, 2, 3, 4]));
        assert(test(arr([1, 2, 3, 4]), 0, 2, cast(int[])[], [3, 4]));
        assert(test(arr([1, 2, 3, 4]), 0, 4, [5, 6, 7], [5, 6, 7]));
        assert(test(arr([1, 2, 3, 4]), 0, 2, [5, 6, 7], [5, 6, 7, 3, 4]));
        assert(test(arr([1, 2, 3, 4]), 2, 3, [5, 6, 7], [1, 2, 5, 6, 7, 4]));
    }
}

template isCodepointSet(T)
{
    enum isCodepointSet = is(typeof(T.init.isSet));
}

//bootstrap full set operations from 3 primitives:
//addInterval, skipUpTo, dropUpTo & byInterval iteration
mixin template BasicSetOps()
{
@trusted:
    alias typeof(this) This;
    /**
        $(P Sets support natural syntax for set algebra, namely:)
        $(BOOKTABLE
            $(TR $(TH Operator) $(TH Math notation) $(TH Description) )
            $(TR $(TD &) $(TD a ∩ b) $(TD intersection) )
            $(TR $(TD |) $(TD a ∪ b) $(TD union) )
            $(TR $(TD -) $(TD a ∖ b) $(TD subtraction) )
            $(TR $(TD ~) $(TD a ~ b) $(TD symmetric set difference i.e. (a ∪ b) \ (a ∩ b) ))
        )
    */
    const This opBinary(string op, U)(U rhs) 
        if(isCodepointSet!U || is(U:dchar))
    {
        static if(op == "&" || op == "|" || op == "~")
        {//symmetric ops thus can swap arguments to reuse r-value
            static if(is(U:dchar))
            {
                auto copy = this.dup;
                mixin("copy "~op~"= rhs; ");
                return copy;
            }
            else
            {
                static if(is(Unqual!U == U))
                {
                    //try hard to reuse r-value         
                    mixin("rhs "~op~"= this;");
                    return rhs;
                }
                else
                {
                    auto tmp = this.dup;
                    mixin("tmp "~op~"= rhs;");
                    return tmp;
                }
            }
        }
        else static if(op == "-")
        {
            auto copy = this.dup;
            copy -= rhs;
            return copy;
        }
        else
            static assert(0, "no operator "~op~" defined for Set");
    }

    bool opBinaryRight(string op, U)(U ch)
        if(op == "in" && is(U : dchar))
    {
        return this[ch];
    }

    ///The 'op=' versions of the above overloaded operators.
    ref This opOpAssign(string op, U)(in U rhs)
        if(isCodepointSet!U || is(U:dchar))
    {
        static if(op == "|")    //union
        {
            static if(is(U:dchar))
			{
                this.addInterval(rhs, rhs+1);
				return this;
			}
            else
                return this.add(rhs);
        }
        else static if(op == "&")   //intersection
                return this.intersect(rhs);//overloaded
        else static if(op == "-")   //set difference
                return this.sub(rhs);//overloaded
        else static if(op == "~")   //symmetric set difference
        {
            auto copy = this & rhs;
            this |= rhs;
            this -= copy;
            return this;
        }
        else
            static assert(0, "no operator "~op~" defined for Set");
    }

    ///Range that spans each codepoint in this set.
    @property auto byChar() const
    {
        static struct CharRange
        {
            this(in This set)
            {
                this.r = set.byInterval;
                cur = r.front.a;
            }

            @property dchar front() const
            {
                return cast(dchar)cur;
            }

            @property bool empty() const
            {
                return r.empty;
            }

            void popFront()
            {
                cur++;
                while(cur >= r.front.b)
                {
                    r.popFront();
                    if(r.empty)
                        break;
                    cur = r.front.a;
                }
            }
        private:
            uint cur;
            typeof(This.init.byInterval) r;
        }

        return CharRange(this);
    }

    /**
        $(P Obtain textual representation of this set in from of [a..b) intervals
        and feed it to $(D sink). )
        $(P Used by various standard formatting facilities such as
         $(XREF std._format, formattedWrite), $(D write), $(D writef) and others.
        )
    */
    void toString(scope void delegate (const(char)[]) sink)
    {
        import std.format;
        foreach(i; byInterval)
                formattedWrite(sink, "[%d..%d) ", i.a, i.b);
    }

	ref add()(uint a, uint b)
    {
        addInterval(a, b);
        return this;
    }
	enum isSet = true;
private:

    ref intersect(U)(in U rhs)
        if(isCodepointSet!U)
    {
        Marker mark;
        foreach( i; rhs.byInterval())
        {
            mark = this.dropUpTo(i.a, mark);
            mark = this.skipUpTo(i.b, mark);
        }
        this.dropUpTo(uint.max, mark);
        return this;
    }

    ref intersect()(dchar ch)
    {
        foreach(i; byInterval)
            if(i.a >= ch && ch < i.b)
                return this = This.init.add(ch, ch+1);
        this = This.init;
        return this;
    }

    ref sub()(dchar ch)
    {
        //workaround a BUG, somehow overload below doesn't survive if base class has sub(dchar)
        return subChar(ch);
    }

    //same as the above except that skip & drop parts are swapped
    ref sub(U)(in U rhs)
        if(isCodepointSet!U)
    {
        uint top;
        Marker mark;
        foreach(i; rhs.byInterval)
        {
            mark = this.skipUpTo(i.a, mark);
            mark = this.dropUpTo(i.b, mark);
        }
        return this;
    }

    ref add(U)(in U rhs)
        if(isCodepointSet!U)
    {
        Marker start;
        foreach(i; rhs.byInterval())
        {
            start = addInterval(i.a, i.b, start);
        }
        return this;
    }

};

///RleBitSet is ...
@trusted public struct RleBitSet(T, SP=GcPolicy)
    if(isUnsigned!T)
{
public:
	this(Set)(in Set set)
		if(isCodepointSet!Set)
	{
		size_t top=0;
		foreach(iv; set.byInterval)
		{
				appendPad(data, iv.a - top);
				appendPad(data, iv.b - iv.a);
				top = iv.b;
		}
	}

    this()(in uint[] intervals...) //@@@BUG text is not safe yet?!
    in
    {
        assert(intervals.length % 2 == 0, "Odd number of interval bounds [a, b)!");
        for(uint i=1; i<intervals.length; i++)
            assert(intervals[i-1] < intervals[i]
                   , text(intervals[i-1], ">", intervals[i], " in set c-tor"));
    }
    body
    {
        size_t top=0;
        for(size_t i = 0;  i < intervals.length; i+=2)
        {
            appendPad(data, intervals[i] - top);
            appendPad(data, intervals[i+1] - intervals[i]);
            top = intervals[i+1];
        }
    }

    this(this) 
    {//TODO: COW
        data = SP.dup(data);
    }

    static if(is(SP == ReallocPolicy))
        const ~this() 
        {
            SP.destroy(data);
        }

    ///Make a mutable copy of this set.
    @property auto dup() const
    {
        RleBitSet s;
        s.data = SP.dup(data);
        return s;
    }

    @property auto byInterval() const
    {
        import std.typecons;
        static struct IntervalRange
        {
            this(in RleBitSet set_)
            {
                data = set_.data;
                popFront();
            }

            uint step(ref uint idx, uint value)
            {
                static if(T.sizeof == 4)
                {
                    value += data[idx];
                    idx++;
                }
                else
                {
                    value += data[idx];
                    while(idx+1 < data.length && data[idx+1] == 0)
                    {
                        assert(idx+2 < data.length);
                        value += data[idx+2];
                        idx += 2;
                    }
                    idx++;
                }
                return value;
            }

            @property auto front() const
            {
                return Tuple!(uint,"a", uint,"b")(a, b);
            }

            @property bool empty() const
            {
                return data == null;
            }

            void popFront()
            {
                if(idx == data.length)
                {
                    data = null;
                    return;
                }
                a = step(idx, b);
                b = step(idx, a);
            }

            uint a, b, idx;
            const(T)[] data;
        }

        return IntervalRange(this);
    }

    bool equal(U,SP)(const ref RleBitSet!(U,SP) rhs) const
    {
        static if(T.sizeof == 4 && U.sizeof == 4)//short-circuit full versions
            return repr == rhs.repr;
        else
        {
            uint top=0, rtop=0, idx=0, ridx=0;
            while(idx < data.length && ridx < rhs.data.length)
            {
                top += data[idx];
                rtop += rhs.data[ridx];
                while(rtop != top)
                {
                    //check for ... x 0 y "prolong" sequence
                    if(ridx + 1 < rhs.data.length && rhs.data[ridx+1] == 0)
                    {
                        //OK rhs has extra segment
                        assert(ridx+2 < rhs.data.length); // 0 at the end is an error
                        rtop += rhs.data[ridx+2];
                        ridx += 2;
                    }
                    else if(idx + 1 < data.length && data[idx+1] == 0)
                    {
                        assert(idx+2 < data.length); // ditto at end
                        top += data[idx+2];
                        idx += 2;
                    }
                    else
                        return false;
                }
                idx++;
                ridx++;
            }
            if(idx == data.length)
            {
                if(ridx == rhs.data.length)
                    return true;
                //check overlong sequence
                rtop += rhs.data[ridx];
                while(rtop != top)
                    if(ridx + 1 < rhs.data.length && rhs.data[ridx+1] == 0)
                    {
                        //rhs has extra segment
                        assert(ridx+2 < rhs.data.length); // 0 at the end is an error
                        rtop += rhs.data[ridx+2];
                        ridx += 2;
                    }
                    else
                        return false;
            }
            else
            {
                if(idx == data.length)
                    return true;
                //check overlong sequence
                top += data[idx];
                while(rtop != top)
                    if(idx + 1 < data.length && data[idx+1] == 0)
                    {
                        //rhs has extra segment
                        assert(idx+2 < data.length); // 0 at the end is an error
                        top += data[idx+2];
                        idx += 2;
                    }
                    else
                        return false;
            }
            return idx == data.length && ridx == rhs.data.length;
        }
    }

    bool opEquals(U,SP)(const ref RleBitSet!(U,SP) rhs) const
        if(isUnsigned!U)
    {
        return this.equal(rhs);
    }

    bool opEquals(U,SP)(in RleBitSet!(U,SP) rhs) const
        if(isUnsigned!U)
    {
        return this.equal(rhs);
    }

    bool opIndex(uint val)const
    {
        foreach(i; byInterval)
            if(val < i.b)
                return val >= i.a;
        return false;
    }

	@property size_t size()const
	{
		size_t sum = 0 ;
		for(size_t i=0; i<data.length; i+=2)
			sum += data[i+1];//sum up positive intervals
		return sum;
	}

	ref invert()
	{
		//TODO: implement inversion
		return this;
	}

	@property bool empty()const
	{
		return data.length == 0;
	}

    void store(OutputRange)(scope OutputRange sink) const
        if(isOutputRange!(OutputRange, T))
    {
        foreach(v; data)
            put(sink, v);
    }

    @safe @property size_t bytes() pure const nothrow 
    {
        return data.length*T.sizeof;
    }

    mixin BasicSetOps;
private:
    static if(is(SP == GcPolicy))
        static RleBitSet fromRawArray(T[] input) @trusted pure nothrow
        {//assumes it's a GC-ed slice
            RleBitSet set=void;    
            set.data = input;
            return set;        
        }
    
    struct Marker//denotes position in RleBitSet
    {
        uint idx;
        uint top_before_idx;
    };

    //Think of it as of RLE compressed bit-array
    //data holds _lengths_ of intervals
    //first value is a length of negative portion, second interval is positive,
    //3rd is negative etc. (length can be zero e.g. if interval contains 0 like [\x00-\x7f])
    T[] data;

    static void appendPad(ref T[] dest, size_t val)
    {
        while(val > T.max)
        {//should be somewhat rare(!)
            val -= T.max;
            SP.append(dest, adaptIntRange!T([T.max, 0]));
        }
        SP.append(dest, val);
    }

    static size_t replacePad(ref T[] dest, size_t from, size_t to, uint[] to_insert)
    {
        static if(T.sizeof == 4)//short-circuit to optimal version
        {
            SP.replaceImpl(dest, from, to, to_insert);
            return from+to_insert.length-1;
        }
        else
        {
            T[] scratch_space;
            size_t s=0;
            foreach(i, v; to_insert)
                if(v > T.max)
                {
                    SP.append(scratch_space, adaptIntRange!T(to_insert[s..i]));
                    appendPad(scratch_space, v);
                    s = i+1;
                }

            if(s == 0)
            {
                SP.replaceImpl(dest, from, to, adaptIntRange!T(to_insert)); // short-circuit #2
                return from+to_insert.length-1;
            }
            else
            {// some of (T.max, 0) ended up there
                SP.append(scratch_space, adaptIntRange!T(to_insert[s..$]));
                SP.replaceImpl(dest, from, to, scratch_space);
                SP.destroy(scratch_space);
                return from+scratch_space.length-1;
            }
        }
    }

    @property const(T)[] repr() const{ return data; }

    //special case for RLE set
    ref subChar(dchar ch)
    {
        Marker mark;
        mark = skipUpTo(ch, mark);
        if(mark.top_before_idx == ch && mark.idx+1 != data.length)
        {
            data[mark.idx+1] -= 1;
            data[mark.idx] += 1;
            assert(data[mark.idx] == 1);
        }
        return this;
    }

    //returns last point of insertion (idx,  top_value right before idx),
    // so that top += data[idx] on first iteration  gives top of idx
    Marker addInterval(uint a, uint b, Marker mark=Marker.init)
    in
    {
        assert(a <= b);
    }
    body
    {
        uint hint = mark.idx, hint_top_before=mark.top_before_idx;
        static if(T.sizeof != 4)
            if(a == b)//empty interval, happens often with ushort/ubyte lists
                return Marker(hint, hint_top_before);
        uint top=hint_top_before, idx, a_start, a_idx;
        debug(std_uni)
        {
            scope(exit){
                writefln("after adding (%d, %d):", a, b);
                toString((x){ write(x); });
            }
        }
        uint pos, pre_top;//marker that indicates place of insertion
        assert(a >= top, text(a, "<=", top));
        for(idx=hint; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
            {
                assert(top >=  data[idx]);
                a_start = top - data[idx];
                assert(a_start <= a);
                a_idx = idx;
                break;
            }
        }

        if(idx == data.length)
        {
            //  [---+++----++++----++++++]
            //  [                         a  b]
            static if(T.sizeof < 4)
            {
               appendPad(data, a - top);
               appendPad(data, b - a);
            }
            else
                SP.append(data, adaptIntRange!T([a - top, b - a]));

            return Marker(cast(uint)data.length-1, b - data[$-1]);
        }

        top -= data[idx];
        for(; idx<data.length;idx++)
        {
            top += data[idx];
            if(b <= top)
                break;
        }

        debug(std_uni)
        {
            writefln("a_start=%d; a_idx=%d; idx=%d;", a_start, a_idx, idx);
            writefln("a=%s; b=%s; top=%s; a_start=%s;", a, b, top, a_start);
        }

        uint[] to_insert;
        if(idx == data.length)
        {
            //  [-------++++++++----++++++-]
            //  [      s     a                 b]
            if(a_idx & 1)//a in positive
            {
                to_insert = [ b - a_start ];
            }
            else// a in negative
            {
                to_insert = [ a - a_start, b - a];
            }
            pos = cast(uint)replacePad(data, a_idx, idx, to_insert);
            pre_top = b - data[pos];
            return Marker(cast(uint)pos, pre_top) ; //bail out early
        }

        if(a_idx & 1)
        {//a in positive
            if(idx & 1)//b in positive
            {
                //  [-------++++++++----++++++-]
                //  [       s    a        b    ]
                to_insert = [top - a_start];
            }
            else //b in negative
            {
                //  [-------++++++++----++++++-]
                //  [       s    a   b         ]
                if(top == b)
                {
                    assert(idx+1 < data.length);
                    pre_top = b + data[idx+1];
                    pos = cast(uint)replacePad(data, a_idx, idx+2, [b + data[idx+1] - a_start]);
                    pre_top -= data[pos];
                    return Marker(cast(uint)pos, pre_top);
                }
                to_insert = [b - a_start, top - b];
            }
        }
        else
        { // a in negative
            if(idx & 1) //b in positive
            {
                //  [----------+++++----++++++-]
                //  [     a     b              ]
                to_insert = [a - a_start, top - a];
            }
            else// b in negative
            {
                //  [----------+++++----++++++-]
                //  [  a       s      b        ]
                if(top == b)
                {
                    assert(idx+1 < data.length);
                    pre_top = top + data[idx+1];
                    pos = cast(uint)replacePad(data, a_idx, idx+2, [a - a_start, top + data[idx+1] - a ]);
                    pre_top -= data[pos];
                    return Marker(cast(uint)pos, pre_top);
                }
                assert(a >= a_start, text(a, "<= ", a_start));
                to_insert = [a - a_start, b - a, top - b];
            }
        }
        pos = cast(uint)replacePad(data, a_idx, idx+1, to_insert);
        pre_top = top - data[pos];
        debug(std_uni)
        {
            writefln("marker idx: %d; length=%d", pos, pre_top, data.length);
            writeln("inserting ", to_insert);
        }
        return Marker(cast(uint)pos, pre_top);
    }

    //remove intervals up to [..a) staring at Marker(idx, top_before)
    Marker dropUpTo(uint a, Marker mark=Marker.init)
    {
        uint start_idx = mark.idx, top_before = mark.top_before_idx;
        uint top=top_before, idx=start_idx;
        uint pos, pre_top;//marker that indicates place of insertion
        assert(idx % 2 == 0); //can't start in positive interval,
        //though negative interval can be of length zero
        for(; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
                break;
        }
        if(idx >= data.length)
        {
            //nothing left
            SP.replaceImpl(data, start_idx, data.length, cast(T[])[]);
            return Marker(cast(uint)data.length, top);
        }

        if(idx & 1)
        {   //a in positive
            //[--+++----++++++----+++++++------...]
            //      |<---si       s  a  t
            uint start = top - data[idx];
            if(top == a)//glue two negative intervals
            {
                // for negative stuff, idx can be equal data.length-1
                if(idx + 1 == data.length)
                {
                    replacePad(data, start_idx, data.length, []);
                    return Marker(cast(uint)data.length, top);
                }
                replacePad(data, start_idx, idx+2, [top + data[idx+1] - top_before]);
                return Marker(start_idx, top_before);
            }
            replacePad(data, start_idx, idx+1, [a - top_before, top - a]);
        }
        else
        {   //a in negative
            //[--+++----++++++----+++++++-------+++...]
            //      |<---si              s  a  t
            replacePad(data, start_idx, idx+1, [top - top_before]);
        }
        return Marker(start_idx, top_before);
    }

    //skip intervals up to ..a)
    Marker skipUpTo(uint a, Marker mark=Marker.init)
    out(result)
    {
        assert(result.idx % 2 == 0);//always negative intervals
        //(may be  0-width after-split)
    }
    body
    {
        uint start_idx = mark.idx, top_before = mark.top_before_idx;
        uint top=top_before, idx=start_idx;
        assert(data.length % 2 == 0);
        for(; idx < data.length; idx++)
        {
            top += data[idx];
            if(a <= top)
                break;
        }
        if(idx >= data.length) //could have Marker point to recently removed stuff
            return Marker(cast(uint)data.length, top);

        if(idx & 1)//landed in positive, check for split
        {
            if(top == a)//no need to split, it's end
                return Marker(idx+1, top);
            uint start = top - data[idx];
            //split it up
            uint val = cast(uint)replacePad(data, idx, idx+1, [a - start, 0, top - a]);

            return Marker(val-1, top - (data[val]+data[val-1]));        //avoid odd index
        }
        return Marker(idx, top - data[idx]);
    }
};

/**
    $(D CodepointSet) is a packed data structure for sets of codepoints.
    Memory usage is 6 bytes per each contigous interval in a set.
*/
@trusted public struct InversionList(SP=GcPolicy)
{
	this(Set)(in Set set)
		if(is(typeof(Set.init.isSet)))
	{
		uint[] arr;
		foreach(v; set.byInterval)
		{
			arr ~= v.a;
			arr ~= v.b;
		}
		data = Uint24Array!(SP)(arr);
	}

    this()(uint[] intervals...)
    in
    {
        assert(intervals.length % 2 == 0, "Odd number of interval bounds [a, b)!");
        for(uint i=1; i<intervals.length; i++)
            assert(intervals[i-1] < intervals[i]);
    }
    body
    {
        data = Uint24Array!(SP)(intervals);
    }

    this(this)
    {//TODO: COW
        data = data.dup;
    }

    ///Make a mutable copy of this set.
    @property auto dup()const
    {
        InversionList s;
        s.data = data.dup;
        return s;
    }

    @property auto byInterval()const 
    {
        static struct Intervals
        {
            @property auto front()const
            {
                uint a = *cast(uint*)slice.ptr;
                uint b= *cast(uint*)(slice.ptr+1);
                //optimize a bit, since we go by even steps
                return Tuple!(uint, "a", uint, "b")(a & 0xFF_FFFF, b >> 8);
            }

            @property auto back()const
            {
                uint a = *cast(uint*)slice.ptr[len-2];
                uint b = *cast(uint*)slice.ptr[len-1];
                //optimize a bit, since we go by even steps
                return Tuple!(uint, "a", uint, "b")(a & 0xFF_FFFF, b >> 8);
            }

            void popFront()
            {
               len -= 2;
               slice = slice[3..$];//3*2 16bit == 2*24 bits
            }

            void popBack()
            {
                len -= 2;
                slice = slice[0..$-3];
            }

            @property bool empty()const { return len == 0; }

            @property auto save(){ return this; }
        private:
            const(ushort)[] slice;
            size_t len;
        }
        return Intervals(data.data, data.length);
    }

    bool opIndex(uint val)
    {
        return assumeSorted(data[]).lowerBound!(SearchPolicy.gallop)(val).length & 1;
    }

	///Number of characters in this set
	@property size_t size()
	{
		size_t sum = 0;
		foreach(iv; byInterval)
		{
			sum += iv.b - iv.a;
		}
		return sum;
	}

	///Do an in-place inversion of set.  See also '!' unary operator.
	ref invert()
	{
		if(data.length == 0)
		{
			addInterval(0, lastDchar+1);
			return this;
		}
		if(data[0] != 0)
			genericReplace(data, 0, 0, [0]);
		if(data[data.length-1] != lastDchar+1)
			genericReplace(data, data.length, data.length, [lastDchar+1]);

		return this;
	}

	@property bool empty() const
	{
		return data.length == 0;
	}

    mixin BasicSetOps;
private:
    alias typeof(this) This;
    alias size_t Marker;

    //special case for normal InversionList
    ref subChar(dchar ch)
    {
        auto mark = skipUpTo(ch);
        if(mark != data.length
            && data[mark] == ch && data[mark-1] == ch)
        {
            //it has split, meaning that ch happens to be in one of intervals
            data[mark] = data[mark]+1;
        }
        return this;
    }

    //
    Marker addInterval(int a, int b, Marker hint=Marker.init)
    in
    {
        assert(a <= b);
    }
    body
    {
        auto range = assumeSorted(data[]);
        size_t pos;
        size_t a_idx = range.lowerBound(a).length;
        if(a_idx == range.length)
        {
            //  [---+++----++++----++++++]
            //  [                         a  b]
            data.append([a, b]);
            return data.length-1;
        }
        size_t b_idx = range[a_idx..range.length].lowerBound(b).length+a_idx;
        uint[] to_insert;
        debug(std_uni)
        {
            writefln("a_idx=%d; b_idx=%d;", a_idx, b_idx);
        }
        if(b_idx == range.length)
        {
            //  [-------++++++++----++++++-]
            //  [      s     a                 b]
            if(a_idx & 1)//a in positive
            {
                to_insert = [ b ];
            }
            else// a in negative
            {
                to_insert = [a, b];
            }
            genericReplace(data, a_idx, b_idx, to_insert);
            return a_idx+to_insert.length-1;
        }

        uint top = data[b_idx];

        debug(std_uni)
        {
            writefln("a_idx=%d; b_idx=%d;", a_idx, b_idx);
            writefln("a=%s; b=%s; top=%s;", a, b, top);
        }
        if(a_idx & 1)
        {//a in positive
            if(b_idx & 1)//b in positive
            {
                //  [-------++++++++----++++++-]
                //  [       s    a        b    ]
                to_insert = [top];
            }
            else //b in negative
            {
                //  [-------++++++++----++++++-]
                //  [       s    a   b         ]
                if(top == b)
                {
                    assert(b_idx+1 < data.length);
                    pos = genericReplace(data, a_idx, b_idx+2, [data[b_idx+1]]);
                    return pos;
                }
                to_insert = [b, top ];
            }
        }
        else
        { // a in negative
            if(b_idx & 1) //b in positive
            {
                //  [----------+++++----++++++-]
                //  [     a     b              ]
                to_insert = [a, top];
            }
            else// b in negative
            {
                //  [----------+++++----++++++-]
                //  [  a       s      b        ]
                if(top == b)
                {
                    assert(b_idx+1 < data.length);
                    pos = genericReplace(data, a_idx, b_idx+2, [a, data[b_idx+1] ]);
                    return pos;
                }
                to_insert = [a, b, top];
            }
        }
        pos = genericReplace(data, a_idx, b_idx+1, to_insert);
        debug(std_uni)
        {
            writefln("marker idx: %d; length=%d", pos, data[pos], data.length);
            writeln("inserting ", to_insert);
        }
        return pos;
    }

    //
    Marker dropUpTo(uint a, Marker pos=Marker.init)
    in
    {
        assert(pos % 2 == 0); //at start of interval
    }
    body
    {
        auto range = assumeSorted!"a<=b"(data[pos..data.length]);
        if(range.empty)
            return pos;
        size_t idx = pos;
        idx += range.lowerBound(a).length;

        debug(std_uni)
        {
            writeln("dropUpTo full length=", data.length);
            writeln(pos,"~~~", idx);
        }
        if(idx == data.length)
            return genericReplace(data, pos, idx, cast(uint[])[]);
        if(idx & 1)
        {   //a in positive
            //[--+++----++++++----+++++++------...]
            //      |<---si       s  a  t
            genericReplace(data, pos, idx, [a]);
        }
        else
        {   //a in negative
            //[--+++----++++++----+++++++-------+++...]
            //      |<---si              s  a  t
            genericReplace(data, pos, idx, cast(uint[])[]);
        }
        return pos;
    }

    //
    Marker skipUpTo(uint a, Marker pos=Marker.init)
    out(result)
    {
        assert(result % 2 == 0);//always start of interval
        //(may be  0-width after-split)
    }
    body
    {
        assert(data.length % 2 == 0);
        auto range = assumeSorted!"a<=b"(data[pos..data.length]);
        size_t idx = pos+range.lowerBound(a).length;

        if(idx >= data.length) //could have Marker point to recently removed stuff
            return data.length;

        if(idx & 1)//inside of interval, check for split
        {

            uint top = data[idx];
            if(top == a)//no need to split, it's end
                return idx+1;
            uint start = data[idx-1];
            if(a == start)
                return idx-1;
            //split it up
            genericReplace(data, idx, idx+1, [a, a, top]);
            return idx+1;        //avoid odd index
        }
        return idx;
    }

    Uint24Array!SP data;
};

///Packed array of 24-bit integers.
@trusted struct Uint24Array(SP=GcPolicy)
{
    this(Range)(Range range)
        if(isInputRange!Range && hasLength!Range)
    {
        length = range.length;
        copy(range, this[]);
    }

	this(Range)(Range range)
        if(isInputRange!Range &&  !hasLength!Range)
	{
		auto a = array(range); //TODO: use better things like appending to Uint24Array
		this(a);
	}

    this(this)
    {
        data = SP.dup(data);
    }

    ~this()
    {
        SP.destroy(data);
    }

    @property size_t length()const { return roundDiv(data.length*2, 3); }

    @property void length(size_t len)
    {
        data = SP.realloc(data, roundDiv(len*3,2));
    }

    ///Read 24-bit packed integer
    uint opIndex(size_t idx)const
    {
        uint* ptr = cast(uint*)(data.ptr+3*idx/2);
        version(LittleEndian)
            return idx & 1 ? *ptr >>8 : *ptr & 0xFF_FFFF;
        else version(BigEndian)
            return idx & 1 ? *ptr & 0xFF_FFFF : *ptr >>8;
    }

    ///Write 24-bit packed integer
    void opIndexAssign(uint val, size_t idx)
    in
    {
        assert(val <= 0xFF_FFFF);
    }
    body
    {
        uint* ptr = cast(uint*)(data.ptr+3*idx/2);
        version(LittleEndian)
        {
            *ptr = idx & 1 ? (val<<8) | (*ptr&0xFF)
                : val | (*ptr & 0xFF00_0000);
        }
        else version(BigEndian)
        {
            *ptr = idx & 1 ? val | (*ptr & 0xFF00_0000)
                : (val<<8) | (*ptr&0xFF);
        }
    }

    //
    auto opSlice(size_t from, size_t to)
    {
        return SliceOverIndexed!Uint24Array(from, to, &this);
    }
    //
    auto opSlice()
    {
        return opSlice(0, length);
    }

    @property auto dup() const
    {
        Uint24Array r;
        r.data = SP.dup(data);
        return r;
    }

    void append(Range)(Range range)
        if(isInputRange!Range && hasLength!Range)
    {
        size_t nl = length + range.length;
        length = nl;
        copy(range, this[nl-range.length..nl]);
    }

    bool opEquals(const ref Uint24Array rhs)const
    {
        return data[0..roundDiv(data.length*2,3)]
            == rhs.data[0..roundDiv(rhs.data.length*2,3)];
    }
private:
    static uint roundDiv(size_t src, uint div)
    {
        return cast(uint)(src + div/2)/div;
    }
    ushort[] data;
}

@trusted unittest//Uint24 tests //@@@BUG@@ iota is system ?!
{
    InversionList!GcPolicy val;
    foreach(Policy; TypeTuple!(GcPolicy, ReallocPolicy))
    {
        alias typeof(Uint24Array!Policy.init[]) Range;
        alias Uint24Array!Policy U24A;
        static assert(isForwardRange!Range);
        static assert(isBidirectionalRange!Range);
        static assert(isOutputRange!(Range, uint));
        static assert(isRandomAccessRange!(Range));

        auto arr = U24A([42u, 36, 100]);
        assert(arr[0] == 42);
        assert(arr[1] == 36);
        arr[0] = 72;
        arr[1] = 0xFE_FEFE;
        assert(arr[0] == 72);
        assert(arr[1] == 0xFE_FEFE);
        assert(arr[2] == 100);


        auto r2 = U24A(iota(0, 100));
        assert(equal(r2[], iota(0, 100)), text(r2[]));
        copy(iota(10, 170, 2), r2[10..90]);
        assert(equal(r2[], chain(iota(0, 10), iota(10, 170, 2), iota(90, 100)))
               , text(r2[]));
    }
}

version(unittest)
{

private alias TypeTuple!(InversionList!GcPolicy, InversionList!ReallocPolicy) AbsTypes;
private alias staticMap!(RleBitSet, TypeTuple!(ubyte, ushort,uint)) RleTypes;
private alias TypeTuple!(AbsTypes, RleTypes) AllSets;

}

@trusted unittest//core set primitives test
{
    foreach(CodeList; AllSets)
    {
        CodeList a;
        //"plug a hole" test
        a.add(10, 20).add(25, 30).add(15, 27);
        assert(a == CodeList(10, 30), text(a));

        auto x = CodeList.init;
        x.add(10, 20).add(30, 40).add(50, 60);

        a = x;
        a.add(20, 49);//[10, 49) [50, 60)
        assert(a == CodeList(10, 49, 50 ,60));

        a = x;
        a.add(20, 50);
        assert(a == CodeList(10, 60), text(a.byInterval));

        //simple unions, mostly edge effects
        x = CodeList.init;
        x.add(10, 20).add(40, 60);

        a = x;
        a.add(10, 25); //[10, 25) [40, 60)
        assert(a == CodeList(10, 25, 40, 60));

        a = x;
        a.add(5, 15); //[5, 20) [40, 60)
        assert(a == CodeList(5, 20, 40, 60));

        a = x;
        a.add(0, 10); // [0, 20) [40, 60)
        assert(a == CodeList(0, 20, 40, 60));

        a = x;
        a.add(0, 5); //prepand
        assert(a == CodeList(0, 5, 10, 20, 40, 60));

        a = x;
        a.add(5, 20);
        assert(a == CodeList(5, 20, 40, 60));

        a = x;
        a.add(3, 37);
        assert(a == CodeList(3, 37, 40, 60));

        a = x;
        a.add(37, 65);
        assert(a == CodeList(10, 20, 37, 65), text(a.byInterval));

        //some tests on helpers for set intersection
        x = CodeList.init.add(10, 20).add(40, 60).add(100, 120);
        a = x;

        auto m = a.skipUpTo(60);
        a.dropUpTo(110, m);
        assert(a == CodeList(10, 20, 40, 60, 110, 120), text(a.data[]));

        a = x;
        a.dropUpTo(100);
        assert(a == CodeList(100, 120), text(a.data[]));

        a = x;
        m = a.skipUpTo(50);
        a.dropUpTo(140, m);
        assert(a == CodeList(10, 20, 40, 50), text(a.data[]));
        a = x;
        a.dropUpTo(60);
        assert(a == CodeList(100, 120), text(a.data[]));
    }
}

unittest//constructors
{
    alias RleBitSet!ushort CodeList;
    auto a = CodeList(10, 25, 30, 45);
    assert(a.repr == [10, 15, 5, 15]);
}

@trusted unittest
{   //full set operations
    foreach(CodeList; AllSets)
    {
        CodeList a, b, c, d;

        //"plug a hole"
        a.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b.add(40, 60).add(80, 100).add(140, 150);
        c = a | b;
        d = b | a;
        assert(c == CodeList(20, 200), text(c));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(25, 45).add(65, 85).add(95,110).add(150, 210);
        c = a | b; //[20,45) [60, 85) [95, 140) [150, 210)
        d = b | a;
        assert(c == CodeList(20, 45, 60, 85, 95, 140, 150, 210), text(c));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(10, 20).add(30,100).add(145,200);
        c = a | b;//[10, 140) [145, 200)
        d = b | a;
        assert(c == CodeList(10, 140, 145, 200));
        assert(c == d, text(c," vs ", d));

        b = CodeList.init.add(0, 10).add(15, 100).add(10, 20).add(200, 220);
        c = a | b;//[0, 140) [150, 220)
        d = b | a;
        assert(c == CodeList(0, 140, 150, 220));
        assert(c == d, text(c," vs ", d));


        a = CodeList.init.add(20, 40).add(60, 80);
        b = CodeList.init.add(25, 35).add(65, 75);
        c = a & b;
        d = b & a;
        assert(c == CodeList(25, 35, 65, 75), text(c));
        assert(c == d, text(c," vs ", d));

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(25, 35).add(65, 75).add(110, 130).add(160, 180);
        c = a & b;
        d = b & a;
        assert(c == CodeList(25, 35, 65, 75, 110, 130, 160, 180), text(c));
        assert(c == d, text(c," vs ", d));

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(10, 30).add(60, 120).add(135, 160);
        c = a & b;//[20, 30)[60, 80) [100, 120) [135, 140) [150, 160)
        d = b & a;

        assert(c == CodeList(20, 30, 60, 80, 100, 120, 135, 140, 150, 160),text(c));
        assert(c == d, text(c, " vs ",d));
        assert((c & a) == c);
        assert((d & b) == d);
        assert((c & d) == d);

        b = CodeList.init.add(40, 60).add(80, 100).add(140, 200);
        c = a & b;
        d = b & a;
        assert(c == CodeList(150, 200), text(c));
        assert(c == d, text(c, " vs ",d));
        assert((c & a) == c);
        assert((d & b) == d);
        assert((c & d) == d);

        assert((a & a) == a);
        assert((b & b) == b);

        a = CodeList.init.add(20, 40).add(60, 80).add(100, 140).add(150, 200);
        b = CodeList.init.add(30, 60).add(75, 120).add(190, 300);
        c = a - b;// [30, 40) [60, 75) [120, 140) [150, 190)
        d = b - a;// [40, 60) [80, 100) [200, 300)
        assert(c == CodeList(20, 30, 60, 75, 120, 140, 150, 190), text(c));
        assert(d == CodeList(40, 60, 80, 100, 200, 300), text(d));
        assert(c - d == c, text(c-d, " vs ", c));
        assert(d - c == d, text(d-c, " vs ", d));
        assert(c - c == CodeList.init);
        assert(d - d == CodeList.init);

        a = CodeList.init.add(20, 40).add( 60, 80).add(100, 140).add(150,            200);
        b = CodeList.init.add(10,  50).add(60,                           160).add(190, 300);
        c = a - b;// [160, 190)
        d = b - a;// [10, 20) [40, 50) [80, 100) [140, 150) [200, 300)
        assert(c == CodeList(160, 190), text(c));
        assert(d == CodeList(10, 20, 40, 50, 80, 100, 140, 150, 200, 300), text(d));
        assert(c - d == c, text(c-d, " vs ", c));
        assert(d - c == d, text(d-c, " vs ", d));
        assert(c - c == CodeList.init);
        assert(d - d == CodeList.init);

        a = CodeList.init.add(20,    40).add(60, 80).add(100,      140).add(150,  200);
        b = CodeList.init.add(10, 30).add(45,         100).add(130,             190);
        c = a ~ b; // [10, 20) [30, 40) [45, 60) [80, 130) [140, 150) [190, 200)
        d = b ~ a;
        assert(c == CodeList(10, 20, 30, 40, 45, 60, 80, 130, 140, 150, 190, 200),
               text(c));
        assert(c == d, text(c, " vs ", d));
    }
}

private alias RleBitSet!ubyte uList;
private alias RleBitSet!ushort mList;
private alias RleBitSet!uint cList;

@system unittest// set operations and integer overflow ;)
{
    uList a, b, c, d;
    a = uList(20, 40, 100,      300, 400,     1200);
    b = uList(0,           260, 300,      600);
    assert(a.repr == [20, 20, 60, 200, 100, 255, 0, 255, 0, 255, 0, 35]);
    assert(b.repr == [0, 255, 0, 5, 40, 255, 0, 45]);
    c = a & b; //[20,40) [100, 260) [400, 600)
    d = b & a;
    auto e = uList(20, 40, 100, 260, 400, 600);
    assert(c == e, text(c, " vs ", e));
    assert(c == d, text(c, " vs ", d));
}

@system unittest// ditto
{
    foreach(i, List; TypeTuple!(mList, cList))
    {
        List a, b, c, d;
        a = List(    150,       450,    550,    750,    1000,  75_000);
        b = List(80,    220,       460,      700,   900,             150_000);
        c = a & b;
        d = a | b;
        assert(c == uList(150, 220, 550, 700, 1000, 75_000), text(c));
        assert(d == uList(80, 450,  460, 750, 900, 150_000), text(d));

        c = a - b;
        d = b - a;
        assert(c == mList(220, 450, 700, 750), text(c));
        assert(d == mList(80, 150,   460, 550, 900, 1000, 75_000, 150_000), text(d));
    }
}

//@@@BUG Error: safe function '__unittest13' cannot call system function 'opAssign' WTF?
@system unittest//even more set operations with BIG intervals
{
    foreach(List; TypeTuple!(mList, cList))
    {
        List a, b, c, d, e, f;
        a = List(10_000,         100_000,
                  1_000_000,                                           10_000_000);
        b = List(       50_000            ,150_000, 250_000 ,350_000,
                  900_000       ,2_300_000,  4_600_000 ,6_400_000, 8_000_000 ,12_000_000);
        c = a | b;
        d = a & b;
        assert(c == mList(10_000, 150_000, 250_000, 350_000, 900_000, 12_000_000));
        assert(d == cList(50_000, 100_000, 1_000_000, 2_300_000, 4_600_000, 6_400_000, 8_000_000, 10_000_000));

        c = a ~ b;
        d = b ~ a;
        assert(c == d);
        assert(c == uList(10_000, 50_000, 100_000, 150_000, 250_000, 350_000, 900_000, 1_000_000,
                       2_300_000, 4_600_000, 6_400_000, 8_000_000, 10_000_000, 12_000_000));

        c = a - b;
        d = b - a;

        assert(c == uList(10_000, 50_000, 2_300_000, 4_600_000, 6_400_000, 8_000_000));
        assert(d == mList(100_000, 150_000, 250_000, 350_000, 900_000, 1_000_000,
                       10_000_000, 12_000_000));
    }
}
@system:
unittest// vs single dchar
{
    mList a = mList(10, 100, 120, 200);
    assert(a - 'A' == uList(10, 65, 66, 100, 120, 200), text(a - 'A'));
    assert((a & 'B') == uList(66, 67));
}

unittest//iteration
{
    import std.typecons;
    auto arr = "ABCDEFGHIJKLMabcdefghijklm"d;
    auto a = mList('A','N','a', 'n');
    assert(equal(a.byInterval, [ tuple(cast(uint)'A', cast(uint)'N'), tuple(cast(uint)'a', cast(uint)'n')]), text(a.byInterval));

    assert(equal(a.byChar, arr), text(a.byChar));

    auto x = uList(100, 500, 600, 900, 1200, 1500);
    assert(equal(x.byInterval, [ tuple(100, 500), tuple(600, 900), tuple(1200, 1500)]), text(x.byInterval));
}

@trusted struct Trie(Value, Key, Prefix...)
    if(Prefix.length >= 1)
{
    static if(is(Value dummy : SetAsSlot!(U), U))
    {
        alias U V;
        enum type = TrieType.Set;
        static putValue(ref V cont, Key val)
        {
            cont.insert(val);
        }
    }
    else static if(is(Value dummy: MapAsSlot!(C, U, X), C, U, X))
    {//TODO: built-in AA are somehow sluggish and need GC addRoot (still not implemented)
        alias C V;
        alias U Item;
        static assert(is(X == Key));
        enum type = TrieType.Map;
        static putValue(Pair)(ref V cont, Pair val)
        {
            cont.insert(val);
        }
    }
    else
    {
        alias Value V;
        enum type = TrieType.Value;
        static putValue(ref V x, V val)
        {
            x = val;
        }
    }

    ///Construct Trie from array of keys
    ///fills all possible keys with zeros in index
    this(Keys)(Keys keys)
        if(!is(typeof(Keys.init.isSet)))
    {
        ConstructState[Prefix.length] emptyFull; //empty page index, full page index
        enum last = Prefix.length-1;
        enum pageBits=Prefix[$-1].bitSize, pageSize = 1<<pageBits;
        size_t maxIdx = 1;
        //maximum index is sizes of each level multiplied
        foreach(v; Prefix)
            maxIdx *= 2^^v.bitSize;

        size_t[Prefix.length] idxs;
        table = table(idxs);
        //one page per level is bootstrap minimum
        foreach(i; Sequence!(0, Prefix.length))
            table.length!i = (1<<Prefix[i].bitSize);

        {//don't pollute the ctor scope
            auto ptr = table.slice!(last);
            size_t j = 0;
            size_t prevKeyIdx = size_t.max;
            static if(isDynamicArray!Keys)
            {
                alias GetComparators!(Prefix.length, cmpK) Comps;
				static if(type == TrieType.Set || (type == TrieType.Value && is(V == bool)))
				{
	                multiSort!(Comps, SwapStrategy.unstable)
		                (keys);
				}
				else static if(is(Unqual!Keys  == V[]))
				{
					/* NOP */
					//we consider indexes to be presorted as need as index in array is treated as key
					//and value of elements is value
				}
				else
					static assert(0, "Unsupported type of array "~Keys.stringof~" for Trie of "~V.stringof);
                auto r = keys;
            }
            else static if(type == TrieType.Map)
            {
                static assert(isAssociativeArray!Keys
                              , "MapAsSlot Tries can only be constructed out of AAs");
                alias GetComparators!(Prefix.length, cmpK0) Comps;
                auto r = array(zip(keys.byValue, keys.byKey));
                multiSort!Comps(r);
            }
            else
                static assert(false, "unsupported constructor for "~Keys.stringof);

            for(size_t i=0;i<r.length; i++)
            {
                static if(type == TrieType.Map)
                    size_t keyIdx = getIndex(r[i][1]);
				else static if(type == TrieType.Value && !is(V == bool) && is(Key : size_t))
				//value and not bool  and key is implictly convertible to size_t  == simple map,
				//key is index i
				{
					size_t keyIdx = i;
				}
                else
                    size_t keyIdx = getIndex(r[i]);
                if(keyIdx != prevKeyIdx)
                {
                    static if(type == TrieType.Value && is(V == bool))
                    {
                        addValue!last(idxs, false, emptyFull[], keyIdx - j);
                        addValue!last(idxs, true, emptyFull[]);
                    }
					else
					{
                        addValue!last(idxs, r.front.init, emptyFull[], keyIdx - j);
                        addValue!last(idxs, r[i], emptyFull[]);
                    }
                    prevKeyIdx = keyIdx;
                    j = keyIdx+1;
                }
                else
                {//Set or map version can have "duplicate" slot keys
                     static if(type == TrieType.Set
                               || type == TrieType.Map)
                     {
                        idxs[last]--;
                        addValue!last(idxs, r[i], emptyFull[]);
                     }
                }

            }
            static if(type == TrieType.Set)
                addValue!last(idxs, Key.init, emptyFull[], maxIdx-j);
            else static if(type == TrieType.Map)
                addValue!last(idxs, r.front.init, emptyFull[], maxIdx-j);
            else
                addValue!last(idxs, false, emptyFull[], maxIdx-j);
        }
    }

    ///Construct boolean Trie from set.
    this(Set)(in Set set, Key maxKey=Key.max)
        if(is(typeof(Set.init.isSet)))
    {
        ConstructState[Prefix.length] emptyFull; //empty page index, full page index
        foreach(ref v; emptyFull)
            v = ConstructState(true, true, uint.max, uint.max);
        enum last = Prefix.length-1;
        enum pageBits=Prefix[$-1].bitSize, pageSize = 1<<pageBits;
        maxKey =((maxKey + pageSize-1)>>pageBits)<<pageBits;

        auto ivals = set.byInterval;
        size_t[Prefix.length] idxs;


        table = table(idxs);
        //one page per level is bootstrap minimum
        foreach(i; Sequence!(0, Prefix.length))
            table.length!i = (1<<Prefix[i].bitSize);

        {//don't pollute the ctor scope
            auto ptr = table.slice!(last);
            size_t i = 0;
            for(;;)
            {
                if(ivals.empty)
                    break;
                uint a = ivals.front.a, b = ivals.front.b;

                addValue!last(idxs, false, emptyFull[], a - i);
                i = a;
                assert(i <= maxKey, text("set has keys > maxKey in Trie c-tor: ", i, " vs ", maxKey));
                addValue!last(idxs, true, emptyFull[], b - i);
                i = b;

                ivals.popFront();
            }
            addValue!last(idxs, false, emptyFull[], maxKey - i);
        }
    }

    inout(V) opIndex(Key key) inout
    {
        size_t idx;
        alias Prefix p;
        idx = p[0].entity(key);
        foreach(i, v; p[0..$-1])
            idx = (table.slice!i[idx]<<p[i+1].bitSize) + p[i+1].entity(key);
        return table.slice!(p.length-1)[idx];
    }

    @property size_t bytes(size_t n=size_t.max)() const
    {
        return table.bytes!n;
    }

    @property size_t pages(size_t n)() const
    {
        return (bytes!n+2^^(Prefix[n].bitSize-1))
                /2^^Prefix[n].bitSize;
    }

    //needed for multisort to work
    static bool cmpK(size_t i)(Key a, Key b)
    {
        return Prefix[i].entity(a) < Prefix[i].entity(b);
    }

    //ditto
    static if(type == TrieType.Map)
    static bool cmpK0(size_t i)
        (const ref Tuple!(Item,Key) a, const ref Tuple!(Item, Key) b)
    {
        return Prefix[i].entity(a[1]) < Prefix[i].entity(b[1]);
    }

    void store(OutputRange)(scope OutputRange sink)
        if(isOutputRange!(OutputRange, ubyte))
    {
        table.store(sink);
    }

    static Trie fromRawArray(size_t[] raw_offs, size_t[] raw_sz, size_t[] raw_data)
    {
        Trie t;
        t.table = typeof(t.table).fromRawArray(raw_offs, raw_sz, raw_data);
        return t;
    }

private:
    struct ConstructState//used during creation of Trie
    {
        bool empty, full; //current page is empty? full?
        uint idx_empty, idx_full;
    }
    enum TrieType{ Value, Set, Map };
    //for multi-sort
    template GetComparators(size_t n, alias cmpFn)
    {
        static if(n > 0)
            alias TypeTuple!(GetComparators!(n-1, cmpFn), cmpFn!(n-1)) GetComparators;
        else
            alias TypeTuple!() GetComparators;
    }

    static size_t getIndex(Key key)//get "mapped" virtual integer index
    {
        alias Prefix p;
        size_t idx;
        foreach(i, v; p[0..$-1])
        {
            idx |= p[i].entity(key);
            idx <<= p[i+1].bitSize;
        }
        idx |= p[$-1].entity(key);
        return idx;
    }

    static arrayRepr(T)(T x)
    {
        if(x.length > 32)
        {
            return text(x[0..16],"~...~", x[x.length-16..x.length]);
        }
        else
            return text(x);
    }

    //true if page was allocated, false is it was mapped or not an end of page yet
    void addValue(size_t level, T)(size_t[] indices, T val, ConstructState[] emptyFull, size_t numVals=1)
    {
        enum pageSize = 1<<Prefix[level].bitSize;
        if(numVals == 0)
            return;
        do
        {
            //need to take pointer again, memory block  may move on resize
            auto ptr = table.slice!(level);
            static if(is(T : bool))
            {
                if(val)
                    emptyFull[level].empty = false;
                else
                    emptyFull[level].full = false;
            }
            if(numVals == 1)
            {
                static if(level == Prefix.length-1 && type != TrieType.Value)
                    putValue(ptr[indices[level]], val);
                else{// can incurr narrowing conversion
					assert(indices[level] < ptr.length);
                    ptr[indices[level]] = force!(typeof(ptr[indices[level]]))(val);
				}
                indices[level]++;
                numVals = 0;                
            }
            else
            {
                //where is the next page boundary
                size_t nextPB = (indices[level]+pageSize)/pageSize*pageSize;
                size_t j = indices[level];
                size_t n =  nextPB-j;//can fill right in this page
                if(numVals > n)
                    numVals -= n;
                else
                {
                    n = numVals;
                    numVals = 0;
                }
				static if(level < Prefix.length-1)
					assert(indices[level] <= 2^^Prefix[level+1].bitSize);
                static if(level == Prefix.length-1 && type != TrieType.Value)
                {
                    for(int i=0;i<n; i++)
                        putValue(ptr[j++], val);
                }
                else
                {
                    ptr[j..j+n]  = val;
                    j += n;
                }
                indices[level] = j;

            }
			//last level (i.e. topmost) has 1 "page" 
			//thus it need not to add a new page on upper level
            static if(level != 0)
            {
                alias typeof(table.slice!(level-1)[0]) NextIdx;
                NextIdx next_lvl_index;
                if(indices[level] % pageSize == 0)
                {
                    static if(is(T : bool))
                    {
                        if(emptyFull[level].empty)
                        {
                            if(emptyFull[level].idx_empty == uint.max)
                            {
                                emptyFull[level].idx_empty = cast(uint)(indices[level]/pageSize - 1);
                                goto L_allocate_page;
                            }
                            else
                            {
                                next_lvl_index = cast(NextIdx)emptyFull[level].idx_empty;
                                indices[level] -= pageSize;//it is a duplicate
                                goto L_know_index;
                            }
                        }                        
                    }
                    auto last = indices[level]-pageSize;
                    auto slice = ptr[indices[level] - pageSize..indices[level]];
                    size_t j;
                    for(j=0; j<last; j+=pageSize)
                    {                        
                        if(equal(ptr[j..j+pageSize], slice[0..pageSize]))
                        {
                            //get index to it, reuse ptr space for the next block
                            next_lvl_index = cast(NextIdx)(j/pageSize);
                            version(none)
                            {
                            writefln("LEVEL(%s) page maped idx: %s: 0..%s  ---> [%s..%s]"
                                    ,level
                                    ,indices[level-1], pageSize, j, j+pageSize);
                            writeln("LEVEL(", level
                                    , ") mapped page is: ", slice, ": ", arrayRepr(ptr[j..j+pageSize]));
                            writeln("LEVEL(", level
                                    , ") src page is :", ptr, ": ", arrayRepr(slice[0..pageSize]));
                            }
                            indices[level] -= pageSize; //reuse this page, it is duplicate
                            break;
                        }
                    }

                    if(j == last)
                    {                        	
                    L_allocate_page:	
                        next_lvl_index = cast(NextIdx)(indices[level]/pageSize - 1);	                    
                        //allocate next page
                        version(none)
                        {
                        writefln("LEVEL(%s) page allocated: %s"
                                 , level, arrayRepr(slice[0..pageSize]));
                        writefln("LEVEL(%s) index: %s ; page at this index %s"
                                 , level
                                 , next_lvl_index
                                 , arrayRepr(
                                     table.slice!(level)
                                      [pageSize*next_lvl_index..(next_lvl_index+1)*pageSize]
                                    ));
                        }
                        table.length!level = table.length!level + pageSize;
                    }
                    L_know_index:
                    static if(is(T : bool))
                    {
                        emptyFull[level].empty = true;
                        emptyFull[level].full = true;
                    }

                    addValue!(level-1)(indices, next_lvl_index, emptyFull);
                }
            }
        }
        while(numVals);
    }

    //last index is not stored in table, it is used as offset to values in a block.
    static if(is(V  == bool))//always pack bool
        MultiArray!(idxTypes!(Key, fullBitSize!(Prefix), Prefix[0..$]), BitPacked!(1, V)) table;
    else
        MultiArray!(idxTypes!(Key, fullBitSize!(Prefix), Prefix[0..$]), V) table;
}

template GetBitSlicing(size_t Top, Sizes...)
{
    static if(Sizes.length > 0)
        alias TypeTuple!(sliceBits!(Top - Sizes[0], Top)
            , GetBitSlicing!(Top - Sizes[0], Sizes[1..$])) GetBitSlicing;
    else
        alias TypeTuple!()  GetBitSlicing;
}

/**
    General Trie template warapper to simplify mapping unicode dchar
    to bool. 
*/
template CodepointTrie(Sizes...)
{
    alias Trie!(bool, dchar, GetBitSlicing!(21, Sizes)) CodepointTrie;
}

/**
    Wrapping T by SetAsSlot indicates that T should be considered
    as a set of values.
    When SetAsSlot!T is used as $(D Value) type, Trie will internally
    translate assignments/tests to insert & 'in' operator repspectively.
*/
public struct SetAsSlot(T){}

///Ditto for map of Key -> Value.
public struct MapAsSlot(T, Value, Key){}

/**
    Wrapper, provided to simplify definition
    of custom Trie data structures. Use it on a lambda to indicate that
    returned value always fits within $(D bits) of bits.
*/
public template assumeSize(size_t bits, alias Fn)
{
    enum bitSize = bits;
    alias Fn entity;
}

///indicates MultiArray to apply bit packing to this field
struct BitPacked(size_t sz, T) if(isIntegral!T || is(T:dchar))
{
    enum bitSize = sz;
    alias T entity;
}

template sliceBitsImpl(size_t from, size_t to)
{
    T sliceBitsImpl(T)(T x)
    out(result)
    {
        assert(result < (1<<to-from));
    }
    body
    {
        static assert(from < to);
        return (x >> from) & ((1<<(to-from))-1);
    }
}

///todo
public template sliceBits(size_t from, size_t to)
{
    alias assumeSize!(to-from, sliceBitsImpl!(from, to)) sliceBits;
}

uint low_8(uint x) { return x&0xFF; }
uint midlow_8(uint x){ return (x&0xFF00)>>8; }
alias assumeSize!(8, low_8) lo8;
alias assumeSize!(8, midlow_8) mlo8;

template Sequence(size_t start, size_t end)
{
    static if(start < end)
        alias TypeTuple!(start, Sequence!(start+1, end)) Sequence;
    else
        alias TypeTuple!() Sequence;
}

//---- TRIE TESTS ----
version(unittest)
private enum TokenKind : ubyte { //from DCT by Roman Boiko (Boost v1.0 licence)
        // token kind has not been initialized to a valid value
        Invalid = 0,

        // protection
        Package, Private, Protected, Public, // note: extern also specifies protection level

        // storage classes
        Extern, Abstract, Auto, Const, Deprecated, Enum, Final, Immutable, InOut, NoThrow, Override, Pure, Scope, Shared, Static, Synchronized, _GShared,

        // basic type names
        Bool, Char, UByte, Byte, WChar, UShort, Short, DChar, UInt, Int, ULong, Long, Float, Double, Real, CFloat, CDouble, CReal, IFloat, IDouble, IReal, Void,

        // other keywords
        Alias, Align, Asm, Assert, Body, Break, Case, Cast, Catch, Cent, Class, Continue, Debug, Default, Delegate, Delete, Do, Else, Export, False, Finally, ForEach_Reverse, ForEach, For, Function,
        GoTo, If, Import, Interface, Invariant, In, Is, Lazy, Macro, Mixin, Module, New, Null, Out, Pragma, Ref, Return, Struct, Super, Switch,
        Template, This, Throw, True, Try, TypeDef, TypeId, TypeOf, UCent, Union, UnitTest, Version, Volatile, While, With, _FILE_, _LINE_, _Thread, _Traits,

        // any identifier which is not a keyword
        Identifier,

        // literals
        StringLiteral, CharacterLiteral, IntegerLiteral, FloatLiteral,

        // punctuation

        // brackets
        LeftParen,          // (
        RightParen,         // )
        LeftBracket,        // [
        RightBracket,       // ]
        LeftCurly,          // {
        RightCurly,         // }

        // assignment operators
        Assign,             // =
        AmpersandAssign,    // &=
        TildeAssign,        // ~=
        SlashAssign,        // /=
        LeftShiftAssign,    // <<=
        MinusAssign,        // -=
        PercentAssign,      // %=
        StarAssign,         // *=
        OrAssign,           // |=
        PlusAssign,         // +=
        PowerAssign,        // ^^=
        RightShiftAssign,   // >>=
        URightShiftAssign,  // >>>=
        XorAssign,          // ^=

        // relational operators
        Eq,                 // ==
        NotEq,              // !=
        GreaterThan,        // >
        GreaterOrEq,        // >=
        LessThan,           // <
        LessEqOrGreater,    // <>=
        LessOrGreater,      // <>
        LessOrEq,           // <=
        UnordCompare,       // !<>=
        UnordGreaterOrEq,   // !<
        UnordLessOrEq,      // !>
        UnordOrEq,          // !<>
        UnordOrGreater,     // !<=
        UnordOrLess,        // !>=

        // shift operators
        LeftShift,          // <<
        RightShift,         // >>
        URightShift,        // >>>

        // other binary operators
        Power,              // ^^
        BoolAnd,            // &&
        BoolOr,             // ||
        BitOr,              // |
        BitXor,             // ^
        Percent,            // %
        Slash,              // /

        // operators which can be either unary or binary
        Star,               // * (multiply; pointer)
        Minus,              // -
        Plus,               // +
        Ampersand,          // & (address of; bitwise and)
        Tilde,              // ~ (concat; complement)

        // unary operators
        Bang,               // ! (not; actual compile time parameter)
        Decrement,          // --
        Increment,          // ++

        // other punctuation
        Dot,                // .
        Slice,              // ..
        Ellipsis,           // ...
        Lambda,             // =>
        Question,           // ?
        Comma,              // ,
        Semicolon,          // ;
        Colon,              // :
        Dollar,             // $
        Hash,               // #
        At,                 // @

        // other tokens

        SpecialToken, EndOfLine,
        // note: it is important that the following tokens are last, because column calculation depends on whether tab appears in token spelling
        WhiteSpace, ScriptLine, Comment, SpecialTokenSequence,
        // end of file is always inserted (at the end)
        // it corresponds to either of \0 or \1A, but is also inserted immediately after __EOF__ special token
        // spelling includes everything starting from frontIndex and till the physical end of file, and it may be ""
        // __EOF__ inside a comment, character or string literal is treated as string (unlike DMD, which treats it as EoF inside token strings and character literals)
        _EOF_
};

unittest
{
    static trieStats(TRIE)(TRIE t)
    {
        writeln("---TRIE FOOTPRINT STATS---");
        foreach(i; Sequence!(0, t.table.dim) )
        {
            writefln("lvl%s = %s bytes;  %s pages"
                     , i, t.bytes!i, t.pages!i);
        }
        writefln("TOTAL: %s bytes", t.bytes);
        debug(std_uni)
		{
			writeln("INDEX (excluding value level):");
			foreach(i; Sequence!(0, t.table.dim-1) )
				writeln(t.table.slice!(i)[0..t.table.length!i]);
		}
        writeln("---------------------------");
    }
    //@@@BUG link failure, lambdas not found by linker somehow (in case of trie2)
    //alias assumeSize!(8, function (uint x) { return x&0xFF; }) lo8;
    //alias assumeSize!(7, function (uint x) { return (x&0x7F00)>>8; }) next8;
    alias RleBitSet!ubyte Set;
    auto set = Set('A','Z','a','z');
    auto trie = Trie!(bool, uint, lo8)(set, 256);//simple bool array
    for(int a='a'; a<'z';a++)
        assert(trie[a]);
    for(int a='A'; a<'Z';a++)
        assert(trie[a]);
    for(int a=0; a<'A'; a++)
        assert(!trie[a]);
    for(int a ='Z'; a<'a'; a++)
        assert(!trie[a]);

    auto redundant2 = Set(1, 18, 256+2, 256+111, 512+1, 512+18,
                          768+2, 768+111);
    auto trie2 = Trie!(bool, uint, mlo8, lo8)(redundant2, 1024);
    trieStats(trie2);
    foreach(e; redundant2.byChar)
        assert(trie2[e], text(cast(uint)e, " - ", trie2[e]));
    foreach(i; 0..1024)
    {
        assert(trie2[i] == (i in redundant2));
    }
    trieStats(trie2);

    auto redundant3 = Set(
          2,    4,    6,    8,    16,
       2+16, 4+16, 16+6, 16+8, 16+16,
       2+32, 4+32, 32+6, 32+8,
      );

    enum max3 = 256;
    //sliceBits
    auto trie3 = Trie!(bool, uint
                       , sliceBits!(6,8)
                       , sliceBits!(4,6)
                       , sliceBits!(0,4)
                       )(redundant3, max3);
    trieStats(trie3);
    foreach(i; 0..max3)
        assert(trie3[i] == (i in redundant3), text(cast(uint)i));

    auto redundant4 = Set(
            10, 64, 64+10, 128, 128+10, 256, 256+10, 512,
            1000, 2000, 3000, 4000, 5000, 6000
        );
    enum max4 = 2^^16;
    auto trie4 = Trie!(bool, size_t
                       , sliceBits!(13, 16)
                       , sliceBits!(9, 13)
                       , sliceBits!(6, 9) 
                       , sliceBits!(0, 6)
                       )(redundant4, max4);
    foreach(i; 0..max4){		
        if(i in redundant4)
            assert(trie4[i], text(cast(uint)i));
	}
    trieStats(trie4);

    string[] redundantS = ["tea", "tackle", "teenage", "start", "stray"];
    auto strie = Trie!(bool, string, useItemAt!(0, char))(redundantS);
    //using first char only
    assert(strie["test"], text(strie["test"]));
    assert(!strie["aea"]);
    assert(strie["s"]);

    //A realistic example: keyword detector
    enum keywords = [
            "abstract",
            "alias",
            "align",
            "asm",
            "assert",
            "auto",
            "body",
            "bool",
            "break",
            "byte",
            "case",
            "cast",
            "catch",
            "cdouble",
            "cent",
            "cfloat",
            "char",
            "class",
            "const",
            "continue",
            "creal",
            "dchar",
            "debug",
            "default",
            "delegate",
            "delete",
            "deprecated",
            "do",
            "double",
            "else",
            "enum",
            "export",
            "extern",
            "false",
            "final",
            "finally",
            "float",
            "for",
            "foreach",
            "foreach_reverse",
            "function",
            "goto",
            "idouble",
            "if",
            "ifloat",
            "immutable",
            "import",
            "in",
            "inout",
            "int",
            "interface",
            "invariant",
            "ireal",
            "is",
            "lazy",
            "long",
            "macro",
            "mixin",
            "module",
            "new",
            "nothrow",
            "null",
            "out",
            "override",
            "package",
            "pragma",
            "private",
            "protected",
            "public",
            "pure",
            "real",
            "ref",
            "return",
            "scope",
            "shared",
            "short",
            "static",
            "struct",
            "super",
            "switch",
            "synchronized",
            "template",
            "this",
            "throw",
            "true",
            "try",
            "typedef",
            "typeid",
            "typeof",
            "ubyte",
            "ucent",
            "uint",
            "ulong",
            "union",
            "unittest",
            "ushort",
            "version",
            "void",
            "volatile",
            "wchar",
            "while",
            "with",
            "__FILE__",
            "__gshared",
            "__LINE__",
            "__thread",
            "__traits"
    ];

    //assumes T.init == empty, NG if T.init is a legal key
    struct SmallSet(size_t N, T)
    {
        T[N] items;
        void insert(T val)
        {
            int i;
            if(val == T.init)
                return;
            for(i=0;i<N; i++)
                if(items[i] == T.init)
                {
                    items[i] = val;
                    return;
                }
            throw new Exception(text("out of slots in ", this," on key=", val));
        }

        bool opBinaryRight(string op, T)(T key)
            if(op == "in")
        {
            return  items[].countUntil(key) != -1;
        }
    }

    struct SmallMap(size_t N, V, K)
    {
        void insert(Tuple!(V, K) t){ _set.insert(t); }

        V opBinaryRight(string op, T)(T key)
            if(op == "in")
        {
            auto idx = map!"a[1]"(_set.items[]).countUntil(key);
            return idx < 0 ? V.init : _set.items[idx][0];
        }
        private:
            SmallSet!(N, Tuple!(V, K)) _set;
    }

    static size_t useLength(T)(T[] arr)
    {
        return arr.length > 63 ? 0 : arr.length; //need max length, 64 - 6bits
    }

    enum k = bitSizeOf!(SmallSet!(2, string));

    auto keyTrie = Trie!(SetAsSlot!(SmallSet!(2,string))
                         , string
                         , assumeSize!(6, useLength)
                         , useItemAt!(0, char)
                         , useLastItem!(char))(keywords);
    foreach(key; keywords)
        assert( key in keyTrie[key], text(key, (cast (size_t[])keyTrie[key].items)));
    trieStats(keyTrie);
    auto keywordsMap = [
            "abstract" : TokenKind.Abstract,
            "alias" : TokenKind.Alias,
            "align" : TokenKind.Align,
            "asm" : TokenKind.Asm,
            "assert" : TokenKind.Assert,
            "auto" : TokenKind.Auto,
            "body" : TokenKind.Body,
            "bool" : TokenKind.Bool,
            "break" : TokenKind.Break,
            "byte" : TokenKind.Byte,
            "case" : TokenKind.Case,
            "cast" : TokenKind.Cast,
            "catch" : TokenKind.Catch,
            "cdouble" : TokenKind.CDouble,
            "cent" : TokenKind.Cent,
            "cfloat" : TokenKind.CFloat,
            "char" : TokenKind.Char,
            "class" : TokenKind.Class,
            "const" : TokenKind.Const,
            "continue" : TokenKind.Continue,
            "creal" : TokenKind.CReal,
            "dchar" : TokenKind.DChar,
            "debug" : TokenKind.Debug,
            "default" : TokenKind.Default,
            "delegate" : TokenKind.Delegate,
            "delete" : TokenKind.Delete,
            "deprecated" : TokenKind.Deprecated,
            "do" : TokenKind.Do,
            "double" : TokenKind.Double,
            "else" : TokenKind.Else,
            "enum" : TokenKind.Enum,
            "export" : TokenKind.Export,
            "extern" : TokenKind.Extern,
            "false" : TokenKind.False,
            "final" : TokenKind.Final,
            "finally" : TokenKind.Finally,
            "float" : TokenKind.Float,
            "for" : TokenKind.For,
            "foreach" : TokenKind.ForEach,
            "foreach_reverse" : TokenKind.ForEach_Reverse,
            "function" : TokenKind.Function,
            "goto" : TokenKind.GoTo,
            "idouble" : TokenKind.IDouble,
            "if" : TokenKind.If,
            "ifloat" : TokenKind.IFloat,
            "immutable" : TokenKind.Immutable,
            "import" : TokenKind.Import,
            "in" : TokenKind.In,
            "inout" : TokenKind.InOut,
            "int" : TokenKind.Int,
            "interface" : TokenKind.Interface,
            "invariant" : TokenKind.Invariant,
            "invariant" : TokenKind.Invariant,
            "ireal" : TokenKind.IReal,
            "is" : TokenKind.Is,
            "lazy" : TokenKind.Lazy,
            "long" : TokenKind.Long,
            "macro" : TokenKind.Macro,
            "mixin" : TokenKind.Mixin,
            "module" : TokenKind.Module,
            "new" : TokenKind.New,
            "nothrow" : TokenKind.NoThrow,
            "null" : TokenKind.Null,
            "out" : TokenKind.Out,
            "override" : TokenKind.Override,
            "package" : TokenKind.Package,
            "pragma" : TokenKind.Pragma,
            "private" : TokenKind.Private,
            "protected" : TokenKind.Protected,
            "public" : TokenKind.Public,
            "pure" : TokenKind.Pure,
            "real" : TokenKind.Real,
            "ref" : TokenKind.Ref,
            "return" : TokenKind.Return,
            "scope" : TokenKind.Scope,
            "shared" : TokenKind.Shared,
            "short" : TokenKind.Short,
            "static" : TokenKind.Static,
            "struct" : TokenKind.Struct,
            "super" : TokenKind.Super,
            "switch" : TokenKind.Switch,
            "synchronized" : TokenKind.Synchronized,
            "template" : TokenKind.Template,
            "this" : TokenKind.This,
            "throw" : TokenKind.Throw,
            "true" : TokenKind.True,
            "try" : TokenKind.Try,
            "typedef" : TokenKind.TypeDef,
            "typeid" : TokenKind.TypeId,
            "typeof" : TokenKind.TypeOf,
            "ubyte" : TokenKind.UByte,
            "ucent" : TokenKind.UCent,
            "uint" : TokenKind.UInt,
            "ulong" : TokenKind.ULong,
            "union" : TokenKind.Union,
            "unittest" : TokenKind.UnitTest,
            "ushort" : TokenKind.UShort,
            "version" : TokenKind.Version,
            "void" : TokenKind.Void,
            "volatile" : TokenKind.Volatile,
            "wchar" : TokenKind.WChar,
            "while" : TokenKind.While,
            "with" : TokenKind.With,
            "__FILE__" : TokenKind._FILE_,
            "__gshared" : TokenKind._GShared,
            "__LINE__" : TokenKind._LINE_,
            "__thread" : TokenKind._Thread,
            "__traits" : TokenKind._Traits,
    ];
    auto keyTrie2 = Trie!(MapAsSlot!(SmallMap!(2, TokenKind, string), TokenKind, string)
                         , string
                         , assumeSize!(6, useLength)
                         , useItemAt!(0, char)
                         , useLastItem!(char))(keywordsMap);
    foreach(k,v; keywordsMap)
        assert((k in keyTrie2[k]) == v);
    trieStats(keyTrie2);

	//a bit size test
	auto a = array(map!(x => to!ubyte(x))(iota(0, 256)));
	auto bt = Trie!(bool, ubyte, sliceBits!(7, 8), sliceBits!(5, 7), sliceBits!(0, 5))(a);
	trieStats(bt);
	foreach(i; 0..256)
		assert(bt[cast(ubyte)i]);
}


template useItemAt(size_t idx, T)
    if(isIntegral!T || is(T: dchar))
{
    size_t entity(in T[] arr){ return arr[idx]; }
    enum bitSize = 8*T.sizeof;
}

template useLastItem(T)
{
    size_t entity(in T[] arr){ return arr[$-1]; }
    enum bitSize = 8*T.sizeof;
}

template fullBitSize(Prefix...)
{
	static if(Prefix.length > 0)
		enum fullBitSize = Prefix[0].bitSize+fullBitSize!(Prefix[1..$]);
	else
		enum fullBitSize = 0;
}

template idxTypes(Key, size_t fullBits, Prefix...)
{
    static if(Prefix.length == 1)
    {//the last level is value level, so no index once reduced to 1-level
        alias TypeTuple!() idxTypes;
    }
    else
    {
        //Important note on bit packing
        //Each level has to hold enough of bits to address the next one    
		//The bottom level is known to hold full bit width
		//thus it's size in pages is fill_bit_width - size_of_last_prefix
		//Recourse on this notion
        alias TypeTuple!(
			idxTypes!(Key, fullBits - Prefix[$-1].bitSize, Prefix[0..$-1]),
			BitPacked!(fullBits - Prefix[$-1].bitSize, typeof(Prefix[$-2].entity(Key.init)))
		) idxTypes;
    }
}

template bitSizeOf(T)
{
    static if(is(typeof(T.bitSize)))
        enum bitSizeOf = T.bitSize;
    else
        enum bitSizeOf = T.sizeof*8;
}


int comparePropertyName(Char)(const(Char)[] a, const(Char)[] b)
{
    for(;;)
    {
        while(!a.empty && (isWhite(a.front) || a.front == '-' || a.front =='_'))
        {
            a.popFront();
        }
        while(!b.empty && (isWhite(b.front) || b.front == '-' || b.front =='_'))
        {
            b.popFront();
        }
        if(a.empty)
            return b.empty ? 0 : -1;
        if(b.empty)
            return 1;
        auto ca = toLower(a.front), cb = toLower(b.front);
        if(ca > cb)
            return 1;
        else if( ca < cb)
            return -1;
        a.popFront();
        b.popFront();
    }
}

bool propertyNameLess(Char)(const(Char)[] a, const(Char)[] b)
{
    return comparePropertyName(a, b) < 0;
}

//@@@BUG - has to be public so that std.range.lowerBound works
public bool workaround(T)(in UnicodeProperty!T a, in UnicodeProperty!T b)
{
    return propertyNameLess(a.name,b.name);
}

//
bool searchUnicodeSet(T, alias table)(string name, ref RleBitSet!T dest)
{
    auto range = assumeSorted!(workaround)(table);    
    auto val = typeof(table[0])(name, typeof(table[0].set).init);

    size_t idx = range.lowerBound(val).length;

    if(idx < range.length && comparePropertyName(range[idx].name, name) == 0){
        dest = RleBitSet!T(range[idx].set);
        return true;
    }
    return false;
}

public @property auto unicodeSet(T=uint)(string name)
{
    alias RleBitSet!T Set;
    Set result;
    alias comparePropertyName ucmp;

    //unicode property
    //helper: direct access with a sanity check
    if(ucmp(name, "L") == 0 || ucmp(name, "Letter") == 0)
    {
        result |= unicodeLu;
        result |= unicodeLl;
        result |= unicodeLt;
        result |= unicodeLo;
        result |= unicodeLm;
    }
    else if(ucmp(name,"LC") == 0 || ucmp(name,"Cased Letter")==0)
    {
        result |= unicodeLl;
        result |= unicodeLu;
        result |= unicodeLt;//Title case
    }
    else if(ucmp(name, "M") == 0 || ucmp(name, "Mark") == 0)
    {
        result |= unicodeMn;
        result |= unicodeMc;
        result |= unicodeMe;
    }
    else if(ucmp(name, "N") == 0 || ucmp(name, "Number") == 0)
    {
        result |= unicodeNd;
        result |= unicodeNl;
        result |= unicodeNo;
    }
    else if(ucmp(name, "P") == 0 || ucmp(name, "Punctuation") == 0)
    {
        result |= unicodePc;
        result |= unicodePd;
        result |= unicodePs;
        result |= unicodePe;
        result |= unicodePi;
        result |= unicodePf;
        result |= unicodePo;
    }
    else if(ucmp(name, "S") == 0 || ucmp(name, "Symbol") == 0)
    {
        result |= unicodeSm;
        result |= unicodeSc;
        result |= unicodeSk;
        result |= unicodeSo;
    }
    else if(ucmp(name, "Z") == 0 || ucmp(name, "Separator") == 0)
    {
        result |= unicodeZs;
        result |= unicodeZl;
        result |= unicodeZp;
    }
    else if(ucmp(name, "C") == 0 || ucmp(name, "Other") == 0)
    {
        result |= unicodeCo;
        result |= unicodeLo;
        result |= unicodeNo;
        result |= unicodeSo;
        result |= unicodePo;
    }
    else if(ucmp(name, "any") == 0)
        result = Set(0,0x110000);
    else if(ucmp(name, "ascii") == 0)
        result = Set(0,0x80);
    else
    {
        if(searchUnicodeSet!(T, tinyUnicodeProps)(name, result) 
                || searchUnicodeSet!(T, smallUnicodeProps)(name, result)
                || searchUnicodeSet!(T, fullUnicodeProps)(name, result))
            return result;        
        else
            throw new Exception("no unicode set by name of "~ name);
    }
    return result;
}

unittest{
    assert(unicodeSet("InHebrew") == unicodeInHebrew);
    assert(unicodeSet("separator") == (unicodeZs | unicodeZl | unicodeZp));
    assert(unicodeSet("In-Kharoshthi") == unicodeInKharoshthi);
}

version(LittleEndian)
{


static if(size_t.sizeof == 4)
{    
    immutable bestWhite_Space2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x3800], [ 0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);   
    immutable bestAlphabetic2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0xe800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0xd05c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1901c18,  0xd0341a,  0xd0340d,  0x1b0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x9000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c07,  0x701c07,  0x701c07,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x704007,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x0,  0x0,  0x0,  0x0,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf06e,  0x87000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x9000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x1001c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3f0ffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0xfcffc0,  0x0,  0x0,  0x0,  0x7ffc0,  0x0,  0x0,  0x0,  0x7f00ffc0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3fffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x7ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f10000,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80,  0x70003fe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3c0000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f0000,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf,  0x402,  0x0,  0x0,  0x0,  0x3e0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff,  0x60000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc0000,  0xffff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffc000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x8000], [ 0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x0,  0x0,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000,  0x0,  0x0,  0xc008000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17fff0,  0x3c000000,  0x0,  0x0,  0x20,  0x0,  0x61f0000,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x0,  0x0,  0x0,  0x0,  0x7700000,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x3f7f,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x1,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x0,  0x0,  0x800ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff00,  0x0,  0x0,  0x60,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde000000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfff7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff3ff0e,  0x20010000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0x0,  0x0,  0xfc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf00000,  0x0,  0x0,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0x0,  0x0,  0xc0003ffe,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0x0,  0x0,  0xc0000000,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0x0,  0x0,  0xf,  0x0,  0x0,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x8800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0x901c07,  0x701c0a,  0x701c07,  0x701c07,  0xc02c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x703407,  0xf03807,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xc9c0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x60000200,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfce8000e,  0x1500000,  0x0,  0x0,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff007fe,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x0,  0x0,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0x0,  0x0,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x0,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffff,  0x3,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x3c00f00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30000000,  0x0,  0x0,  0x0,  0x274,  0x0,  0x0,  0x0,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x0,  0x0,  0x30007f7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x23,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x3800], [ 0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0xf800], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0x1805c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1a01c19,  0xd0341b,  0xd0340d,  0x1c0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0740d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xffffffff,  0xffffffff,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0x0,  0x0,  0xffff00ff,  0x7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf000007f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xfe7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff,  0xffffffff,  0xffffffff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0x3ffc01f,  0xfffffff,  0xffffffff,  0xffffffff,  0x800fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xffffffff,  0xffffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3ff3fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff80003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0xffffff87,  0xff8fffff,  0xffffffff,  0xffffffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8fffffff,  0x83ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xffffffff,  0xffdfffff,  0xf,  0x0,  0xffffffff,  0xffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xf0007,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffcfff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x1800], [ 0x100400,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x4000], [ 0x100400,  0x100801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100c01,  0x101001,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0x156], [ 0x400,  0x10000], [ 0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0x701c07,  0xe03407,  0x110400f,  0x1304412,  0x1104411,  0x1104411,  0x1104414,  0x1104411,  0x1104411,  0x1104415,  0x1105811,  0x1805c11,  0x701c11,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1a01c19,  0x110441b,  0x1104411,  0x1c04411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1107411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x1104411,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x707807,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x0,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x0,  0x0,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0x0,  0x0,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xf000,  0xe0000000,  0x0,  0x0,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xffffffff,  0xffffffff,  0xff00,  0xff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0x0,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00e000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x4000000,  0x0,  0x0,  0xfff00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xf000ffff,  0x0,  0x0,  0x1,  0x0,  0x1800000,  0x0,  0x0,  0x0,  0x1f,  0x1c000,  0x0,  0x0,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffe000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff000,  0x0,  0x0,  0x7f000000,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0x0,  0xff000000,  0x0,  0x0,  0xfc003fe0,  0xf0000000,  0x0,  0x0,  0x7ff00000,  0xe0000000,  0x0,  0x0,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x0,  0x0,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfc00c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0,  0x780,  0xf0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000,  0x0,  0x0,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x0,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x0,  0x0,  0x60000000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x0,  0x0,  0x0,  0xf8000000,  0x78,  0x700000,  0x0,  0x0,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xe0000000,  0x0,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x70000000,  0x7c000000,  0xffffffff,  0xffffffff,  0x0,  0x3f000000,  0xffffffff,  0xffffffff,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xfffffe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x80000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3c000,  0xffff0000,  0x0,  0x0,  0xfffc,  0xfc00fe00,  0x0,  0x200000,  0xfffffff0,  0xffffffff,  0x0,  0x0,  0xfc00fe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xff000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0xfff0fff8,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x180,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xff800000,  0xfffc0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xf000,  0x0,  0x0,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0x0,  0xf000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x0,  0x80000000,  0x2,  0x0,  0x0,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffff001e,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0x0,  0x0,  0x0,  0xfff00000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000]);
    immutable bestWhite_Space3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0x20,  0x80], [ 0x80,  0xc0,  0x700], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2002,  0x2003,  0x2001,  0x2001,  0x2001,  0x2004,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2005,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x163], [ 0x200,  0x170,  0x5100], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x241005,  0x30160a,  0x241c0d,  0x241e09,  0x241209,  0x441210,  0x141212,  0x140a05,  0x140a05,  0x140a05,  0x242813,  0x541209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x1209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x6002,  0xa004,  0xe006,  0x12008,  0x1600a,  0x1a00c,  0x1e00e,  0x2010,  0x24011,  0x2013,  0x2a014,  0x2e016,  0x32018,  0x3601a,  0x38001,  0x3c01d,  0x3e01f,  0x3e020,  0x3e01f,  0x3e01f,  0x3e01f,  0x44021,  0x3e023,  0x4a024,  0x3e01f,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4c001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4e001,  0x2001,  0x2001,  0x2028,  0x54029,  0x5802b,  0x5c02d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x5e001,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x201f,  0x62030,  0x64001,  0x68033,  0x6c035,  0x70037,  0x3e039,  0x3e01f,  0x7603a,  0x7a03c,  0x3e03e,  0x3e01f,  0x8003f,  0x3e01f,  0x3e01f,  0x3e041,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x84001,  0x3e043,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x2001,  0x3e044,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x3e045,  0x3e01f,  0x8c01f,  0x3e047,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x92048,  0x9604a,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e04c,  0x2001,  0x2001,  0x2001,  0x204d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x9c001,  0x3e04f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x2001,  0x3e04f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x3e01f,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x40,  0xf0], [ 0x100,  0x160,  0x2c00], [ 0x0,  0x1,  0x2,  0x2,  0x2,  0x3,  0x2,  0x4,  0x5,  0x2,  0x2,  0x6,  0x2,  0x2,  0x7,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x9,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000,  0x0,  0x21,  0x44000,  0x0,  0x0,  0x0,  0x0,  0x23,  0x0,  0x0,  0x4a024,  0x0,  0x0,  0x26,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x50000,  0x29,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x0,  0x0,  0x0,  0x0,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x37f8,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0xf06e,  0x87000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x1a80], [ 0x80200,  0x100803,  0x100804,  0x100a04,  0x100804,  0x200e06,  0x100809,  0x100804,  0x100804,  0x280804,  0x101604,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x100804,  0x804,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x10003,  0x14002,  0x8002,  0x1c006,  0x18006,  0x24008,  0x1800a,  0x800b,  0x3000c,  0x800d,  0x38005,  0x8002,  0x8002,  0x800f,  0x8002,  0x8002,  0x40002,  0x44002,  0x800e,  0x4c012,  0x50002,  0xc,  0x8015,  0x8002,  0x8002,  0x8002,  0x5c016,  0x64018,  0x8002,  0x8002,  0x6c01a,  0x8002,  0x8002,  0x7401c,  0x8002,  0x8002,  0x8002,  0x8002,  0x78002,  0x8002,  0x8002,  0x8002,  0x801f,  0x80002,  0x88021,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x18023,  0x8002,  0x30024,  0x30017,  0x800c,  0x10002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x800e,  0x8002,  0x98025,  0x8002,  0xa0027,  0x8c002,  0x8002,  0x8002,  0x8002,  0x8029,  0x802a,  0x802b,  0x802c,  0x8002,  0x8002,  0x802d,  0x8002,  0x1002e,  0x3002f,  0x8002,  0x8002,  0x8002,  0x8002,  0x14002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8030,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8031,  0x8002,  0x8002,  0x8002,  0xc8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8033,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x3f0ffc0,  0x0,  0x0,  0x0,  0xfcffc0,  0x0,  0x0,  0x0,  0x7ffc0,  0x0,  0x0,  0x0,  0x7f00ffc0,  0x0,  0x0,  0x0,  0x3fffc0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe00,  0x0,  0x0,  0x0,  0x1c000,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0xffc0,  0x0,  0x0,  0x0,  0x7ff0000,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x3f10000,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0x0,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x80,  0x70003fe,  0x0,  0x0,  0x3c0000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x3f0000,  0x0,  0x0,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0xf,  0x402,  0x0,  0x0,  0x0,  0x3e0000,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff,  0x60000000,  0x0,  0x0,  0xff000000,  0xff000000,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0xfffc0000,  0xffff,  0x0,  0xffc00000,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x0,  0x0,  0x3ffff,  0x0,  0x0,  0xffffc000,  0xffffffff,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x40,  0xd0], [ 0x100,  0x120,  0x3100], [ 0x0,  0x1,  0x2,  0x2,  0x2,  0x3,  0x2,  0x4,  0x5,  0x6,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x2,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x7,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x48001,  0x4c025,  0x4e001,  0x50001,  0x2001,  0x2001,  0x54029,  0x5802b,  0x2001,  0x2001,  0x5c02d,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x202f,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x0,  0x0,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000,  0x0,  0x0,  0xc008000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x17fff0,  0x3c000000,  0x0,  0x0,  0x20,  0x0,  0x61f0000,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x0,  0x0,  0x0,  0x0,  0x7700000,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x3f7f,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x1,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x0,  0x0,  0x800ff,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff00,  0x0,  0x0,  0x60,  0xffc0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde000000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfff7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff3ff0e,  0x20010000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0x0,  0x0,  0xfc0000,  0x0,  0x0,  0x0,  0xf00000,  0x0,  0x0,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0x0,  0x0,  0xc0003ffe,  0x0,  0x0,  0x0,  0xf0000000,  0x0,  0x0,  0x0,  0xc0000000,  0x30000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0x0,  0x0,  0xf,  0x0,  0x0,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0xf0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x2a80], [ 0x80200,  0x140803,  0x140a05,  0x140c05,  0x140a05,  0x141007,  0x140a05,  0x140a05,  0x140a05,  0x240a05,  0x14160a,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0xa05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0xc002,  0x14004,  0x18002,  0x1c002,  0x24008,  0x28002,  0x8002,  0x2c002,  0x30002,  0x3800d,  0x800f,  0x8010,  0x8011,  0x4c012,  0x50002,  0x8002,  0x8002,  0x54002,  0x8002,  0x8002,  0x8002,  0x58002,  0x8002,  0x60017,  0x8002,  0x8019,  0x8002,  0x8002,  0x8002,  0x68002,  0x7001b,  0x7801d,  0x7c01f,  0x84020,  0x8c022,  0x7c01f,  0x7c01f,  0x94024,  0x7c01f,  0x9801f,  0x7c01f,  0x8027,  0xa0002,  0x8002,  0xa4002,  0xa801f,  0xb002b,  0xb4002,  0xbc02e,  0x7c01f,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc0002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc4002,  0x8002,  0x8002,  0xcc032,  0x8034,  0x8002,  0x8035,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xdc036,  0x8002,  0xe0002,  0x8039,  0xec03a,  0x8002,  0xf403c,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xf801f,  0x10003f,  0x8041,  0x8042,  0x8002,  0x8002,  0x10c002,  0x114044,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x118002,  0x8002,  0x120047,  0x128049,  0x804b,  0x13404c,  0x13c04e,  0x144050,  0x14c052,  0x8021,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x4,  0x0,  0x0,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xc9c0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x60000200,  0x0,  0x0,  0x0,  0x400000,  0x0,  0x0,  0x0,  0xc0c0000,  0x0,  0x0,  0x0,  0x20000,  0x0,  0x0,  0x0,  0x10000,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x2000000,  0x0,  0x80000000,  0x0,  0x0,  0xfce8000e,  0x1500000,  0x0,  0x0,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0x0,  0x1ff007fe,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x0,  0x0,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0x0,  0x0,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x7e0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x0,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0x7f,  0x0,  0x7fffff,  0x3,  0x0,  0x0,  0x600,  0x0,  0x0,  0x0,  0x0,  0x3c00f00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x30000000,  0x0,  0x0,  0x0,  0x274,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x0,  0x0,  0x30007f7f,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x23,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0x20,  0x80], [ 0x80,  0xc0,  0x700], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2002,  0x2003,  0x2001,  0x2001,  0x2001,  0x2004,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2005,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x0,  0x1,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x173], [ 0x200,  0x190,  0x6100], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x241005,  0x30160a,  0x241c0d,  0x241e09,  0x241209,  0x441210,  0x142612,  0x140a05,  0x140a05,  0x140a05,  0x242a14,  0x581209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x5c1209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x241209,  0x1209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x4001,  0x6001,  0xa004,  0xe006,  0x12008,  0x1600a,  0x1a00c,  0x200e,  0x2000f,  0x2001,  0x24011,  0x28013,  0x2c015,  0x30017,  0x32001,  0x3601a,  0x38001,  0x201d,  0x3c001,  0x2001,  0x3e001,  0x42020,  0x46022,  0x4a024,  0x2026,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x4e001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x50001,  0x2001,  0x2001,  0x2029,  0x5602a,  0x5a02c,  0x5e02e,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x60001,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2031,  0x66032,  0x68001,  0x6c035,  0x70037,  0x74039,  0x6203b,  0x62031,  0x7a03c,  0x7e03e,  0x62040,  0x62041,  0x86042,  0x62031,  0x62031,  0x62044,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x8a001,  0x62046,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x2001,  0x62047,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x62048,  0x62031,  0x92031,  0x6204a,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x9804b,  0x9c04d,  0xa004f,  0xa4051,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62053,  0xaa054,  0xae056,  0xb2058,  0xb605a,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x2001,  0x2001,  0x205c,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0xba001,  0x6205e,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x2001,  0x6205e,  0x62031,  0x62031,  0xbe031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x62031,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xffffffff,  0xffffffff,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0x0,  0x0,  0xffff00ff,  0x7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf000007f,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfbffffff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xffffffff,  0xffffffff,  0xfffffffe,  0xffffffff,  0xfe7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xfff,  0xffffffff,  0xffffffff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0xffffffff,  0xffffff,  0xffffffff,  0xffffffff,  0x3ffc01f,  0xfffffff,  0xffffffff,  0xffffffff,  0x800fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xffffffff,  0xffffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x3ff3fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xffffffff,  0xffffffff,  0xfff80003,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0xffffff87,  0xff8fffff,  0xffffffff,  0xffffffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x3ff,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8fffffff,  0x83ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xffffffff,  0xffdfffff,  0xf,  0x0,  0xffffffff,  0xffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffff,  0x3ff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xf0007,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x3ffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffcfff,  0xffffffff,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xffffffff,  0xffffffff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0xffffffff,  0xffff0fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xffffffff,  0x7fffffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0x0,  0x0,  0xf8000000,  0xffffffff,  0xffffffff,  0xffe1,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0x20,  0x50], [ 0x80,  0x60,  0x600], [ 0x204080,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0x20,  0x90], [ 0x80,  0xe0,  0x1200], [ 0x404080,  0x804083,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204085,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000,  0x2001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1003,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x4001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1005,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1006,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1007,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x1001,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x0,  0x0,  0x0,  0x0,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0xab,  0x17b], [ 0x200,  0x1a0,  0x6200], [ 0x80200,  0x140803,  0x140a05,  0x140e06,  0x141005,  0x2c1409,  0x381a0c,  0x381e0e,  0x381c0e,  0x441c10,  0x142612,  0x140a05,  0x140a05,  0x140a05,  0x382a14,  0x581c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x5c1c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x381c0e,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x140a18,  0x140a05,  0x140a05,  0x140a05,  0x140a05,  0x3005,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x4000,  0x8003,  0xc005,  0x10007,  0x14009,  0x1800b,  0xd,  0x1e00e,  0x0,  0x22010,  0x26012,  0x2a014,  0x2e016,  0x30000,  0x34019,  0x36000,  0x1c,  0x3a000,  0x0,  0x3c000,  0x4001f,  0x44021,  0x48023,  0x25,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e000,  0x0,  0x0,  0x28,  0x54029,  0x5802b,  0x5c02d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5e000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x62030,  0x64000,  0x68033,  0x6c035,  0x70037,  0x74039,  0x7403a,  0x7803b,  0x7c03d,  0x7403f,  0x74040,  0x84041,  0x7403a,  0x7403a,  0x74043,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x88000,  0x74045,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x74046,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x74047,  0x7403a,  0x9003a,  0x74049,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x9604a,  0x9a04c,  0x9e04e,  0xa2050,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x74052,  0xa8053,  0xac055,  0xb0057,  0xb4059,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x0,  0x5b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb8000,  0x7405d,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x7405d,  0x7403a,  0x7403a,  0xbe05e,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x7403a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x0,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x0,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x0,  0x0,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0x0,  0x0,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xf000,  0xe0000000,  0x0,  0x0,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xffffffff,  0xffffffff,  0xff00,  0xff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffff80,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0x0,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0x0,  0x0,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc00e000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x4000000,  0x0,  0x0,  0xfff00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xf000ffff,  0x0,  0x0,  0x1,  0x0,  0x1800000,  0x0,  0x0,  0x0,  0x1f,  0x1c000,  0x0,  0x0,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffe000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0xfffff000,  0x0,  0x0,  0x7f000000,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0x0,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0x0,  0xff000000,  0x0,  0x0,  0xfc003fe0,  0xf0000000,  0x0,  0x0,  0x7ff00000,  0xe0000000,  0x0,  0x0,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x0,  0x0,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfc00c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0,  0x780,  0xf0000000,  0x0,  0x0,  0x0,  0xc000,  0x0,  0x0,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x0,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x0,  0x0,  0x60000000,  0x1,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x0,  0x0,  0x0,  0xf8000000,  0x78,  0x700000,  0x0,  0x0,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xe0000000,  0x0,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xfffffc00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x70000000,  0x7c000000,  0xffffffff,  0xffffffff,  0x0,  0x3f000000,  0xffffffff,  0xffffffff,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xfffffe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x80000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3c000,  0xffff0000,  0x0,  0x0,  0xfffc,  0xfc00fe00,  0x0,  0x200000,  0xfffffff0,  0xffffffff,  0x0,  0x0,  0xfc00fe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xff000000,  0xfffffc00,  0xffffffff,  0x0,  0x0,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0xfff0fff8,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xffff8000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0xfe000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffc,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0x0,  0x180,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0xff800000,  0xfffc0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000,  0x0,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0x0,  0xf000,  0x0,  0x0,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0x0,  0xf000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x0,  0x80000000,  0x2,  0x0,  0x0,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffff001e,  0xffffffff,  0x0,  0x0,  0xffffffc0,  0xffffffff,  0x0,  0x0,  0x0,  0xfff00000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff800000,  0xffffffff,  0x0,  0xffe00000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0000000]);
    immutable bestWhite_Space4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x1f,  0x57], [ 0x40,  0x30,  0x70,  0x380], [ 0x1041040,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x41041,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x0,  0x0,  0x4000,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0xc002,  0x8002,  0x8004,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8005,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8003,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x3e00,  0x1,  0x0,  0x0,  0x20,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x7ff,  0x8300,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x3d,  0x125], [ 0x40,  0x80,  0x1d0,  0x4080], [ 0x40c2040,  0x6186185,  0x6186186,  0x6186186,  0x6186186,  0x6186186,  0x186186,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x501003,  0x701c06,  0x701c08,  0x701c07,  0x701c07,  0xa02407,  0x701c0b,  0xc01c07,  0xd0340d,  0xf0380d,  0xd04410,  0x1303412,  0xd0340d,  0xd0340d,  0xd03414,  0xd0340d,  0xd0340d,  0xd03415,  0xd0580d,  0xd05c0d,  0x701c0d,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1901c18,  0xd0341a,  0xd0340d,  0x1b0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0xd0340d,  0x340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x8002,  0xc002,  0x14004,  0x18002,  0x20007,  0x28009,  0x3000b,  0x3800d,  0x4000f,  0x48011,  0x50013,  0x58015,  0x60017,  0x68019,  0x7001b,  0x7801d,  0x8002,  0x8001f,  0x88021,  0x8023,  0x8002,  0x94024,  0x9c026,  0xa4028,  0xac02a,  0xb402c,  0xbc02e,  0xc4030,  0xc8002,  0x8002,  0xd0033,  0xd8035,  0xe0037,  0xe4039,  0xe4039,  0xe8039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xf003b,  0xf803d,  0xe403f,  0xe4039,  0x104040,  0x10c042,  0xe4039,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x110002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x114002,  0x8002,  0x8002,  0x8002,  0x8002,  0x118002,  0x8002,  0x120047,  0x128049,  0x13004b,  0x13804d,  0x14004f,  0x148051,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x14c002,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x154054,  0x15c056,  0x8002,  0x164058,  0x16c05a,  0x17405c,  0x17c05e,  0xe4060,  0x184039,  0x18c062,  0x190002,  0xe4039,  0xe4039,  0xe4039,  0xe4065,  0x19c066,  0xe4068,  0xe4069,  0xe406a,  0xe4039,  0xe4039,  0xe4039,  0x1b006b,  0x1b806d,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x110039,  0xe4039,  0x8002,  0x8002,  0x8002,  0xe406f,  0xe4070,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0xe4071,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0xe4072,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1d0073,  0xe4075,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1dc076,  0x8078,  0x1e4002,  0x1ec07a,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x1f407c,  0xe4039,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x1f8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x8002,  0x807f,  0xe4064,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x8002,  0x8002,  0xe4064,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0xe4039,  0x0,  0x0,  0x7fffffe,  0x7fffffe,  0x0,  0x4200400,  0xff7fffff,  0xff7fffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x3ffc3,  0x501f,  0x0,  0x0,  0x20,  0x3cdf0000,  0xffffd740,  0xfffffffb,  0xffffffff,  0xffbfffff,  0xfffffc03,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffe00ff,  0x27fffff,  0xfffffffe,  0xff,  0xbfff0000,  0xffff00b6,  0x707ff,  0x7ff0000,  0xffffffff,  0xfeffffff,  0xffffc000,  0xffffffff,  0xffffffff,  0x1fefffff,  0x9c00e1fe,  0xffff0000,  0xffffffff,  0xffffe000,  0xffffffff,  0xffffffff,  0x3ffff,  0xfffffc00,  0x43007ff,  0xfcffffff,  0x1fff,  0x1ffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7fff03f0,  0xffffffff,  0xefffffff,  0xffe1dfff,  0xfefe000f,  0xfff99fee,  0xe3c5fdff,  0xb080599f,  0x3000f,  0xfff987ee,  0xc36dfdff,  0x5e021987,  0x3f0000,  0xfffbbfee,  0xe3edfdff,  0x11bbf,  0xf,  0xfff99fee,  0xe3edfdff,  0xb0c0199f,  0x2000f,  0xd63dc7ec,  0xc3ffc718,  0x811dc7,  0x0,  0xfffddfee,  0xe3effdff,  0x3601ddf,  0xf,  0xfffddfec,  0xe3effdff,  0x40601ddf,  0x6000f,  0xfffddfec,  0xe7ffffff,  0x805ddf,  0xfc00000f,  0xfc7fffec,  0x2ffbffff,  0xff5f807f,  0xc0000,  0xfffffffe,  0x7ffffff,  0x207f,  0x0,  0xfef02596,  0x3bffecae,  0xf000205f,  0x0,  0x1,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffff03,  0x1fffffff,  0x0,  0x0,  0xffffffff,  0xf97fffff,  0xffff0000,  0xffffc1e7,  0x3000407f,  0xffffffff,  0xffff20bf,  0xf7ffffff,  0xffffffff,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0x87ffffff,  0x0,  0xffff,  0xffffffff,  0xffffffff,  0x1fffff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff9fff,  0x7fffffe,  0xffffffff,  0xffffffff,  0x1c7ff,  0xfdfff,  0xfffff,  0xfffff,  0xddfff,  0xffffffff,  0xffcfffff,  0x108001ff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0x1ff0fff,  0xffff0000,  0x1f3fff,  0xffffffff,  0xffff0fff,  0x3ff,  0x0,  0xfffffff,  0xffffffff,  0x7fffffff,  0x1ffffe,  0x0,  0x80,  0x0,  0x0,  0xffffffff,  0xffefffff,  0xfef,  0x0,  0xffffffff,  0xfc00f3ff,  0xffffffff,  0x3ffbf,  0xffffffff,  0x3fffff,  0xfc00e000,  0x3fffffff,  0x0,  0x0,  0x0,  0x6fde00,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0x5fdfffff,  0xfcf1fdc,  0x1fdc1fff,  0x0,  0x0,  0x0,  0x80020000,  0x1fff0000,  0x0,  0x0,  0x0,  0x3e2ffc84,  0xf3ffbd50,  0x43e0,  0xffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc00000,  0xffffffff,  0x3ff,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xc781f,  0xffffffff,  0xffff20bf,  0xffffffff,  0x80ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0x0,  0x8000,  0x0,  0x0,  0xe0,  0x1f3e03fe,  0xfffffffe,  0xffffffff,  0xe07fffff,  0xfffffffe,  0xffffffff,  0xf7ffffff,  0xffffffe0,  0xfffe3fff,  0xffffffff,  0xffffffff,  0x7fff,  0x7ffffff,  0x0,  0xffff0000,  0xffffffff,  0x3fffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1fff,  0x0,  0x1fff,  0x0,  0xffff0000,  0x3fffffff,  0xffff1fff,  0xc00,  0xffffffff,  0x8ff07fff,  0x80ffffff,  0xffffffff,  0xffffffff,  0xffff,  0xff800000,  0xfffffffc,  0xffffffff,  0xffffffff,  0xf79ff,  0x7ff,  0x0,  0xff000000,  0xfffff7bb,  0xff,  0xffffffff,  0xfffff,  0xffffffff,  0xffffffff,  0xf,  0x8fc0000,  0xfffffc00,  0xffff07ff,  0x7ffff,  0x1fffffff,  0xffffffff,  0xfff7ffff,  0x8000,  0x0,  0xffffffff,  0x7fffff,  0x3fff,  0x47fffff,  0xffffffff,  0x7fffffff,  0x38000005,  0x3cffff,  0x7e7e7e,  0x7f7f,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x7ff,  0xffffffff,  0xffff000f,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffffff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7ffdff,  0xffffffdb,  0xffffffff,  0xffffffff,  0x3ffff,  0xfff80000,  0xffffffff,  0xffffffff,  0x3fffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0xfff0000,  0x0,  0x0,  0x0,  0xffdf0000,  0xffffffff,  0xffffffff,  0xffffffff,  0x1fffffff,  0x0,  0x7fffffe,  0x7fffffe,  0xffffffc0,  0xffffffff,  0x7fffffff,  0x1cfcfcfc,  0x0,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7ffffff,  0x0,  0x0,  0xffffffff,  0x1fffff,  0x1fffffff,  0xffffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff0000,  0x7ff,  0x0,  0x3fffffff,  0xffffffff,  0x3eff0f,  0x0,  0x3fffffff,  0x0,  0x0,  0x0,  0xfffffd3f,  0x91bfffff,  0x3fffff,  0x0,  0x3fffff,  0x3ffffff,  0x0,  0x0,  0xffffffff,  0xc0ffffff,  0x0,  0x0,  0xfeeff06f,  0xfffff,  0x0,  0x1fffffff,  0xffffffff,  0x3fffff,  0x3fffff,  0x7ffff,  0xffffffff,  0xffffffff,  0x1ff,  0x0,  0xffffffff,  0xffffffff,  0x3f,  0x0,  0xfffffffc,  0x1ffffff,  0xffff0000,  0x1ff,  0xffffffff,  0x7ffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x1e,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0x7fff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0xffffffff,  0x7fff,  0x0,  0x0,  0xffffffff,  0x1ffffff,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffff001f,  0x7fffffff,  0xfff80000,  0x0,  0x0,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffff3f,  0xf7fffffd,  0xf7ffffff,  0xffdfffff,  0xffdfffff,  0xffff7fff,  0xffff7fff,  0xfffffdff,  0xfffffdff,  0xff7,  0x0,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x0,  0xffffffff,  0xffffffff,  0x7fffff,  0x0,  0xffffffff,  0x1fffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x37,  0xc7], [ 0x40,  0x70,  0x120,  0x2300], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4144104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x501003,  0x701c06,  0x701c07,  0x701c07,  0x701c07,  0x801c07,  0x701c09,  0x701c07,  0x701c07,  0xb02807,  0x70340c,  0x701c07,  0x701c07,  0x701c07,  0x701c0e,  0x701c07,  0x701c07,  0x701c07,  0x703c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x1001c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x701c07,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x8000,  0xc000,  0x14004,  0x1c006,  0x24008,  0x2c00a,  0x3400c,  0x3c00e,  0x44010,  0x4c012,  0x54014,  0x5c016,  0x64018,  0x0,  0x0,  0x1a,  0x0,  0x0,  0x0,  0x7001b,  0x7801d,  0x8001f,  0x21,  0x8c022,  0x94024,  0x98000,  0x0,  0x0,  0x9c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa0000,  0xa8029,  0x0,  0x0,  0xb002b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb802d,  0x0,  0xc002f,  0xc8031,  0xd0033,  0xd4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x36,  0x0,  0x0,  0x37,  0x0,  0x0,  0xe0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x39,  0x0,  0x0,  0x0,  0x0,  0x0,  0xec03a,  0xf403c,  0x0,  0x0,  0x0,  0x0,  0xf8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10003f,  0x0,  0x108041,  0x43,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4044,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffff,  0x3f8,  0x0,  0x0,  0x0,  0xfffe0000,  0xbfffffff,  0xb6,  0x0,  0x7ff0000,  0x0,  0xfffff800,  0x10000,  0x0,  0x0,  0x9fc00000,  0x3d9f,  0x20000,  0xffff0000,  0x7ff,  0x0,  0x0,  0x1ffc0,  0x0,  0xff800,  0xfbc00000,  0x3eef,  0xe000000,  0x0,  0x0,  0x0,  0x0,  0x7ffffff0,  0xf,  0xdc000000,  0xfeffff,  0xc,  0xe,  0xd0000000,  0x80399f,  0xc,  0xe,  0xd0000000,  0x23987,  0x230000,  0xe,  0xd0000000,  0x3bbf,  0xc,  0xe,  0xd0000000,  0xc0399f,  0xc,  0x4,  0xc0000000,  0x803dc7,  0x0,  0xe,  0xc0000000,  0x603ddf,  0xc,  0xc,  0xd0000000,  0x603ddf,  0xc,  0xc,  0xc0000000,  0x803ddf,  0xc,  0xc,  0x0,  0xff5f8400,  0xc0000,  0x0,  0x7f20000,  0x7f80,  0x0,  0x0,  0x1bf20000,  0x3f00,  0x0,  0x3000000,  0xc2a00000,  0x0,  0xfffe0000,  0xfeffe0df,  0x1fffffff,  0x40,  0x0,  0x0,  0x7ffff800,  0xc3c00000,  0x1e3f9d,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x1c0000,  0x1c0000,  0xc0000,  0xc0000,  0x0,  0xfff00000,  0x200fffff,  0x0,  0x3800,  0x0,  0x0,  0x0,  0x0,  0x200,  0x0,  0x0,  0x0,  0xfff0fff,  0x0,  0x0,  0x0,  0xffff0000,  0x301,  0x0,  0xf800000,  0x0,  0x7fe00000,  0x9fffffff,  0x1f,  0xfff00000,  0x1f,  0xff800,  0x7,  0x3ffe,  0x0,  0xfffc0,  0x0,  0xfffff0,  0x0,  0x0,  0x0,  0x0,  0xfff70000,  0x1c21ff,  0x0,  0x0,  0xffffffff,  0xf000007f,  0x0,  0x0,  0xffff0000,  0x1ffff,  0x0,  0x0,  0x0,  0x38000,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xffffffff,  0x0,  0xfc00,  0x0,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff78000,  0x80000000,  0x0,  0x0,  0x30000,  0x844,  0xf8,  0x0,  0x0,  0x3,  0xfff00000,  0x1f,  0x3ffff,  0x0,  0x3fc0,  0xfff80,  0x0,  0xf,  0xfff80000,  0x1,  0x0,  0x0,  0x7ffe00,  0x3008,  0x8000000,  0x0,  0xc19d0000,  0x2,  0x60f800,  0x0,  0x0,  0x0,  0x37f8,  0x40000000,  0x0,  0x0,  0x0,  0xffff,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0xf06e,  0x87000000,  0x0,  0x0,  0x7,  0xff000000,  0x7f,  0x0,  0x7,  0x7ff0000,  0x0,  0x0,  0x7,  0x1fff80,  0x0,  0x0,  0x7,  0xfff80000,  0x1,  0x0,  0x0,  0xfff800,  0x0,  0x0,  0x0,  0x0,  0xfffe0000,  0x7fffffff,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e0,  0xfe7,  0x3c00,  0x0,  0x0,  0x0,  0x0,  0x1c,  0x0,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x58,  0x130], [ 0x80,  0x70,  0x1b0,  0xcc0], [ 0x608080,  0xa04084,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x500c,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x680a,  0x500e,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x780a,  0x8810,  0x9812,  0xa814,  0x500a,  0xb00a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0xc017,  0x500a,  0x500a,  0x500a,  0x5019,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x500a,  0x8000,  0x8002,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x18001,  0x1,  0x8001,  0x20001,  0x8001,  0x8001,  0x28001,  0x30001,  0x28001,  0x28001,  0x38001,  0x40001,  0x48001,  0x28001,  0x50001,  0x8001,  0x58001,  0x58001,  0x800c,  0x8001,  0x20001,  0x800b,  0x8001,  0x8001,  0x8001,  0x8001,  0x68001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x70001,  0x8001,  0x78001,  0x800b,  0x8001,  0x80001,  0x88001,  0x8001,  0x8012,  0x58001,  0x8000,  0x90001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x98001,  0x8004,  0xa0001,  0x8015,  0x8001,  0x8001,  0x8001,  0x8001,  0xb0001,  0xc0017,  0x8001,  0x8001,  0x8001,  0x8001,  0xc8001,  0x801a,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0xd8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x801c,  0x8001,  0x8001,  0x801d,  0xf0003,  0x801f,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8003,  0x28001,  0x8001,  0x8001,  0x8020,  0x58001,  0x8004,  0x58001,  0x58001,  0x8001,  0x8001,  0x1,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x800b,  0x8001,  0x8001,  0x8001,  0x110021,  0x8023,  0x8001,  0x8001,  0x128024,  0x130001,  0x8001,  0x8003,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x138001,  0x8001,  0x8028,  0x8001,  0x148001,  0x8001,  0x150001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x158001,  0x8001,  0x8001,  0x8001,  0x160001,  0x1,  0x8019,  0x58001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x20001,  0x8001,  0x8001,  0x17002d,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x178001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x180001,  0x8001,  0x8001,  0x8031,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x8001,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x720c0000,  0x0,  0x3ff,  0x3ff,  0x0,  0x0,  0xffc0,  0x0,  0x3f0ffc0,  0x0,  0xfcffc0,  0x0,  0x7ffc0,  0x0,  0x7f00ffc0,  0x0,  0x3fffc0,  0x3ff0000,  0x0,  0x0,  0xfffff,  0x0,  0x1ffffe00,  0x0,  0x1c000,  0x0,  0x3ff03ff,  0xffc0,  0x0,  0x7ff0000,  0x0,  0x3ff03ff,  0x0,  0x0,  0x3f10000,  0xffff0000,  0xffffffff,  0x3e7,  0x0,  0x0,  0xffffffff,  0xfffffff,  0x0,  0x0,  0xfffffc00,  0x0,  0xffc00000,  0xfffff,  0x0,  0x0,  0x20000000,  0x80,  0x70003fe,  0x3c0000,  0x0,  0xfffeff00,  0x0,  0x3ff,  0xfffe0000,  0x0,  0x3f0000,  0xffffff80,  0xfffff,  0xffffffff,  0x1ffffff,  0x400,  0x0,  0x0,  0xf,  0x402,  0x0,  0x3e0000,  0x0,  0xff000000,  0x0,  0xfc00000,  0x0,  0xff,  0x60000000,  0xff000000,  0xff000000,  0x0,  0x7fffffff,  0xfffc0000,  0xffff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7,  0x0,  0x3ffff,  0xffffc000,  0xffffffff,  0x7ff,  0x0,  0x0,  0x0]);
    immutable bestPunctuation4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x50,  0x100], [ 0x80,  0x60,  0x160,  0x1440], [ 0x608080,  0x204084,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x700d,  0x680f,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x800d,  0x6811,  0x6812,  0x6813,  0x680d,  0xa00d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x8000,  0x18002,  0x18003,  0x18003,  0x18003,  0x18003,  0x20003,  0x18005,  0x18003,  0x18003,  0x30003,  0x40007,  0x50009,  0x58003,  0x1800c,  0x68003,  0x7800e,  0x18003,  0x80003,  0x18003,  0x18003,  0x88003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x90003,  0x98003,  0x18003,  0x18014,  0xb0015,  0xb8003,  0xc0003,  0x18003,  0x18003,  0x18003,  0x18003,  0xc8003,  0x18003,  0x1801a,  0x18003,  0x18003,  0x18003,  0xd8003,  0xe801c,  0x1801e,  0xf8003,  0x18020,  0x18003,  0x108003,  0x18003,  0x18022,  0x18023,  0x120003,  0x128003,  0x138026,  0x140003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x150029,  0x1802b,  0x18003,  0x18003,  0x18003,  0x18003,  0x1802c,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x168003,  0x170003,  0x18003,  0x18003,  0x18003,  0x18002f,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x188003,  0x88003,  0x18003,  0x18032,  0x18003,  0x18003,  0x18003,  0x18033,  0xc0034,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x138003,  0x18003,  0x18003,  0x1b0035,  0x1b8003,  0x18003,  0x18003,  0x1c0003,  0x1c8003,  0x1d803a,  0x1e0003,  0x1e8003,  0x1f0003,  0x18003,  0x1f8003,  0x18003,  0x18003,  0x18027,  0x18003,  0x208040,  0x18003,  0x218042,  0x18003,  0x18003,  0x18003,  0x18044,  0x18003,  0x18003,  0x18003,  0x18003,  0x22803b,  0x230003,  0x18003,  0x18047,  0x18003,  0x240003,  0x18003,  0x18049,  0x18003,  0x250003,  0x26004b,  0x268003,  0x270003,  0x18003,  0x18003,  0x18003,  0x18003,  0x278003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x0,  0x8c00f7ee,  0xb8000001,  0x28000000,  0x0,  0x88c00882,  0x0,  0x0,  0x0,  0x40000000,  0x80,  0x0,  0xfc000000,  0x0,  0x600,  0x40000000,  0x49,  0x180000,  0xc8003600,  0x0,  0x0,  0x3c00,  0x100000,  0x0,  0x3fff,  0x0,  0x0,  0x3800000,  0x0,  0x7fff0000,  0x40000000,  0x0,  0x0,  0x10030,  0x0,  0x10000,  0x0,  0x100000,  0xc008000,  0x0,  0x17fff0,  0x3c000000,  0x20,  0x0,  0x61f0000,  0x0,  0xfc00,  0x0,  0x0,  0x8000000,  0x0,  0x1ff,  0x1,  0x0,  0x0,  0x6000,  0x18000000,  0x0,  0x0,  0x3800,  0x0,  0x600000,  0x7700000,  0x0,  0x7ff,  0x0,  0x30,  0x0,  0xc0000000,  0x0,  0x0,  0x3f7f,  0xfc000000,  0x1,  0x0,  0xf0000000,  0x0,  0xf8000000,  0x0,  0xc0000000,  0x800ff,  0x0,  0xffff0000,  0xffff00ff,  0x7ffbffef,  0x60000000,  0x6000,  0x0,  0x0,  0x600,  0x0,  0x3fff00,  0x60,  0xffc0,  0x1fffff8,  0x0,  0xf000000,  0x30000000,  0x0,  0xde000000,  0xffffffff,  0xfff7fff,  0xfff3ff0e,  0x20010000,  0x0,  0x1,  0xe000,  0x0,  0x0,  0x40080000,  0x0,  0xfc0000,  0x0,  0xf00000,  0xc000,  0x7000000,  0x0,  0xc000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0xc0000000,  0x30000,  0x0,  0x800,  0x3ff0000,  0xffff0000,  0xfff7ffff,  0xd0b,  0x8c00f7ee,  0xb8000001,  0xa8000000,  0x3f,  0x7,  0x0,  0x10000,  0x0,  0x800000,  0x0,  0x80000000,  0x80000000,  0x1ff0000,  0x80000000,  0x0,  0xfe000000,  0x3f80,  0x0,  0x0,  0xd8000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0x0,  0xf0000,  0x0,  0x0]);
    immutable bestSymbol4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0xd,  0x6d,  0x13d], [ 0x40,  0xc0,  0x1a0,  0x1b80], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x6810,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x9011,  0x6813,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0xa814,  0x680d,  0x680d,  0xb00d,  0xc017,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x8000,  0x18002,  0x20004,  0x20004,  0x20004,  0x28004,  0x30004,  0x40007,  0x20004,  0x20009,  0x20004,  0x2000a,  0x2000b,  0x60004,  0x20004,  0x40004,  0x20004,  0x20004,  0x20004,  0x68004,  0x20004,  0x70004,  0x78004,  0x80004,  0x88004,  0x20004,  0x90004,  0x20004,  0x20011,  0x20004,  0x20013,  0xa8014,  0x20004,  0x20016,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20017,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0xc0004,  0x20004,  0x20004,  0xc8004,  0xd0004,  0x20004,  0x20004,  0xd8004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0xe801c,  0xf0004,  0x2001f,  0x108020,  0x118022,  0x118023,  0x118023,  0x118024,  0x128023,  0x138026,  0x148028,  0x118023,  0x118023,  0x118023,  0x118023,  0x15802a,  0x16802c,  0x118023,  0x118023,  0x118023,  0x17802e,  0x118023,  0x118023,  0x180023,  0x20004,  0x20004,  0x188004,  0x20004,  0x20004,  0x20004,  0x128032,  0x118023,  0x198023,  0x20034,  0x20035,  0x20004,  0x1b8036,  0x1c8038,  0x1d803a,  0x118023,  0x118023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x118004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x1e0022,  0x20004,  0x20004,  0x20004,  0x20004,  0x2003d,  0x2003e,  0x2003f,  0x20004,  0x20004,  0x20004,  0x200004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20041,  0x218042,  0x20004,  0x20004,  0x20004,  0x220004,  0x228004,  0x20004,  0x238046,  0x240004,  0x20004,  0x20004,  0x250049,  0x26004b,  0x20004,  0x20004,  0x20004,  0x20004,  0x118023,  0x268023,  0x27804e,  0x288050,  0x290023,  0x20004,  0x298023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x2a0004,  0x2b0055,  0x2c0057,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x2c8004,  0x20004,  0x20004,  0x11805a,  0x2e005b,  0x2d005d,  0x2f805e,  0x308060,  0x20004,  0x318062,  0x328064,  0x33003b,  0x338023,  0x348068,  0x350004,  0x358023,  0x360023,  0x128023,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x20004,  0x0,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x113d37c,  0x800000,  0x800000,  0x0,  0x0,  0xfffc003c,  0xffffafe0,  0x0,  0x200000,  0x30,  0x0,  0x0,  0x400000,  0x4,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x40000000,  0x60000200,  0x0,  0xc0c0000,  0x0,  0x20000,  0x0,  0x10000,  0x0,  0x7f80000,  0x0,  0x80000000,  0x0,  0x2000000,  0xfce8000e,  0x1500000,  0x0,  0xc0000000,  0x1e0dfbf,  0x0,  0xc0000000,  0x0,  0x3ff0000,  0x0,  0x8000000,  0x0,  0x1,  0x0,  0xc0000000,  0xffffffff,  0x0,  0x1ff007fe,  0x0,  0xa0000000,  0xe000e003,  0x6000e000,  0x40010,  0x1c000000,  0x1c00,  0x3ffffff,  0xc1d0037b,  0xc0042af,  0xbc1f,  0x0,  0xffff0000,  0xffffffff,  0xffffffff,  0xffffffff,  0xffffffff,  0xfffff9ff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0x0,  0xf0000000,  0xffffffff,  0xffffffff,  0x3ff,  0xfffffffe,  0xffffffff,  0xffffffff,  0xff,  0xfff00000,  0xffffffff,  0xffffff9f,  0xffff003f,  0xfe000007,  0xffffffff,  0xf0ffffff,  0xcfffffff,  0x3ff1fff,  0x0,  0x0,  0x7e0,  0xfbffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xc0010,  0xc0c00001,  0x18000000,  0x0,  0xffc30000,  0x0,  0xffffffff,  0xf,  0x7fffffff,  0xfffffc00,  0x100ff,  0xffffffff,  0xfffffc00,  0x1ffff,  0xffffffff,  0x7fffffff,  0x7f,  0x0,  0x7fffff,  0x3,  0x600,  0x0,  0x0,  0x3c00f00,  0x0,  0x3800000,  0x0,  0x200,  0x0,  0xfffc0000,  0x3,  0x0,  0x0,  0x30000000,  0x0,  0x274,  0x70000810,  0x40000000,  0x50000001,  0x0,  0x0,  0x30007f7f,  0x0,  0xff800000,  0x0,  0xfe000000,  0xfff03ff,  0x0,  0xffff0000,  0x1fffffff,  0xffffffff,  0x3fffff,  0xffffffff,  0xfffffe7f,  0xffffffff,  0x1c1f,  0xfffff018,  0xffffc3ff,  0x3fffffff,  0x0,  0x23,  0x0,  0x7fffff,  0x0,  0x8000002,  0x8000000,  0x200000,  0x200000,  0x8000,  0x8000,  0x200,  0x200,  0x8,  0x0,  0x0,  0x30000,  0xffffffff,  0xffff0fff,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff0000,  0xffff7fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xffffffff,  0x1fffffff,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0xf8000000,  0xffe1,  0x0,  0x3f,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x1f,  0x57], [ 0x40,  0x30,  0x70,  0x300], [ 0x1041040,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x1041041,  0x41041,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200400,  0x101003,  0x100405,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x0,  0x0,  0x0,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x8001,  0x4001,  0x4003,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4004,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4002,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x4001,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x7ff,  0x8000,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0xd,  0x9d,  0x205], [ 0x40,  0x120,  0x2d0,  0x3280], [ 0x40c2040,  0x6186185,  0x6186186,  0x6186186,  0x6186186,  0x61c6186,  0x186186,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x800d,  0x6811,  0x680d,  0x680d,  0x680d,  0x680d,  0x900d,  0x9813,  0x9813,  0x9813,  0x9813,  0xa814,  0xb816,  0xc818,  0xd81a,  0x9813,  0xe81c,  0x9813,  0xf00d,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x1001f,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9821,  0x9813,  0x9813,  0x9813,  0x11822,  0x9813,  0x9813,  0x12013,  0x13025,  0x9813,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1380d,  0x680d,  0x1400d,  0x9829,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x982a,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x982b,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x9813,  0x8000,  0x18002,  0x18003,  0x18003,  0x18003,  0x18003,  0x20003,  0x18005,  0x18003,  0x18003,  0x38006,  0x48008,  0x1800a,  0x58003,  0x6800c,  0x7800e,  0x88010,  0x98012,  0xa0003,  0xb0015,  0xc0017,  0xd0019,  0xe001b,  0xf001d,  0x10001f,  0x110021,  0x120023,  0x130025,  0x140027,  0x150029,  0x158003,  0x16802c,  0x18003,  0x170003,  0x18003,  0x18003,  0x178003,  0x188030,  0x198032,  0x1a8034,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x1b8036,  0x1c8038,  0x1d0003,  0x1e003b,  0x1f003d,  0x20003f,  0x210041,  0x220043,  0x230045,  0x238003,  0x240003,  0x250049,  0x258046,  0x18003,  0x260003,  0x18003,  0x18003,  0x27004d,  0x28004f,  0x290051,  0x2a0053,  0x18003,  0x18055,  0x18003,  0x18003,  0x18003,  0x2b0003,  0x2c0057,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18059,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x2d0003,  0x230046,  0x2e005b,  0x2e8003,  0x2f805e,  0x308060,  0x230062,  0x2b0063,  0x18003,  0x320003,  0x2c8003,  0x18065,  0x18066,  0x340067,  0x1805c,  0x8003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x1803e,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x348003,  0x18003,  0x35806a,  0x18003,  0x18003,  0x1806c,  0x1e006d,  0x18003,  0x37806e,  0x1e0070,  0x388003,  0x390003,  0x398003,  0x3a8074,  0x3b0003,  0x230077,  0x3c0046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x3c8068,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x3d0003,  0x3d8003,  0x3e807c,  0x3f0003,  0x18003,  0x18003,  0x3f8003,  0x408080,  0x418082,  0x420003,  0x18059,  0x428001,  0x438086,  0x78003,  0x18088,  0x450089,  0x230046,  0x458036,  0x46808c,  0x47808e,  0x18003,  0x230090,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x490091,  0x230046,  0x230093,  0x230094,  0x4b0095,  0x230046,  0x4c0097,  0x230046,  0x4c8003,  0x230046,  0x230046,  0x230046,  0x4d0046,  0x230046,  0x230046,  0x230046,  0x4d8003,  0x4e809c,  0x4f004f,  0x4f8003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x50003c,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x508003,  0x230046,  0x510003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x2300a1,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x2300a3,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x520003,  0x2300a5,  0x2300a6,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x1f0003,  0x5400a7,  0x548003,  0x550003,  0x230046,  0x558003,  0x230046,  0x560003,  0x5700ad,  0x5800af,  0x18003,  0x18003,  0x180b1,  0x18003,  0x590003,  0x230046,  0x230046,  0x230046,  0x230046,  0x5a00b3,  0x5b00b5,  0x230046,  0x230046,  0x18041,  0x5c00b7,  0x2080b9,  0x5d80ba,  0x5e80bc,  0x230046,  0x4200be,  0x6000bf,  0x608001,  0x610003,  0x6200c3,  0x628046,  0x630003,  0x550003,  0x2b0003,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x638003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18003,  0x18035,  0x18003,  0x2300a9,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x18003,  0x18003,  0x18003,  0x2300a9,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x18003,  0x640003,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x230046,  0x0,  0xffffffff,  0xffffffff,  0x7fffffff,  0x0,  0xffffdfff,  0xffffffff,  0xffffffff,  0xffffffff,  0x7cffffff,  0xffffd7f0,  0xfffffffb,  0xffffffff,  0xfffe00ff,  0xfe7fffff,  0xfffffffe,  0xfffe86ff,  0xffffffff,  0xffff00ff,  0x1f07ff,  0xcfffffc0,  0xffffffff,  0xdfffffff,  0xffffffff,  0xffff3fff,  0xffffffff,  0xffffe7ff,  0xffffffff,  0xffffffff,  0x3ffff,  0xffffffff,  0x7ffffff,  0xffffffff,  0x7fff3fff,  0x4fffffff,  0x0,  0x0,  0x1ffd,  0x0,  0x7ffffff0,  0xffffffff,  0xfeffffff,  0xfff99fee,  0xf3c5fdff,  0xb080799f,  0xfffffcf,  0xfff987ee,  0xd36dfdff,  0x5e023987,  0x3fffc0,  0xfffbbfee,  0xf3edfdff,  0x13bbf,  0x3ffcf,  0xfff99fee,  0xf3edfdff,  0xb0c0399f,  0xffffcf,  0xd63dc7ec,  0xc3ffc718,  0x813dc7,  0x7ffffc0,  0xfffddfee,  0xe3effdff,  0x3603ddf,  0xff00ffcf,  0xfffddfec,  0xf3effdff,  0x40603ddf,  0x6ffcf,  0xfffddfec,  0xe7ffffff,  0x807ddf,  0xfe3fffcf,  0xfc7fffec,  0x2ffbffff,  0xff5f847f,  0x1c0000,  0xfffffffe,  0x87ffffff,  0xfffffff,  0x0,  0xfef02596,  0x3bffecae,  0xf3ff3f5f,  0x0,  0xfffffeff,  0xfffe1fff,  0xfeffffff,  0xdfffffff,  0x7ffdfff,  0x0,  0xffff20bf,  0xffffffff,  0x3d7f3dff,  0xffffffff,  0xffff3dff,  0x7f3dffff,  0xff7fff3d,  0xffffffff,  0xff3dffff,  0xffffffff,  0xe7ffffff,  0x1fffffff,  0x3ffffff,  0xffffffff,  0xffffffff,  0x1fffff,  0x1fffffff,  0xffffffff,  0xffffffff,  0x1ffff,  0x1fdfff,  0x7fffff,  0xfffff,  0xddfff,  0x3fffffff,  0x3ff03ff,  0x3ff7fff,  0xffffffff,  0xffffffff,  0xffffff,  0xffffffff,  0xffff07ff,  0xffffffff,  0x3fffff,  0x1fffffff,  0xfff0fff,  0xfffffff1,  0x1f3fff,  0xffffffff,  0xffff0fff,  0xc7ff03ff,  0xffffffff,  0xcfffffff,  0xffffffff,  0x7fffffff,  0x9fffffff,  0x3ff03ff,  0x3fff,  0x0,  0x0,  0xffff0fff,  0x1fffffff,  0xffffffff,  0xf00fffff,  0xffffffff,  0xf8ffffff,  0xffffe3ff,  0xffffffff,  0xffff00ff,  0x7fffff,  0xffffffff,  0xf000007f,  0x3f3fffff,  0xffffffff,  0xaaff3f3f,  0x3fffffff,  0xffffffff,  0xffdfffff,  0xefcfffdf,  0x7fdcffff,  0xffff07ff,  0xffff80ff,  0xffffffff,  0xfff30000,  0x1fff7fff,  0x3ffffff,  0xffff0000,  0x1ffff,  0xffff03ff,  0xffffffff,  0xffffffff,  0xfffff,  0xffffffff,  0x7f,  0x7ff,  0xffffffff,  0xfffffffe,  0xffffffff,  0x3ff1fff,  0x0,  0xffffffff,  0xffff7fff,  0x7fffffff,  0xffffffff,  0xffffffff,  0xfe0fffff,  0xffffffff,  0xffff20bf,  0xffffffff,  0x800180ff,  0x7fffff,  0x7f7f7f7f,  0x7f7f7f7f,  0xffffffff,  0xffffffff,  0xfffffff,  0xfbffffff,  0xffffffff,  0x3fffff,  0xfff0000,  0xfe7fffff,  0xffffffff,  0xffffffe0,  0xfffe3fff,  0xffff7fff,  0x7ffffff,  0xffffffff,  0xffff000f,  0x1fff,  0x0,  0xffff1fff,  0xffffffff,  0xffff007f,  0xffffffff,  0xffffffff,  0xfff,  0x80ffffff,  0xffffffff,  0xf7fff,  0x7ff,  0x0,  0xff000000,  0xffffffff,  0x3ff0fff,  0x3ffc01f,  0xfffffff,  0x800fffff,  0x1fffffff,  0xc3ffbfff,  0x0,  0xffffffff,  0x7fffff,  0xf3ff3fff,  0xfffffff,  0xf8000007,  0x7fffff,  0x7e7e7e,  0x7f7f,  0xffffffff,  0x3ff3fff,  0xfffff87f,  0xfffffff,  0xffffffff,  0xffff3fff,  0x3ffffff,  0x0,  0xe0f8007f,  0x5f7fffff,  0xffffffdb,  0xffffffff,  0xfff80003,  0xffffffff,  0xffff0000,  0xffffffff,  0xfffcffff,  0xffffffff,  0xff,  0x3fff0000,  0x3ffffff,  0xffff007f,  0xfff7ffff,  0xffdf0f7f,  0xffffffff,  0x1fffffff,  0x1cfcfcfc,  0x30007f7f,  0xffffefff,  0xb7ffff7f,  0x3fff3fff,  0x0,  0xffffff87,  0xff8fffff,  0xfff07ff,  0x0,  0xffff0000,  0x3fffffff,  0x1ffff,  0x0,  0x7fffffff,  0xffff000f,  0x7ff,  0x0,  0xbfffffff,  0xffffffff,  0x3fff0f,  0x0,  0x3fffffff,  0x3ff,  0xfffffd3f,  0x91bfffff,  0xffbfffff,  0x0,  0x8fffffff,  0x83ffffff,  0xffffffff,  0xc0ffffff,  0xfeeff06f,  0x870fffff,  0x1ff00ff,  0xffffffff,  0xffffffff,  0xfe3fffff,  0xff3fffff,  0xff07ffff,  0x1ff,  0x0,  0x0,  0x7fffffff,  0xfffc3fff,  0xffff,  0xffffffff,  0xdfffffff,  0xffff0003,  0x3ff01ff,  0xf,  0x0,  0x3ff01ff,  0x0,  0x3ff,  0x0,  0xffffffff,  0x7fff,  0xffffffff,  0xf0007,  0xffffffff,  0x1ffffff,  0xffff001f,  0x7fffffff,  0xffff8000,  0x0,  0x3,  0x0,  0xffffffff,  0xfffffe7f,  0xffffffff,  0xf807ffff,  0x3fffffff,  0x0,  0x3f,  0x0,  0x7fffff,  0x3ffff,  0xffdfffff,  0xffffffff,  0xdfffffff,  0xebffde64,  0xffffffef,  0xffffffff,  0xdfdfe7bf,  0x7bffffff,  0xfffdfc5f,  0xffffffff,  0xffffffff,  0xffffff3f,  0xffffcfff,  0xffffffff,  0xffffffef,  0xaf7fe96,  0xaa96ea84,  0x5ef7f796,  0xffffbff,  0xffffbee,  0x0,  0x30000,  0xfffff,  0x7ffe7fff,  0xfffefffe,  0x0,  0xffff07ff,  0xffff7fff,  0x7ffffff,  0x0,  0x0,  0xffffffc0,  0xffff0007,  0x7ffffff,  0x301ff,  0x0,  0xffffffff,  0xffbf0001,  0xfffff,  0xffffffff,  0x7df,  0x1ffff,  0xfffffffd,  0xffffffff,  0xffffffff,  0x1effffff,  0xffffffff,  0x3fffffff,  0xffff000f,  0xff,  0x0,  0xf8000000,  0xffe1,  0x0,  0x7fffff,  0x0,  0xffffffff,  0xffff,  0x0,  0x0]);
    immutable bestControl4 = CodepointTrie!(5,4,4,8).fromRawArray([ 0x0,  0x6,  0x18,  0x30], [ 0x20,  0x30,  0x30,  0x300], [ 0x2108420,  0x2108421,  0x108421,  0x0,  0x0,  0x0,  0x40200,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x40201,  0x0,  0x0,  0x2000,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0x2001,  0xffffffff,  0x0,  0x0,  0x80000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0xd,  0x37,  0x77], [ 0x40,  0x70,  0x80,  0x600], [ 0x40c2040,  0x4104104,  0x4104104,  0x4104104,  0x4104104,  0x4144104,  0x104104,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100400,  0x100801,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100c01,  0x101001,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x101401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x600401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x100401,  0x1,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc002,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x18000,  0x1c000,  0x20000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x9,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000,  0x0,  0x8000,  0x0,  0x0,  0x0,  0xf800,  0x7c00,  0x0,  0xfc1f,  0x0,  0x0,  0x0,  0x80000000,  0x0,  0x0,  0x0,  0xe000000,  0x0,  0x20000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f80000,  0x2,  0xffffffff,  0xffffffff,  0xffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0x20,  0x98,  0x208], [ 0x80,  0xf0,  0x2e0,  0x3180], [ 0x608080,  0xe18284,  0x1424408,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58b,  0x162c58c,  0x1a20408,  0x1a20408,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800,  0x1802,  0x2804,  0x3806,  0x4808,  0x580a,  0x680c,  0x680d,  0x680d,  0x700d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x780d,  0x800d,  0x6811,  0x680d,  0x680d,  0x680d,  0x680d,  0x900d,  0x680d,  0x680d,  0x680d,  0x680d,  0xa013,  0xb015,  0xc017,  0xd019,  0xd81b,  0xe81c,  0xd81b,  0xf00d,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0x1001f,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd821,  0xd81b,  0xd81b,  0xd81b,  0x11822,  0xd81b,  0xd81b,  0x1201b,  0x13025,  0xd81b,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1380d,  0x680d,  0x1400d,  0xd829,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd82a,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd82b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0xd81b,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1600d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x680d,  0x1600d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000,  0x2,  0x0,  0x0,  0x20003,  0x30005,  0x7,  0x0,  0x48008,  0x5800a,  0x6800c,  0x7800e,  0x80000,  0x90011,  0xa0013,  0xb0015,  0xc0017,  0xd0019,  0xe001b,  0xf001d,  0x10001f,  0x110021,  0x120023,  0x130025,  0x138000,  0x148028,  0x0,  0x150000,  0x0,  0x0,  0x158000,  0x16802c,  0x17802e,  0x188030,  0x0,  0x0,  0x0,  0x0,  0x0,  0x198032,  0x1a8034,  0x1b0000,  0x1c0037,  0x1d0039,  0x1e003b,  0x1f003d,  0x20003f,  0x210041,  0x218000,  0x220000,  0x230045,  0x238042,  0x0,  0x240000,  0x0,  0x0,  0x250049,  0x26004b,  0x268000,  0x27804e,  0x0,  0x50,  0x0,  0x0,  0x0,  0x288000,  0x298052,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2a8000,  0x210042,  0x2b8056,  0x2c0000,  0x2d0059,  0x2e005b,  0x21005d,  0x28805e,  0x0,  0x2f8000,  0x2a0000,  0x60,  0x61,  0x318062,  0x57,  0x320000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x328000,  0x0,  0x338066,  0x0,  0x0,  0x68,  0x1c0069,  0x0,  0x35806a,  0x1c006c,  0x368000,  0x370000,  0x378000,  0x388070,  0x390000,  0x210073,  0x3a0042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3a8063,  0x0,  0x0,  0x0,  0x0,  0x3b0000,  0x3b8000,  0x3c8078,  0x3d0000,  0x0,  0x0,  0x3d8000,  0x3e807c,  0x3f807e,  0x400000,  0x54,  0x408064,  0x418082,  0x58000,  0x84,  0x430085,  0x210042,  0x438032,  0x448088,  0x45808a,  0x0,  0x21008c,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x47008d,  0x210042,  0x21008f,  0x210090,  0x490091,  0x210042,  0x4a0093,  0x210042,  0x4a8000,  0x210042,  0x210042,  0x210042,  0x4b0042,  0x210042,  0x210042,  0x210042,  0x4b8000,  0x4c0000,  0x4c804b,  0x4d0000,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x4d8038,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4e0000,  0x210042,  0x4e8000,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x21009c,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x21009e,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x4f8000,  0x2100a0,  0x2100a1,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x1d0000,  0xa2,  0x518000,  0x520000,  0x210042,  0x528000,  0x210042,  0x530000,  0x5400a7,  0x5500a9,  0x0,  0x0,  0xab,  0x0,  0x560000,  0x210042,  0x210042,  0x210042,  0x210042,  0x5700ad,  0x5800af,  0x210042,  0x210042,  0x3d,  0x5900b1,  0x1e80b3,  0x5a80b4,  0x5b80b6,  0x210042,  0x5c80b8,  0x5d80ba,  0x5e0064,  0x5e8000,  0x5f80be,  0x600042,  0x608000,  0x520000,  0x288000,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x610000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x31,  0x0,  0x2100a3,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x2100a3,  0x210042,  0x210042,  0x210042,  0xc3,  0x210042,  0x0,  0x620000,  0x210042,  0x210042,  0x210042,  0x210042,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5f0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x5f0000,  0x0,  0x0,  0x0,  0x83000000,  0x280f,  0x4,  0x0,  0x1ff00,  0x1800000,  0x1,  0x17900,  0x0,  0xff00,  0xffe0f800,  0x30000020,  0x0,  0x4000,  0x0,  0x1800,  0x0,  0x0,  0xfffc0000,  0x0,  0xf8000000,  0x0,  0x8000c000,  0xb0000000,  0xffffffff,  0xffffffff,  0xffffe002,  0xffffffff,  0x8000000f,  0x0,  0x1000000,  0x66011,  0xc3a0200,  0x4f7f8660,  0xf0000030,  0x67811,  0x2c920200,  0xa1fdc678,  0xffc0003f,  0x44011,  0xc120200,  0xfffec440,  0xfffc0030,  0x66011,  0xc120200,  0x4f3fc660,  0xff000030,  0x29c23813,  0x3c0038e7,  0xff7ec238,  0xf800003f,  0x22011,  0x1c100200,  0xfc9fc220,  0xff0030,  0x22013,  0xc100200,  0xbf9fc220,  0xfff90030,  0x22013,  0x18000000,  0xff7f8220,  0x1c00030,  0x3800013,  0xd0040000,  0xa07b80,  0xffe3ffff,  0x1,  0x78000000,  0xf0000000,  0xffffffff,  0x10fda69,  0xc4001351,  0xc00c0a0,  0xffffffff,  0x100,  0x1e000,  0x1000000,  0x20000000,  0xf8002000,  0xffffffff,  0xdf40,  0x0,  0xc280c200,  0x0,  0xc200,  0x80c20000,  0x8000c2,  0x0,  0xc20000,  0x0,  0x18000000,  0xe0000000,  0xfc000000,  0x0,  0x0,  0xffe00000,  0xe0000000,  0x0,  0x0,  0xfffe0000,  0xffe02000,  0xff800000,  0xfff00000,  0xfff22000,  0xc0000000,  0xfc00fc00,  0xfc008000,  0x0,  0x0,  0xff000000,  0x0,  0xf800,  0x0,  0xffc00000,  0xe0000000,  0xf000f000,  0xe,  0xffe0c000,  0x0,  0xf000,  0x3800fc00,  0x0,  0x30000000,  0x0,  0x80000000,  0x60000000,  0xfc00fc00,  0xffffc000,  0xffffffff,  0xffffffff,  0xf000,  0xe0000000,  0x0,  0xff00000,  0x0,  0x7000000,  0x1c00,  0x0,  0xff00,  0xff800000,  0x0,  0xfffff80,  0xc0c00000,  0x0,  0x5500c0c0,  0xc0000000,  0x0,  0x200000,  0x10300020,  0x80230000,  0x0,  0xc03e0,  0xe0008000,  0xfc000000,  0xffff,  0xfffe0000,  0xfc00,  0x0,  0x0,  0xfff00000,  0x0,  0xffffff80,  0xfffff800,  0x0,  0x1,  0x0,  0xfc00e000,  0xffffffff,  0x0,  0x8000,  0x80000000,  0x0,  0x0,  0x1f00000,  0x0,  0xdf40,  0x0,  0x7ffe7f00,  0xff800000,  0x80808080,  0x80808080,  0x0,  0x0,  0xf0000000,  0x4000000,  0x0,  0xffc00000,  0xf000ffff,  0x1800000,  0x0,  0x1f,  0x1c000,  0x8000,  0xf8000000,  0x0,  0xfff0,  0x0,  0x80000000,  0xffffe000,  0xffffffff,  0xe000,  0x0,  0xff80,  0x0,  0x0,  0xfffff000,  0x7f000000,  0x0,  0xfff08000,  0xfffff800,  0xffffffff,  0xffffff,  0x0,  0xfc00f000,  0xfc003fe0,  0xf0000000,  0x7ff00000,  0xe0000000,  0x3c004000,  0xffffffff,  0x0,  0xff800000,  0xc00c000,  0xf0000000,  0x7fffff8,  0xff800000,  0xff818181,  0xffff8080,  0x0,  0xfc00c000,  0x780,  0xf0000000,  0x0,  0xc000,  0xfc000000,  0xffffffff,  0x1f07ff80,  0xa0800000,  0x24,  0x0,  0x7fffc,  0x0,  0xffff,  0x0,  0x30000,  0x0,  0xffffff00,  0xc000ffff,  0xfc000000,  0xff80,  0x80000,  0x20f080,  0x0,  0x60000000,  0xe3030303,  0xc1ff8080,  0x1000,  0x48000080,  0xc000c000,  0xffffffff,  0x78,  0x700000,  0xf000f800,  0xffffffff,  0xffff,  0xc0000000,  0xfffe0000,  0xffffffff,  0x80000000,  0xfff0,  0xfffff800,  0xffffffff,  0x40000000,  0x0,  0xffc000f0,  0xffffffff,  0xc0000000,  0xfffffc00,  0x2c0,  0x6e400000,  0x400000,  0xffffffff,  0x70000000,  0x7c000000,  0x0,  0x3f000000,  0x1100f90,  0x78f00000,  0xfe00ff00,  0x0,  0x0,  0x1c00000,  0xc00000,  0xf80000,  0xfffffe00,  0xffffffff,  0xffffffff,  0x80000000,  0x3c000,  0xffff0000,  0xfffc,  0xfc00fe00,  0xfffffff0,  0xffffffff,  0xfc00fe00,  0xffffffff,  0xfffffc00,  0xffffffff,  0x0,  0xffff8000,  0x0,  0xfff0fff8,  0x0,  0xfe000000,  0xffe0,  0x80000000,  0x7fff,  0xffffffff,  0xfffffffc,  0xffffffff,  0x0,  0x180,  0xc0000000,  0xffffffff,  0xffffffc0,  0xffffffff,  0xff800000,  0xfffc0000,  0x200000,  0x0,  0x20000000,  0x1400219b,  0x10,  0x0,  0x20201840,  0x84000000,  0x203a0,  0x0,  0x0,  0xc0,  0x3000,  0x0,  0x10,  0xf5080169,  0x5569157b,  0xa1080869,  0xf0000400,  0xf0000411,  0xffffffff,  0xfffcffff,  0xfff00000,  0x80018000,  0x10001,  0xffffffff,  0xf800,  0x8000,  0xf8000000,  0xffffffff,  0xffffffff,  0x3f,  0xfff8,  0xf8000000,  0xfffcfe00,  0xffffffff,  0x0,  0x40fffe,  0x0,  0xe0000000,  0xfff00000,  0x0,  0xfffff820,  0xfffe0000,  0x2,  0x0,  0x0,  0xe1000000,  0x0,  0xc0000000,  0xfff0,  0xffffff00,  0xffffffff,  0x7ffffff,  0xffff001e,  0xffffffff,  0xff800000,  0xffffffff,  0xfffffffd,  0x0,  0x0,  0xffff0000,  0x0,  0xc0000000]);

}
else
{
    immutable bestWhite_Space2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x3800], [ 0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0xe800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070340d05c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d0681901c18,  0x6c0d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0x3fffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x0,  0x0,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x0,  0x0,  0x3fffffffffffff,  0x7ffff003fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x9000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c07,  0x1c070380701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c1001c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0x0,  0x0,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x0,  0x0,  0x37f800000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x40000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x870000000000f06e,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff80000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x9000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c0e,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c1001c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x3ff000000000000,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc000000000,  0x0,  0x3f0ffc000000000,  0x0,  0xffc000000000,  0x0,  0xffc000000000,  0x0,  0xfcffc000000000,  0x0,  0x7ffc000000000,  0x0,  0x7f00ffc000000000,  0x0,  0xffc000000000,  0x0,  0x3fffc000000000,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff0000,  0xfffff00000000,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ffffe0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c00000000000,  0x0,  0x0,  0x0,  0x3ff03ff00000000,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0xffc0,  0x0,  0x7ff0000,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x3ff0000,  0x3ff000000000000,  0x0,  0x0,  0x3ff03ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f1000000000000,  0x3ff,  0x0,  0x0,  0xffffffffffff0000,  0x3e7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0xfffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x70003fe00000080,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3c0000,  0x0,  0x3ff00000000,  0xfffeff00,  0xfffe0000000003ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x0,  0xffc000000000,  0x0,  0x0,  0x0,  0x0,  0x3f000000000000,  0x0,  0x0,  0x3ff0000,  0x3ff,  0x0,  0x0,  0x3ff0000,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf00000000,  0x402,  0x0,  0x3e0000,  0x0,  0x0,  0x3ff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xff000000,  0x0,  0x0,  0xfc00000,  0x0,  0x0,  0x0,  0x0,  0x60000000000000ff,  0x0,  0x0,  0x0,  0xff000000ff000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffc0000,  0x0,  0x3ff000000000000,  0xffc0000000000000,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffc000,  0x0,  0x0,  0x0,  0x0,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestPunctuation2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x8000], [ 0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c0e,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000000000000000,  0x80,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x0,  0x100000,  0x3fff,  0x0,  0x0,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x0,  0x0,  0x0,  0x1003000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10000000000000,  0x0,  0xc008000,  0x0,  0x0,  0x3c0000000017fff0,  0x0,  0x20,  0x61f0000,  0x0,  0xfc00,  0x0,  0x800000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff00000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x0,  0x0,  0x7700000,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0xc0000000,  0x0,  0x3f7f00000000,  0x0,  0x0,  0x1fc000000,  0x0,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x0,  0x800ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3fff0000000000,  0x0,  0xffc000000060,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1fffff8,  0x300000000f000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xde00000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0xfff7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20010000fff3ff0e,  0x0,  0x100000000,  0x800000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0x0,  0xe000,  0x4008000000000000,  0x0,  0xfc000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf0000000000000,  0x0,  0x70000000000c000,  0xc00000000000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0x30000c0000000,  0x0,  0x0,  0x0,  0x80000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0xffff000003ff0000,  0xd0bfff7ffff,  0x0,  0x0,  0xb80000018c00f7ee,  0x3fa8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x10000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000,  0x0,  0x0,  0x8000000080000000,  0x0,  0x0,  0x0,  0x0,  0x8000000001ff0000,  0x0,  0x0,  0xfe00000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0xd800000000000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xf000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x8800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c070280901c07,  0x1c0701c0701c07,  0x1c0701c0c02c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0d01c0701c07,  0x1c0701c0f03807,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffafe0fffc003c,  0x0,  0x20000000000000,  0x30,  0x40000000000000,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x0,  0x6000020040000000,  0x0,  0x0,  0x0,  0x40000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc0c000000000000,  0x0,  0x0,  0x0,  0x2000000000000,  0x0,  0x1000000000000,  0x0,  0x7f8000000000000,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x200000000000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x1500000fce8000e,  0x0,  0xc000000000000000,  0x1e0dfbf,  0x0,  0x0,  0xc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3ff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0xffffffffc0000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff007fe00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa000000000000000,  0x6000e000e000e003,  0x0,  0x1c00000000040010,  0x3ffffff00001c00,  0x0,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffe000007,  0xcffffffff0ffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7e000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x0,  0x18000000,  0x0,  0x0,  0x0,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffff0000,  0x7f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3007fffff,  0x0,  0x600,  0x0,  0x3c00f0000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x380000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x20000000000,  0x0,  0xfffc000000000000,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000000000000000,  0x0,  0x27400000000,  0x0,  0x0,  0x4000000070000810,  0x50000001,  0x0,  0x30007f7f00000000,  0x0,  0x0,  0x0,  0x0,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0xffffffffffffffff,  0x23,  0x0,  0x0,  0xffffffffffffffff,  0x7fffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSpace_Separator2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x3800], [ 0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x100000000,  0x0,  0x100000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0xf800], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070341805c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d06c1a01c19,  0x700d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x341d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xffffffffffffffff,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xffffffffffffffff,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff20bf,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0xffffffffffffffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0xffffffffffffffff,  0x1fffffffffff0fff,  0xffffffffffffffff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x0,  0x7fffffffff00ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf000007fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff03ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xfffffffffe7fffff,  0xffffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffffffff7fff,  0xffff000fffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffff,  0xffffffffffffffff,  0xffffffff80ffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xfffffff03ffc01f,  0xffffffffffffffff,  0x1fffffff800fffff,  0xffffffffffffffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0xffffffffffffffff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x0,  0x0,  0x3ff3fffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xffffffffffffffff,  0xfffffffffff80003,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0xff8fffffffffff87,  0xffffffffffffffff,  0xfff07ff,  0x3fffffffffff0000,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x91bffffffffffd3f,  0xffbfffff,  0x0,  0x0,  0x83ffffff8fffffff,  0x0,  0xc0ffffffffffffff,  0x0,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0x0,  0x0,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xffdfffffffffffff,  0xf,  0xffffffffffffffff,  0x3ff01ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffff,  0x3ff,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xf0007ffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x0,  0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0xffffffffffffffff,  0x3f,  0x0,  0x0,  0xffffffffffffffff,  0x3ffff007fffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0x0,  0x0,  0x0,  0x0,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x1800], [ 0x4010040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x4000], [ 0x4020040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4040040100c01,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4050040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4060040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0xe00000000000000,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f8000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn2 = CodepointTrie!(10,11).fromRawArray([ 0x0,  0xab], [ 0x400,  0x10000], [ 0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x1c0701c0c01c07,  0x441003c0e03407,  0x44110441304412,  0x44110501104411,  0x44110441104411,  0x44160441104415,  0x1c070441805c11,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x441106c1a01c19,  0x70110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x441d0441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x44110441104411,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0707807,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x780701c07,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000000000000,  0x40000280f,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x0,  0x0,  0x0,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x0,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0x0,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0x0,  0xe00000000000f000,  0x0,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xffffffffffffffff,  0xff8000000000ff00,  0x0,  0x0,  0x0,  0xfffff8000000000,  0x0,  0x0,  0x0,  0x0,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0x0,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfffffffffc00e000,  0xffffffffffffffff,  0xffffffffffffffff,  0x800000000000,  0x80000000,  0x0,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0xffffffffffffffff,  0x4000000,  0xfff0000000000000,  0x0,  0x0,  0x0,  0xf000ffffffc00000,  0x0,  0x1,  0x1800000,  0x0,  0x1c0000000001f,  0x0,  0xf800000000008000,  0xfff000000000,  0x80000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffe000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe000,  0xff80,  0x0,  0x0,  0x0,  0x0,  0xfffff00000000000,  0x0,  0x7f000000,  0xff00000000000000,  0x0,  0x0,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xff00000000000000,  0x0,  0xf0000000fc003fe0,  0x0,  0xe00000007ff00000,  0x0,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0x0,  0xff80000007fffff8,  0xffff8080ff818181,  0xffffffffffffffff,  0xffffffffffffffff,  0xfc00c00000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfff000000000,  0xf000000000000780,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc00000000000,  0x0,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x0,  0x7fffc,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x0,  0x6000000000000000,  0x1,  0x0,  0x8000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x0,  0xf800000000000000,  0x70000000000078,  0x0,  0xfffffffff000f800,  0xc00000000000ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xe0000000,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0x0,  0x0,  0xfffffc00c0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x6e400000000002c0,  0xffffffff00400000,  0xffffffffffffffff,  0xffffffffffffffff,  0x7c00000070000000,  0xffffffffffffffff,  0x3f00000000000000,  0xffffffffffffffff,  0x78f0000001100f90,  0xfe00ff00,  0xffffffffffffffff,  0xffffffffffffffff,  0x1c0000000000000,  0xf8000000c00000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffffffffffffe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x80000000ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffff00000003c000,  0x0,  0xfc00fe000000fffc,  0x20000000000000,  0xfffffffffffffff0,  0x0,  0xfffffffffc00fe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xff00000000000000,  0xfffffffffffffc00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfff0fff800000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xfe00000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x800000000000ffe0,  0xffffffff00007fff,  0xffffffffffffffff,  0xfffffffffffffffc,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x18000000000,  0x0,  0x0,  0xffffffffc0000000,  0x0,  0xffffffffffffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffc0000ff800000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0xc000000000,  0x0,  0x0,  0x0,  0x0,  0x3000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf00000000000,  0x0,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xf00000000000,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0xffffffffffffffff,  0xffffffffffffffff,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x8000000000000000,  0x2,  0x0,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0xffffffffffff001e,  0x0,  0xffffffffffffffc0,  0x0,  0xfff0000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffff800000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffe0000000000000,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffd,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffff000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xc000000000000000]);
    immutable bestWhite_Space3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0xf,  0x3f], [ 0x80,  0xc0,  0x700], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8008002001,  0x8004002003,  0x8004002001,  0x8004002004,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002005,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestAlphabetic3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xa6], [ 0x200,  0x170,  0x5100], [ 0x140a04018080200,  0x200a05038180a05,  0x241c0d0602c1409,  0x401209048241e09,  0x140a05048482209,  0x140a05028140a05,  0x242a09048242813,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x1209048241209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x18008002000,  0x3801800a004,  0x58028012008,  0x7803801a00c,  0x90044002010,  0xa8050002013,  0xc806002e016,  0xe000403601a,  0xf807c03c01d,  0xf807c03e020,  0xf807c03e01f,  0xf808c044021,  0xf807c04a024,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800404c001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x138004002001,  0x8004002001,  0x1500a4002028,  0x1700b405802b,  0x8004002001,  0x8004002001,  0x178004002001,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x1880c000201f,  0x1a00cc064001,  0x1c00dc06c035,  0xf807c03e039,  0x1e80f007603a,  0xf807c03e03e,  0xf807c08003f,  0xf810403e01f,  0xf807c03e01f,  0xf807c03e01f,  0x210004002001,  0xf807c03e043,  0xf807c03e01f,  0xf807c03e01f,  0x8004002001,  0xf807c03e044,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf8114002001,  0x23007c03e01f,  0xf807c03e047,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x258128092048,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf813003e01f,  0x8004002001,  0x8134002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x270004002001,  0xf807c03e04f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf813c002001,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0xf807c03e01f,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x0,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0x3fffffffffff0000,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0x0,  0x0,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x0,  0x0,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x0,  0x0,  0x3fffffffffffff,  0x7ffff003fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0x0,  0x0,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestMark3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x20,  0x78], [ 0x100,  0x160,  0x2c00], [ 0x100000000,  0x200000002,  0x300000002,  0x400000002,  0x200000005,  0x600000002,  0x200000002,  0x200000007,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x800000002,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000009,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x800000008,  0x0,  0x0,  0x100000000000,  0x84000000,  0x44000,  0x0,  0x8c000000,  0x0,  0x4a024,  0x98000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x138000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa4050000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x54000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x3f8,  0x0,  0x0,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0xe0000000,  0x0,  0x0,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0x0,  0x0,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0x0,  0x0,  0xf000007fffffffff,  0x0,  0x0,  0x0,  0x1ffffffff0000,  0x0,  0x0,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x0,  0x0,  0x37f800000000,  0x40000000,  0x0,  0x0,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0x0,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0x0,  0x0,  0xfff80000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestNumber3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x1a80], [ 0x100804018080200,  0x100804028100804,  0x1008090401c0c04,  0x100804020100804,  0x100804058101404,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x100804020100804,  0x804020100804,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80020004000,  0x80020008002,  0x80020008002,  0x140020010003,  0x1c0060008002,  0x240080018006,  0x800b001800a,  0x800d003000c,  0x80020038005,  0x800f0008002,  0x80020008002,  0x440020040002,  0x4c012000800e,  0xc0050002,  0x80020008015,  0x80020008002,  0x64018005c016,  0x80020008002,  0x8002006c01a,  0x7401c0008002,  0x80020008002,  0x80020008002,  0x80020078002,  0x80020008002,  0x80002000801f,  0x80020088021,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020018023,  0x300170030024,  0x10002000800c,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x800e0008002,  0x980250008002,  0xa00270008002,  0x8002008c002,  0x80020008002,  0x802a0008029,  0x802c000802b,  0x80020008002,  0x8002000802d,  0x3002f001002e,  0x80020008002,  0x80020008002,  0x80020014002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008030,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80310008002,  0x80020008002,  0xc80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80330008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x0,  0x0,  0x0,  0x0,  0x3ff00000000,  0x0,  0x3ff000000000000,  0x0,  0x3ff,  0x0,  0xffc000000000,  0x0,  0x3f0ffc000000000,  0x0,  0xfcffc000000000,  0x0,  0x7ffc000000000,  0x0,  0x7f00ffc000000000,  0x0,  0x3fffc000000000,  0x0,  0x3ff0000,  0xfffff00000000,  0x0,  0x3ff0000,  0x0,  0x0,  0x1ffffe0000000000,  0x0,  0x1c00000000000,  0x0,  0x3ff03ff00000000,  0x0,  0xffc0,  0x0,  0x7ff0000,  0x3ff03ff,  0x0,  0x0,  0x3ff03ff,  0x0,  0x3f1000000000000,  0x3ff,  0x0,  0x0,  0xffffffffffff0000,  0x3e7,  0x0,  0x0,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0x0,  0xffc0000000000000,  0xfffff,  0x0,  0x0,  0x2000000000000000,  0x70003fe00000080,  0x0,  0x3c0000,  0x0,  0x3ff00000000,  0xfffeff00,  0xfffe0000000003ff,  0x0,  0x3ff00000000,  0x0,  0x3f000000000000,  0x0,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0x0,  0xf00000000,  0x402,  0x0,  0x3e0000,  0x0,  0xff000000,  0xfc00000,  0x0,  0x0,  0x60000000000000ff,  0x0,  0xff000000ff000000,  0x0,  0x7fffffff00000000,  0x0,  0xfffffffc0000,  0xffc0000000000000,  0x0,  0xffffffffffffffff,  0x7ffffffff,  0x0,  0x3ffff00000000,  0x0,  0xffffffffffffc000,  0x7ff,  0x0,  0x0,  0x0]);
    immutable bestPunctuation3 = CodepointTrie!(8,5,8).fromRawArray([ 0x0,  0x20,  0x68], [ 0x100,  0x120,  0x3100], [ 0x100000000,  0x200000002,  0x300000002,  0x400000002,  0x600000005,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x200000002,  0x700000002,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x700000007,  0x8004002001,  0x8004002001,  0x8004002001,  0x130094048001,  0x14000404e001,  0x8004002001,  0x1600ac054029,  0x8004002001,  0x800405c02d,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800400202f,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4000000000000000,  0x80,  0x0,  0x0,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x0,  0x100000,  0x3fff,  0x0,  0x0,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x0,  0x0,  0x0,  0x1003000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1000000000000,  0x0,  0x0,  0x0,  0x10000000000000,  0x0,  0xc008000,  0x0,  0x0,  0x3c0000000017fff0,  0x0,  0x20,  0x61f0000,  0x0,  0xfc00,  0x0,  0x800000000000000,  0x0,  0x1ff00000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x0,  0x0,  0x7700000,  0x7ff,  0x0,  0x0,  0x0,  0x0,  0x30,  0x0,  0x0,  0xc0000000,  0x0,  0x3f7f00000000,  0x0,  0x0,  0x1fc000000,  0x0,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x0,  0x800ff,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x0,  0x60000000000,  0x0,  0x0,  0x0,  0x0,  0x3fff0000000000,  0x0,  0xffc000000060,  0x0,  0x0,  0x1fffff8,  0x300000000f000000,  0x0,  0x0,  0x0,  0xde00000000000000,  0x0,  0x1000000000000,  0x0,  0x0,  0xfff7fffffffffff,  0x0,  0x0,  0x0,  0x20010000fff3ff0e,  0x0,  0x100000000,  0x800000000000000,  0x0,  0x0,  0x0,  0xc000000000000000,  0xe000,  0x4008000000000000,  0x0,  0xfc000000000000,  0x0,  0xf0000000000000,  0x0,  0x70000000000c000,  0xc00000000000,  0x80000000,  0x0,  0xc0003ffe,  0x0,  0xf0000000,  0x0,  0x30000c0000000,  0x0,  0x0,  0x0,  0x80000000000,  0xc000000000000000,  0x0,  0x0,  0x0,  0xffff000003ff0000,  0xd0bfff7ffff,  0x0,  0x0,  0xb80000018c00f7ee,  0x3fa8000000,  0x0,  0x0,  0x7,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80000000,  0x10000,  0x0,  0x800000,  0x0,  0x0,  0x8000000080000000,  0x0,  0x0,  0x0,  0x0,  0x8000000001ff0000,  0x0,  0x0,  0xfe00000000000000,  0x0,  0x0,  0x0,  0x0,  0x3f80,  0xd800000000000000,  0x3,  0x0,  0xf,  0x0,  0x1e0,  0x0,  0xf000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestSymbol3 = CodepointTrie!(9,5,7).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x2a80], [ 0x140a04018080200,  0x140a05030140a05,  0x140a05028200e05,  0x140a05028140a05,  0x140a05058281205,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0x140a05028140a05,  0xa05028140a05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80020004000,  0x14004000c002,  0x1c0020018002,  0x280020024008,  0x2c0020008002,  0x3800d0030002,  0x8010000800f,  0x4c0120008011,  0x80020050002,  0x540020008002,  0x80020008002,  0x580020008002,  0x600170008002,  0x80190008002,  0x80020008002,  0x680020008002,  0x7801d007001b,  0x84020007c01f,  0x7c01f008c022,  0x94024007c01f,  0x9801f007c01f,  0x8027007c01f,  0x800200a0002,  0xa801f00a4002,  0xb400200b002b,  0x7c01f00bc02e,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0xc00020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x800200c4002,  0xcc0320008002,  0x80020008034,  0x80020008035,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0xdc0360008002,  0xe00020008002,  0xec03a0008039,  0xf403c0008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x10003f00f801f,  0x80420008041,  0x80020008002,  0x114044010c002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020118002,  0x1280490120047,  0x13404c000804b,  0x144050013c04e,  0x8021014c052,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0x0,  0x0,  0xffffafe0fffc003c,  0x0,  0x20000000000000,  0x30,  0x40000000000000,  0x4,  0x0,  0x8000,  0x0,  0xc9c0,  0x0,  0x0,  0x6000020040000000,  0x0,  0x40000000000000,  0x0,  0xc0c000000000000,  0x0,  0x2000000000000,  0x0,  0x1000000000000,  0x0,  0x7f8000000000000,  0x0,  0x8000000000000000,  0x0,  0x200000000000000,  0x8000000000000000,  0x0,  0x1500000fce8000e,  0x0,  0xc000000000000000,  0x1e0dfbf,  0xc0000000,  0x0,  0x3ff0000,  0x0,  0x0,  0x8000000,  0x0,  0x1,  0x0,  0xffffffffc0000000,  0x0,  0x1ff007fe00000000,  0xa000000000000000,  0x6000e000e000e003,  0x0,  0x1c00000000040010,  0x3ffffff00001c00,  0x0,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xfffffffffe000007,  0xcffffffff0ffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x7e000000000,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x0,  0x18000000,  0x0,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0x0,  0xffffffffffffffff,  0xffffffffffff0000,  0x7f,  0x3007fffff,  0x0,  0x600,  0x0,  0x3c00f0000000000,  0x0,  0x0,  0x380000000000000,  0x20000000000,  0x0,  0xfffc000000000000,  0x3,  0x0,  0x3000000000000000,  0x0,  0x27400000000,  0x4000000070000810,  0x50000001,  0x0,  0x30007f7f00000000,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0xffffffffffffffff,  0x23,  0xffffffffffffffff,  0x7fffff,  0x0,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x0,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0x0,  0x0]);
    immutable bestSpace_Separator3 = CodepointTrie!(7,6,8).fromRawArray([ 0x0,  0xf,  0x3f], [ 0x80,  0xc0,  0x700], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8008002001,  0x8004002003,  0x8004002001,  0x8004002004,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002005,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x100000000,  0x0,  0x100000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x0,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestGraphical3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xae], [ 0x200,  0x190,  0x6100], [ 0x140a04018080200,  0x200a05038180a05,  0x241c0d0602c1409,  0x401209048241e09,  0x140a05098482209,  0x140a05028140a05,  0x242c09048242a14,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241217,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x241209048241209,  0x1209048241209,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x10004002000,  0x28010006001,  0x4802000e006,  0x6803001600a,  0x8003c00200e,  0x90044002001,  0xb0054028013,  0xc8004030017,  0xe000403601a,  0xf000400201d,  0xf8004002001,  0x118088042020,  0x809804a024,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x800404e001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x140004002001,  0x8004002001,  0x1580a8002029,  0x1780b805a02c,  0x8004002001,  0x8004002001,  0x180004002001,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1980c8002031,  0x1b00d4068001,  0x1d00e4070037,  0x1880c406203b,  0x1f80f807a03c,  0x188104062040,  0x1880c4086042,  0x188110062031,  0x1880c4062031,  0x1880c4062031,  0x228004002001,  0x1880c4062046,  0x1880c4062031,  0x1880c4062031,  0x8004002001,  0x1880c4062047,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x188120002001,  0x2480c4062031,  0x1880c406204a,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x27013409804b,  0x2901440a004f,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x18814c062031,  0x2b81580aa054,  0x2d81680b2058,  0x1880c4062031,  0x1880c4062031,  0x8004002001,  0x8170002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x2e8004002001,  0x1880c406205e,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x188178002001,  0x1880c4062031,  0x1880c40be031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0x1880c4062031,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xffffffffffffffff,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xffffffffffffffff,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0xffffffffffffffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0xffffffffffffffff,  0x1fffffffffff0fff,  0xffffffffffffffff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x0,  0x7fffffffff00ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xf000007fffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff03ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff1fff,  0x0,  0x0,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0x0,  0xfffffffffbffffff,  0xfffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfff0000003fffff,  0xffffffffffffffff,  0xfffffffffffffffe,  0xfffffffffe7fffff,  0xffffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffffffff7fff,  0xffff000fffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x1fff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xfffffffffff,  0xffffffffffffffff,  0xffffffff80ffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xffffffffffffff,  0xffffffffffffffff,  0xfffffff03ffc01f,  0xffffffffffffffff,  0x1fffffff800fffff,  0xffffffffffffffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0xffffffffffffffff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x0,  0x0,  0x3ff3fffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xffffffffffffffff,  0xfffffffffff80003,  0xffffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0xffffffffffffffff,  0x1fffffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0x7fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0xff8fffffffffff87,  0xffffffffffffffff,  0xfff07ff,  0x3fffffffffff0000,  0x0,  0x0,  0xffffffff1fffffff,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0xffffffffffffffff,  0xffffffffffffffff,  0x3ff3fffffff,  0x0,  0x91bffffffffffd3f,  0xffbfffff,  0x0,  0x0,  0x83ffffff8fffffff,  0x0,  0xc0ffffffffffffff,  0x0,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0x0,  0x0,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x0,  0x0,  0xffffffffffffffff,  0x1ff,  0x0,  0x0,  0x0,  0x7fffffff00000000,  0x0,  0x0,  0xffffffffffffffff,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xffdfffffffffffff,  0xf,  0xffffffffffffffff,  0x3ff01ff,  0x0,  0x0,  0xffffffffffffff,  0x3ff,  0xffffffffffffffff,  0x7fffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xf0007ffffffff,  0x0,  0x0,  0x7fffffffffff,  0x0,  0x0,  0x0,  0x1ffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x0,  0x3,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffffffffff,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0xffffffffffffffff,  0x3f,  0x0,  0x0,  0xffffffffffffffff,  0x3ffff007fffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffff3fffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0xffff0fffffffffff,  0xffffffffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0xffff0fffffffffff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0x0,  0x0,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0x7fffffffffffffff,  0xfffffffffffffffd,  0xffffffffffffffff,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0x0,  0xf800000000000000,  0xffffffffffffffff,  0xffe1,  0xffffffffffffffff,  0x3f,  0xffffffffffffffff,  0xfffffffffffff,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x3fffffff,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffff,  0x0,  0x0,  0x0,  0x0]);
    immutable bestControl3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0xf,  0x24], [ 0x80,  0x60,  0x600], [ 0x102040810204080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1001001001000,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1,  0x0,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat3 = CodepointTrie!(7,5,9).fromRawArray([ 0x0,  0xf,  0x40], [ 0x80,  0xe0,  0x1200], [ 0x108040830404080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810214081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1002001001000,  0x1001001001001,  0x1001001001001,  0x1001001003001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001004,  0x5001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001006001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001007,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001001,  0x1001001001,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x0,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0x0,  0xe00000000000000,  0x0,  0x0,  0x2000000000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x7f8000000000000,  0x0,  0x0,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestCn3 = CodepointTrie!(9,4,8).fromRawArray([ 0x0,  0x4a,  0xb2], [ 0x200,  0x1a0,  0x6200], [ 0x140a04018080200,  0x200a05038180a05,  0x381a0c058281205,  0x401c0e070381e0e,  0x140a0509848220e,  0x140a05028140a05,  0x382c0e070382a14,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c0e,  0x381c0e070381c17,  0x381c0e070381c0e,  0x140a05028141c0e,  0x140a05028140a05,  0x140a050c0140a05,  0x140a05028140a05,  0x3005028140a05,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8000000000,  0x2000c004000,  0x4001c00c005,  0x6002c014009,  0x7803800000d,  0x88040000000,  0xa8050026012,  0xc000002e016,  0xd8000034019,  0xe800000001c,  0xf0000000000,  0x11008404001f,  0x94048023,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x138000000000,  0x0,  0x1500a4000028,  0x1700b405802b,  0x0,  0x0,  0x178000000000,  0x0,  0x0,  0x0,  0x0,  0x1880c0000000,  0x1a00cc064000,  0x1c00dc06c035,  0x1d00e8074039,  0x1f00f407803b,  0x1d010007403f,  0x1d00e8084041,  0x1d010c07403a,  0x1d00e807403a,  0x1d00e807403a,  0x220000000000,  0x1d00e8074045,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x1d00e8074046,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d011c000000,  0x2400e807403a,  0x1d00e8074049,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x26813009604a,  0x28814009e04e,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d014807403a,  0x2b01540a8053,  0x2d01640b0057,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x16c000000,  0x0,  0x0,  0x0,  0x2e0000000000,  0x1d00e807405d,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x1d0174000000,  0x1d00e807403a,  0x1d00e80be05e,  0x1d00e807403a,  0x1d00e807403a,  0x1d00e807403a,  0x0,  0x0,  0x0,  0x300000000000,  0x0,  0x0,  0x0,  0x300000000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x8300000000000000,  0x40000280f,  0x0,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x0,  0x0,  0x0,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x0,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0x0,  0x0,  0x0,  0xdf40,  0x0,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0x0,  0x0,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0x0,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0x0,  0xe00000000000f000,  0x0,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xffffffffffffffff,  0xff8000000000ff00,  0x0,  0x0,  0x0,  0xfffff8000000000,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0x0,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0x0,  0x0,  0xfc00,  0x0,  0x0,  0x0,  0x0,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0xfffffffffc00e000,  0xffffffffffffffff,  0xffffffffffffffff,  0x800000000000,  0x80000000,  0x0,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0xffffffffffffffff,  0x4000000,  0xfff0000000000000,  0x0,  0x0,  0x0,  0xf000ffffffc00000,  0x0,  0x1,  0x1800000,  0x0,  0x1c0000000001f,  0x0,  0xf800000000008000,  0xfff000000000,  0x80000000,  0x0,  0x0,  0x8000000000000000,  0x0,  0x0,  0xffc0000000000000,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffe000,  0x0,  0x0,  0xe000,  0xff80,  0xfffff00000000000,  0x0,  0x7f000000,  0xff00000000000000,  0x0,  0x0,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xff00000000000000,  0x0,  0xf0000000fc003fe0,  0x0,  0xe00000007ff00000,  0x0,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0x0,  0xff80000007fffff8,  0xffff8080ff818181,  0xffffffffffffffff,  0xffffffffffffffff,  0xfc00c00000000000,  0x0,  0x0,  0xfff000000000,  0xf000000000000780,  0x0,  0xc00000000000,  0x0,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x0,  0x7fffc,  0x0,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x0,  0x6000000000000000,  0x1,  0x0,  0x8000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x0,  0xf800000000000000,  0x70000000000078,  0x0,  0xfffffffff000f800,  0xc00000000000ffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xe0000000,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0x0,  0x0,  0xfffffc00c0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x6e400000000002c0,  0xffffffff00400000,  0xffffffffffffffff,  0xffffffffffffffff,  0x7c00000070000000,  0xffffffffffffffff,  0x3f00000000000000,  0xffffffffffffffff,  0x78f0000001100f90,  0xfe00ff00,  0xffffffffffffffff,  0xffffffffffffffff,  0x1c0000000000000,  0xf8000000c00000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffffffffffffe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x80000000ffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xffff00000003c000,  0x0,  0xfc00fe000000fffc,  0x20000000000000,  0xfffffffffffffff0,  0x0,  0xfffffffffc00fe00,  0xffffffffffffffff,  0xffffffffffffffff,  0xff00000000000000,  0xfffffffffffffc00,  0x0,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfff0fff800000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff800000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfe00000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x800000000000ffe0,  0xffffffff00007fff,  0xffffffffffffffff,  0xfffffffffffffffc,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x18000000000,  0x0,  0x0,  0xffffffffc0000000,  0x0,  0xffffffffffffffc0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0xfffc0000ff800000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0x0,  0x0,  0x0,  0x0,  0xc000000000,  0x0,  0x0,  0x0,  0x0,  0x3000,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0xf00000000000,  0x0,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xf00000000000,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0xffffffffffffffff,  0xffffffffffffffff,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x8000000000000000,  0x2,  0x0,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0xffffffffffff001e,  0x0,  0xffffffffffffffc0,  0x0,  0xfff0000000000000,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffffffffff800000,  0xffe0000000000000,  0x0,  0x0,  0x0,  0xffffffffc0000000,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xfffffffd,  0x0,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0,  0x0,  0xffff000000000000,  0x0,  0x0,  0x0,  0xc000000000000000,  0x0,  0x0,  0x0,  0xc000000000000000]);
    immutable bestWhite_Space4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x10,  0x2c], [ 0x40,  0x30,  0x70,  0x380], [ 0x41041041041040,  0x41041041041041,  0x41041041041041,  0x41041,  0x0,  0x0,  0x0,  0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x0,  0x80020004000,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x8002000c002,  0x80020008004,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008005,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008003,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x100003e00,  0x0,  0x100000020,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x8300000007ff,  0x80000000,  0x0,  0x0]);
    immutable bestAlphabetic4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1f,  0x93], [ 0x40,  0x80,  0x1d0,  0x4080], [ 0x1861861440c2040,  0x186186186186186,  0x186186186186186,  0x186186,  0x0,  0x0,  0x0,  0x140400c0200400,  0x1c070200701c06,  0x1c0701c0701c07,  0x1c0702c0a02407,  0x340d0340c01c07,  0x34110400f0380d,  0x340d0341303412,  0x340d0500d0340d,  0x340d0340d0340d,  0x34160340d03415,  0x1c070340d05c0d,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x340d0681901c18,  0x6c0d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d0340d0340d,  0x340d,  0x0,  0x0,  0x80020004000,  0x14004000c002,  0x200070018002,  0x3000b0028009,  0x4000f003800d,  0x500130048011,  0x600170058015,  0x7001b0068019,  0x8002007801d,  0x88021008001f,  0x80020008023,  0x9c0260094024,  0xac02a00a4028,  0xbc02e00b402c,  0xc800200c4030,  0xd00330008002,  0xe003700d8035,  0xe403900e4039,  0xe403900e8039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xf803d00f003b,  0xe403900e403f,  0x10c0420104040,  0xe403900e4039,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x1100020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x1140020008002,  0x80020008002,  0x80020008002,  0x80020118002,  0x1280490120047,  0x13804d013004b,  0x148051014004f,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x80020008002,  0x14c0020008002,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x800200e4039,  0x15c0560154054,  0x1640580008002,  0x17405c016c05a,  0xe4060017c05e,  0x18c0620184039,  0xe40390190002,  0xe403900e4039,  0x19c06600e4065,  0xe406900e4068,  0xe403900e406a,  0xe403900e4039,  0x1b806d01b006b,  0xe403900e4039,  0xe403900e4039,  0xe40390110039,  0x80020008002,  0xe406f0008002,  0xe403900e4070,  0xe403900e4039,  0x80020008002,  0x80020008002,  0xe403900e4071,  0xe403900e4039,  0x80020008002,  0xe403900e4072,  0xe403900e4039,  0x1d007300e4039,  0xe403900e4075,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x807801dc076,  0x1ec07a01e4002,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403901f407c,  0x80020008002,  0x80020008002,  0x80020008002,  0x800201f8002,  0x80020008002,  0x80020008002,  0x80020008002,  0x807f0008002,  0xe403900e4064,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x80020008002,  0xe403900e4064,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0xe403900e4039,  0x0,  0x7fffffe07fffffe,  0x420040000000000,  0xff7fffffff7fffff,  0xffffffffffffffff,  0xffffffffffffffff,  0xffffffffffffffff,  0x501f0003ffc3,  0x0,  0x3cdf000000000020,  0xfffffffbffffd740,  0xffbfffffffffffff,  0xfffffffffffffc03,  0xffffffffffffffff,  0xfffe00ffffffffff,  0xfffffffe027fffff,  0xbfff0000000000ff,  0x707ffffff00b6,  0xffffffff07ff0000,  0xffffc000feffffff,  0xffffffffffffffff,  0x9c00e1fe1fefffff,  0xffffffffffff0000,  0xffffffffffffe000,  0x3ffffffffffff,  0x43007fffffffc00,  0x1ffffcffffff,  0x1ffffff,  0x1ffd00000000,  0x7fff03f000000000,  0xefffffffffffffff,  0xfefe000fffe1dfff,  0xe3c5fdfffff99fee,  0x3000fb080599f,  0xc36dfdfffff987ee,  0x3f00005e021987,  0xe3edfdfffffbbfee,  0xf00011bbf,  0xe3edfdfffff99fee,  0x2000fb0c0199f,  0xc3ffc718d63dc7ec,  0x811dc7,  0xe3effdfffffddfee,  0xf03601ddf,  0xe3effdfffffddfec,  0x6000f40601ddf,  0xe7fffffffffddfec,  0xfc00000f00805ddf,  0x2ffbfffffc7fffec,  0xc0000ff5f807f,  0x7fffffffffffffe,  0x207f,  0x3bffecaefef02596,  0xf000205f,  0x1,  0xfffe1ffffffffeff,  0x1ffffffffeffff03,  0x0,  0xf97fffffffffffff,  0xffffc1e7ffff0000,  0xffffffff3000407f,  0xf7ffffffffff20bf,  0xffffffffffffffff,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x87ffffff,  0xffffffff0000ffff,  0x1fffffffffffff,  0xfffffffffffffffe,  0xffffffffffffffff,  0xffffffffffffffff,  0xffff9fffffffffff,  0xffffffff07fffffe,  0x1c7ffffffffff,  0xfffff000fdfff,  0xddfff000fffff,  0xffcfffffffffffff,  0x108001ff,  0xffffffff00000000,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0x1ff0fff1fffffff,  0x1f3fffffff0000,  0xffff0fffffffffff,  0x3ff,  0xffffffff0fffffff,  0x1ffffe7fffffff,  0x8000000000,  0x0,  0xffefffffffffffff,  0xfef,  0xfc00f3ffffffffff,  0x3ffbfffffffff,  0x3fffffffffffff,  0x3ffffffffc00e000,  0x0,  0x6fde0000000000,  0xffffffffffffffff,  0x0,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0x5fdfffffffffffff,  0x1fdc1fff0fcf1fdc,  0x0,  0x8002000000000000,  0x1fff0000,  0x0,  0xf3ffbd503e2ffc84,  0xffffffff000043e0,  0x1ff,  0x0,  0x0,  0x0,  0xffc0000000000000,  0x3ffffffffff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xffffffffffffffff,  0xc781fffffffff,  0xffff20bfffffffff,  0x80ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0x800000000000,  0x0,  0x1f3e03fe000000e0,  0xfffffffffffffffe,  0xfffffffee07fffff,  0xf7ffffffffffffff,  0xfffe3fffffffffe0,  0xffffffffffffffff,  0x7ffffff00007fff,  0xffff000000000000,  0x3fffffffffffff,  0x0,  0xffffffffffffffff,  0x1fff,  0x1fff,  0x3fffffffffff0000,  0xc00ffff1fff,  0x8ff07fffffffffff,  0xffffffff80ffffff,  0xffffffffffff,  0xfffffffcff800000,  0xffffffffffffffff,  0x7ff000f79ff,  0xff00000000000000,  0xfffffff7bb,  0xfffffffffffff,  0xffffffffffffffff,  0x8fc00000000000f,  0xffff07fffffffc00,  0x1fffffff0007ffff,  0xfff7ffffffffffff,  0x8000,  0x7fffffffffffff,  0x47fffff00003fff,  0x7fffffffffffffff,  0x3cffff38000005,  0x7f7f007e7e7e,  0x0,  0x0,  0x7ffffffffff,  0xffff000fffffffff,  0xffffffffffff87f,  0xffffffffffffffff,  0xffff3fffffffffff,  0xffffffffffffffff,  0x3ffffff,  0x5f7ffdffe0f8007f,  0xffffffffffffffdb,  0x3ffffffffffff,  0xfffffffffff80000,  0x3fffffffffffffff,  0xffffffffffff0000,  0xfffffffffffcffff,  0xfff0000000000ff,  0x0,  0xffdf000000000000,  0xffffffffffffffff,  0x1fffffffffffffff,  0x7fffffe00000000,  0xffffffc007fffffe,  0x7fffffffffffffff,  0x1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xffffffffffffffff,  0x7ffffffffffffff,  0x0,  0x1fffffffffffff,  0xffffffff1fffffff,  0x1ffff,  0xffff00007fffffff,  0x7ff,  0xffffffff3fffffff,  0x3eff0f,  0x3fffffff,  0x0,  0x91bffffffffffd3f,  0x3fffff,  0x3ffffff003fffff,  0x0,  0xc0ffffffffffffff,  0x0,  0xffffffeeff06f,  0x1fffffff00000000,  0x3fffffffffffff,  0x7ffff003fffff,  0xffffffffffffffff,  0x1ff,  0xffffffffffffffff,  0x3f,  0x1fffffffffffffc,  0x1ffffff0000,  0x7ffffffffffff,  0x0,  0xffffffffffffffff,  0x1e,  0xffffffffffffffff,  0x7fffffffffff,  0xffffffffffffffff,  0x7ffffffff,  0x7fffffffffff,  0x0,  0x1ffffffffffffff,  0x0,  0xffffffffffffffff,  0x7fffffffffff001f,  0xfff80000,  0x0,  0x3,  0x0,  0xffffffffffffffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffff3fffffffff,  0xf7fffffff7fffffd,  0xffdfffffffdfffff,  0xffff7fffffff7fff,  0xfffffdfffffffdff,  0xff7,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x0,  0xffffffffffffffff,  0x7fffff,  0x1fffffffffffff,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestMark4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1c,  0x64], [ 0x40,  0x70,  0x120,  0x2300], [ 0x1041041040c2040,  0x104104104104104,  0x105104104104104,  0x104104,  0x0,  0x0,  0x0,  0x140400c0200400,  0x1c0701c0701c06,  0x1c0701c0701c07,  0x1c070240801c07,  0x1c0701c0701c07,  0x1c0d0300b02807,  0x1c0701c0701c07,  0x1c070380701c07,  0x1c0701c0701c07,  0x1c0f01c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c1001c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c0701c07,  0x1c0701c07,  0x0,  0x0,  0x0,  0x10000000,  0xc0000008000,  0x1c0060014004,  0x2c00a0024008,  0x3c00e003400c,  0x4c0120044010,  0x5c0160054014,  0x64018,  0x1a0000000,  0x0,  0x7001b0000000,  0x8001f007801d,  0x8c0220000021,  0x980000094024,  0x0,  0x9c000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xa802900a0000,  0x0,  0xb002b,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xb802d,  0xc803100c002f,  0xd400000d0033,  0x0,  0x0,  0x0,  0x360000000,  0x0,  0x37,  0xe00000000000,  0x0,  0x0,  0x0,  0x0,  0x39,  0x0,  0x0,  0xf403c00ec03a,  0x0,  0x0,  0xf8000,  0x0,  0x0,  0x0,  0x10003f0000000,  0x1080410000000,  0x43,  0x0,  0x0,  0x40440000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xffffffffffffffff,  0xffffffffffff,  0x3f8,  0x0,  0xbffffffffffe0000,  0xb6,  0x7ff0000,  0x10000fffff800,  0x0,  0x3d9f9fc00000,  0xffff000000020000,  0x7ff,  0x1ffc000000000,  0xff80000000000,  0x3eeffbc00000,  0xe000000,  0x0,  0x7ffffff000000000,  0xdc0000000000000f,  0xc00feffff,  0xd00000000000000e,  0xc0080399f,  0xd00000000000000e,  0x23000000023987,  0xd00000000000000e,  0xc00003bbf,  0xd00000000000000e,  0xc00c0399f,  0xc000000000000004,  0x803dc7,  0xc00000000000000e,  0xc00603ddf,  0xd00000000000000c,  0xc00603ddf,  0xc00000000000000c,  0xc00803ddf,  0xc,  0xc0000ff5f8400,  0x7f2000000000000,  0x7f80,  0x1bf2000000000000,  0x3f00,  0xc2a0000003000000,  0xfffe000000000000,  0x1ffffffffeffe0df,  0x40,  0x7ffff80000000000,  0x1e3f9dc3c00000,  0x3c00bffc,  0x0,  0x0,  0xe0000000,  0x1c0000001c0000,  0xc0000000c0000,  0xfff0000000000000,  0x200fffff,  0x3800,  0x0,  0x20000000000,  0x0,  0xfff0fff00000000,  0x0,  0xffff000000000000,  0x301,  0xf800000,  0x9fffffff7fe00000,  0xfff000000000001f,  0xff8000000001f,  0x3ffe00000007,  0xfffc000000000,  0xfffff000000000,  0x0,  0x0,  0x1c21fffff70000,  0x0,  0xf000007fffffffff,  0x0,  0x1ffffffff0000,  0x0,  0x3800000000000,  0x0,  0x8000000000000000,  0x0,  0xffffffff00000000,  0xfc0000000000,  0x0,  0x6000000,  0x0,  0x0,  0x3ff7800000000000,  0x80000000,  0x3000000000000,  0xf800000844,  0x0,  0xfff0000000000003,  0x3ffff0000001f,  0x3fc000000000,  0xfff80,  0xfff800000000000f,  0x1,  0x7ffe0000000000,  0x800000000003008,  0xc19d000000000000,  0x60f80000000002,  0x0,  0x37f800000000,  0x40000000,  0x0,  0x7f0000ffff,  0x0,  0x0,  0x2000000000000000,  0x870000000000f06e,  0x0,  0xff00000000000007,  0x7f,  0x7ff000000000007,  0x0,  0x1fff8000000007,  0x0,  0xfff8000000000007,  0x1,  0xfff80000000000,  0x0,  0x0,  0x7ffffffffffe0000,  0x78000,  0x0,  0x0,  0xf807e3e000000000,  0x3c0000000fe7,  0x0,  0x0,  0x1c,  0xffffffffffffffff,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestNumber4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x2b,  0x97], [ 0x80,  0x70,  0x1b0,  0xcc0], [ 0x10a040840608080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xa0140300580a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0xa0140380680a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0x1001e0280500a,  0x1502804c09011,  0xa02c0280500a,  0xa0140280500a,  0x170140280500a,  0xa01402805018,  0xa0140640500a,  0xa0140280500a,  0xa0140280500a,  0xa0140280500a,  0x500a,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200080008000,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x40018001,  0x800040008001,  0x200040008001,  0xc00040028001,  0xa00040028001,  0x1000040038001,  0xa00040048001,  0x200040050001,  0x1600040058001,  0x20004000800c,  0x2002c0020001,  0x200040008001,  0x200040008001,  0x200040068001,  0x200040008001,  0x200040008001,  0x1c00040008001,  0x1e00040008001,  0x20004000800b,  0x2200040080001,  0x200480008001,  0x200000058001,  0x200040090001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200100098001,  0x2005400a0001,  0x200040008001,  0x200040008001,  0x30005c00b0001,  0x200040008001,  0x200040008001,  0x2006800c8001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x3600040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x20004000801c,  0x200740008001,  0x2007c00f0003,  0x200040008001,  0x200040008001,  0x200040008001,  0xa00040008003,  0x200040008001,  0x1600040008020,  0x1600040008004,  0x200040058001,  0x40008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x20004000800b,  0x200040008001,  0x2008c0110021,  0x200040008001,  0x4c00040128024,  0x2000c0008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040138001,  0x200040008028,  0x200040148001,  0x200040150001,  0x200040008001,  0x200040008001,  0x200040158001,  0x200040008001,  0x40160001,  0x1600040008019,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x800040008001,  0x200040008001,  0x20004017002d,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040178001,  0x200040008001,  0x200040008001,  0x200040008001,  0x6000040008001,  0x200040008001,  0x200040008031,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x200040008001,  0x3ff000000000000,  0x0,  0x720c000000000000,  0x3ff00000000,  0x3ff,  0xffc000000000,  0x3f0ffc000000000,  0xfcffc000000000,  0x7ffc000000000,  0x7f00ffc000000000,  0x3fffc000000000,  0x3ff0000,  0xfffff00000000,  0x1ffffe0000000000,  0x1c00000000000,  0x3ff03ff00000000,  0xffc0,  0x7ff0000,  0x3ff03ff,  0x3f1000000000000,  0xffffffffffff0000,  0x3e7,  0xffffffff00000000,  0xfffffff,  0xfffffc0000000000,  0xffc0000000000000,  0xfffff,  0x2000000000000000,  0x70003fe00000080,  0x3c0000,  0xfffeff00,  0xfffe0000000003ff,  0x3f000000000000,  0xfffffffffff80,  0x1ffffffffffffff,  0x400,  0xf00000000,  0x402,  0x3e0000,  0xff000000,  0xfc00000,  0x60000000000000ff,  0xff000000ff000000,  0x7fffffff00000000,  0xfffffffc0000,  0xffffffffffffffff,  0x7ffffffff,  0x3ffff00000000,  0xffffffffffffc000,  0x7ff,  0x0]);
    immutable bestPunctuation4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x27,  0x7f], [ 0x80,  0x60,  0x160,  0x1440], [ 0x102040840608080,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x102040810204081,  0x10204081,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a03c0700d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x110200340680d,  0xd0260340900d,  0xd0280340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd,  0x0,  0x0,  0x0,  0x0,  0x600080008000,  0x6000c0018003,  0x6000c0018003,  0x600140020003,  0x6000c0018003,  0x10001c0030003,  0x16000c0050009,  0x1a000c001800c,  0x6000c007800e,  0x6000c0080003,  0x22000c0018003,  0x6000c0018003,  0x6000c0018003,  0x24000c0018003,  0x6000c0098003,  0x2c00540018014,  0x30000c00b8003,  0x6000c0018003,  0x6000c0018003,  0x6000c00c8003,  0x6000c001801a,  0x6000c0018003,  0x3a007000d8003,  0x3e000c001801e,  0x6000c0018020,  0x6000c0108003,  0x6008c0018022,  0x4a000c0120003,  0x50000c0138026,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x600ac0150029,  0x6000c0018003,  0x6000c0018003,  0x6000c001802c,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x5c000c0168003,  0x6000c0018003,  0x6000bc0018003,  0x6000c0018003,  0x6000c0018003,  0x62000c0018003,  0x6000c0088003,  0x6000c0018032,  0x6000c0018003,  0x3000d00018033,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x4e000c0018003,  0x6000c0018003,  0x6e000c01b0035,  0x6000c0018003,  0x72000c01c0003,  0x78000c01d803a,  0x7c000c01e8003,  0x7e000c0018003,  0x6000c0018003,  0x6000c0018027,  0x6000c0208040,  0x6000c0218042,  0x6000c0018003,  0x6000c0018044,  0x6000c0018003,  0x8a00ec0018003,  0x6000c0230003,  0x6000c0018047,  0x6000c0240003,  0x6000c0018049,  0x98012c0250003,  0x9c000c0268003,  0x6000c0018003,  0x6000c0018003,  0x6000c0278003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c00f7ee00000000,  0x28000000b8000001,  0x88c0088200000000,  0x0,  0x4000000000000000,  0x80,  0xfc000000,  0x4000000000000600,  0x18000000000049,  0xc8003600,  0x3c0000000000,  0x100000,  0x3fff,  0x380000000000000,  0x7fff000000000000,  0x40000000,  0x1003000000000,  0x1000000000000,  0x10000000000000,  0xc008000,  0x3c0000000017fff0,  0x20,  0x61f0000,  0xfc00,  0x800000000000000,  0x1ff00000000,  0x1,  0x600000000000,  0x18000000,  0x380000000000,  0x60000000000000,  0x7700000,  0x7ff,  0x30,  0xc0000000,  0x3f7f00000000,  0x1fc000000,  0xf000000000000000,  0xf800000000000000,  0xc000000000000000,  0x800ff,  0xffff00ffffff0000,  0x600000007ffbffef,  0x6000,  0x60000000000,  0x3fff0000000000,  0xffc000000060,  0x1fffff8,  0x300000000f000000,  0xde00000000000000,  0xfff7fffffffffff,  0x20010000fff3ff0e,  0x100000000,  0xe000,  0x4008000000000000,  0xfc000000000000,  0xf0000000000000,  0x70000000000c000,  0xc00000000000,  0x80000000,  0xc0003ffe,  0xf0000000,  0x30000c0000000,  0x80000000000,  0xffff000003ff0000,  0xd0bfff7ffff,  0xb80000018c00f7ee,  0x3fa8000000,  0x7,  0x10000,  0x800000,  0x8000000080000000,  0x8000000001ff0000,  0xfe00000000000000,  0x3f80,  0xd800000000000000,  0x3,  0xf,  0x1e0,  0xf000000000000,  0x0]);
    immutable bestSymbol4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0x7,  0x31,  0x99], [ 0x40,  0xc0,  0x1a0,  0x1b80], [ 0x1041041040c2040,  0x104104104104104,  0x104104104104104,  0x104104,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0400780d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x130240440680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0540a00d,  0x1702c0340680d,  0xd01a03406818,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x680d,  0x0,  0x0,  0x0,  0x600080008000,  0x800100020004,  0xa00100020004,  0x10001c0030004,  0x800240020004,  0x800280020004,  0x180010002000b,  0x1000100020004,  0x800100020004,  0x1a00100020004,  0x1c00100020004,  0x2000100078004,  0x800100088004,  0x800100090004,  0x800100020011,  0x2a00500020013,  0x800580020004,  0x800100020004,  0x800100020004,  0x8005c0020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x3000100020004,  0x800100020004,  0x34001000c8004,  0x800100020004,  0x8001000d8004,  0x800100020004,  0x800100020004,  0x800100020004,  0x3a00700020004,  0x8007c00f0004,  0x4600880108020,  0x46008c0118023,  0x4a008c0118024,  0x5200a00138026,  0x46008c0118023,  0x46008c0118023,  0x5a00b0015802a,  0x46008c0118023,  0x5e00b80118023,  0x46008c0118023,  0x800100180023,  0x6200100020004,  0x800100020004,  0x4a00c80020004,  0x66008c0118023,  0x800d40020034,  0x6e00d80020004,  0x7600e801c8038,  0x46008c0118023,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x4600100020004,  0x800100020004,  0x800100020004,  0x7800880020004,  0x800100020004,  0x800100020004,  0x800f8002003d,  0x80010002003f,  0x800100020004,  0x800100200004,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x8601080020041,  0x800100020004,  0x8800100020004,  0x800100228004,  0x9000100238046,  0x800100020004,  0x98012c0250049,  0x800100020004,  0x800100020004,  0x9a008c0118023,  0xa20140027804e,  0x800100290023,  0x800100298023,  0x800100020004,  0x800100020004,  0xa800100020004,  0xb0015c02b0055,  0x800100020004,  0x800100020004,  0xb200100020004,  0x800100020004,  0xb8016c011805a,  0xbe017802d005d,  0x800100308060,  0xca01900318062,  0xce008c033003b,  0xd400100348068,  0xd8008c0358023,  0x800100128023,  0x800100020004,  0x800100020004,  0x800100020004,  0x800100020004,  0x7000081000000000,  0x5000000140000000,  0x113d37c00000000,  0x80000000800000,  0x0,  0xffffafe0fffc003c,  0x20000000000000,  0x30,  0x40000000000000,  0x4,  0x8000,  0xc9c0,  0x6000020040000000,  0xc0c000000000000,  0x2000000000000,  0x1000000000000,  0x7f8000000000000,  0x8000000000000000,  0x200000000000000,  0x1500000fce8000e,  0xc000000000000000,  0x1e0dfbf,  0xc0000000,  0x3ff0000,  0x8000000,  0x1,  0xffffffffc0000000,  0x1ff007fe00000000,  0xa000000000000000,  0x6000e000e000e003,  0x1c00000000040010,  0x3ffffff00001c00,  0xc0042afc1d0037b,  0xbc1f,  0xffffffffffff0000,  0xffffffffffffffff,  0xfffff9ffffffffff,  0xfffffffffffff,  0x7fffffffff,  0x7ff,  0xfffffffff0000000,  0x3ffffffffff,  0xfffffffffffffffe,  0xffffffffff,  0xfffffffffff00000,  0xffff003fffffff9f,  0xfffffffffe000007,  0xcffffffff0ffffff,  0x3ff1fff,  0x7e000000000,  0xfffffffffbffffff,  0xfff0000003fffff,  0xc0c00001000c0010,  0x18000000,  0xffc30000,  0xfffffffff,  0xfffffc007fffffff,  0xffffffff000100ff,  0x1fffffffffc00,  0x7fffffffffffffff,  0x7f,  0x3007fffff,  0x600,  0x3c00f0000000000,  0x380000000000000,  0x20000000000,  0xfffc000000000000,  0x3,  0x3000000000000000,  0x27400000000,  0x4000000070000810,  0x50000001,  0x30007f7f00000000,  0xff80000000000000,  0xfe00000000000000,  0xfff03ff,  0x1fffffffffff0000,  0x3fffffffffffff,  0xfffffe7fffffffff,  0x1c1fffffffff,  0xffffc3fffffff018,  0x3fffffff,  0x23,  0x7fffff,  0x800000008000002,  0x20000000200000,  0x800000008000,  0x20000000200,  0x8,  0x3000000000000,  0xffff0fffffffffff,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff0000,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0x1fffffffffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0xfffffffffffffffd,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0xf800000000000000,  0xffe1,  0x3f,  0x0]);
    immutable bestSpace_Separator4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x10,  0x2c], [ 0x40,  0x30,  0x70,  0x300], [ 0x41041041041040,  0x41041041041041,  0x41041041041041,  0x41041,  0x0,  0x0,  0x0,  0x40400c0200400,  0x4010040100405,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x0,  0x40010000000,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010008001,  0x40010004003,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004004,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004002,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x40010004001,  0x100000000,  0x0,  0x0,  0x0,  0x1,  0x0,  0x4000,  0x0,  0x8000000007ff,  0x80000000,  0x0,  0x0]);
    immutable bestGraphical4 = CodepointTrie!(6,5,4,6).fromRawArray([ 0x0,  0x7,  0x46,  0xfa], [ 0x40,  0x120,  0x2d0,  0x3280], [ 0x1861861440c2040,  0x186186186186186,  0x187186186186186,  0x186186,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xf01a0340680d,  0xd01a0440800d,  0xd01a0340680d,  0x130240340680d,  0x1302604c09813,  0x1602a05009813,  0x1b0340640c017,  0x1303a07009813,  0x1302607806813,  0x1302604c09813,  0x1302604c09813,  0x1302604c1001f,  0x1302604c09813,  0x1302604c09813,  0x1304204c09813,  0x1302604c09813,  0x1302608c11013,  0x2504804c09813,  0xd01a04c09826,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0x2701a0340680d,  0x290500340680d,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c0982a,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x2b02604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x1302604c09813,  0x4c09813,  0x0,  0x0,  0x0,  0x0,  0x0,  0x600080008000,  0x6000c0018003,  0x6000c0018003,  0x600140020003,  0x6000c0018003,  0x1200200038006,  0x16000c001800a,  0x1e0038006800c,  0x2600480088010,  0x2c005400a0003,  0x34006400c0017,  0x3c007400e001b,  0x440084010001f,  0x4c00940120023,  0x5400a40140027,  0x5a00b00158003,  0x5c000c0018003,  0x6000c0018003,  0x6200c00178003,  0x6a00d00198032,  0x6000c0018003,  0x6000c0018003,  0x6e00d80018003,  0x74000c01c8038,  0x7c00f401e003b,  0x840104020003f,  0x8c01140220043,  0x90000c0238003,  0x9601180250049,  0x98000c0018003,  0x6000c0018003,  0xa0013c027004d,  0xa8014c0290051,  0x601540018003,  0x6000c0018003,  0xac000c0018003,  0x6000c02c0057,  0x6000c0018003,  0x6000c0018003,  0x6000c0018059,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c011802d0003,  0xba000c02e005b,  0xc2018002f805e,  0xac018c0230062,  0xc8000c0018003,  0x6019402c8003,  0xd0019c0018066,  0x2000c001805c,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x600f80018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0xd2000c0018003,  0xd601a80018003,  0x6000c0018003,  0x7801b4001806c,  0xde01b80018003,  0xe2000c01e0070,  0xe6000c0390003,  0xec000c03a8074,  0xf001180230077,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0xf201a00018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0xf6000c03d0003,  0xfc000c03e807c,  0x6000c0018003,  0x102020003f8003,  0x108000c0418082,  0x10a00040018059,  0x1e000c0438086,  0x11402240018088,  0x11600d80230046,  0x11e0238046808c,  0x8c02400018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180490091,  0x8c02500230093,  0x8c011804b0095,  0x8c011804c0097,  0x8c011804c8003,  0x8c01180230046,  0x8c011804d0046,  0x8c01180230046,  0x13a027004d8003,  0x13e000c04f004f,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x14000f00230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x8c01180508003,  0x8c01180510003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c011802300a1,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x8c011802300a3,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c02940520003,  0x8c011802300a6,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x7c000c0018003,  0x152000c05400a7,  0x8c01180550003,  0x8c01180558003,  0x15c02b40560003,  0x6000c05800af,  0x602c40018003,  0x164000c0018003,  0x8c01180230046,  0x8c01180230046,  0x16c02d405a00b3,  0x8c01180230046,  0x17002dc0018041,  0x17602e802080b9,  0x8c011805e80bc,  0x18002fc04200be,  0x184000c0608001,  0x18a011806200c3,  0x154000c0630003,  0x8c011802b0003,  0x6000c0018003,  0x6000c0018003,  0x18e000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018003,  0x6000c0018035,  0x8c011802300a9,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x6000c0018003,  0x6000c0018003,  0x8c011802300a9,  0x8c01180230046,  0x8c01180230046,  0x190000c0018003,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0x8c01180230046,  0xffffffff00000000,  0x7fffffffffffffff,  0xffffdfff00000000,  0xffffffffffffffff,  0x7cffffffffffffff,  0xfffffffbffffd7f0,  0xfffe00ffffffffff,  0xfffffffefe7fffff,  0xfffffffffffe86ff,  0x1f07ffffff00ff,  0xffffffffcfffffc0,  0xffffffffdfffffff,  0xffffffffffff3fff,  0xffffffffffffe7ff,  0x3ffffffffffff,  0x7ffffffffffffff,  0x7fff3fffffffffff,  0x4fffffff,  0x1ffd00000000,  0x7ffffff000000000,  0xfeffffffffffffff,  0xf3c5fdfffff99fee,  0xfffffcfb080799f,  0xd36dfdfffff987ee,  0x3fffc05e023987,  0xf3edfdfffffbbfee,  0x3ffcf00013bbf,  0xf3edfdfffff99fee,  0xffffcfb0c0399f,  0xc3ffc718d63dc7ec,  0x7ffffc000813dc7,  0xe3effdfffffddfee,  0xff00ffcf03603ddf,  0xf3effdfffffddfec,  0x6ffcf40603ddf,  0xe7fffffffffddfec,  0xfe3fffcf00807ddf,  0x2ffbfffffc7fffec,  0x1c0000ff5f847f,  0x87fffffffffffffe,  0xfffffff,  0x3bffecaefef02596,  0xf3ff3f5f,  0xfffe1ffffffffeff,  0xdffffffffeffffff,  0x7ffdfff,  0xffffffffffff20bf,  0xffffffff3d7f3dff,  0x7f3dffffffff3dff,  0xffffffffff7fff3d,  0xffffffffff3dffff,  0x1fffffffe7ffffff,  0xffffffff03ffffff,  0x1fffffffffffff,  0xffffffff1fffffff,  0x1ffffffffffff,  0x7fffff001fdfff,  0xddfff000fffff,  0x3ff03ff3fffffff,  0xffffffff03ff7fff,  0xffffffffffffff,  0xffff07ffffffffff,  0x3fffffffffffff,  0xfff0fff1fffffff,  0x1f3ffffffffff1,  0xffff0fffffffffff,  0xffffffffc7ff03ff,  0xffffffffcfffffff,  0x9fffffff7fffffff,  0x3fff03ff03ff,  0x0,  0x1fffffffffff0fff,  0xf00fffffffffffff,  0xf8ffffffffffffff,  0xffffffffffffe3ff,  0x7fffffffff00ff,  0xf000007fffffffff,  0xffffffff3f3fffff,  0x3fffffffaaff3f3f,  0xffdfffffffffffff,  0x7fdcffffefcfffdf,  0xffff80ffffff07ff,  0xfff30000ffffffff,  0x3ffffff1fff7fff,  0x1ffffffff0000,  0xffffffffffff03ff,  0xfffffffffffff,  0x7fffffffff,  0xffffffff000007ff,  0xfffffffffffffffe,  0x3ff1fff,  0xffff7fffffffffff,  0xffffffff7fffffff,  0xfe0fffffffffffff,  0xffff20bfffffffff,  0x800180ffffffffff,  0x7f7f7f7f007fffff,  0xffffffff7f7f7f7f,  0xfffffffffffffff,  0xfffffffffbffffff,  0xfff0000003fffff,  0xfffffffffe7fffff,  0xfffe3fffffffffe0,  0x7ffffffffff7fff,  0xffff000fffffffff,  0x1fff,  0xffffffffffff1fff,  0xffffffffffff007f,  0xfffffffffff,  0xffffffff80ffffff,  0x7ff000f7fff,  0xff00000000000000,  0x3ff0fffffffffff,  0xfffffff03ffc01f,  0x1fffffff800fffff,  0xc3ffbfff,  0x7fffffffffffff,  0xffffffff3ff3fff,  0x7ffffff8000007,  0x7f7f007e7e7e,  0x3ff3fffffffffff,  0xffffffffffff87f,  0xffff3fffffffffff,  0x3ffffff,  0x5f7fffffe0f8007f,  0xffffffffffffffdb,  0xfffffffffff80003,  0xffffffffffff0000,  0xfffffffffffcffff,  0x3fff0000000000ff,  0xffff007f03ffffff,  0xffdf0f7ffff7ffff,  0x1fffffffffffffff,  0x30007f7f1cfcfcfc,  0xb7ffff7fffffefff,  0x3fff3fff,  0xff8fffffffffff87,  0xfff07ff,  0x3fffffffffff0000,  0x1ffff,  0xffff000f7fffffff,  0x7ff,  0xffffffffbfffffff,  0x3fff0f,  0x3ff3fffffff,  0x91bffffffffffd3f,  0xffbfffff,  0x83ffffff8fffffff,  0xc0ffffffffffffff,  0x870ffffffeeff06f,  0xffffffff01ff00ff,  0xfe3fffffffffffff,  0xff07ffffff3fffff,  0x1ff,  0x7fffffff00000000,  0xfffffffc3fff,  0xdfffffffffffffff,  0x3ff01ffffff0003,  0xf,  0x3ff01ff,  0x3ff,  0x7fffffffffff,  0xf0007ffffffff,  0x1ffffffffffffff,  0x7fffffffffff001f,  0xffff8000,  0x3,  0xfffffe7fffffffff,  0xf807ffffffffffff,  0x3fffffff,  0x3f,  0x3ffff007fffff,  0xffffffffffdfffff,  0xebffde64dfffffff,  0xffffffffffffffef,  0x7bffffffdfdfe7bf,  0xfffffffffffdfc5f,  0xffffff3fffffffff,  0xffffffffffffcfff,  0xaf7fe96ffffffef,  0x5ef7f796aa96ea84,  0xffffbee0ffffbff,  0x3000000000000,  0x7ffe7fff000fffff,  0xfffefffe,  0xffff7fffffff07ff,  0x7ffffff,  0xffffffc000000000,  0x7ffffffffff0007,  0x301ff,  0xffbf0001ffffffff,  0xffffffff000fffff,  0x1ffff000007df,  0xfffffffffffffffd,  0x1effffffffffffff,  0x3fffffffffffffff,  0xffffff000f,  0xf800000000000000,  0xffe1,  0x7fffff,  0xffffffffffff,  0x0]);
    immutable bestControl4 = CodepointTrie!(5,4,4,8).fromRawArray([ 0x0,  0x3,  0xc,  0x18], [ 0x20,  0x30,  0x30,  0x300], [ 0x84210842108420,  0x108421,  0x0,  0x40201008040200,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x40201008040201,  0x201008040201,  0x0,  0x0,  0x8004002000,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0x8004002001,  0xffffffff,  0x8000000000000000,  0xffffffff,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0]);
    immutable bestFormat4 = CodepointTrie!(6,4,4,7).fromRawArray([ 0x0,  0x7,  0x1c,  0x3c], [ 0x40,  0x70,  0x80,  0x600], [ 0x1041041040c2040,  0x104104104104104,  0x105104104104104,  0x104104,  0x0,  0x0,  0x0,  0x4020040100400,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4040040100c01,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4050040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040600401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x4010040100401,  0x40100401,  0x0,  0x0,  0x4000,  0x0,  0x0,  0x4000c002,  0x0,  0x0,  0x0,  0x0,  0x5,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1c0000018000,  0x20000,  0x0,  0x0,  0x0,  0x90000000,  0x0,  0x0,  0x0,  0xa,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x200000000000,  0x0,  0x1f,  0x0,  0x0,  0x20000000,  0x8000,  0x0,  0x7c000000f800,  0xfc1f00000000,  0x0,  0x8000000000000000,  0x0,  0xe00000000000000,  0x2000000000000000,  0x0,  0x0,  0x7f8000000000000,  0xffffffff00000002,  0xffffffffffffffff,  0x0,  0x0]);
    immutable bestCn4 = CodepointTrie!(7,4,4,6).fromRawArray([ 0x0,  0xf,  0x4b,  0x103], [ 0x80,  0xf0,  0x2e0,  0x3180], [ 0x80e182840608080,  0xb162c58b1628488,  0xb162c58b162c58b,  0xb162c58b162c58b,  0xb162c58b162c58b,  0xb162c58b162c58b,  0x8102058b163058b,  0xd102040d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x400600800800,  0x901001c03005,  0xd01a0300580a,  0xe01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xf01a0340680d,  0xd01a0440800d,  0xd01a0340680d,  0xd0240340680d,  0xd01a0340680d,  0x1502804c0680d,  0x1a0320600b816,  0x1b03a0700d81b,  0x1b0360780681b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b03606c1001f,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b04206c0d81b,  0x1b03606c0d81b,  0x1b03608c1101b,  0x2504806c0d81b,  0xd01a06c0d826,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd01a0340680d,  0xd04e0340680d,  0x1b0520a00680d,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x2a03606c0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0x1b0360ac0d81b,  0x1b03606c0d81b,  0x1b03606c0d81b,  0xd01a06c0d81b,  0xd01a0340680d,  0xd01a0340680d,  0xd0580340680d,  0xd01a0340680d,  0xd01a0340680d,  0x2c01a0340680d,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x80008000,  0x0,  0xc00140020003,  0x7,  0x1600280048008,  0x1e0038006800c,  0x2400440080000,  0x2c005400a0013,  0x34006400c0017,  0x3c007400e001b,  0x440084010001f,  0x4c00940120023,  0x5200a00138000,  0x5400000000000,  0x0,  0x5a00b00158000,  0x6200c0017802e,  0x0,  0x0,  0x6600c80000000,  0x6c000001a8034,  0x7400e401c0037,  0x7c00f401e003b,  0x840104020003f,  0x8800000218000,  0x8e01080230045,  0x9000000000000,  0x0,  0x98012c0250049,  0x9e01380268000,  0x1400000000,  0x0,  0xa200000000000,  0x298052,  0x0,  0x0,  0x54,  0x0,  0x0,  0x0,  0x84010802a8000,  0xb0000002b8056,  0xb8016c02d0059,  0xa20178021005d,  0xbe00000000000,  0x18002a0000,  0xc601880000061,  0xc800000000057,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xe80000000,  0x0,  0x0,  0x0,  0x0,  0x0,  0xca00000000000,  0xce01980000000,  0x0,  0x7001a40000068,  0xd601a80000000,  0xda000001c006c,  0xde00000370000,  0xe400000388070,  0xe801080210073,  0x0,  0x0,  0x0,  0xea018c0000000,  0x0,  0x0,  0xee000003b0000,  0xf4000003c8078,  0x0,  0xfa01f003d8000,  0x100000003f807e,  0x10201900000054,  0x1600000418082,  0x10c02140000084,  0x10e00c80210042,  0x11602280448088,  0x8402300000000,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x840108047008d,  0x840240021008f,  0x8401080490091,  0x84010804a0093,  0x84010804a8000,  0x8401080210042,  0x84010804b0042,  0x8401080210042,  0x130000004b8000,  0x134000004c804b,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x13600e00210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x0,  0x84010804e0000,  0x84010804e8000,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x840108021009c,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x840108021009e,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x84028004f8000,  0x84010802100a1,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x7400000000000,  0x146000000000a2,  0x8401080520000,  0x8401080528000,  0x150029c0530000,  0x5500a9,  0x2ac0000000,  0x15800000000000,  0x8401080210042,  0x8401080210042,  0x16002bc05700ad,  0x8401080210042,  0x16402c4000003d,  0x16a02d001e80b3,  0x84010805b80b6,  0x17602e805c80b8,  0x17a000005e0064,  0x180010805f80be,  0x14800000608000,  0x8401080288000,  0x0,  0x0,  0x18400000000000,  0x0,  0x0,  0x0,  0x0,  0x31,  0x84010802100a3,  0x8401080210042,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x84010802100a3,  0x8401080210042,  0x84010800000c3,  0x18800000000000,  0x8401080210042,  0x8401080210042,  0x0,  0x0,  0x0,  0x17c00000000000,  0x0,  0x0,  0x0,  0x17c00000000000,  0x0,  0x8300000000000000,  0x40000280f,  0x1ff0000000000,  0x101800000,  0x17900,  0xffe0f8000000ff00,  0x30000020,  0x4000,  0x1800,  0xfffc000000000000,  0xf800000000000000,  0x8000c00000000000,  0xffffffffb0000000,  0xffffe002ffffffff,  0x8000000fffffffff,  0x100000000000000,  0xc3a020000066011,  0xf00000304f7f8660,  0x2c92020000067811,  0xffc0003fa1fdc678,  0xc12020000044011,  0xfffc0030fffec440,  0xc12020000066011,  0xff0000304f3fc660,  0x3c0038e729c23813,  0xf800003fff7ec238,  0x1c10020000022011,  0xff0030fc9fc220,  0xc10020000022013,  0xfff90030bf9fc220,  0x1800000000022013,  0x1c00030ff7f8220,  0xd004000003800013,  0xffe3ffff00a07b80,  0x7800000000000001,  0xfffffffff0000000,  0xc4001351010fda69,  0xffffffff0c00c0a0,  0x1e00000000100,  0x2000000001000000,  0xfffffffff8002000,  0xdf40,  0xc280c200,  0x80c200000000c200,  0x8000c2,  0xc20000,  0xe000000018000000,  0xfc000000,  0xffe0000000000000,  0xe0000000,  0xfffe000000000000,  0xff800000ffe02000,  0xfff22000fff00000,  0xfc00fc00c0000000,  0xfc008000,  0xff00000000000000,  0xf80000000000,  0xffc0000000000000,  0xf000f000e0000000,  0xffe0c0000000000e,  0xf00000000000,  0x3800fc00,  0x30000000,  0x6000000080000000,  0xffffc000fc00fc00,  0xffffffffffffffff,  0xe00000000000f000,  0xff0000000000000,  0x700000000000000,  0x1c00,  0xff8000000000ff00,  0xfffff8000000000,  0xc0c00000,  0xc00000005500c0c0,  0x20000000000000,  0x8023000010300020,  0xc03e000000000,  0xfc000000e0008000,  0xfffe00000000ffff,  0xfc00,  0xfff0000000000000,  0xffffff8000000000,  0xfffff800,  0x1,  0xfffffffffc00e000,  0x800000000000,  0x80000000,  0x1f0000000000000,  0xdf4000000000,  0x7ffe7f0000000000,  0x80808080ff800000,  0x80808080,  0xf000000000000000,  0x4000000,  0xf000ffffffc00000,  0x1800000,  0x1c0000000001f,  0xf800000000008000,  0xfff000000000,  0x8000000000000000,  0xffffffffffffe000,  0xe000,  0xff80,  0xfffff00000000000,  0x7f000000,  0xfffff800fff08000,  0xffffffffffffff,  0xfc00f00000000000,  0xf0000000fc003fe0,  0xe00000007ff00000,  0xffffffff3c004000,  0xff80000000000000,  0xf00000000c00c000,  0xff80000007fffff8,  0xffff8080ff818181,  0xfc00c00000000000,  0xf000000000000780,  0xc00000000000,  0xfffffffffc000000,  0xa08000001f07ff80,  0x24,  0x7fffc,  0xffff,  0x30000,  0xc000ffffffffff00,  0xff80fc000000,  0x20f08000080000,  0x6000000000000000,  0xc1ff8080e3030303,  0x4800008000001000,  0xffffffffc000c000,  0x70000000000078,  0xfffffffff000f800,  0xc00000000000ffff,  0xfffffffffffe0000,  0xfff080000000,  0xfffffffffffff800,  0x40000000,  0xffffffffffc000f0,  0xfffffc00c0000000,  0x6e400000000002c0,  0xffffffff00400000,  0x7c00000070000000,  0x3f00000000000000,  0x78f0000001100f90,  0xfe00ff00,  0x1c0000000000000,  0xf8000000c00000,  0xfffffffffffffe00,  0x80000000ffffffff,  0xffff00000003c000,  0xfc00fe000000fffc,  0xfffffffffffffff0,  0xfffffffffc00fe00,  0xfffffffffffffc00,  0xffff800000000000,  0xfff0fff800000000,  0xfe00000000000000,  0x800000000000ffe0,  0xffffffff00007fff,  0xfffffffffffffffc,  0x18000000000,  0xffffffffc0000000,  0xffffffffffffffc0,  0xfffc0000ff800000,  0x200000,  0x1400219b20000000,  0x10,  0x8400000020201840,  0x203a0,  0xc000000000,  0x3000,  0xf508016900000010,  0xa10808695569157b,  0xf0000411f0000400,  0xfffcffffffffffff,  0x80018000fff00000,  0xffffffff00010001,  0x80000000f800,  0xfffffffff8000000,  0x3fffffffff,  0xf80000000000fff8,  0xfffffffffffcfe00,  0x40fffe00000000,  0xe000000000000000,  0xfff00000,  0xfffe0000fffff820,  0x2,  0xe100000000000000,  0xc000000000000000,  0xffffff000000fff0,  0x7ffffffffffffff,  0xffffffffffff001e,  0xffffffffff800000,  0xfffffffd,  0xffff000000000000,  0xc000000000000000]);
}

}
else
    static assert(false, "Sorry, no BigEndian data for unicode TRIEs yet");

@trusted:
public: //Public API continues
/++
    Whether or not $(D c) is a Unicode whitespace character.
    (general Unicode category: Part of C0(tab, vertical tab, form feed,
    carriage return, and linefeed characters), Zs, Zl, Zp, and NEL(U+0085))
  +/
bool isWhite(dchar c) 
{
	return bestWhite_Space2[c];
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isLower) instead.)

    Return whether $(D c) is a Unicode lowercase character.
  +/
deprecated bool isUniLower(dchar c) //@safe pure nothrow
{
    return isLower(c);
}

/++
    Return whether $(D c) is a Unicode lowercase character.
  +/
bool isLower(dchar c) //@safe pure nothrow
{
    if(std.ascii.isASCII(c))
        return std.ascii.isLower(c);

    return isAlpha(c) && c == toLower(c);
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isUpper) instead.)

    Return whether $(D c) is a Unicode uppercase character.
  +/
deprecated bool isUniUpper(dchar c) //@safe pure nothrow
{
    return isUpper(c);
}

/++
    Return whether $(D c) is a Unicode uppercase character.
  +/
bool isUpper(dchar c) //@safe pure nothrow
{
    if(std.ascii.isASCII(c))
        return std.ascii.isUpper(c);

    return isAlpha(c) && c == toUpper(c);
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D toLower) instead.)

    If $(D c) is a Unicode uppercase character, then its lowercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
deprecated dchar toUniLower(dchar c) //@safe pure nothrow
{
    return toLower(c);
}

/++
    If $(D c) is a Unicode uppercase character, then its lowercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
dchar toLower(dchar c) // @safe pure nothrow
{
    if(std.ascii.isUpper(c))
        c += 32;
    else if(c >= 0x00C0)
    {
        if((c >= 0x00C0 && c <= 0x00D6) ||
           (c >= 0x00D8 && c<=0x00DE))
        {
            c += 32;
        }
        else if((c >= 0x0100 && c < 0x0138) ||
                (c > 0x0149 && c < 0x0178))
        {
            if(c == 0x0130)
                c = 0x0069;
            else if((c & 1) == 0)
                ++c;
        }
        else if(c == 0x0178)
            c = 0x00FF;
        else if((c >= 0x0139 && c < 0x0149) ||
                (c > 0x0178 && c < 0x017F))
        {
            if(c & 1)
                ++c;
        }
        else if(c >= 0x0200 && c <= 0x0217)
        {
            if((c & 1) == 0)
                ++c;
        }
        else if((c >= 0x0401 && c <= 0x040C) ||
                (c>= 0x040E && c <= 0x040F))
        {
            c += 80;
        }
        else if(c >= 0x0410 && c <= 0x042F)
            c += 32;
        else if(c >= 0x0460 && c <= 0x047F)
        {
            if((c & 1) == 0)
                ++c;
        }
        else if(c >= 0x0531 && c <= 0x0556)
            c += 48;
        else if(c >= 0x10A0 && c <= 0x10C5)
            c += 48;
        else if(c >= 0xFF21 && c <= 0xFF3A)
            c += 32;
    }

    return c;
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D toUpper) instead.)

    If $(D c) is a Unicode lowercase character, then its uppercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
deprecated dchar toUniUpper(dchar c) //@safe pure nothrow
{
    return toUpper(c);
}

/++
    If $(D c) is a Unicode lowercase character, then its uppercase equivalent
    is returned. Otherwise $(D c) is returned.
  +/
dchar toUpper(dchar c) //@safe pure nothrow
{
    if(std.ascii.isLower(c))
        c -= 32;
    else if(c >= 0x00E0)
    {
        if((c >= 0x00E0 && c <= 0x00F6) ||
           (c >= 0x00F8 && c <= 0x00FE))
        {
            c -= 32;
        }
        else if(c == 0x00FF)
            c = 0x0178;
        else if((c >= 0x0100 && c < 0x0138) ||
                (c > 0x0149 && c < 0x0178))
        {
            if(c == 0x0131)
                c = 0x0049;
            else if(c & 1)
                --c;
        }
        else if((c >= 0x0139 && c < 0x0149) ||
                (c > 0x0178 && c < 0x017F))
        {
            if((c & 1) == 0)
                --c;
        }
        else if(c == 0x017F)
            c = 0x0053;
        else if(c >= 0x0200 && c <= 0x0217)
        {
            if(c & 1)
                --c;
        }
        else if(c >= 0x0430 && c<= 0x044F)
            c -= 32;
        else if((c >= 0x0451 && c <= 0x045C) ||
                (c >=0x045E && c<= 0x045F))
        {
            c -= 80;
        }
        else if(c >= 0x0460 && c <= 0x047F)
        {
            if(c & 1)
                --c;
        }
        else if(c >= 0x0561 && c < 0x0587)
            c -= 48;
        else if(c >= 0xFF41 && c <= 0xFF5A)
            c -= 32;
    }

    return c;
}


/++
   $(RED Deprecated. It will be removed in August 2012. Please use
   $(D isAlpha) instead.)

    Returns whether $(D c) is a Unicode alpha character
    (general Unicode category: Lu, Ll, Lt, Lm, and Lo).

    Standards: Unicode 5.0.0.
  +/
deprecated bool isUniAlpha(dchar c) //@safe pure nothrow
{
    return isAlpha(c);
}

/++
    Returns whether $(D c) is a Unicode alpha character
    (general Unicode category: Lu, Ll, Lt, Lm, and Lo).

    Standards: Unicode 5.0.0.
  +/
bool isAlpha(dchar c) /*@safe pure nothrow*/
{    
    // optimization
    if(c < 0xAA)
    {
        if(c < 'A')
            return false;
        if(c <= 'Z')
            return true;
        if(c < 'a')
            return false;
        if(c <= 'z')
            return true;
        return false;
    }

    return bestAlphabetic3[c];
}

unittest
{
    auto alpha = unicodeSet("Alphabetic");
    foreach(ch; alpha.byChar)
        assert(isAlpha(ch));   
    foreach(ch; 0..0x4000)
        assert((ch in alpha) == isAlpha(ch)); 
}


/++
    Returns whether $(D c) is a Unicode mark
    (general Unicode category: Mn, Me, Mc).

    Standards: Unicode 6.0.0.
  +/


@trusted
bool isMark(dchar c) //@safe pure nothrow
{
    return bestMark2[c];
}

unittest
{
    auto mark = unicodeSet("Mark");
    foreach(ch; mark.byChar)
        assert(isMark(ch));   
    foreach(ch; 0..0x4000)
        assert((ch in mark) == isMark(ch)); 
}


/++
    Returns whether $(D c) is a Unicode numerical character
    (general Unicode category: Nd, Nl, No).

    Standards: Unicode 6.0.0.
  +/

bool isNumber(dchar c) //@safe pure nothrow
{
   return bestNumber3[c];
}

unittest
{
    auto n = unicodeSet("N");
    foreach(ch; n.byChar)
        assert(isNumber(ch));
    foreach(ch; 0..0x4000)
        assert((ch in n) == isNumber(ch));
}


/++
    Returns whether $(D c) is a Unicode punctuation character
    (general Unicode category: Pd, Ps, Pe, Pc, Po, Pi, Pf).

    Standards: Unicode 6.0.0.
  +/

bool isPunctuation(dchar c) //@safe pure nothrow
{//TODO: discover cause of faulty lvl3 
    return bestPunctuation4[c];
}

unittest
{
    assert(isPunctuation('\u0021'));
    assert(isPunctuation('\u0028'));
    assert(isPunctuation('\u0029'));
    assert(isPunctuation('\u002D'));
    assert(isPunctuation('\u005F'));
    assert(isPunctuation('\u00AB'));
    assert(isPunctuation('\u00BB'));
    foreach(ch; unicodeSet("P").byChar)
        assert(isPunctuation(ch));
}


/++
    Returns whether $(D c) is a Unicode symbol character
    (general Unicode category: Sm, Sc, Sk, So)

    Standards: Unicode 6.0.0.
  +/
bool isSymbol(dchar c) //@safe pure nothrow
{
   return bestSymbol3[c];
}

unittest
{
    assert(isSymbol('\u0024'));
    assert(isSymbol('\u002B'));
    assert(isSymbol('\u005E'));
    assert(isSymbol('\u00A6'));
    foreach(ch; unicodeSet("S").byChar)
        assert(isSymbol(ch));
}


/++
    Returns whether $(D c) is a Unicode whitespace character
    (general Unicode category: Zs)

    Standards: Unicode 6.0.0.
  +/
bool isSpace(dchar c) //@safe pure nothrow
{
    return bestSpace_Separator2[c];
}

unittest
{
    assert(isSpace('\u0020'));
    foreach(ch; unicodeSet("Zs").byChar)
        assert(isSpace(ch));
}


/++
    Returns whether $(D c) is a Unicode graphical character
    (general Unicode category: L, M, N, P, S, Zs).

    Standards: Unicode 6.0.0.
  +/

bool isGraphical(dchar c) //@safe pure nothrow
{
    return bestGraphical3[c];
}


unittest
{
    auto set = unicodeSet("Alphabetic") | unicodeSet("S") | unicodeSet("P")
        | unicodeSet("M") | unicodeSet("N") | unicodeSet("Zs");
    foreach(ch; set.byChar)
        assert(isGraphical(ch));
    foreach(ch; 0..0x4000)
        assert((ch in set) == isGraphical(ch));
}


/++
    Returns whether $(D c) is a Unicode control character
    (general Unicode category: Cc)

    Standards: Unicode 6.0.0.
  +/

bool isControl(dchar c) //@safe pure nothrow
{
    return (c <= 0x1F || (0x80 <= c && c <= 0x9F));
}

unittest
{
    assert(isControl('\u0000'));
    assert(isControl('\u0081'));
    assert(!isControl('\u0100'));
}


/++
    Returns whether $(D c) is a Unicode formatting character
    (general Unicode category: Cf)

    Standards: Unicode 6.0.0.
  +/
bool isFormat(dchar c) //@safe pure nothrow
{
    return bestFormat3[c];
}


unittest
{
    assert(isFormat('\u00AD'));
    foreach(ch; unicodeSet("Format").byChar)
        assert(isFormat(ch));
}


/++
    Returns whether $(D c) is a Unicode Private Use character
    (general Unicode category: Co)

    Standards: Unicode 6.0.0.
  +/
bool isPrivateUse(dchar c) //@safe pure nothrow
{
    return (0x00_E000 <= c && c <= 0x00_F8FF)
        || (0x0F_0000 <= c && c <= 0x0F_FFFD)
        || (0x10_0000 <= c && c <= 0x10_FFFD);
}


unittest
{
}


/++
    Returns whether $(D c) is a Unicode surrogate character
    (general Unicode category: Cs)

    Standards: Unicode 6.0.0.
  +/
bool isSurrogate(dchar c) //@safe pure nothrow
{
    return (0xD800 <= c && c <= 0xDFFF);
}

/++
    Returns whether $(D c) is a Unicode high surrogate (lead surrogate).

    Standards: Unicode 2.0.
  +/
bool isSurrogateHi(dchar c) @safe pure nothrow
{
    return (0xD800 <= c && c <= 0xDBFF);
}

/++
    Returns whether $(D c) is a Unicode low surrogate (trail surrogate).

    Standards: Unicode 2.0.
  +/
bool isSurrogateLo(dchar c) @safe pure nothrow
{
    return (0xDC00 <= c && c <= 0xDFFF);
}

unittest
{
}


/++
    Returns whether $(D c) is a Unicode non-character
    (general Unicode category: Cn)

    Standards: Unicode 6.0.0.
  +/

bool isNonCharacter(dchar c) //@safe pure nothrow
{
    return bestCn3[c]; 
}


unittest
{
    auto set = unicodeSet("Cn");
    foreach(ch; set.byChar)
        assert(isNonCharacter(ch));
}


//Written in the D programming language
/**
 * License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
 *
 * Authors: Dmitry Olshansky
 *
 */
//Automatically generated from Unicode Character Database files


struct CommonCaseEntry
{
    dchar start, end;
    uint op; 
    @property uint delta() const { return op & 0xFF_FFFF; }
    @property uint xor()const {   return op & doXor; }
    @property uint neg()const {   return op & doMinus; }
    enum doXor = 1<<31, doMinus = 1<<30;
}

//sorted by .start, however they do intersect
immutable commonCaseTable = [
CommonCaseEntry(0x00041, 0x0005b, 2147483680),
CommonCaseEntry(0x00061, 0x0006b, 2147483680),
CommonCaseEntry(0x0006b, 0x0006c, 2147483680),
CommonCaseEntry(0x0006b, 0x0006c, 8383),
CommonCaseEntry(0x0006c, 0x00073, 2147483680),
CommonCaseEntry(0x00073, 0x00074, 2147483680),
CommonCaseEntry(0x00073, 0x00074, 2147483916),
CommonCaseEntry(0x00074, 0x0007b, 2147483680),
CommonCaseEntry(0x000b5, 0x000b6, 775),
CommonCaseEntry(0x000c0, 0x000d7, 2147483680),
CommonCaseEntry(0x000d8, 0x000df, 2147483680),
CommonCaseEntry(0x000df, 0x000e0, 7615),
CommonCaseEntry(0x000e0, 0x000e5, 2147483680),
CommonCaseEntry(0x000e5, 0x000e6, 2147483680),
CommonCaseEntry(0x000e5, 0x000e6, 8262),
CommonCaseEntry(0x000e6, 0x000f7, 2147483680),
CommonCaseEntry(0x000f8, 0x000ff, 2147483680),
CommonCaseEntry(0x000ff, 0x00100, 121),
CommonCaseEntry(0x00100, 0x00130, 2147483649),
CommonCaseEntry(0x00132, 0x00138, 2147483649),
CommonCaseEntry(0x00139, 0x00149, 2147483649),
CommonCaseEntry(0x0014a, 0x00178, 2147483649),
CommonCaseEntry(0x00178, 0x00179, 1073741945),
CommonCaseEntry(0x00179, 0x0017f, 2147483649),
CommonCaseEntry(0x0017f, 0x00180, 2147483916),
CommonCaseEntry(0x00180, 0x00181, 195),
CommonCaseEntry(0x00181, 0x00182, 210),
CommonCaseEntry(0x00182, 0x00186, 2147483649),
CommonCaseEntry(0x00186, 0x00187, 206),
CommonCaseEntry(0x00187, 0x00189, 2147483649),
CommonCaseEntry(0x00189, 0x0018b, 205),
CommonCaseEntry(0x0018b, 0x0018d, 2147483649),
CommonCaseEntry(0x0018e, 0x0018f, 79),
CommonCaseEntry(0x0018f, 0x00190, 202),
CommonCaseEntry(0x00190, 0x00191, 203),
CommonCaseEntry(0x00191, 0x00193, 2147483649),
CommonCaseEntry(0x00193, 0x00194, 205),
CommonCaseEntry(0x00194, 0x00195, 207),
CommonCaseEntry(0x00195, 0x00196, 97),
CommonCaseEntry(0x00196, 0x00197, 211),
CommonCaseEntry(0x00197, 0x00198, 209),
CommonCaseEntry(0x00198, 0x0019a, 2147483649),
CommonCaseEntry(0x0019a, 0x0019b, 163),
CommonCaseEntry(0x0019c, 0x0019d, 211),
CommonCaseEntry(0x0019d, 0x0019e, 213),
CommonCaseEntry(0x0019e, 0x0019f, 130),
CommonCaseEntry(0x0019f, 0x001a0, 214),
CommonCaseEntry(0x001a0, 0x001a6, 2147483649),
CommonCaseEntry(0x001a6, 0x001a7, 218),
CommonCaseEntry(0x001a7, 0x001a9, 2147483649),
CommonCaseEntry(0x001a9, 0x001aa, 218),
CommonCaseEntry(0x001ac, 0x001ae, 2147483649),
CommonCaseEntry(0x001ae, 0x001af, 218),
CommonCaseEntry(0x001af, 0x001b1, 2147483649),
CommonCaseEntry(0x001b1, 0x001b3, 217),
CommonCaseEntry(0x001b3, 0x001b7, 2147483649),
CommonCaseEntry(0x001b7, 0x001b8, 219),
CommonCaseEntry(0x001b8, 0x001ba, 2147483649),
CommonCaseEntry(0x001bc, 0x001be, 2147483649),
CommonCaseEntry(0x001bf, 0x001c0, 56),
CommonCaseEntry(0x001c4, 0x001c5, 2147483650),
CommonCaseEntry(0x001c5, 0x001c6, 2147483649),
CommonCaseEntry(0x001c6, 0x001c7, 2147483649),
CommonCaseEntry(0x001c6, 0x001c7, 2147483650),
CommonCaseEntry(0x001c7, 0x001c8, 2),
CommonCaseEntry(0x001c8, 0x001c9, 2147483649),
CommonCaseEntry(0x001c9, 0x001ca, 2147483649),
CommonCaseEntry(0x001c9, 0x001ca, 1073741826),
CommonCaseEntry(0x001ca, 0x001cb, 2),
CommonCaseEntry(0x001cb, 0x001cc, 2147483649),
CommonCaseEntry(0x001cc, 0x001cd, 2147483649),
CommonCaseEntry(0x001cc, 0x001cd, 1073741826),
CommonCaseEntry(0x001cd, 0x001dd, 2147483649),
CommonCaseEntry(0x001dd, 0x001de, 1073741903),
CommonCaseEntry(0x001de, 0x001f0, 2147483649),
CommonCaseEntry(0x001f1, 0x001f2, 2147483650),
CommonCaseEntry(0x001f2, 0x001f3, 2147483649),
CommonCaseEntry(0x001f3, 0x001f4, 2147483649),
CommonCaseEntry(0x001f3, 0x001f4, 2147483650),
CommonCaseEntry(0x001f4, 0x001f6, 2147483649),
CommonCaseEntry(0x001f6, 0x001f7, 1073741921),
CommonCaseEntry(0x001f7, 0x001f8, 1073741880),
CommonCaseEntry(0x001f8, 0x00220, 2147483649),
CommonCaseEntry(0x00220, 0x00221, 1073741954),
CommonCaseEntry(0x00222, 0x00234, 2147483649),
CommonCaseEntry(0x0023a, 0x0023b, 10795),
CommonCaseEntry(0x0023b, 0x0023d, 2147483649),
CommonCaseEntry(0x0023d, 0x0023e, 1073741987),
CommonCaseEntry(0x0023e, 0x0023f, 10792),
CommonCaseEntry(0x0023f, 0x00241, 10815),
CommonCaseEntry(0x00241, 0x00243, 2147483649),
CommonCaseEntry(0x00243, 0x00244, 1073742019),
CommonCaseEntry(0x00244, 0x00245, 69),
CommonCaseEntry(0x00245, 0x00246, 71),
CommonCaseEntry(0x00246, 0x00250, 2147483649),
CommonCaseEntry(0x00250, 0x00251, 10783),
CommonCaseEntry(0x00251, 0x00252, 10780),
CommonCaseEntry(0x00252, 0x00253, 10782),
CommonCaseEntry(0x00253, 0x00254, 1073742034),
CommonCaseEntry(0x00254, 0x00255, 1073742030),
CommonCaseEntry(0x00256, 0x00258, 1073742029),
CommonCaseEntry(0x00259, 0x0025a, 1073742026),
CommonCaseEntry(0x0025b, 0x0025c, 1073742027),
CommonCaseEntry(0x00260, 0x00261, 1073742029),
CommonCaseEntry(0x00263, 0x00264, 1073742031),
CommonCaseEntry(0x00265, 0x00266, 42280),
CommonCaseEntry(0x00266, 0x00267, 42308),
CommonCaseEntry(0x00268, 0x00269, 1073742033),
CommonCaseEntry(0x00269, 0x0026a, 1073742035),
CommonCaseEntry(0x0026b, 0x0026c, 10743),
CommonCaseEntry(0x0026f, 0x00270, 1073742035),
CommonCaseEntry(0x00271, 0x00272, 10749),
CommonCaseEntry(0x00272, 0x00273, 1073742037),
CommonCaseEntry(0x00275, 0x00276, 1073742038),
CommonCaseEntry(0x0027d, 0x0027e, 10727),
CommonCaseEntry(0x00280, 0x00281, 1073742042),
CommonCaseEntry(0x00283, 0x00284, 1073742042),
CommonCaseEntry(0x00288, 0x00289, 1073742042),
CommonCaseEntry(0x00289, 0x0028a, 1073741893),
CommonCaseEntry(0x0028a, 0x0028c, 1073742041),
CommonCaseEntry(0x0028c, 0x0028d, 1073741895),
CommonCaseEntry(0x00292, 0x00293, 1073742043),
CommonCaseEntry(0x00345, 0x00346, 116),
CommonCaseEntry(0x00370, 0x00374, 2147483649),
CommonCaseEntry(0x00376, 0x00378, 2147483649),
CommonCaseEntry(0x0037b, 0x0037e, 130),
CommonCaseEntry(0x00386, 0x00387, 38),
CommonCaseEntry(0x00388, 0x0038b, 37),
CommonCaseEntry(0x0038c, 0x0038d, 2147483712),
CommonCaseEntry(0x0038e, 0x00390, 63),
CommonCaseEntry(0x00391, 0x003a2, 32),
CommonCaseEntry(0x003a3, 0x003ac, 32),
CommonCaseEntry(0x003ac, 0x003ad, 1073741862),
CommonCaseEntry(0x003ad, 0x003b0, 1073741861),
CommonCaseEntry(0x003b1, 0x003b2, 1073741856),
CommonCaseEntry(0x003b2, 0x003b3, 1073741856),
CommonCaseEntry(0x003b2, 0x003b3, 30),
CommonCaseEntry(0x003b3, 0x003b5, 1073741856),
CommonCaseEntry(0x003b5, 0x003b6, 1073741856),
CommonCaseEntry(0x003b5, 0x003b6, 2147483712),
CommonCaseEntry(0x003b6, 0x003b8, 1073741856),
CommonCaseEntry(0x003b8, 0x003b9, 1073741856),
CommonCaseEntry(0x003b8, 0x003b9, 25),
CommonCaseEntry(0x003b8, 0x003b9, 60),
CommonCaseEntry(0x003b9, 0x003ba, 1073741856),
CommonCaseEntry(0x003b9, 0x003ba, 7173),
CommonCaseEntry(0x003b9, 0x003ba, 1073741940),
CommonCaseEntry(0x003ba, 0x003bb, 1073741856),
CommonCaseEntry(0x003ba, 0x003bb, 54),
CommonCaseEntry(0x003bb, 0x003bc, 1073741856),
CommonCaseEntry(0x003bc, 0x003bd, 1073742599),
CommonCaseEntry(0x003bc, 0x003bd, 1073741856),
CommonCaseEntry(0x003bd, 0x003c0, 1073741856),
CommonCaseEntry(0x003c0, 0x003c1, 1073741856),
CommonCaseEntry(0x003c0, 0x003c1, 2147483670),
CommonCaseEntry(0x003c1, 0x003c2, 1073741856),
CommonCaseEntry(0x003c1, 0x003c2, 2147483696),
CommonCaseEntry(0x003c2, 0x003c3, 2147483649),
CommonCaseEntry(0x003c3, 0x003c4, 2147483649),
CommonCaseEntry(0x003c3, 0x003c4, 1073741856),
CommonCaseEntry(0x003c4, 0x003c6, 1073741856),
CommonCaseEntry(0x003c6, 0x003c7, 1073741856),
CommonCaseEntry(0x003c6, 0x003c7, 15),
CommonCaseEntry(0x003c7, 0x003c9, 1073741856),
CommonCaseEntry(0x003c9, 0x003ca, 1073741856),
CommonCaseEntry(0x003c9, 0x003ca, 7517),
CommonCaseEntry(0x003ca, 0x003cc, 1073741856),
CommonCaseEntry(0x003cc, 0x003cd, 2147483712),
CommonCaseEntry(0x003cd, 0x003cf, 1073741887),
CommonCaseEntry(0x003cf, 0x003d0, 8),
CommonCaseEntry(0x003d0, 0x003d1, 1073741854),
CommonCaseEntry(0x003d1, 0x003d2, 1073741849),
CommonCaseEntry(0x003d5, 0x003d6, 1073741839),
CommonCaseEntry(0x003d6, 0x003d7, 2147483670),
CommonCaseEntry(0x003d7, 0x003d8, 1073741832),
CommonCaseEntry(0x003d8, 0x003f0, 2147483649),
CommonCaseEntry(0x003f0, 0x003f1, 1073741878),
CommonCaseEntry(0x003f1, 0x003f2, 2147483696),
CommonCaseEntry(0x003f2, 0x003f3, 7),
CommonCaseEntry(0x003f4, 0x003f5, 1073741884),
CommonCaseEntry(0x003f5, 0x003f6, 2147483712),
CommonCaseEntry(0x003f7, 0x003f9, 2147483649),
CommonCaseEntry(0x003f9, 0x003fa, 1073741831),
CommonCaseEntry(0x003fa, 0x003fc, 2147483649),
CommonCaseEntry(0x003fd, 0x00400, 1073741954),
CommonCaseEntry(0x00400, 0x00410, 2147483728),
CommonCaseEntry(0x00410, 0x00430, 32),
CommonCaseEntry(0x00430, 0x00450, 1073741856),
CommonCaseEntry(0x00450, 0x00460, 2147483728),
CommonCaseEntry(0x00460, 0x00482, 2147483649),
CommonCaseEntry(0x0048a, 0x004c0, 2147483649),
CommonCaseEntry(0x004c0, 0x004c1, 2147483663),
CommonCaseEntry(0x004c1, 0x004cf, 2147483649),
CommonCaseEntry(0x004cf, 0x004d0, 2147483663),
CommonCaseEntry(0x004d0, 0x00528, 2147483649),
CommonCaseEntry(0x00531, 0x00557, 48),
CommonCaseEntry(0x00561, 0x00587, 1073741872),
CommonCaseEntry(0x010a0, 0x010c6, 7264),
CommonCaseEntry(0x010c7, 0x010c8, 7264),
CommonCaseEntry(0x010cd, 0x010ce, 7264),
CommonCaseEntry(0x01d79, 0x01d7a, 35332),
CommonCaseEntry(0x01d7d, 0x01d7e, 3814),
CommonCaseEntry(0x01e00, 0x01e61, 2147483649),
CommonCaseEntry(0x01e61, 0x01e62, 2147483649),
CommonCaseEntry(0x01e61, 0x01e62, 58),
CommonCaseEntry(0x01e62, 0x01e96, 2147483649),
CommonCaseEntry(0x01e9b, 0x01e9c, 1073741882),
CommonCaseEntry(0x01e9e, 0x01e9f, 1073749439),
CommonCaseEntry(0x01ea0, 0x01f00, 2147483649),
CommonCaseEntry(0x01f00, 0x01f16, 2147483656),
CommonCaseEntry(0x01f18, 0x01f1e, 2147483656),
CommonCaseEntry(0x01f20, 0x01f46, 2147483656),
CommonCaseEntry(0x01f48, 0x01f4e, 2147483656),
CommonCaseEntry(0x01f51, 0x01f52, 2147483656),
CommonCaseEntry(0x01f53, 0x01f54, 2147483656),
CommonCaseEntry(0x01f55, 0x01f56, 2147483656),
CommonCaseEntry(0x01f57, 0x01f58, 2147483656),
CommonCaseEntry(0x01f59, 0x01f5a, 2147483656),
CommonCaseEntry(0x01f5b, 0x01f5c, 2147483656),
CommonCaseEntry(0x01f5d, 0x01f5e, 2147483656),
CommonCaseEntry(0x01f5f, 0x01f70, 2147483656),
CommonCaseEntry(0x01f70, 0x01f72, 74),
CommonCaseEntry(0x01f72, 0x01f76, 86),
CommonCaseEntry(0x01f76, 0x01f78, 100),
CommonCaseEntry(0x01f78, 0x01f7a, 2147483776),
CommonCaseEntry(0x01f7a, 0x01f7c, 112),
CommonCaseEntry(0x01f7c, 0x01f7e, 126),
CommonCaseEntry(0x01f80, 0x01fb2, 2147483656),
CommonCaseEntry(0x01fb3, 0x01fb4, 9),
CommonCaseEntry(0x01fb8, 0x01fba, 2147483656),
CommonCaseEntry(0x01fba, 0x01fbc, 1073741898),
CommonCaseEntry(0x01fbc, 0x01fbd, 1073741833),
CommonCaseEntry(0x01fbe, 0x01fbf, 1073748997),
CommonCaseEntry(0x01fc3, 0x01fc4, 9),
CommonCaseEntry(0x01fc8, 0x01fcc, 1073741910),
CommonCaseEntry(0x01fcc, 0x01fcd, 1073741833),
CommonCaseEntry(0x01fd0, 0x01fd2, 2147483656),
CommonCaseEntry(0x01fd8, 0x01fda, 2147483656),
CommonCaseEntry(0x01fda, 0x01fdc, 1073741924),
CommonCaseEntry(0x01fe0, 0x01fe2, 2147483656),
CommonCaseEntry(0x01fe5, 0x01fe6, 7),
CommonCaseEntry(0x01fe8, 0x01fea, 2147483656),
CommonCaseEntry(0x01fea, 0x01fec, 1073741936),
CommonCaseEntry(0x01fec, 0x01fed, 1073741831),
CommonCaseEntry(0x01ff3, 0x01ff4, 9),
CommonCaseEntry(0x01ff8, 0x01ffa, 2147483776),
CommonCaseEntry(0x01ffa, 0x01ffc, 1073741950),
CommonCaseEntry(0x01ffc, 0x01ffd, 1073741833),
CommonCaseEntry(0x02126, 0x02127, 1073749341),
CommonCaseEntry(0x0212a, 0x0212b, 1073750207),
CommonCaseEntry(0x0212b, 0x0212c, 1073750086),
CommonCaseEntry(0x02132, 0x02133, 28),
CommonCaseEntry(0x0214e, 0x0214f, 1073741852),
CommonCaseEntry(0x02160, 0x02180, 2147483664),
CommonCaseEntry(0x02183, 0x02185, 2147483649),
CommonCaseEntry(0x024b6, 0x024d0, 26),
CommonCaseEntry(0x024d0, 0x024ea, 1073741850),
CommonCaseEntry(0x02c00, 0x02c2f, 48),
CommonCaseEntry(0x02c30, 0x02c5f, 1073741872),
CommonCaseEntry(0x02c60, 0x02c62, 2147483649),
CommonCaseEntry(0x02c62, 0x02c63, 1073752567),
CommonCaseEntry(0x02c63, 0x02c64, 1073745638),
CommonCaseEntry(0x02c64, 0x02c65, 1073752551),
CommonCaseEntry(0x02c65, 0x02c66, 1073752619),
CommonCaseEntry(0x02c66, 0x02c67, 1073752616),
CommonCaseEntry(0x02c67, 0x02c6d, 2147483649),
CommonCaseEntry(0x02c6d, 0x02c6e, 1073752604),
CommonCaseEntry(0x02c6e, 0x02c6f, 1073752573),
CommonCaseEntry(0x02c6f, 0x02c70, 1073752607),
CommonCaseEntry(0x02c70, 0x02c71, 1073752606),
CommonCaseEntry(0x02c72, 0x02c74, 2147483649),
CommonCaseEntry(0x02c75, 0x02c77, 2147483649),
CommonCaseEntry(0x02c7e, 0x02c80, 1073752639),
CommonCaseEntry(0x02c80, 0x02ce4, 2147483649),
CommonCaseEntry(0x02ceb, 0x02cef, 2147483649),
CommonCaseEntry(0x02cf2, 0x02cf4, 2147483649),
CommonCaseEntry(0x02d00, 0x02d26, 1073749088),
CommonCaseEntry(0x02d27, 0x02d28, 1073749088),
CommonCaseEntry(0x02d2d, 0x02d2e, 1073749088),
CommonCaseEntry(0x0a640, 0x0a66e, 2147483649),
CommonCaseEntry(0x0a680, 0x0a698, 2147483649),
CommonCaseEntry(0x0a722, 0x0a730, 2147483649),
CommonCaseEntry(0x0a732, 0x0a770, 2147483649),
CommonCaseEntry(0x0a779, 0x0a77d, 2147483649),
CommonCaseEntry(0x0a77d, 0x0a77e, 1073777156),
CommonCaseEntry(0x0a77e, 0x0a788, 2147483649),
CommonCaseEntry(0x0a78b, 0x0a78d, 2147483649),
CommonCaseEntry(0x0a78d, 0x0a78e, 1073784104),
CommonCaseEntry(0x0a790, 0x0a794, 2147483649),
CommonCaseEntry(0x0a7a0, 0x0a7aa, 2147483649),
CommonCaseEntry(0x0a7aa, 0x0a7ab, 1073784132),
CommonCaseEntry(0x0ff21, 0x0ff3b, 32),
CommonCaseEntry(0x0ff41, 0x0ff5b, 1073741856),
CommonCaseEntry(0x10400, 0x10428, 40),
CommonCaseEntry(0x10428, 0x10450, 1073741864),
];

struct UnicodeProperty(T)
{
    string name;
    RleBitSet!T set;
}
immutable unicodeCc = RleBitSet!ubyte.fromRawArray([0x0, 0x20, 0x5f, 0x21]);
immutable unicodeLl = RleBitSet!ubyte.fromRawArray([0x61, 0x1a, 0x3a, 0x1, 0x29, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x1b, 0xc1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x3, 0x3, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0x2c, 0x3f, 0xd, 0x1, 0x22, 0x66, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0xff, 0x0, 0x13, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x35, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xb5, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x6, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8c, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x58, 0x7, 0xc, 0x5, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x2d, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd1, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x9a, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1]);
immutable unicodeKannada = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8e, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2]);
immutable unicodeTelugu = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8]);
immutable unicodeGurmukhi = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xb, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10]);
immutable unicodeLu = RleBitSet!ubyte.fromRawArray([0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0x22, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x54, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0xff, 0x0, 0x7, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x3d, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x86, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xcd, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc9, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xa8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1]);
immutable unicodeInBasic_Latin = RleBitSet!ubyte.fromRawArray([0x0, 0x80]);
immutable unicodeLowercase = RleBitSet!ubyte.fromRawArray([0x61, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x24, 0x18, 0x1, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x6, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x45, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2b, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x4, 0x12, 0x1, 0x1b, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x39, 0x27, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0xc0, 0x41, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0xe, 0x2, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x5, 0x1, 0x2, 0x6, 0x1, 0x3, 0x3, 0x1, 0x2, 0x8, 0x4, 0x2, 0x2, 0x8, 0x8, 0xa, 0x3, 0x1, 0x2, 0x79, 0x1, 0xd, 0x1, 0x10, 0xd, 0x6d, 0x1, 0x3, 0x2, 0x3, 0x1, 0x1b, 0x1, 0x4, 0x1, 0x4, 0x1, 0x2, 0x2, 0x8, 0x4, 0x4, 0x1, 0x21, 0x10, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x4e, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x4d, 0x2f, 0x2, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8c, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4e, 0x3, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x58, 0x7, 0xc, 0x5, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x2d, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xd1, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x9a, 0x1a, 0x1a, 0x7, 0x1, 0x12, 0x1a, 0x1a, 0x1a, 0x4, 0x1, 0x1, 0x1, 0x7, 0x1, 0xb, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c, 0x1c, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1a, 0x19, 0x1, 0x6, 0x1, 0x1]);
immutable unicodeGujarati = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8b, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc]);
immutable unicodeInLatin_1_Supplement = RleBitSet!ubyte.fromRawArray([0x80, 0x80]);
immutable unicodeUppercase = RleBitSet!ubyte.fromRawArray([0x41, 0x1a, 0x65, 0x17, 0x1, 0x7, 0x21, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x3, 0x2, 0x4, 0x1, 0x2, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0x22, 0x1, 0x1, 0x1, 0x3, 0x1, 0xf, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x2, 0x1, 0x11, 0x1, 0x9, 0x23, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x33, 0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x26, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x54, 0x26, 0x1, 0x1, 0x5, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x6, 0xa, 0x8, 0x8, 0x8, 0x8, 0x6, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x8, 0x48, 0x4, 0xc, 0x4, 0xc, 0x4, 0xc, 0x5, 0xb, 0x4, 0xff, 0x0, 0x7, 0x1, 0x4, 0x1, 0x3, 0x3, 0x2, 0x3, 0x2, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x4, 0xa, 0x2, 0x5, 0x1, 0x1a, 0x10, 0x13, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x35, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x37, 0x2f, 0x31, 0x1, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x2, 0x1, 0x8, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8, 0x1, 0x1, 0x1, 0x4, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x13, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x8b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0xd, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xcd, 0x1a, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc9, 0x28, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xa8, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0x8, 0x1a, 0x1a, 0x1a, 0x2, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1b, 0x2, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1e, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x19, 0x21, 0x1]);
immutable unicodeLao = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8f, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4]);
immutable unicodeBengali = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8a, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16]);
immutable unicodeOriya = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xc, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12]);
immutable unicodeASCII_Hex_Digit = RleBitSet!ubyte.fromRawArray([0x30, 0xa, 0x7, 0x6, 0x1a, 0x6]);
immutable unicodeTamil = RleBitSet!ubyte.fromRawArray([0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0x8d, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15]);
immutable unicodeInCombining_Diacritical_Marks_Supplement = RleBitSet!ushort.fromRawArray([0x1dc0, 0x40]);
immutable unicodeInCJK_Radicals_Supplement = RleBitSet!ushort.fromRawArray([0x2e80, 0x80]);
immutable unicodeInEthiopic_Supplement = RleBitSet!ushort.fromRawArray([0x1380, 0x20]);
immutable unicodeInPhags_pa = RleBitSet!ushort.fromRawArray([0xa840, 0x40]);
immutable unicodeInSyriac = RleBitSet!ushort.fromRawArray([0x700, 0x50]);
immutable unicodeOther_ID_Start = RleBitSet!ushort.fromRawArray([0x2118, 0x1, 0x15, 0x1, 0xf6c, 0x2]);
immutable unicodeInGujarati = RleBitSet!ushort.fromRawArray([0xa80, 0x80]);
immutable unicodeInHangul_Jamo = RleBitSet!ushort.fromRawArray([0x1100, 0x100]);
immutable unicodeRunic = RleBitSet!ushort.fromRawArray([0x16a0, 0x4b, 0x3, 0x3]);
immutable unicodeInKayah_Li = RleBitSet!ushort.fromRawArray([0xa900, 0x30]);
immutable unicodeIDS_Binary_Operator = RleBitSet!ushort.fromRawArray([0x2ff0, 0x2, 0x2, 0x8]);
immutable unicodeTai_Tham = RleBitSet!ushort.fromRawArray([0x1a20, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe]);
immutable unicodeLinear_B = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b]);
immutable unicodeInSupplemental_Arrows_A = RleBitSet!ushort.fromRawArray([0x27f0, 0x10]);
immutable unicodeArmenian = RleBitSet!ushort.fromRawArray([0x531, 0x26, 0x2, 0x7, 0x1, 0x27, 0x2, 0x1, 0x4, 0x1, 0xf583, 0x5]);
immutable unicodeInBlock_Elements = RleBitSet!ushort.fromRawArray([0x2580, 0x20]);
immutable unicodeInBalinese = RleBitSet!ushort.fromRawArray([0x1b00, 0x80]);
immutable unicodeInSupplemental_Arrows_B = RleBitSet!ushort.fromRawArray([0x2900, 0x80]);
immutable unicodeCyrillic = RleBitSet!ushort.fromRawArray([0x400, 0x85, 0x2, 0xa1, 0x1803, 0x1, 0x4c, 0x1, 0x1067, 0x20, 0x7840, 0x58, 0x7, 0x1]);
immutable unicodeWhite_Space = RleBitSet!ushort.fromRawArray([0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x1a, 0x1, 0x15df, 0x1, 0x18d, 0x1, 0x7f1, 0xb, 0x1d, 0x2, 0x5, 0x1, 0x2f, 0x1, 0xfa0, 0x1]);
immutable unicodeBatak = RleBitSet!ushort.fromRawArray([0x1bc0, 0x34, 0x8, 0x4]);
immutable unicodeCherokee = RleBitSet!ushort.fromRawArray([0x13a0, 0x55]);
immutable unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended = RleBitSet!ushort.fromRawArray([0x18b0, 0x50]);
immutable unicodeHiragana = RleBitSet!ushort.fromRawArray([0x3041, 0x56, 0x6, 0x3, 0xffff, 0x0, 0x7f62, 0x1, 0x41fe, 0x1]);
immutable unicodeGrapheme_Extend = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x113, 0x7, 0x107, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x1, 0x4, 0x8, 0x1, 0x8, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x1, 0x1, 0x1, 0xc, 0x1, 0x9, 0x1, 0x66, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x2, 0x1, 0x3, 0x1, 0x5, 0x2, 0x7, 0x2, 0xb, 0x2, 0x5a, 0x1, 0x2, 0x4, 0x8, 0x1, 0x9, 0x1, 0xa, 0x2, 0x66, 0x1, 0x4, 0x1, 0x2, 0x3, 0x1, 0x1, 0x8, 0x1, 0x51, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x2bf, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x20c, 0x2, 0xc2, 0x21, 0xbfe, 0x3, 0x8d, 0x1, 0x60, 0x20, 0x22a, 0x6, 0x69, 0x2, 0x75d4, 0x4, 0x1, 0xa, 0x21, 0x1, 0x50, 0x2, 0x110, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x2e1, 0x10, 0x10, 0x7, 0x177, 0x2, 0x25d, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x4, 0x61d2, 0x1, 0x1, 0x3, 0x4, 0x5, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2ec7, 0xf0]);
immutable unicodeInCJK_Compatibility_Ideographs = RleBitSet!ushort.fromRawArray([0xf900, 0x200]);
immutable unicodePattern_Syntax = RleBitSet!ushort.fromRawArray([0x21, 0xf, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x4, 0x22, 0x7, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x4, 0x1, 0x4, 0x1, 0x3, 0x1, 0x17, 0x1, 0x1f, 0x1, 0x1f18, 0x18, 0x8, 0xf, 0x2, 0x13, 0x1, 0xa, 0x131, 0x2d0, 0xa0, 0x276, 0x1e, 0x46c, 0x200, 0x80, 0x181, 0x3, 0x4, 0x19, 0xf, 0x1, 0xcd0d, 0x2, 0x105, 0x2]);
immutable unicodeNew_Tai_Lue = RleBitSet!ushort.fromRawArray([0x1980, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x2]);
immutable unicodeArabic = RleBitSet!ushort.fromRawArray([0x600, 0x5, 0x1, 0x6, 0x1, 0xe, 0x3, 0x1, 0x1, 0x20, 0x1, 0xa, 0xb, 0x9, 0xb, 0x6, 0x1, 0x6c, 0x1, 0x22, 0x50, 0x30, 0x120, 0x1, 0x1, 0xb, 0x37, 0x1b, 0xf251, 0x72, 0x11, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xd, 0x73, 0x5, 0x1, 0x87, 0xf63, 0x1f, 0xdf81, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2]);
immutable unicodeBrahmi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1001, 0x4e, 0x4, 0x1e]);
immutable unicodeInControl_Pictures = RleBitSet!ushort.fromRawArray([0x2400, 0x40]);
immutable unicodeOther_ID_Continue = RleBitSet!ushort.fromRawArray([0xb7, 0x1, 0x2cf, 0x1, 0xfe1, 0x9, 0x668, 0x1]);
immutable unicodeInOl_Chiki = RleBitSet!ushort.fromRawArray([0x1c50, 0x30]);
immutable unicodeInArmenian = RleBitSet!ushort.fromRawArray([0x530, 0x60]);
immutable unicodeInCyrillic = RleBitSet!ushort.fromRawArray([0x400, 0x100]);
immutable unicodeInHigh_Private_Use_Surrogates = RleBitSet!ushort.fromRawArray([0xdb80, 0x80]);
immutable unicodeInNew_Tai_Lue = RleBitSet!ushort.fromRawArray([0x1980, 0x60]);
immutable unicodeInHigh_Surrogates = RleBitSet!ushort.fromRawArray([0xd800, 0x380]);
immutable unicodeQuotation_Mark = RleBitSet!ushort.fromRawArray([0x22, 0x1, 0x4, 0x1, 0x83, 0x1, 0xf, 0x1, 0x1f5c, 0x8, 0x19, 0x2, 0xfd1, 0x4, 0xd, 0x3, 0xce21, 0x4, 0xbd, 0x1, 0x4, 0x1, 0x5a, 0x2]);
immutable unicodeTai_Le = RleBitSet!ushort.fromRawArray([0x1950, 0x1e, 0x2, 0x5]);
immutable unicodeMiao = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x6f01, 0x45, 0xb, 0x2f, 0x10, 0x11]);
immutable unicodeInCherokee = RleBitSet!ushort.fromRawArray([0x13a0, 0x60]);
immutable unicodeCoptic = RleBitSet!ushort.fromRawArray([0x3e2, 0xe, 0x2890, 0x74, 0x5, 0x7]);
immutable unicodeInCyrillic_Supplement = RleBitSet!ushort.fromRawArray([0x500, 0x30]);
immutable unicodeCf = RleBitSet!ushort.fromRawArray([0xad, 0x1, 0x552, 0x5, 0xd8, 0x1, 0x31, 0x1, 0x18fb, 0x5, 0x1a, 0x5, 0x31, 0x5, 0x5, 0x6, 0xde8f, 0x1, 0xf9, 0x3, 0x10c1, 0x1, 0xc0b5, 0x8, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2e92, 0x1, 0x1e, 0x60]);
immutable unicodeInHiragana = RleBitSet!ushort.fromRawArray([0x3040, 0x60]);
immutable unicodeInIPA_Extensions = RleBitSet!ushort.fromRawArray([0x250, 0x60]);
immutable unicodeOgham = RleBitSet!ushort.fromRawArray([0x1680, 0x1d]);
immutable unicodeInCJK_Compatibility_Forms = RleBitSet!ushort.fromRawArray([0xfe30, 0x20]);
immutable unicodeCn = RleBitSet!ushort.fromRawArray([0x378, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0x185, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x1, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xb, 0x5, 0x1, 0x16, 0x2, 0xf0, 0x1, 0x3c, 0x2, 0x65, 0xe, 0x3b, 0x5, 0x2e, 0x2, 0xf, 0x1, 0x1c, 0x2, 0x1, 0x41, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x78, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0x16, 0x5, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xc, 0xf, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0x12, 0xa, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3, 0xc, 0x3a, 0x4, 0x1d, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0xd, 0x25, 0xc6, 0x1, 0x1, 0x5, 0x1, 0x2, 0x179, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x29d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x7, 0xb, 0x17, 0x9, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x6, 0xf, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x3e, 0x2, 0x41, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0x6, 0xe, 0x52, 0x4c, 0x4, 0x2d, 0x3, 0x74, 0x8, 0x3c, 0x3, 0xf, 0x3, 0x33, 0x40, 0x8, 0x8, 0x27, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0x65, 0x5, 0x8, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1a, 0x16, 0x21, 0xf, 0x8a, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0x44c, 0x3, 0xa, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x94, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xe, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x5c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x4, 0x40, 0x1, 0x56, 0x2, 0x67, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0xdf, 0x1, 0x1ab6, 0xa, 0x520d, 0x33, 0x48d, 0x3, 0x37, 0x9, 0x15c, 0x14, 0x58, 0x7, 0x59, 0x8, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x34, 0x4, 0xa, 0x6, 0x38, 0x8, 0x45, 0x9, 0xc, 0x6, 0x1c, 0x4, 0x54, 0xb, 0x1e, 0x3, 0x4e, 0x1, 0xb, 0x4, 0x2, 0x20, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x20, 0x4, 0x43, 0x18, 0x1c, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2e, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x4, 0x226e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x16d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x2, 0x1a, 0x6, 0x7, 0x9, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x87, 0x2, 0x1, 0x1, 0xbe, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xa, 0x5, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2e, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9, 0x7, 0x20, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x49, 0x217, 0x1f, 0x181, 0x4e, 0x4, 0x1e, 0x10, 0x42, 0xe, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xe, 0x3c, 0x49, 0x7, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xd, 0x4, 0xb8c, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x1ffe, 0xf6, 0xa, 0x27, 0x2, 0xb5, 0x22, 0x46, 0xba, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x10e, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88c, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x5ee, 0x1, 0x1e, 0x60, 0x80, 0xf0, 0xfe10, 0xfffe, 0x2, 0xfffe, 0x2]);
immutable unicodeMath = RleBitSet!ushort.fromRawArray([0x2b, 0x1, 0x10, 0x3, 0x1f, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x2d8, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x3, 0x20f, 0x3, 0x1a0d, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x3, 0x1, 0xd, 0x1, 0xe, 0x4, 0x15, 0x5, 0xb, 0x5, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0xe, 0x1, 0x1, 0x44, 0x18, 0x1, 0x6, 0x1, 0x2, 0x4, 0x2, 0x4, 0x20, 0x1, 0x1, 0x6, 0x2, 0xe, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x1b, 0x1, 0x1, 0x18, 0x1, 0xb, 0x7, 0x1bd, 0x2, 0xc, 0xa, 0x4, 0x6, 0x4, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0xb, 0x8, 0x5, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x3, 0x150, 0x40, 0x100, 0x200, 0x30, 0x15, 0x2, 0x6, 0xcfdc, 0x1, 0x337, 0x6, 0x1, 0x1, 0xa2, 0x1, 0x10, 0x3, 0x1d, 0x1, 0x1, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x83, 0x1, 0x6, 0x4, 0xd413, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2]);
immutable unicodeSora_Sompeng = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x10d1, 0x19, 0x7, 0xa]);
immutable unicodeInYi_Syllables = RleBitSet!ushort.fromRawArray([0xa000, 0x490]);
immutable unicodeCs = RleBitSet!ushort.fromRawArray([0xd800, 0x800]);
immutable unicodeInHangul_Jamo_Extended_A = RleBitSet!ushort.fromRawArray([0xa960, 0x20]);
immutable unicodeInGlagolitic = RleBitSet!ushort.fromRawArray([0x2c00, 0x60]);
immutable unicodeInHangul_Jamo_Extended_B = RleBitSet!ushort.fromRawArray([0xd7b0, 0x50]);
immutable unicodeBopomofo = RleBitSet!ushort.fromRawArray([0x2ea, 0x2, 0x2e19, 0x29, 0x72, 0x1b]);
immutable unicodeInSpecials = RleBitSet!ushort.fromRawArray([0xfff0, 0x10]);
immutable unicodeInBamum = RleBitSet!ushort.fromRawArray([0xa6a0, 0x60]);
immutable unicodeInArabic = RleBitSet!ushort.fromRawArray([0x600, 0x100]);
immutable unicodeInMathematical_Operators = RleBitSet!ushort.fromRawArray([0x2200, 0x100]);
immutable unicodeMalayalam = RleBitSet!ushort.fromRawArray([0xd02, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0x10, 0x3, 0x7]);
immutable unicodeInPhonetic_Extensions_Supplement = RleBitSet!ushort.fromRawArray([0x1d80, 0x40]);
immutable unicodeInCJK_Unified_Ideographs_Extension_A = RleBitSet!ushort.fromRawArray([0x3400, 0x19c0]);
immutable unicodeInYijing_Hexagram_Symbols = RleBitSet!ushort.fromRawArray([0x4dc0, 0x40]);
immutable unicodeInTibetan = RleBitSet!ushort.fromRawArray([0xf00, 0x100]);
immutable unicodeSharada = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1181, 0x49, 0x7, 0xa]);
immutable unicodeTakri = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1681, 0x38, 0x8, 0xa]);
immutable unicodeMeroitic_Cursive = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x9a1, 0x18, 0x6, 0x2]);
immutable unicodePattern_White_Space = RleBitSet!ushort.fromRawArray([0x9, 0x5, 0x12, 0x1, 0x64, 0x1, 0x1f88, 0x2, 0x18, 0x2]);
immutable unicodeInYi_Radicals = RleBitSet!ushort.fromRawArray([0xa490, 0x40]);
immutable unicodeInBraille_Patterns = RleBitSet!ushort.fromRawArray([0x2800, 0x100]);
immutable unicodeInscriptional_Pahlavi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb61, 0x13, 0x5, 0x8]);
immutable unicodeInCoptic = RleBitSet!ushort.fromRawArray([0x2c80, 0x80]);
immutable unicodeInDevanagari = RleBitSet!ushort.fromRawArray([0x900, 0x80]);
immutable unicodeSTerm = RleBitSet!ushort.fromRawArray([0x21, 0x1, 0xc, 0x1, 0x10, 0x1, 0x51c, 0x1, 0x1, 0x1, 0x2a, 0x1, 0x95, 0x1, 0xb4, 0x1, 0x2b, 0x3, 0xf6, 0x1, 0x16a, 0x2, 0x6e4, 0x2, 0x316, 0x1, 0x4, 0x2, 0x305, 0x1, 0xc6, 0x2, 0xcc, 0x1, 0x5, 0x1, 0x13a, 0x2, 0x162, 0x4, 0xae, 0x2, 0x2, 0x2, 0xdb, 0x2, 0x41, 0x2, 0x3bc, 0x2, 0x9, 0x3, 0xde4, 0x1, 0x1d3, 0x1, 0x74fc, 0x1, 0x10e, 0x2, 0xe3, 0x1, 0x3, 0x1, 0x17e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x98, 0x2, 0x93, 0x3, 0x90, 0x2, 0xf9, 0x1, 0x5266, 0x1, 0x3, 0x2, 0xa9, 0x1, 0xc, 0x1, 0x10, 0x1, 0x41, 0x1, 0xaf4, 0x2, 0x5ef, 0x2, 0x75, 0x4, 0x7f, 0x3, 0x81, 0x2]);
immutable unicodeXID_Start = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x81, 0x5, 0x1, 0x2, 0x3, 0x3, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x1, 0xd, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x1, 0xa, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x226, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x8b, 0x6, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x77, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x38, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x42, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInTai_Viet = RleBitSet!ushort.fromRawArray([0xaa80, 0x60]);
immutable unicodeHebrew = RleBitSet!ushort.fromRawArray([0x591, 0x37, 0x8, 0x1b, 0x5, 0x5, 0xf528, 0x1a, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0xa]);
immutable unicodeLisu = RleBitSet!ushort.fromRawArray([0xa4d0, 0x30]);
immutable unicodeUgaritic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x381, 0x1e, 0x1, 0x1]);
immutable unicodeInMongolian = RleBitSet!ushort.fromRawArray([0x1800, 0xb0]);
immutable unicodeInBopomofo = RleBitSet!ushort.fromRawArray([0x3100, 0x30]);
immutable unicodeOld_Persian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x3a1, 0x24, 0x4, 0xe]);
immutable unicodeInSundanese_Supplement = RleBitSet!ushort.fromRawArray([0x1cc0, 0x10]);
immutable unicodePhoenician = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x901, 0x1c, 0x3, 0x1]);
immutable unicodeInLisu = RleBitSet!ushort.fromRawArray([0xa4d0, 0x30]);
immutable unicodeInLow_Surrogates = RleBitSet!ushort.fromRawArray([0xdc00, 0x400]);
immutable unicodeBidi_Control = RleBitSet!ushort.fromRawArray([0x200e, 0x2, 0x1a, 0x5]);
immutable unicodeKatakana = RleBitSet!ushort.fromRawArray([0x30a1, 0x5a, 0x2, 0x3, 0xf0, 0x10, 0xd0, 0x2f, 0x1, 0x58, 0xcc0e, 0xa, 0x1, 0x2d, 0xb062, 0x1]);
immutable unicodeInTamil = RleBitSet!ushort.fromRawArray([0xb80, 0x80]);
immutable unicodeInSupplemental_Punctuation = RleBitSet!ushort.fromRawArray([0x2e00, 0x80]);
immutable unicodeInKanbun = RleBitSet!ushort.fromRawArray([0x3190, 0x10]);
immutable unicodeGrapheme_Base = RleBitSet!ushort.fromRawArray([0x20, 0x5f, 0x21, 0xd, 0x1, 0x252, 0x70, 0x8, 0x2, 0x5, 0x5, 0x7, 0x1, 0x1, 0x1, 0x14, 0x1, 0xe0, 0x7, 0x9e, 0x9, 0x26, 0x2, 0x7, 0x1, 0x27, 0x1, 0x2, 0x4, 0x1, 0x2e, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x9, 0x1b, 0x5, 0x5, 0x11, 0xa, 0xb, 0x1, 0x2, 0x2d, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0x6, 0x2, 0x2, 0x1, 0x4, 0x20, 0x2, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0xe, 0x2b, 0x9, 0x7, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x7, 0xf, 0x1, 0x19, 0x5, 0x1, 0x41, 0x1, 0x1, 0xb, 0x56, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x14, 0x1, 0x7, 0x2, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x1, 0x2, 0x6, 0x2, 0x2, 0x2, 0x1, 0x1, 0xd, 0x2, 0x1, 0x3, 0x4, 0x16, 0x7, 0x1, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x3, 0x18, 0x4, 0x1, 0x1, 0x7, 0xa, 0x2, 0x3, 0xe, 0x1, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x4, 0x8, 0x1, 0x1, 0x2, 0x3, 0x1, 0xf, 0x2, 0x4, 0xc, 0x10, 0x2, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x2, 0x1, 0x6, 0x2, 0x2, 0x2, 0xf, 0x2, 0x1, 0x3, 0x4, 0x12, 0xb, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x5, 0x1, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x15, 0x15, 0x6, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x3, 0x4, 0x13, 0x2, 0x6, 0x2, 0x4, 0xa, 0x8, 0x8, 0x2, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x2, 0x1, 0x2, 0x12, 0x1, 0x1, 0x2, 0x4, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x1, 0x2, 0x5, 0x3, 0x1, 0x3, 0x1, 0x1, 0x11, 0x2, 0x4, 0x10, 0x3, 0x7, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x9, 0x2, 0x6, 0x7, 0x13, 0x3, 0xc, 0x30, 0x1, 0x2, 0xb, 0x8, 0x8, 0xd, 0x25, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x9, 0xa, 0x2, 0x4, 0x20, 0x18, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0xe, 0x1, 0x24, 0x12, 0x1, 0x5, 0x1, 0x2, 0x5, 0x31, 0x8, 0x1, 0x6, 0x1, 0xd, 0x25, 0x2d, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x28, 0x1, 0x1, 0x5, 0x1, 0x2, 0x179, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x5, 0x1d, 0x3, 0x1a, 0x6, 0x55, 0xb, 0x29d, 0x3, 0x51, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0x3, 0x2, 0x9, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x3, 0xa, 0x6, 0xa, 0x6, 0xb, 0x3, 0x1, 0x1, 0xa, 0x6, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x6, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x7, 0x1, 0x3, 0x2a, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x3, 0x39, 0x2, 0x3, 0x2, 0x38, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0xd, 0xa, 0x6, 0xa, 0x6, 0xe, 0x56, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x9, 0x4, 0x1b, 0x9, 0x9, 0x5, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x8, 0x30, 0x8, 0x2, 0x5, 0xf, 0x3, 0x33, 0x40, 0x8, 0xb, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x1, 0xb, 0x5, 0x18, 0x7, 0x31, 0x10, 0x2, 0x2, 0x1b, 0x1, 0xd, 0x3, 0x1a, 0x46, 0x8a, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0x44c, 0x3, 0xa, 0xa6, 0x2f, 0x1, 0x2f, 0x1, 0x8f, 0x3, 0x2, 0x5, 0x2d, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x2, 0xf, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x21, 0x3c, 0x44, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x4, 0x2a, 0x6, 0x10, 0x1, 0x56, 0x4, 0x65, 0x5, 0x29, 0x3, 0x5e, 0x1, 0x2b, 0x5, 0x24, 0xc, 0x2f, 0x1, 0xdf, 0x1, 0x1ab6, 0xa, 0x520d, 0x33, 0x48d, 0x3, 0x37, 0x9, 0x15c, 0x14, 0x2f, 0x4, 0x1, 0xa, 0x1a, 0x8, 0x50, 0x2, 0x6, 0x8, 0x8f, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x5, 0x4, 0xa, 0x6, 0x38, 0x8, 0x44, 0xa, 0xc, 0x18, 0xa, 0x4, 0x26, 0x8, 0x19, 0xb, 0x2, 0xb, 0x1e, 0x6, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x11, 0x1, 0xb, 0x4, 0x2, 0x20, 0x29, 0x6, 0x2, 0x2, 0x2, 0xb, 0x3, 0x1, 0x8, 0x1, 0x1, 0x2, 0xa, 0x2, 0x20, 0x4, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x11, 0x2, 0x8, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x25, 0x1, 0x2, 0x1, 0x4, 0x3, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0x18, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7c, 0x11, 0x16d, 0x10, 0x40, 0x2, 0x36, 0x28, 0xe, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x4, 0x5, 0x1, 0x87, 0x4, 0x9d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x3, 0x7, 0x1, 0x7, 0xd, 0x2, 0x2, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x5, 0x3, 0x4, 0x2d, 0x3, 0x54, 0x5, 0xc, 0x34, 0x2d, 0x83, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x1, 0x4, 0xc, 0x1b, 0x35, 0x1e, 0x1, 0x25, 0x4, 0xe, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0x1, 0x9, 0xa0, 0x1c, 0x3, 0x1b, 0x5, 0x1, 0x40, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0xc, 0x8, 0x8, 0x9, 0x7, 0x20, 0x80, 0x36, 0x3, 0x1d, 0x2, 0x1b, 0x5, 0x8, 0x80, 0x49, 0x217, 0x1f, 0x181, 0x1, 0x1, 0x36, 0xf, 0x7, 0x4, 0x1e, 0x12, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x4, 0xe, 0x19, 0x7, 0xa, 0x9, 0x24, 0x5, 0x1, 0x9, 0xe, 0x3e, 0x34, 0x9, 0xa, 0x7, 0xa, 0x4a6, 0x2b, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x9, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xd, 0x4, 0xb8c, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0x4060, 0x2, 0x1ffe, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x1, 0x1, 0x3, 0x4, 0x15, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0xba, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x34, 0x2, 0x10e, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0x88c, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInHebrew = RleBitSet!ushort.fromRawArray([0x590, 0x70]);
immutable unicodeTai_Viet = RleBitSet!ushort.fromRawArray([0xaa80, 0x43, 0x18, 0x5]);
immutable unicodeInHanunoo = RleBitSet!ushort.fromRawArray([0x1720, 0x20]);
immutable unicodeOther_Lowercase = RleBitSet!ushort.fromRawArray([0xaa, 0x1, 0xf, 0x1, 0x1f5, 0x9, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x34, 0x1, 0x19b1, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x2b1, 0x1, 0xd, 0x1, 0x10, 0xd, 0xd3, 0x10, 0x350, 0x1a, 0x792, 0x2, 0x7af2, 0x1, 0x87, 0x2]);
immutable unicodeDash = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x55c, 0x1, 0x33, 0x1, 0xe41, 0x1, 0x405, 0x1, 0x809, 0x6, 0x3d, 0x1, 0x27, 0x1, 0xf, 0x1, 0x186, 0x1, 0xc04, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x1e0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xcd90, 0x2, 0x25, 0x1, 0xa, 0x1, 0xa9, 0x1]);
immutable unicodeInSinhala = RleBitSet!ushort.fromRawArray([0xd80, 0x80]);
immutable unicodeInSundanese = RleBitSet!ushort.fromRawArray([0x1b80, 0x40]);
immutable unicodeInEthiopic_Extended_A = RleBitSet!ushort.fromRawArray([0xab00, 0x30]);
immutable unicodeTibetan = RleBitSet!ushort.fromRawArray([0xf00, 0x48, 0x1, 0x24, 0x4, 0x27, 0x1, 0x24, 0x1, 0xf, 0x1, 0x7, 0x4, 0x2]);
immutable unicodeSamaritan = RleBitSet!ushort.fromRawArray([0x800, 0x2e, 0x2, 0xf]);
immutable unicodeInOptical_Character_Recognition = RleBitSet!ushort.fromRawArray([0x2440, 0x20]);
immutable unicodeInVariation_Selectors = RleBitSet!ushort.fromRawArray([0xfe00, 0x10]);
immutable unicodeInKatakana = RleBitSet!ushort.fromRawArray([0x30a0, 0x60]);
immutable unicodeOld_Italic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x301, 0x1f, 0x1, 0x4]);
immutable unicodeInEnclosed_CJK_Letters_and_Months = RleBitSet!ushort.fromRawArray([0x3200, 0x100]);
immutable unicodeHan = RleBitSet!ushort.fromRawArray([0x2e80, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x2f, 0x1, 0x1, 0x1, 0x19, 0x9, 0xe, 0x4, 0x3c4, 0x19b6, 0x4a, 0x51cd, 0x5933, 0x16e, 0x2, 0x6a, 0xffff, 0x0, 0x527, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeInMyanmar = RleBitSet!ushort.fromRawArray([0x1000, 0xa0]);
immutable unicodeSaurashtra = RleBitSet!ushort.fromRawArray([0xa880, 0x45, 0x9, 0xc]);
immutable unicodeLm = RleBitSet!ushort.fromRawArray([0x2b0, 0x12, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x85, 0x1, 0x5, 0x1, 0x1de, 0x1, 0xe6, 0x1, 0xa4, 0x2, 0x10d, 0x2, 0x4, 0x1, 0x1f, 0x1, 0x9, 0x1, 0x3, 0x1, 0x148, 0x1, 0x4d4, 0x1, 0x7f, 0x1, 0x235, 0x1, 0x6da, 0x1, 0x6b, 0x1, 0x263, 0x1, 0x1d0, 0x6, 0xae, 0x3f, 0xd, 0x1, 0x22, 0x25, 0x2b1, 0x1, 0xd, 0x1, 0x10, 0xd, 0xbdf, 0x2, 0xf1, 0x1, 0xbf, 0x1, 0x1d5, 0x1, 0x2b, 0x5, 0x5, 0x1, 0x61, 0x2, 0x5d, 0x3, 0x6f16, 0x1, 0x4e2, 0x6, 0x10e, 0x1, 0x72, 0x1, 0x97, 0x9, 0x50, 0x1, 0x17, 0x1, 0x6f, 0x2, 0x1d5, 0x1, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0x547b, 0x1, 0x2d, 0x2, 0x6ff3, 0xd]);
immutable unicodeInKannada = RleBitSet!ushort.fromRawArray([0xc80, 0x80]);
immutable unicodeMc = RleBitSet!ushort.fromRawArray([0x903, 0x1, 0x37, 0x1, 0x2, 0x3, 0x8, 0x4, 0x1, 0x2, 0x32, 0x2, 0x3a, 0x3, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x2b, 0x1, 0x3a, 0x3, 0x42, 0x1, 0x3a, 0x3, 0x8, 0x1, 0x1, 0x2, 0x35, 0x2, 0x3a, 0x1, 0x1, 0x1, 0x6, 0x2, 0x2, 0x2, 0xa, 0x1, 0x66, 0x2, 0x1, 0x2, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3d, 0x4, 0x3d, 0x2, 0x3a, 0x1, 0x1, 0x5, 0x2, 0x2, 0x1, 0x2, 0x9, 0x2, 0x2b, 0x2, 0x3a, 0x3, 0x5, 0x3, 0x1, 0x3, 0xa, 0x1, 0x2a, 0x2, 0x4b, 0x3, 0x6, 0x8, 0x12, 0x2, 0x14a, 0x2, 0x3f, 0x1, 0xab, 0x2, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x19, 0x2, 0xa, 0x3, 0x2, 0x7, 0x15, 0x2, 0x2, 0x6, 0x2, 0x1, 0xa, 0x3, 0x719, 0x1, 0x7, 0x8, 0x1, 0x2, 0x15a, 0x4, 0x2, 0x3, 0x4, 0x2, 0x1, 0x6, 0x77, 0x11, 0x7, 0x2, 0x4f, 0x3, 0x39, 0x1, 0x1, 0x1, 0x9, 0x1, 0x1, 0x2, 0x8, 0x6, 0x91, 0x1, 0x30, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x2, 0x3d, 0x1, 0x1e, 0x1, 0x4, 0x2, 0x2, 0x1, 0x1, 0x2, 0x39, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x2, 0x30, 0x8, 0x8, 0x2, 0xab, 0x1, 0x10, 0x2, 0x133a, 0x2, 0x77f3, 0x2, 0x2, 0x1, 0x58, 0x2, 0x32, 0x10, 0x8e, 0x2, 0x2f, 0x1, 0x30, 0x2, 0x4, 0x2, 0x1, 0x4, 0x6e, 0x2, 0x2, 0x2, 0x18, 0x1, 0x2d, 0x1, 0x6f, 0x1, 0x2, 0x2, 0x5, 0x1, 0xed, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x6413, 0x1, 0x1, 0x1, 0x7f, 0x1, 0x2d, 0x3, 0x4, 0x2, 0x73, 0x1, 0x55, 0x1, 0x30, 0x3, 0x9, 0x2, 0x4eb, 0x1, 0x1, 0x2, 0x6, 0x1, 0x589a, 0x2e, 0x61e6, 0x2, 0x6, 0x6]);
immutable unicodeInLimbu = RleBitSet!ushort.fromRawArray([0x1900, 0x50]);
immutable unicodeLo = RleBitSet!ushort.fromRawArray([0xaa, 0x1, 0xf, 0x1, 0x100, 0x1, 0x4, 0x4, 0xd0, 0x1, 0x33b, 0x1b, 0x5, 0x3, 0x2d, 0x20, 0x1, 0xa, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0x18, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x15, 0x16, 0x2a, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0x10, 0x6, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x6, 0x3b, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x17, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x41, 0x2b, 0x2, 0x14c, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x15, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x28, 0x1, 0x43, 0x23, 0x1, 0x34, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0xb0, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x1e, 0x71, 0x4, 0x1, 0x4, 0x3, 0x2, 0x43e, 0x4, 0xbf7, 0x38, 0x18, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x227, 0x1, 0x35, 0x1, 0x4, 0x56, 0x8, 0x1, 0x1, 0x5a, 0x4, 0x1, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x15, 0x1, 0x477, 0x43, 0x28, 0x8, 0x10c, 0x4, 0x10, 0xa, 0x2, 0x42, 0x1, 0x31, 0x46, 0x115, 0x7, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x4d, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x10, 0x1, 0x6, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x2, 0x3, 0xb, 0x7, 0x1, 0xe, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x43, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x69, 0xa, 0x1, 0x2d, 0x2, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x185, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x11, 0x1, 0x8, 0x36, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x80, 0x4e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0xc91, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x40af, 0x2, 0x3dfe, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeMe = RleBitSet!ushort.fromRawArray([0x488, 0x2, 0x1c53, 0x4, 0x1, 0x3, 0x858b, 0x3]);
immutable unicodeInMeetei_Mayek = RleBitSet!ushort.fromRawArray([0xabc0, 0x40]);
immutable unicodeLt = RleBitSet!ushort.fromRawArray([0x1c5, 0x1, 0x2, 0x1, 0x2, 0x1, 0x26, 0x1, 0x1d95, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x1, 0xf, 0x1, 0x2f, 0x1]);
immutable unicodeInKhmer = RleBitSet!ushort.fromRawArray([0x1780, 0x80]);
immutable unicodeInEthiopic_Extended = RleBitSet!ushort.fromRawArray([0x2d80, 0x60]);
immutable unicodeInVedic_Extensions = RleBitSet!ushort.fromRawArray([0x1cd0, 0x30]);
immutable unicodeMn = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x113, 0x5, 0x109, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0x15, 0x10, 0x1, 0x65, 0x7, 0x2, 0x6, 0x2, 0x2, 0x1, 0x4, 0x23, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0x9, 0x22, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x5, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xc, 0x8, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0xb, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x2bf, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x9, 0x1, 0x2d, 0x3, 0x9b, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x80, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x98, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x2d0, 0xd, 0x4, 0x1, 0x3, 0xc, 0xbfe, 0x3, 0x8d, 0x1, 0x60, 0x20, 0x22a, 0x4, 0x6b, 0x2, 0x75d4, 0x1, 0x4, 0xa, 0x21, 0x1, 0x50, 0x2, 0x110, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x6c, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x63, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x2a, 0x2, 0x8, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x2e1, 0x10, 0x10, 0x7, 0x3d6, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x45, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x4, 0x61d4, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2ec7, 0xf0]);
immutable unicodeNd = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x626, 0xa, 0x86, 0xa, 0xc6, 0xa, 0x19c, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0x76, 0xa, 0xe0, 0xa, 0x76, 0xa, 0x46, 0xa, 0x116, 0xa, 0x46, 0xa, 0x746, 0xa, 0x26, 0xa, 0x12c, 0xa, 0x80, 0xa, 0xa6, 0xa, 0x6, 0xa, 0xb6, 0xa, 0x56, 0xa, 0x86, 0xa, 0x6, 0xa, 0x89c6, 0xa, 0x2a6, 0xa, 0x26, 0xa, 0xc6, 0xa, 0x76, 0xa, 0x196, 0xa, 0x5316, 0xa, 0x586, 0xa, 0xbbc, 0xa, 0x80, 0xa, 0x3c, 0xa, 0x90, 0xa, 0x4e6, 0xa, 0xc104, 0x32]);
immutable unicodeBamum = RleBitSet!ushort.fromRawArray([0xa6a0, 0x58, 0xc108, 0x239]);
immutable unicodeJavanese = RleBitSet!ushort.fromRawArray([0xa980, 0x4e, 0x1, 0xb, 0x4, 0x2]);
immutable unicodeTifinagh = RleBitSet!ushort.fromRawArray([0x2d30, 0x38, 0x7, 0x2, 0xe, 0x1]);
immutable unicodeInHalfwidth_and_Fullwidth_Forms = RleBitSet!ushort.fromRawArray([0xff00, 0xf0]);
immutable unicodeInDevanagari_Extended = RleBitSet!ushort.fromRawArray([0xa8e0, 0x20]);
immutable unicodeInIdeographic_Description_Characters = RleBitSet!ushort.fromRawArray([0x2ff0, 0x10]);
immutable unicodeNl = RleBitSet!ushort.fromRawArray([0x16ee, 0x3, 0xa6f, 0x23, 0x2, 0x4, 0xe7e, 0x1, 0x19, 0x9, 0xe, 0x3, 0x76ab, 0xa, 0x5a50, 0x35, 0x1cc, 0x1, 0x8, 0x1, 0x86, 0x5, 0x202a, 0x63]);
immutable unicodeInHangul_Compatibility_Jamo = RleBitSet!ushort.fromRawArray([0x3130, 0x60]);
immutable unicodeNo = RleBitSet!ushort.fromRawArray([0xb2, 0x2, 0x5, 0x1, 0x2, 0x3, 0x935, 0x6, 0x178, 0x6, 0x78, 0x3, 0x85, 0x7, 0xf1, 0x6, 0x1b4, 0xa, 0x435, 0x14, 0x473, 0xa, 0x1e0, 0x1, 0x695, 0x1, 0x3, 0x6, 0x6, 0xa, 0xc6, 0x10, 0x29, 0x1, 0x2d6, 0x3c, 0x4e, 0x16, 0x276, 0x1e, 0x569, 0x1, 0x494, 0x4, 0x8a, 0xa, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0x7570, 0x6, 0x58d1, 0x2d, 0x41, 0x4, 0x11, 0x1, 0x195, 0x4, 0x534, 0x8, 0xb6, 0x6, 0x124, 0x8, 0x35, 0x2, 0xd9, 0x8, 0x18, 0x8, 0x2e0, 0x1f, 0x1d3, 0x14, 0xc2fa, 0x12, 0x1d8e, 0xb]);
immutable unicodeInOriya = RleBitSet!ushort.fromRawArray([0xb00, 0x80]);
immutable unicodeLogical_Order_Exception = RleBitSet!ushort.fromRawArray([0xe40, 0x5, 0x7b, 0x5, 0x9bf0, 0x2, 0x2, 0x1, 0x1, 0x2]);
immutable unicodeCased = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0xc3, 0x1, 0x4, 0x4, 0xd0, 0x1, 0x24, 0x7, 0x2, 0x1e, 0x5, 0x60, 0x1, 0x2a, 0x4, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0xa, 0x27, 0xb18, 0x26, 0x1, 0x1, 0x5, 0x1, 0xc32, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0x6, 0x4, 0x1, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x20, 0x3, 0x2, 0x331, 0x34, 0x716, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x7912, 0x2e, 0x12, 0x18, 0x8a, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x3, 0x5305, 0x7, 0xc, 0x5, 0x409, 0x1a, 0x6, 0x1a, 0x4a5, 0x50, 0xcfb0, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8]);
immutable unicodeInscriptional_Parthian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb41, 0x16, 0x2, 0x8]);
immutable unicodeSyloti_Nagri = RleBitSet!ushort.fromRawArray([0xa800, 0x2c]);
immutable unicodeInBengali = RleBitSet!ushort.fromRawArray([0x980, 0x80]);
immutable unicodeInTagalog = RleBitSet!ushort.fromRawArray([0x1700, 0x20]);
immutable unicodeInMyanmar_Extended_A = RleBitSet!ushort.fromRawArray([0xaa60, 0x20]);
immutable unicodePc = RleBitSet!ushort.fromRawArray([0x5f, 0x1, 0x1fdf, 0x2, 0x13, 0x1, 0xddde, 0x2, 0x18, 0x3, 0xef, 0x1]);
immutable unicodeInCyrillic_Extended_A = RleBitSet!ushort.fromRawArray([0x2de0, 0x20]);
immutable unicodePd = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x55c, 0x1, 0x33, 0x1, 0xe41, 0x1, 0x405, 0x1, 0x809, 0x6, 0xe01, 0x1, 0x2, 0x1, 0x1f, 0x2, 0x1e0, 0x1, 0x13, 0x1, 0x6f, 0x1, 0xcd90, 0x2, 0x25, 0x1, 0xa, 0x1, 0xa9, 0x1]);
immutable unicodeInCyrillic_Extended_B = RleBitSet!ushort.fromRawArray([0xa640, 0x60]);
immutable unicodePe = RleBitSet!ushort.fromRawArray([0x29, 0x1, 0x33, 0x1, 0x1f, 0x1, 0xebd, 0x1, 0x1, 0x1, 0x75e, 0x1, 0x9a9, 0x1, 0x37, 0x1, 0xf, 0x1, 0x29b, 0x1, 0x43e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x194, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x425, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1df, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0xcd1f, 0x1, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0xaa, 0x1, 0x33, 0x1, 0x1f, 0x1, 0x2, 0x1, 0x2, 0x1]);
immutable unicodeHanunoo = RleBitSet!ushort.fromRawArray([0x1720, 0x15]);
immutable unicodePf = RleBitSet!ushort.fromRawArray([0xbb, 0x1, 0x1f5d, 0x1, 0x3, 0x1, 0x1c, 0x1, 0xdc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1]);
immutable unicodePi = RleBitSet!ushort.fromRawArray([0xab, 0x1, 0x1f6c, 0x1, 0x2, 0x2, 0x2, 0x1, 0x19, 0x1, 0xdc8, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x1, 0xf, 0x1, 0x3, 0x1]);
immutable unicodeSinhala = RleBitSet!ushort.fromRawArray([0xd82, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x3]);
immutable unicodeInJavanese = RleBitSet!ushort.fromRawArray([0xa980, 0x60]);
immutable unicodeInTifinagh = RleBitSet!ushort.fromRawArray([0x2d30, 0x50]);
immutable unicodeInGeometric_Shapes = RleBitSet!ushort.fromRawArray([0x25a0, 0x60]);
immutable unicodeInArabic_Presentation_Forms_A = RleBitSet!ushort.fromRawArray([0xfb50, 0x2b0]);
immutable unicodeInArabic_Presentation_Forms_B = RleBitSet!ushort.fromRawArray([0xfe70, 0x90]);
immutable unicodePo = RleBitSet!ushort.fromRawArray([0x21, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x44, 0x1, 0x5, 0x1, 0xe, 0x2, 0x7, 0x1, 0x2be, 0x1, 0x8, 0x1, 0x1d2, 0x6, 0x29, 0x1, 0x36, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2c, 0x2, 0x14, 0x2, 0x1, 0x2, 0xd, 0x1, 0x2, 0x2, 0x4a, 0x4, 0x66, 0x1, 0x2b, 0xe, 0xe9, 0x3, 0x36, 0xf, 0x1f, 0x1, 0x105, 0x2, 0xa, 0x1, 0x17f, 0x1, 0x303, 0x1, 0x5a, 0x1, 0xa, 0x2, 0xa8, 0xf, 0x1, 0x1, 0x70, 0x1, 0x4a, 0x5, 0x4, 0x2, 0x6f, 0x6, 0xab, 0x1, 0x264, 0x9, 0x304, 0x2, 0x7c, 0x3, 0x47, 0x2, 0x9d, 0x3, 0x1, 0x3, 0x25, 0x6, 0x1, 0x4, 0x139, 0x2, 0xd8, 0x2, 0x80, 0x7, 0x1, 0x6, 0xac, 0x7, 0x9b, 0x4, 0x3b, 0x5, 0x3e, 0x2, 0x40, 0x8, 0xb, 0x1, 0x342, 0x2, 0x8, 0x8, 0x8, 0x9, 0x2, 0x4, 0x2, 0x3, 0x3, 0xb, 0x1, 0x1, 0x1, 0xa, 0xc9a, 0x4, 0x1, 0x2, 0x70, 0x1, 0x8f, 0x2, 0x4, 0x3, 0x2, 0x1, 0x2, 0x9, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0xa, 0x5, 0x1, 0xa, 0x1c7, 0x3, 0x39, 0x1, 0xbd, 0x1, 0x7402, 0x2, 0x10d, 0x3, 0x63, 0x1, 0xa, 0x1, 0x73, 0x6, 0x17c, 0x4, 0x56, 0x2, 0x28, 0x3, 0x33, 0x2, 0x2f, 0x1, 0x61, 0xd, 0x10, 0x2, 0x7c, 0x4, 0x7e, 0x2, 0x10, 0x2, 0xf9, 0x1, 0x5224, 0x7, 0x2, 0x1, 0x16, 0x1, 0x14, 0x2, 0x2, 0x4, 0x3, 0x3, 0x1, 0x4, 0x7, 0x3, 0x6, 0x1, 0x1, 0x2, 0x95, 0x3, 0x1, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0xa, 0x2, 0x3, 0x2, 0x1b, 0x1, 0x24, 0x1, 0x2, 0x2, 0x19a, 0x3, 0x29c, 0x1, 0x30, 0x1, 0x486, 0x1, 0xc7, 0x1, 0x1f, 0x1, 0x110, 0x9, 0x26, 0x1, 0xb9, 0x7, 0x507, 0x7, 0x6d, 0x2, 0x1, 0x4, 0x7e, 0x4, 0x81, 0x4, 0x12a7, 0x4]);
immutable unicodeTerminal_Punctuation = RleBitSet!ushort.fromRawArray([0x21, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x33e, 0x1, 0x8, 0x1, 0x201, 0x1, 0x39, 0x1, 0x48, 0x1, 0xe, 0x1, 0x3, 0x1, 0xb4, 0x1, 0x2b, 0xb, 0x1, 0x1, 0xeb, 0x2, 0x36, 0xf, 0x1f, 0x1, 0x105, 0x2, 0x4f4, 0x2, 0xac, 0x1, 0x4, 0x6, 0x137, 0x2, 0x315, 0x8, 0x304, 0x2, 0x7c, 0x3, 0xe6, 0x3, 0x3, 0x1, 0x27, 0x4, 0x2, 0x2, 0x13a, 0x2, 0x162, 0x4, 0xae, 0x2, 0x1, 0x3, 0xdb, 0x5, 0x3e, 0x2, 0x3bc, 0x2, 0x9, 0x3, 0xde4, 0x1, 0x1d2, 0x2, 0x74fb, 0x2, 0x10d, 0x3, 0xe3, 0x5, 0x17e, 0x2, 0x56, 0x2, 0x5f, 0x1, 0x97, 0x3, 0x93, 0x3, 0x7f, 0x1, 0x10, 0x2, 0xf9, 0x1, 0x5264, 0x3, 0x1, 0x4, 0xa9, 0x1, 0xa, 0x1, 0x1, 0x1, 0xb, 0x2, 0x3, 0x1, 0x41, 0x1, 0x2, 0x1, 0x43a, 0x1, 0x30, 0x1, 0x486, 0x1, 0xc7, 0x1, 0x21a, 0x6, 0x507, 0x7, 0x70, 0x4, 0x7f, 0x3, 0x81, 0x2, 0x12a9, 0x4]);
immutable unicodePs = RleBitSet!ushort.fromRawArray([0x28, 0x1, 0x32, 0x1, 0x1f, 0x1, 0xebe, 0x1, 0x1, 0x1, 0x75e, 0x1, 0x97e, 0x1, 0x3, 0x1, 0x26, 0x1, 0x37, 0x1, 0xf, 0x1, 0x29b, 0x1, 0x43e, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x50, 0x1, 0x20, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x194, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x40, 0x1, 0x1, 0x1, 0x21, 0x1, 0x425, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1df, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0xcd20, 0x1, 0xd8, 0x1, 0x1d, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x11, 0x1, 0x1, 0x1, 0x1, 0x1, 0xaa, 0x1, 0x32, 0x1, 0x1f, 0x1, 0x3, 0x1, 0x2, 0x1]);
immutable unicodeInSpacing_Modifier_Letters = RleBitSet!ushort.fromRawArray([0x2b0, 0x50]);
immutable unicodeOther_Alphabetic = RleBitSet!ushort.fromRawArray([0x345, 0x1, 0x26a, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x48, 0xb, 0x30, 0xd, 0x1, 0x7, 0x10, 0x1, 0x65, 0x7, 0x4, 0x4, 0x2, 0x2, 0x4, 0x1, 0x23, 0x1, 0x1e, 0x10, 0x66, 0xb, 0x65, 0x2, 0x3, 0x9, 0x1, 0x3, 0x1, 0x4, 0xb7, 0x6, 0x6, 0xf, 0x1, 0x4, 0x36, 0x2, 0x2, 0xf, 0x1, 0x2, 0x5, 0x3, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0xa, 0x1, 0xa, 0x2, 0x1d, 0x3, 0x3a, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x3, 0x3a, 0x8, 0x1, 0x3, 0x1, 0x2, 0x15, 0x2, 0x1d, 0x3, 0x3a, 0x7, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0xa, 0x2, 0x1e, 0x1, 0x3b, 0x5, 0x3, 0x3, 0x1, 0x3, 0xa, 0x1, 0x29, 0x3, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0xb, 0x2, 0x1e, 0x2, 0x3a, 0x7, 0x1, 0x3, 0x1, 0x3, 0xa, 0x1, 0xa, 0x2, 0x1e, 0x2, 0x4b, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0x3d, 0x1, 0x2, 0x7, 0x12, 0x1, 0x63, 0x1, 0x2, 0x6, 0x1, 0x2, 0x10, 0x1, 0xa3, 0x11, 0xb, 0xb, 0x1, 0x24, 0x6e, 0xc, 0x1, 0x1, 0x2, 0x4, 0x17, 0x4, 0x4, 0x3, 0x1, 0x1, 0x4, 0x2, 0x8, 0x4, 0xd, 0x5, 0x15, 0x2, 0x2c1, 0x1, 0x3b2, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x1e, 0x2, 0x42, 0x13, 0xe0, 0x1, 0x76, 0xc, 0x4, 0x9, 0x77, 0x11, 0x7, 0x2, 0x4d, 0x5, 0x39, 0xa, 0x2, 0x14, 0x8b, 0x5, 0x30, 0xf, 0x3c, 0x3, 0x1e, 0x9, 0x2, 0x2, 0x39, 0xb, 0x32, 0x12, 0xbc, 0x2, 0x7c2, 0x34, 0x8f6, 0x20, 0x7874, 0x8, 0x23, 0x1, 0x183, 0x5, 0x58, 0x2, 0x32, 0x10, 0x62, 0x5, 0x1c, 0xc, 0x2d, 0x4, 0x30, 0xc, 0x69, 0xe, 0xc, 0x1, 0x8, 0x2, 0x62, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x1, 0x2c, 0x5, 0x5, 0x1, 0xed, 0x8, 0x4f33, 0x1, 0xee2, 0x3, 0x1, 0x2, 0x5, 0x4, 0x5f0, 0x3, 0x35, 0xe, 0x3c, 0x1, 0x2d, 0x9, 0x47, 0x3, 0x24, 0xc, 0x4d, 0x3, 0x30, 0xd, 0x4eb, 0xb, 0x589b, 0x2e]);
immutable unicodeLepcha = RleBitSet!ushort.fromRawArray([0x1c00, 0x38, 0x3, 0xf, 0x3, 0x3]);
immutable unicodeKayah_Li = RleBitSet!ushort.fromRawArray([0xa900, 0x30]);
immutable unicodeNko = RleBitSet!ushort.fromRawArray([0x7c0, 0x3b]);
immutable unicodeInLao = RleBitSet!ushort.fromRawArray([0xe80, 0x80]);
immutable unicodeInNKo = RleBitSet!ushort.fromRawArray([0x7c0, 0x40]);
immutable unicodeInGreek_and_Coptic = RleBitSet!ushort.fromRawArray([0x370, 0x90]);
immutable unicodePhags_Pa = RleBitSet!ushort.fromRawArray([0xa840, 0x38]);
immutable unicodeCypriot = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x801, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x1]);
immutable unicodeInModifier_Tone_Letters = RleBitSet!ushort.fromRawArray([0xa700, 0x20]);
immutable unicodeMyanmar = RleBitSet!ushort.fromRawArray([0x1000, 0xa0, 0x99c0, 0x1c]);
immutable unicodeSc = RleBitSet!ushort.fromRawArray([0x24, 0x1, 0x7d, 0x4, 0x4e9, 0x1, 0x7b, 0x1, 0x3e6, 0x2, 0x7, 0x1, 0xf5, 0x1, 0x107, 0x1, 0x245, 0x1, 0x99b, 0x1, 0x8c4, 0x1a, 0x877e, 0x1, 0x55c3, 0x1, 0x6c, 0x1, 0x9a, 0x1, 0xdb, 0x2, 0x3, 0x2]);
immutable unicodeInPrivate_Use_Area = RleBitSet!ushort.fromRawArray([0xe000, 0x1900]);
immutable unicodeInPhonetic_Extensions = RleBitSet!ushort.fromRawArray([0x1d00, 0x80]);
immutable unicodeInCombining_Diacritical_Marks = RleBitSet!ushort.fromRawArray([0x300, 0x70]);
immutable unicodeCham = RleBitSet!ushort.fromRawArray([0xaa00, 0x37, 0x9, 0xe, 0x2, 0xa, 0x2, 0x4]);
immutable unicodeInArabic_Supplement = RleBitSet!ushort.fromRawArray([0x750, 0x30]);
immutable unicodeSk = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x3, 0x1, 0x209, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0xe, 0x2, 0x1c37, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0x109c, 0x2, 0x7663, 0x17, 0x9, 0x2, 0x67, 0x2, 0x5427, 0x10, 0x37c, 0x1, 0x1, 0x1, 0xa2, 0x1]);
immutable unicodeImperial_Aramaic = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x841, 0x16, 0x1, 0x9]);
immutable unicodeSm = RleBitSet!ushort.fromRawArray([0x2b, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x2d, 0x1, 0x4, 0x1, 0x25, 0x1, 0x1f, 0x1, 0x2fe, 0x1, 0x20f, 0x3, 0x1a3b, 0x1, 0xd, 0x1, 0x27, 0x3, 0xd, 0x3, 0x8b, 0x1, 0x27, 0x5, 0x6, 0x1, 0x44, 0x5, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x5a, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x1d5, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x150, 0x5, 0x2, 0x1f, 0xa, 0x10, 0x100, 0x83, 0x16, 0x3f, 0x4, 0x20, 0x2, 0x102, 0x30, 0x15, 0x2, 0x6, 0xcfdc, 0x1, 0x338, 0x1, 0x1, 0x3, 0xa4, 0x1, 0x10, 0x3, 0x3d, 0x1, 0x1, 0x1, 0x83, 0x1, 0x6, 0x4, 0xd6d4, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x172c, 0x2]);
immutable unicodeKharoshthi = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xa01, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x9, 0x8, 0x9]);
immutable unicodeInCombining_Half_Marks = RleBitSet!ushort.fromRawArray([0xfe20, 0x10]);
immutable unicodeSo = RleBitSet!ushort.fromRawArray([0xa6, 0x1, 0x2, 0x1, 0x4, 0x1, 0x1, 0x1, 0x3d1, 0x1, 0x18b, 0x2, 0xce, 0x1, 0xa, 0x1, 0x13, 0x2, 0xf7, 0x1, 0x203, 0x1, 0x175, 0x1, 0x82, 0x6, 0x1, 0x1, 0x84, 0x1, 0xf9, 0x1, 0x187, 0x3, 0xf, 0x1, 0x1, 0x3, 0x2, 0x6, 0x14, 0x1, 0x1, 0x1, 0x1, 0x1, 0x85, 0x8, 0x1, 0x6, 0x1, 0x2, 0x5, 0x4, 0xc5, 0x2, 0x2f0, 0xa, 0x5a6, 0x1, 0x9d, 0x22, 0x161, 0xa, 0x9, 0x9, 0x583, 0x2, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0xe, 0x1, 0x1, 0x2, 0x1, 0x1, 0x45, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1f, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1f, 0x10c, 0x8, 0x4, 0x14, 0x2, 0x7, 0x2, 0x51, 0x1, 0x1e, 0x19, 0x28, 0x6, 0x12, 0xc, 0x27, 0x19, 0xb, 0x51, 0x4e, 0x16, 0xb7, 0x1, 0x9, 0x1, 0x36, 0x8, 0x6f, 0x1, 0x90, 0x1, 0x67, 0x2c, 0x2c, 0x40, 0x100, 0x200, 0x30, 0x15, 0x2, 0x9, 0xa, 0x18b, 0x6, 0x195, 0x1a, 0x1, 0x59, 0xc, 0xd6, 0x1a, 0xc, 0x8, 0x1, 0xd, 0x2, 0xc, 0x1, 0x15, 0x2, 0x6, 0x2, 0x150, 0x2, 0x4, 0xa, 0x20, 0x24, 0x1c, 0x1f, 0xb, 0x1e, 0x8, 0x1, 0xf, 0x20, 0xa, 0x27, 0xf, 0x3f, 0x1, 0x100, 0x19c0, 0x40, 0x5690, 0x37, 0x361, 0x4, 0xa, 0x2, 0x1, 0x1, 0x23d, 0x3, 0x5383, 0x1, 0x1e6, 0x1, 0x3, 0x1, 0x4, 0x2, 0xd, 0x2, 0x139, 0x9, 0x39, 0x11, 0x6, 0xc, 0x34, 0x2d, 0xce03, 0xf6, 0xa, 0x27, 0x2, 0x3c, 0x5, 0x3, 0x16, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x22, 0x42, 0x3, 0x1, 0xba, 0x57, 0x1ca9, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x30, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1d, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74]);
immutable unicodeInTai_Le = RleBitSet!ushort.fromRawArray([0x1950, 0x30]);
immutable unicodeInMandaic = RleBitSet!ushort.fromRawArray([0x840, 0x20]);
immutable unicodeCase_Ignorable = RleBitSet!ushort.fromRawArray([0x27, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x47, 0x1, 0x4, 0x1, 0x1, 0x1, 0x4, 0x1, 0x2, 0x2, 0x1f7, 0xc0, 0x4, 0x2, 0x4, 0x1, 0x9, 0x2, 0x1, 0x1, 0xfb, 0x7, 0xcf, 0x1, 0x37, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2c, 0x1, 0xb, 0x5, 0xb, 0xb, 0x25, 0x1, 0xa, 0x15, 0x10, 0x1, 0x65, 0x8, 0x1, 0xa, 0x1, 0x4, 0x21, 0x1, 0x1, 0x1, 0x1e, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x4, 0x1, 0x1b, 0x18, 0x2b, 0x3, 0x88, 0x1b, 0x1, 0x3, 0x37, 0x1, 0x1, 0x1, 0x4, 0x8, 0x4, 0x1, 0x3, 0x7, 0xa, 0x2, 0xd, 0x1, 0xf, 0x1, 0x3a, 0x1, 0x4, 0x4, 0x8, 0x1, 0x14, 0x2, 0x1d, 0x2, 0x39, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x1e, 0x2, 0x3, 0x1, 0xb, 0x2, 0x39, 0x1, 0x4, 0x5, 0x1, 0x2, 0x4, 0x1, 0x14, 0x2, 0x1d, 0x1, 0x3a, 0x1, 0x2, 0x1, 0x1, 0x4, 0x8, 0x1, 0x8, 0x1, 0xb, 0x2, 0x1e, 0x1, 0x3d, 0x1, 0xc, 0x1, 0x70, 0x3, 0x5, 0x3, 0x1, 0x4, 0x7, 0x2, 0xb, 0x2, 0x58, 0x1, 0x2, 0x1, 0x6, 0x1, 0x5, 0x2, 0x14, 0x2, 0x5d, 0x4, 0x8, 0x1, 0x14, 0x2, 0x66, 0x1, 0x7, 0x3, 0x1, 0x1, 0x5a, 0x1, 0x2, 0x7, 0xb, 0x9, 0x62, 0x1, 0x2, 0x6, 0x1, 0x2, 0x9, 0x1, 0x1, 0x6, 0x4a, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x37, 0xe, 0x1, 0x5, 0x1, 0x2, 0x5, 0xb, 0x1, 0x24, 0x9, 0x1, 0x66, 0x4, 0x1, 0x6, 0x1, 0x2, 0x2, 0x2, 0x19, 0x2, 0x4, 0x3, 0x10, 0x4, 0xd, 0x1, 0x2, 0x2, 0x6, 0x1, 0xf, 0x1, 0x5e, 0x1, 0x260, 0x3, 0x3b2, 0x3, 0x1d, 0x3, 0x1d, 0x2, 0x1e, 0x2, 0x40, 0x2, 0x1, 0x7, 0x8, 0x1, 0x2, 0xb, 0x3, 0x1, 0x5, 0x1, 0x2d, 0x3, 0x35, 0x1, 0x65, 0x1, 0x76, 0x3, 0x4, 0x2, 0x9, 0x1, 0x6, 0x3, 0xdb, 0x2, 0x3d, 0x1, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x2, 0x8, 0x6, 0xa, 0x2, 0x1, 0x27, 0x1, 0x58, 0x4, 0x30, 0x1, 0x1, 0x5, 0x1, 0x1, 0x5, 0x1, 0x28, 0x9, 0xc, 0x2, 0x20, 0x4, 0x2, 0x2, 0x1, 0x1, 0x3a, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x3, 0x3a, 0x8, 0x2, 0x2, 0x40, 0x6, 0x52, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0xd, 0x1, 0x22, 0x4c, 0x15, 0x4, 0x1bd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0xc, 0x5, 0x8, 0x2, 0xa, 0x1, 0x2, 0x1, 0x2, 0x5, 0x31, 0x5, 0x5, 0x6, 0x1, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0x21, 0xb8b, 0x2, 0x71, 0x3, 0x7d, 0x1, 0xf, 0x1, 0x60, 0x20, 0x2f, 0x1, 0x1d5, 0x1, 0x24, 0x4, 0x3, 0x5, 0x5, 0x1, 0x5d, 0x6, 0x5d, 0x3, 0x6f16, 0x1, 0x4e2, 0x6, 0x10e, 0x1, 0x62, 0x4, 0x1, 0xa, 0x1, 0x1, 0x1f, 0x1, 0x50, 0x2, 0xe, 0x22, 0x4e, 0x1, 0x17, 0x3, 0x6d, 0x2, 0x8, 0x1, 0x3, 0x1, 0x4, 0x1, 0x19, 0x2, 0x9d, 0x1, 0x1b, 0x12, 0x34, 0x8, 0x19, 0xb, 0x2e, 0x3, 0x30, 0x1, 0x2, 0x4, 0x2, 0x1, 0x12, 0x1, 0x59, 0x6, 0x2, 0x2, 0x2, 0x2, 0xc, 0x1, 0x8, 0x1, 0x23, 0x1, 0x3f, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1b, 0x1, 0xe, 0x2, 0x5, 0x2, 0x1, 0x1, 0xee, 0x1, 0x2, 0x1, 0x4, 0x1, 0x4f30, 0x1, 0x93, 0x10, 0x23e, 0x10, 0x3, 0x1, 0xc, 0x7, 0x2b, 0x1, 0x2, 0x1, 0xa9, 0x1, 0x7, 0x1, 0x6, 0x1, 0xb, 0x1, 0x23, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x15, 0x3, 0x201, 0x1, 0x803, 0x3, 0x1, 0x2, 0x5, 0x4, 0x28, 0x3, 0x4, 0x1, 0x5c1, 0x1, 0x36, 0xf, 0x39, 0x2, 0x31, 0x4, 0x2, 0x2, 0x2, 0x1, 0x42, 0x3, 0x24, 0x5, 0x1, 0x8, 0x4b, 0x2, 0x34, 0x9, 0x4ec, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x1, 0x58d7, 0x11, 0x61c7, 0x3, 0x9, 0x10, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2dc8, 0x1, 0x1e, 0x60, 0x80, 0xf0]);
immutable unicodeInLepcha = RleBitSet!ushort.fromRawArray([0x1c00, 0x50]);
immutable unicodeCanadian_Aboriginal = RleBitSet!ushort.fromRawArray([0x1400, 0x280, 0x230, 0x46]);
immutable unicodeInGreek_Extended = RleBitSet!ushort.fromRawArray([0x1f00, 0x100]);
immutable unicodeInCJK_Unified_Ideographs = RleBitSet!ushort.fromRawArray([0x4e00, 0x5200]);
immutable unicodeIDS_Trinary_Operator = RleBitSet!ushort.fromRawArray([0x2ff2, 0x2]);
immutable unicodeInMiscellaneous_Symbols = RleBitSet!ushort.fromRawArray([0x2600, 0x100]);
immutable unicodeInLatin_Extended_Additional = RleBitSet!ushort.fromRawArray([0x1e00, 0x100]);
immutable unicodeChakma = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x1101, 0x35, 0x1, 0xe]);
immutable unicodeRadical = RleBitSet!ushort.fromRawArray([0x2e80, 0x1a, 0x1, 0x59, 0xc, 0xd6]);
immutable unicodeMongolian = RleBitSet!ushort.fromRawArray([0x1800, 0x2, 0x2, 0x1, 0x1, 0x9, 0x1, 0xa, 0x6, 0x58, 0x8, 0x2b]);
immutable unicodeInVai = RleBitSet!ushort.fromRawArray([0xa500, 0x140]);
immutable unicodeLatin = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1c1, 0x27, 0x5, 0x1a1b, 0x26, 0x6, 0x31, 0x5, 0x4, 0x5, 0xd, 0x1, 0x46, 0x41, 0x100, 0x171, 0x1, 0xd, 0x1, 0x10, 0xd, 0x8d, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0xad7, 0x20, 0x7aa2, 0x66, 0x3, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x8, 0x5300, 0x7, 0x41a, 0x1a, 0x6, 0x1a]);
immutable unicodeTagalog = RleBitSet!ushort.fromRawArray([0x1700, 0xd, 0x1, 0x7]);
immutable unicodeRejang = RleBitSet!ushort.fromRawArray([0xa930, 0x24, 0xb, 0x1]);
immutable unicodeInCombining_Diacritical_Marks_for_Symbols = RleBitSet!ushort.fromRawArray([0x20d0, 0x30]);
immutable unicodeInSupplemental_Mathematical_Operators = RleBitSet!ushort.fromRawArray([0x2a00, 0x100]);
immutable unicodeInCham = RleBitSet!ushort.fromRawArray([0xaa00, 0x60]);
immutable unicodeAvestan = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0xb01, 0x36, 0x3, 0x7]);
immutable unicodeInMiscellaneous_Mathematical_Symbols_A = RleBitSet!ushort.fromRawArray([0x27c0, 0x30]);
immutable unicodeInMiscellaneous_Mathematical_Symbols_B = RleBitSet!ushort.fromRawArray([0x2980, 0x80]);
immutable unicodeInTelugu = RleBitSet!ushort.fromRawArray([0xc00, 0x80]);
immutable unicodeLimbu = RleBitSet!ushort.fromRawArray([0x1900, 0x1d, 0x3, 0xc, 0x4, 0xc, 0x4, 0x1, 0x3, 0xc]);
immutable unicodeInGeneral_Punctuation = RleBitSet!ushort.fromRawArray([0x2000, 0x70]);
immutable unicodeUnified_Ideograph = RleBitSet!ushort.fromRawArray([0x3400, 0x19b6, 0x4a, 0x51cd, 0x5a41, 0x2, 0x1, 0x1, 0x1, 0x2, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0xffff, 0x0, 0x5d7, 0xa6d7, 0x29, 0x1035, 0xb, 0xde]);
immutable unicodeInBuhid = RleBitSet!ushort.fromRawArray([0x1740, 0x20]);
immutable unicodeKhmer = RleBitSet!ushort.fromRawArray([0x1780, 0x5e, 0x2, 0xa, 0x6, 0xa, 0x1e6, 0x20]);
immutable unicodeXID_Continue = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x3, 0x3, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x1, 0x5, 0x2, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x205, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x2, 0x2, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x8b, 0x6, 0xda, 0x12, 0x40, 0x2, 0x36, 0x28, 0xa, 0x6, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x21, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7e, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x88, 0x1, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x2163, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0x1bb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x6ed, 0xf0]);
immutable unicodeInLatin_Extended_A = RleBitSet!ushort.fromRawArray([0x100, 0x80]);
immutable unicodeInLatin_Extended_B = RleBitSet!ushort.fromRawArray([0x180, 0xd0]);
immutable unicodeInLatin_Extended_C = RleBitSet!ushort.fromRawArray([0x2c60, 0x20]);
immutable unicodeInLatin_Extended_D = RleBitSet!ushort.fromRawArray([0xa720, 0xe0]);
immutable unicodeInCJK_Compatibility = RleBitSet!ushort.fromRawArray([0x3300, 0x100]);
immutable unicodeBuginese = RleBitSet!ushort.fromRawArray([0x1a00, 0x1c, 0x2, 0x2]);
immutable unicodeInGeorgian_Supplement = RleBitSet!ushort.fromRawArray([0x2d00, 0x30]);
immutable unicodeDefault_Ignorable_Code_Point = RleBitSet!ushort.fromRawArray([0xad, 0x1, 0x2a1, 0x1, 0xe0f, 0x2, 0x653, 0x2, 0x55, 0x3, 0x7fd, 0x5, 0x1a, 0x5, 0x31, 0x10, 0x10f4, 0x1, 0xcc9b, 0x10, 0xef, 0x1, 0xa0, 0x1, 0x4f, 0x9, 0xd17a, 0x8, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2e91, 0x1000]);
immutable unicodeInCJK_Strokes = RleBitSet!ushort.fromRawArray([0x31c0, 0x30]);
immutable unicodeVai = RleBitSet!ushort.fromRawArray([0xa500, 0x12c]);
immutable unicodeHangul = RleBitSet!ushort.fromRawArray([0x1100, 0x100, 0x1e2e, 0x2, 0x101, 0x5e, 0x71, 0x1f, 0x41, 0x1f, 0x76e1, 0x1d, 0x283, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x27a4, 0x1f, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3]);
immutable unicodeInRejang = RleBitSet!ushort.fromRawArray([0xa930, 0x30]);
immutable unicodeInMiscellaneous_Technical = RleBitSet!ushort.fromRawArray([0x2300, 0x100]);
immutable unicodeHyphen = RleBitSet!ushort.fromRawArray([0x2d, 0x1, 0x7f, 0x1, 0x4dc, 0x1, 0x127b, 0x1, 0x809, 0x2, 0xe05, 0x1, 0x2e3, 0x1, 0xcd67, 0x1, 0xa9, 0x1, 0x57, 0x1]);
immutable unicodeThai = RleBitSet!ushort.fromRawArray([0xe01, 0x3a, 0x5, 0x1c]);
immutable unicodeSundanese = RleBitSet!ushort.fromRawArray([0x1b80, 0x40, 0x100, 0x8]);
immutable unicodeInRunic = RleBitSet!ushort.fromRawArray([0x16a0, 0x60]);
immutable unicodeDiacritic = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x1, 0x1, 0x47, 0x1, 0x6, 0x1, 0x4, 0x1, 0x2, 0x2, 0x1f7, 0x9f, 0x1, 0x8, 0x5, 0x6, 0x11, 0x2, 0x4, 0x1, 0x9, 0x2, 0xfd, 0x5, 0xd1, 0x1, 0x37, 0x11, 0x1, 0x1b, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x86, 0x8, 0x4, 0x2, 0x86, 0x2, 0x4, 0x2, 0x3, 0x3, 0x43, 0x1b, 0x5b, 0xb, 0x3a, 0xb, 0x22, 0x2, 0xca, 0x1b, 0x3d, 0x1, 0x10, 0x1, 0x3, 0x4, 0x1c, 0x1, 0x4a, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x6e, 0x1, 0x10, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x7c, 0x6, 0x1, 0x1, 0x79, 0x5, 0x4b, 0x2, 0x1b, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x2, 0x42, 0x3, 0x1, 0x2, 0x3e, 0x1, 0x70, 0x1, 0x1, 0x2, 0x4c, 0x7, 0x1, 0x1, 0xa, 0x2, 0x72d, 0xb, 0x9, 0x1, 0x15b, 0x3, 0x139, 0x8, 0x2, 0x1, 0xb4, 0x1, 0xf, 0x1, 0x26, 0x9, 0x36, 0x2, 0x8a, 0x2, 0x40, 0x6, 0x52, 0x19, 0x4, 0x1, 0x6, 0x1, 0x37, 0x3f, 0x59, 0xc, 0x2d, 0x3, 0x1bd, 0x1, 0x1, 0x3, 0xb, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x2, 0xcf0, 0x3, 0x13d, 0x1, 0x1fa, 0x6, 0x69, 0x4, 0x5f, 0x1, 0x7572, 0x1, 0xc, 0x2, 0x1, 0x1, 0x70, 0x2, 0x25, 0xb, 0x66, 0x1, 0x6f, 0x2, 0xca, 0x1, 0x1b, 0x12, 0x39, 0x4, 0x24, 0x1, 0x5f, 0x1, 0xc, 0x1, 0xba, 0x1, 0x43, 0x4, 0x33, 0x1, 0xf5, 0x2, 0x4f30, 0x1, 0x301, 0x7, 0x117, 0x1, 0x1, 0x1, 0x2f, 0x1, 0x2d, 0x2, 0x43, 0x1, 0x10d5, 0x2, 0x78, 0x2, 0x8b, 0x1, 0x4f5, 0x2, 0x58d7, 0x11, 0x61c7, 0x3, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4]);
immutable unicodeYi = RleBitSet!ushort.fromRawArray([0xa000, 0x48d, 0x3, 0x37]);
immutable unicodeInAlphabetic_Presentation_Forms = RleBitSet!ushort.fromRawArray([0xfb00, 0x50]);
immutable unicodeExtender = RleBitSet!ushort.fromRawArray([0xb7, 0x1, 0x218, 0x2, 0x36e, 0x1, 0x1b9, 0x1, 0x64b, 0x1, 0x7f, 0x1, 0x943, 0x1, 0x38, 0x1, 0x263, 0x1, 0x18e, 0x1, 0x44, 0x1, 0x1389, 0x1, 0x2b, 0x5, 0x67, 0x2, 0x5d, 0x3, 0x6f16, 0x1, 0x5f6, 0x1, 0x3c2, 0x1, 0xa0, 0x1, 0x6c, 0x1, 0x15, 0x2, 0x547b, 0x1]);
immutable unicodeGlagolitic = RleBitSet!ushort.fromRawArray([0x2c00, 0x2f, 0x1, 0x2f]);
immutable unicodeInSuperscripts_and_Subscripts = RleBitSet!ushort.fromRawArray([0x2070, 0x30]);
immutable unicodeInMalayalam = RleBitSet!ushort.fromRawArray([0xd00, 0x80]);
immutable unicodeJoin_Control = RleBitSet!ushort.fromRawArray([0x200c, 0x2]);
immutable unicodeInBatak = RleBitSet!ushort.fromRawArray([0x1bc0, 0x40]);
immutable unicodeThaana = RleBitSet!ushort.fromRawArray([0x780, 0x32]);
immutable unicodeSoft_Dotted = RleBitSet!ushort.fromRawArray([0x69, 0x2, 0xc4, 0x1, 0x119, 0x1, 0x1e, 0x1, 0x34, 0x1, 0x14, 0x1, 0x140, 0x1, 0x62, 0x1, 0x1, 0x1, 0x1909, 0x1, 0x33, 0x1, 0xd, 0x1, 0x3, 0x1, 0x84, 0x1, 0x9d, 0x1, 0x1a5, 0x1, 0xd6, 0x2, 0xb32, 0x1, 0xffff, 0x0, 0xa7a6, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2, 0x32, 0x2]);
immutable unicodeBraille = RleBitSet!ushort.fromRawArray([0x2800, 0x100]);
immutable unicodeInGurmukhi = RleBitSet!ushort.fromRawArray([0xa00, 0x80]);
immutable unicodeMandaic = RleBitSet!ushort.fromRawArray([0x840, 0x1c, 0x2, 0x1]);
immutable unicodeInUnified_Canadian_Aboriginal_Syllabics = RleBitSet!ushort.fromRawArray([0x1400, 0x280]);
immutable unicodeInDingbats = RleBitSet!ushort.fromRawArray([0x2700, 0xc0]);
immutable unicodeZl = RleBitSet!ushort.fromRawArray([0x2028, 0x1]);
immutable unicodeInBuginese = RleBitSet!ushort.fromRawArray([0x1a00, 0x20]);
immutable unicodeInSaurashtra = RleBitSet!ushort.fromRawArray([0xa880, 0x60]);
immutable unicodeInCJK_Symbols_and_Punctuation = RleBitSet!ushort.fromRawArray([0x3000, 0x40]);
immutable unicodeInKangxi_Radicals = RleBitSet!ushort.fromRawArray([0x2f00, 0xe0]);
immutable unicodeZp = RleBitSet!ushort.fromRawArray([0x2029, 0x1]);
immutable unicodeHex_Digit = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x6, 0x1a, 0x6, 0xfea9, 0xa, 0x7, 0x6, 0x1a, 0x6]);
immutable unicodeZs = RleBitSet!ushort.fromRawArray([0x20, 0x1, 0x7f, 0x1, 0x15df, 0x1, 0x18d, 0x1, 0x7f1, 0xb, 0x24, 0x1, 0x2f, 0x1, 0xfa0, 0x1]);
immutable unicodeInThai = RleBitSet!ushort.fromRawArray([0xe00, 0x80]);
immutable unicodeDevanagari = RleBitSet!ushort.fromRawArray([0x900, 0x51, 0x2, 0x11, 0x2, 0x12, 0x1, 0x7, 0x9f60, 0x1c]);
immutable unicodeInArrows = RleBitSet!ushort.fromRawArray([0x2190, 0x70]);
immutable unicodeEthiopic = RleBitSet!ushort.fromRawArray([0x1200, 0x49, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x20, 0x3, 0x1a, 0x19e6, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x7d22, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7]);
immutable unicodeInCurrency_Symbols = RleBitSet!ushort.fromRawArray([0x20a0, 0x30]);
immutable unicodeGreek = RleBitSet!ushort.fromRawArray([0x370, 0x4, 0x1, 0x3, 0x2, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x3f, 0xe, 0x10, 0x1926, 0x5, 0x32, 0x5, 0x4, 0x5, 0x54, 0x1, 0x140, 0x16, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0xf, 0x1, 0xe, 0x2, 0x6, 0x1, 0x13, 0x2, 0x3, 0x1, 0x9, 0x127, 0x1, 0xe019, 0x4b, 0xd075, 0x46]);
immutable unicodeOl_Chiki = RleBitSet!ushort.fromRawArray([0x1c50, 0x30]);
immutable unicodeID_Start = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x81, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x48, 0x1b, 0x5, 0x3, 0x2d, 0x2b, 0x23, 0x2, 0x1, 0x63, 0x1, 0x1, 0xf, 0x2, 0x7, 0x2, 0xa, 0x3, 0x2, 0x1, 0x10, 0x1, 0x1, 0x1e, 0x1d, 0x59, 0xb, 0x1, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x16, 0x4, 0x1, 0x9, 0x1, 0x3, 0x1, 0x17, 0x19, 0x47, 0x1, 0x1, 0xb, 0x57, 0x36, 0x3, 0x1, 0x12, 0x1, 0x7, 0xa, 0xf, 0x7, 0x1, 0x7, 0x5, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x1, 0x10, 0x1, 0xd, 0x2, 0x1, 0x3, 0xe, 0x2, 0x13, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1f, 0x4, 0x1, 0x1, 0x13, 0x3, 0x10, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x12, 0x1, 0xf, 0x2, 0x23, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x1, 0x1e, 0x2, 0x1, 0x3, 0xf, 0x1, 0x11, 0x1, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x16, 0x1, 0x34, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x1a, 0x2, 0x6, 0x2, 0x23, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x1, 0x20, 0x1, 0x1, 0x2, 0xf, 0x2, 0x12, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x1, 0x10, 0x1, 0x11, 0x2, 0x18, 0x6, 0x5, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3a, 0x30, 0x1, 0x2, 0xc, 0x7, 0x3a, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x4, 0x1, 0x2, 0x9, 0x1, 0x2, 0x5, 0x1, 0x1, 0x15, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x1b, 0x5, 0x73, 0x2b, 0x14, 0x1, 0x10, 0x6, 0x4, 0x4, 0x3, 0x1, 0x3, 0x2, 0x7, 0x3, 0x4, 0xd, 0xc, 0x1, 0x11, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x25, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x4, 0xe, 0x12, 0xe, 0x12, 0xe, 0xd, 0x1, 0x3, 0xf, 0x34, 0x23, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x29, 0x1, 0x1, 0x5, 0x46, 0xa, 0x1d, 0x33, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x15, 0x7, 0x38, 0x17, 0x9, 0x35, 0x52, 0x1, 0x5d, 0x2f, 0x11, 0x7, 0x37, 0x1e, 0xd, 0x2, 0xa, 0x2c, 0x1a, 0x24, 0x29, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x4, 0x3, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x226, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x4, 0x5, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x10, 0x19, 0x8, 0x50, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x17, 0x1d, 0x34, 0xe, 0x32, 0x3e, 0x6, 0x3, 0x1, 0xe, 0x1c, 0xa, 0x17, 0x19, 0x1d, 0x7, 0x2f, 0x1c, 0x1, 0x30, 0x29, 0x17, 0x3, 0x1, 0x8, 0x14, 0x17, 0x3, 0x1, 0x5, 0x30, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0xb, 0x7, 0x3, 0xc, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x23, 0x1d, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0x1, 0x1, 0xa, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x1, 0xf, 0x4, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3ba, 0x35, 0x4b, 0x2d, 0x20, 0x19, 0x1a, 0x24, 0x5c, 0x30, 0xe, 0x4, 0x4bb, 0x2b, 0x955, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x1, 0x42, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeID_Continue = RleBitSet!ushort.fromRawArray([0x30, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x1, 0x1, 0x2, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x11, 0x75, 0x1, 0x2, 0x2, 0x4, 0x8, 0x5, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x1, 0x5, 0x2, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x9, 0x2d, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x4a, 0x4, 0x66, 0x1, 0x8, 0x2, 0xa, 0x1, 0x13, 0x2, 0x1, 0x10, 0x3b, 0x2, 0x65, 0xe, 0x36, 0x4, 0x1, 0x5, 0x2e, 0x12, 0x1c, 0x44, 0x1, 0x1, 0xb, 0x37, 0x1b, 0x1, 0x64, 0x2, 0xa, 0x1, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x2, 0x9, 0x2, 0x2, 0x2, 0x4, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0x2, 0xc, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x1, 0x1, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x1, 0x7, 0x4, 0x1, 0x1, 0x7, 0x10, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x3, 0x1, 0x3, 0x2, 0x1, 0xf, 0x4, 0x2, 0xa, 0x11, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x2, 0x9, 0x2, 0x2, 0x2, 0x3, 0x8, 0x2, 0x4, 0x2, 0x1, 0x5, 0x2, 0xa, 0x1, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x4, 0x2, 0x1, 0x6, 0x1, 0xe, 0xa, 0x11, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x1, 0x2, 0x6, 0x4, 0x2, 0xa, 0x12, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x2, 0x9, 0x1, 0x3, 0x1, 0x4, 0x7, 0x2, 0x7, 0x1, 0x1, 0x4, 0x2, 0xa, 0x1, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x5, 0x8, 0x1, 0x8, 0x4, 0x2, 0xa, 0xa, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x3, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0xf, 0x1, 0xa, 0x27, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x1, 0x6, 0x2, 0xa, 0x2, 0x4, 0x20, 0x1, 0x17, 0x2, 0x6, 0xa, 0xb, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0xa, 0x1, 0x24, 0x4, 0x14, 0x1, 0x12, 0x1, 0x24, 0x9, 0x1, 0x39, 0x4a, 0x6, 0x4e, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x2, 0x3, 0x9, 0x9, 0xe, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x7, 0xb, 0x15, 0xb, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x54, 0x3, 0x1, 0x4, 0x2, 0x2, 0xa, 0x21, 0x3, 0x2, 0xa, 0x6, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0xc, 0xa, 0x28, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x6, 0xb, 0x25, 0x1c, 0x4, 0x3f, 0x1, 0x1d, 0x2, 0xb, 0x6, 0xa, 0xd, 0x1, 0x58, 0x4c, 0x4, 0xa, 0x11, 0x9, 0xc, 0x74, 0xc, 0x38, 0x8, 0xa, 0x3, 0x31, 0x52, 0x3, 0x1, 0x23, 0x9, 0xe7, 0x15, 0x11a, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x42, 0x2, 0x13, 0x1, 0x1c, 0x1, 0xd, 0x1, 0x10, 0xd, 0x33, 0xd, 0x4, 0x1, 0x3, 0xc, 0x11, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x2, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0xa77, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x9, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0xf, 0x18, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x205, 0x3, 0x19, 0xf, 0x1, 0x5, 0x2, 0x5, 0x4, 0x56, 0x2, 0x7, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x1c, 0x14, 0x30, 0x4, 0xa, 0x1, 0x19, 0x7, 0x53, 0x25, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0x30, 0x18, 0x34, 0xc, 0x45, 0xb, 0xa, 0x6, 0x18, 0x3, 0x1, 0x4, 0x2e, 0x2, 0x24, 0xc, 0x1d, 0x3, 0x41, 0xe, 0xb, 0x26, 0x37, 0x9, 0xe, 0x2, 0xa, 0x6, 0x17, 0x3, 0x2, 0x4, 0x43, 0x18, 0x3, 0x2, 0x10, 0x2, 0x5, 0xa, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x1, 0x2, 0x2, 0xa, 0x6, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x4, 0x10, 0x10, 0x7, 0xc, 0x2, 0x18, 0x3, 0x20, 0x5, 0x1, 0x87, 0x13, 0xa, 0x7, 0x1a, 0x4, 0x1, 0x1, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x88, 0x1, 0x82, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x2, 0xa, 0x356, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x4, 0x3, 0x4, 0x1, 0x20, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x47, 0x1f, 0xa, 0x10, 0x3b, 0x15, 0x19, 0x7, 0xa, 0x6, 0x35, 0x1, 0xa, 0x40, 0x45, 0xb, 0xa, 0x4a6, 0x38, 0x8, 0xa, 0x936, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x10, 0x11, 0x4060, 0x2, 0x2163, 0x5, 0x3, 0x6, 0x8, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x94, 0x3, 0x1bb, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x6ed, 0xf0]);
immutable unicodeTagbanwa = RleBitSet!ushort.fromRawArray([0x1760, 0xd, 0x1, 0x3, 0x1, 0x2]);
immutable unicodeOther_Uppercase = RleBitSet!ushort.fromRawArray([0x2160, 0x10, 0x346, 0x1a]);
immutable unicodeInOgham = RleBitSet!ushort.fromRawArray([0x1680, 0x20]);
immutable unicodeInThaana = RleBitSet!ushort.fromRawArray([0x780, 0x40]);
immutable unicodeInKhmer_Symbols = RleBitSet!ushort.fromRawArray([0x19e0, 0x20]);
immutable unicodeCommon = RleBitSet!ushort.fromRawArray([0x0, 0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xf, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1c1, 0x27, 0x5, 0x5, 0x2, 0x14, 0x74, 0x1, 0x9, 0x1, 0x6, 0x1, 0x1, 0x1, 0x201, 0x1, 0x82, 0x1, 0xe, 0x1, 0x3, 0x1, 0x20, 0x1, 0x1f, 0xa, 0x73, 0x1, 0x286, 0x2, 0x4d9, 0x1, 0x195, 0x4, 0x122, 0x1, 0x5ef, 0x3, 0x47, 0x2, 0xcb, 0x2, 0x1, 0x1, 0x4cd, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0x2, 0x309, 0xc, 0x2, 0x57, 0x5, 0x7, 0x3, 0xb, 0x1, 0xf, 0x11, 0x1a, 0x46, 0x26, 0x1, 0x3, 0x2, 0x6, 0x1, 0x1b, 0x1, 0x11, 0x29, 0x1, 0x6, 0x264, 0xc, 0x27, 0x19, 0xb, 0x15, 0x2a0, 0x1, 0xff, 0x100, 0x24d, 0x3, 0xa, 0x2a6, 0x3c, 0x1b4, 0xc, 0x4, 0x5, 0x1, 0x1, 0x1, 0x19, 0xf, 0x8, 0x4, 0x4, 0x5b, 0x2, 0x3, 0x1, 0x5a, 0x2, 0x93, 0x10, 0x20, 0x24, 0x3c, 0x40, 0x1f, 0x51, 0x88, 0xa8, 0x19c0, 0x40, 0x5900, 0x22, 0x66, 0x3, 0xa5, 0xa, 0x5504, 0x2, 0xbd, 0x1, 0x12, 0xa, 0x16, 0x23, 0x1, 0x13, 0x1, 0x4, 0x93, 0x1, 0x1, 0x20, 0x1a, 0x6, 0x1a, 0xb, 0xa, 0x1, 0x2d, 0x2, 0x40, 0x7, 0x1, 0x7, 0xa, 0x5, 0x102, 0x3, 0x4, 0x2d, 0x3, 0x9, 0x50, 0xc, 0x34, 0x2d, 0xce03, 0xf6, 0xa, 0x27, 0x2, 0x3e, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0x30, 0x122, 0x57, 0x9, 0x12, 0x8e, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x124, 0x2, 0x32, 0x1800, 0x2c, 0x4, 0x64, 0xc, 0xf, 0x2, 0xe, 0x2, 0xf, 0x1, 0xf, 0x20, 0xb, 0x5, 0x1f, 0x1, 0x3c, 0x4, 0x2b, 0x4b, 0x1a, 0x1, 0x2, 0xd, 0x2b, 0x5, 0x9, 0x7, 0x2, 0xae, 0x21, 0xf, 0x6, 0x1, 0x46, 0x3, 0x14, 0xc, 0x25, 0x1, 0x5, 0x15, 0x11, 0xf, 0x3f, 0x1, 0x1, 0x1, 0xb6, 0x1, 0x4, 0x3, 0x3e, 0x2, 0x4, 0xc, 0x18, 0x93, 0x46, 0x4, 0xb, 0x30, 0x46, 0x3a, 0x74, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x899, 0x1, 0x1e, 0x60]);
immutable unicodeInCommon_Indic_Number_Forms = RleBitSet!ushort.fromRawArray([0xa830, 0x10]);
immutable unicodeInSmall_Form_Variants = RleBitSet!ushort.fromRawArray([0xfe50, 0x20]);
immutable unicodeIdeographic = RleBitSet!ushort.fromRawArray([0x3006, 0x2, 0x19, 0x9, 0xe, 0x3, 0x3c5, 0x19b6, 0x4a, 0x51cd, 0x5933, 0x16e, 0x2, 0x6a, 0xffff, 0x0, 0x527, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeGrapheme_Link = RleBitSet!ushort.fromRawArray([0x94d, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7f, 0x1, 0x7c, 0x1, 0x6f, 0x1, 0x149, 0x1, 0xb4, 0x2, 0x6d9, 0x1, 0x1f, 0x1, 0x9d, 0x1, 0x28d, 0x1, 0xe3, 0x1, 0x65, 0x2, 0x46, 0x2, 0x118b, 0x1, 0x7a86, 0x1, 0xbd, 0x1, 0x8e, 0x1, 0x6c, 0x1, 0x135, 0x1, 0xf6, 0x1, 0x5e51, 0x1, 0x606, 0x1, 0x72, 0x1, 0x79, 0x2, 0x8b, 0x1, 0x4f5, 0x1]);
immutable unicodeGeorgian = RleBitSet!ushort.fromRawArray([0x10a0, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x4, 0x1c00, 0x26, 0x1, 0x1, 0x5, 0x1]);
immutable unicodeOsmanya = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x481, 0x1e, 0x2, 0xa]);
immutable unicodeInEthiopic = RleBitSet!ushort.fromRawArray([0x1200, 0x180]);
immutable unicodeInEnclosed_Alphanumerics = RleBitSet!ushort.fromRawArray([0x2460, 0xa0]);
immutable unicodeCuneiform = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x2001, 0x36f, 0x91, 0x63, 0xd, 0x4]);
immutable unicodeSyriac = RleBitSet!ushort.fromRawArray([0x700, 0xe, 0x1, 0x3c, 0x2, 0x3]);
immutable unicodeInVertical_Forms = RleBitSet!ushort.fromRawArray([0xfe10, 0x10]);
immutable unicodeNoncharacter_Code_Point = RleBitSet!ushort.fromRawArray([0xfdd0, 0x20, 0x20e, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2, 0xfffe, 0x2]);
immutable unicodeInMiscellaneous_Symbols_and_Arrows = RleBitSet!ushort.fromRawArray([0x2b00, 0x100]);
immutable unicodeInMeetei_Mayek_Extensions = RleBitSet!ushort.fromRawArray([0xaae0, 0x20]);
immutable unicodeMeetei_Mayek = RleBitSet!ushort.fromRawArray([0xaae0, 0x17, 0xc9, 0x2e, 0x2, 0xa]);
immutable unicodeOther_Grapheme_Extend = RleBitSet!ushort.fromRawArray([0x9be, 0x1, 0x18, 0x1, 0x166, 0x1, 0x18, 0x1, 0x66, 0x1, 0x18, 0x1, 0xea, 0x1, 0x12, 0x2, 0x67, 0x1, 0x18, 0x1, 0x77, 0x1, 0xf, 0x1, 0x122c, 0x2, 0x1020, 0x2, 0xcf6e, 0x2, 0xd1c5, 0x1, 0x8, 0x5]);
immutable unicodeOther_Math = RleBitSet!ushort.fromRawArray([0x5e, 0x1, 0x371, 0x3, 0x2, 0x1, 0x1a, 0x2, 0x2, 0x2, 0x1c20, 0x1, 0x1b, 0x3, 0xb, 0x1, 0x20, 0x4, 0x18, 0x2, 0xe, 0x2, 0x41, 0xd, 0x4, 0x1, 0x3, 0x2, 0x4, 0x5, 0x12, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x3, 0x2, 0x2, 0x2, 0x1, 0x3, 0x1, 0x6, 0x3, 0x4, 0x5, 0x5, 0x4b, 0x5, 0x2, 0x4, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x5, 0x2, 0x2, 0x4, 0x2, 0x4, 0x12, 0x2, 0x2, 0x1, 0x1, 0x1, 0x7, 0x1, 0x1, 0x6, 0x2, 0x1ce, 0x2, 0x1, 0x1, 0x18, 0x1, 0x11, 0x1, 0x1bd, 0x2, 0xc, 0x9, 0x5, 0x5, 0x5, 0x2, 0x2, 0x2, 0x3, 0x5, 0xe, 0x1, 0x1, 0x1, 0x2, 0x6, 0x18, 0x2, 0x39, 0x1, 0x1, 0x1, 0x1d, 0x4, 0x9, 0x2, 0x156, 0x2, 0x1f, 0xa, 0x193, 0x16, 0x3f, 0x4, 0x20, 0x2, 0xd463, 0x1, 0x1, 0x1, 0x4, 0x1, 0xd3, 0x1, 0x1, 0x1, 0xd4c1, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x2, 0x32, 0x1600, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11]);
immutable unicodeInBox_Drawing = RleBitSet!ushort.fromRawArray([0x2500, 0x80]);
immutable unicodeInTagbanwa = RleBitSet!ushort.fromRawArray([0x1760, 0x20]);
immutable unicodeInHangul_Syllables = RleBitSet!ushort.fromRawArray([0xac00, 0x2bb0]);
immutable unicodeLydian = RleBitSet!ushort.fromRawArray([0xffff, 0x0, 0x921, 0x1a, 0x5, 0x1]);
immutable unicodeInKatakana_Phonetic_Extensions = RleBitSet!ushort.fromRawArray([0x31f0, 0x10]);
immutable unicodeInTai_Tham = RleBitSet!ushort.fromRawArray([0x1a20, 0x90]);
immutable unicodeInNumber_Forms = RleBitSet!ushort.fromRawArray([0x2150, 0x40]);
immutable unicodeInBopomofo_Extended = RleBitSet!ushort.fromRawArray([0x31a0, 0x20]);
immutable unicodeInherited = RleBitSet!ushort.fromRawArray([0x300, 0x70, 0x115, 0x2, 0x1c4, 0xb, 0x9, 0x1, 0x10, 0x1, 0x2e0, 0x2, 0x137d, 0x3, 0x1, 0xd, 0x1, 0x7, 0x4, 0x1, 0x6, 0x1, 0xcb, 0x27, 0x15, 0x4, 0x20c, 0x2, 0xc2, 0x21, 0xf39, 0x4, 0x6b, 0x2, 0xcd65, 0x10, 0x10, 0x7, 0x3d6, 0x1, 0xcf69, 0x3, 0x11, 0x8, 0x2, 0x7, 0x1e, 0x4, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0xffff, 0x0, 0x2f5e, 0xf0]);
immutable unicodeInLetterlike_Symbols = RleBitSet!ushort.fromRawArray([0x2100, 0x50]);
immutable unicodeBuhid = RleBitSet!ushort.fromRawArray([0x1740, 0x14]);
immutable unicodeInArabic_Extended_A = RleBitSet!ushort.fromRawArray([0x8a0, 0x60]);
immutable unicodeInSyloti_Nagri = RleBitSet!ushort.fromRawArray([0xa800, 0x30]);
immutable unicodeInSamaritan = RleBitSet!ushort.fromRawArray([0x800, 0x40]);
immutable unicodeInGeorgian = RleBitSet!ushort.fromRawArray([0x10a0, 0x60]);
immutable unicodeAlphabetic = RleBitSet!ushort.fromRawArray([0x41, 0x1a, 0x6, 0x1a, 0x2f, 0x1, 0xa, 0x1, 0x4, 0x1, 0x5, 0x17, 0x1, 0x1f, 0x1, 0x1ca, 0x4, 0xc, 0xe, 0x5, 0x7, 0x1, 0x1, 0x1, 0x56, 0x1, 0x2a, 0x5, 0x1, 0x2, 0x2, 0x4, 0x8, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x14, 0x1, 0x53, 0x1, 0x8b, 0x8, 0x9e, 0x9, 0x26, 0x2, 0x1, 0x7, 0x27, 0x28, 0xe, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1b, 0x5, 0x3, 0x1d, 0xb, 0x5, 0x38, 0x1, 0x7, 0xe, 0x66, 0x1, 0x8, 0x4, 0x8, 0x4, 0x3, 0xa, 0x3, 0x2, 0x1, 0x10, 0x30, 0xd, 0x65, 0x18, 0x21, 0x9, 0x2, 0x4, 0x1, 0x5, 0x18, 0x2, 0x13, 0x13, 0x19, 0x47, 0x1, 0x1, 0xb, 0x37, 0x6, 0x6, 0xf, 0x1, 0x3c, 0x1, 0x10, 0x1, 0x3, 0x4, 0xf, 0xd, 0x7, 0x1, 0x7, 0x1, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x1, 0x3, 0x4, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x8, 0x1, 0x4, 0x2, 0x1, 0x5, 0xc, 0x2, 0xf, 0x3, 0x1, 0x6, 0x4, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x4, 0x5, 0x4, 0x2, 0x2, 0x2, 0x4, 0x1, 0x7, 0x4, 0x1, 0x1, 0x11, 0x6, 0xb, 0x3, 0x1, 0x9, 0x1, 0x3, 0x1, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x9, 0x1, 0x3, 0x1, 0x2, 0x3, 0x1, 0xf, 0x4, 0x1d, 0x3, 0x1, 0x8, 0x2, 0x2, 0x2, 0x16, 0x1, 0x7, 0x1, 0x2, 0x1, 0x5, 0x3, 0x8, 0x2, 0x2, 0x2, 0x2, 0x9, 0x2, 0x4, 0x2, 0x1, 0x5, 0xd, 0x1, 0x10, 0x2, 0x1, 0x6, 0x3, 0x3, 0x1, 0x4, 0x3, 0x2, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0xc, 0x4, 0x5, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x6, 0x1, 0x29, 0x3, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x1, 0x2, 0x6, 0x4, 0x1e, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x17, 0x1, 0xa, 0x1, 0x5, 0x3, 0x8, 0x1, 0x3, 0x1, 0x3, 0x8, 0x2, 0x7, 0x1, 0x1, 0x4, 0xd, 0x2, 0xf, 0x2, 0x1, 0x8, 0x1, 0x3, 0x1, 0x29, 0x2, 0x8, 0x1, 0x3, 0x1, 0x3, 0x1, 0x1, 0x8, 0x1, 0x8, 0x4, 0x16, 0x6, 0x2, 0x2, 0x1, 0x12, 0x3, 0x18, 0x1, 0x9, 0x1, 0x1, 0x2, 0x7, 0x8, 0x6, 0x1, 0x1, 0x1, 0x8, 0x12, 0x2, 0xd, 0x3a, 0x5, 0x7, 0x6, 0x1, 0x33, 0x2, 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x6, 0x4, 0x1, 0x7, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0xd, 0x1, 0x3, 0x2, 0x5, 0x1, 0x1, 0x6, 0x1, 0xe, 0x4, 0x20, 0x1, 0x3f, 0x8, 0x1, 0x24, 0x4, 0x11, 0x6, 0x10, 0x1, 0x24, 0x43, 0x37, 0x1, 0x1, 0x2, 0x5, 0x10, 0x13, 0x2, 0x4, 0x5, 0x19, 0x7, 0x1, 0xd, 0x2, 0x2, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x2b, 0x1, 0x14d, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0x29, 0x1, 0x4, 0x2, 0x21, 0x1, 0x4, 0x2, 0x7, 0x1, 0x1, 0x1, 0x4, 0x2, 0xf, 0x1, 0x39, 0x1, 0x4, 0x2, 0x43, 0x4, 0x1, 0x20, 0x10, 0x10, 0x55, 0xc, 0x26c, 0x2, 0x11, 0x1, 0x1a, 0x5, 0x4b, 0x3, 0x3, 0xf, 0xd, 0x1, 0x6, 0xc, 0x14, 0xc, 0x14, 0xc, 0xd, 0x1, 0x3, 0x1, 0x2, 0xc, 0x34, 0x2, 0x13, 0xe, 0x1, 0x4, 0x1, 0x43, 0x58, 0x8, 0x2b, 0x5, 0x46, 0xa, 0x1d, 0x3, 0xc, 0x4, 0x9, 0x17, 0x1e, 0x2, 0x5, 0xb, 0x2c, 0x4, 0x1a, 0x36, 0x1c, 0x4, 0x3f, 0x2, 0x14, 0x32, 0x1, 0x58, 0x34, 0x1, 0xf, 0x1, 0x7, 0x34, 0x2a, 0x2, 0x4, 0xa, 0x2c, 0x1, 0xb, 0xe, 0x36, 0x17, 0x3, 0xa, 0x24, 0x6b, 0x4, 0x1, 0x6, 0x1, 0x2, 0x9, 0xc0, 0x40, 0x116, 0x2, 0x6, 0x2, 0x26, 0x2, 0x6, 0x2, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1f, 0x2, 0x35, 0x1, 0x7, 0x1, 0x1, 0x3, 0x3, 0x1, 0x7, 0x3, 0x4, 0x2, 0x6, 0x4, 0xd, 0x5, 0x3, 0x1, 0x7, 0x74, 0x1, 0xd, 0x1, 0x10, 0xd, 0x65, 0x1, 0x4, 0x1, 0x2, 0xa, 0x1, 0x1, 0x3, 0x5, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x1, 0xb, 0x2, 0x4, 0x5, 0x5, 0x4, 0x1, 0x11, 0x29, 0x32d, 0x34, 0x716, 0x2f, 0x1, 0x2f, 0x1, 0x85, 0x6, 0x4, 0x3, 0x2, 0xc, 0x26, 0x1, 0x1, 0x5, 0x1, 0x2, 0x38, 0x7, 0x1, 0x10, 0x17, 0x9, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x20, 0x2f, 0x1, 0x1d5, 0x3, 0x19, 0x9, 0x7, 0x5, 0x2, 0x5, 0x4, 0x56, 0x6, 0x3, 0x1, 0x5a, 0x1, 0x4, 0x5, 0x29, 0x3, 0x5e, 0x11, 0x1b, 0x35, 0x10, 0x200, 0x19b6, 0x4a, 0x51cd, 0x33, 0x48d, 0x43, 0x2e, 0x2, 0x10d, 0x3, 0x10, 0xa, 0x2, 0x14, 0x2f, 0x5, 0x8, 0x3, 0x19, 0x7, 0x51, 0x27, 0x9, 0x2, 0x67, 0x2, 0x4, 0x1, 0x4, 0xc, 0xb, 0x4d, 0xa, 0x1, 0x3, 0x1, 0x4, 0x1, 0x1c, 0x18, 0x34, 0xc, 0x44, 0x2e, 0x6, 0x3, 0x1, 0xe, 0x21, 0x5, 0x23, 0xd, 0x1d, 0x3, 0x33, 0x1, 0xc, 0xf, 0x1, 0x30, 0x37, 0x9, 0xe, 0x12, 0x17, 0x3, 0x1, 0x5, 0x3f, 0x1, 0x1, 0x1, 0x1, 0x18, 0x3, 0x2, 0x10, 0x2, 0x4, 0xb, 0x6, 0x2, 0x6, 0x2, 0x6, 0x9, 0x7, 0x1, 0x7, 0x91, 0x2b, 0x15, 0x2ba4, 0xc, 0x17, 0x4, 0x31, 0x2104, 0x16e, 0x2, 0x6a, 0x26, 0x7, 0xc, 0x5, 0x5, 0xc, 0x1, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6c, 0x21, 0x16b, 0x12, 0x40, 0x2, 0x36, 0x28, 0xc, 0x74, 0x5, 0x1, 0x87, 0x24, 0x1a, 0x6, 0x1a, 0xb, 0x59, 0x3, 0x6, 0x2, 0x6, 0x2, 0x6, 0x2, 0x3, 0x23, 0xc, 0x1, 0x1a, 0x1, 0x13, 0x1, 0x2, 0x1, 0xf, 0x2, 0xe, 0x22, 0x7b, 0x45, 0x35, 0x10b, 0x1d, 0x3, 0x31, 0x2f, 0x1f, 0x11, 0x1b, 0x35, 0x1e, 0x2, 0x24, 0x4, 0x8, 0x1, 0x5, 0x2a, 0x9e, 0x362, 0x6, 0x2, 0x1, 0x1, 0x2c, 0x1, 0x2, 0x3, 0x1, 0x2, 0x17, 0xaa, 0x16, 0xa, 0x1a, 0x46, 0x38, 0x6, 0x2, 0x40, 0x4, 0x1, 0x2, 0x5, 0x8, 0x1, 0x3, 0x1, 0x1b, 0x2c, 0x1d, 0x83, 0x36, 0xa, 0x16, 0xa, 0x13, 0x8d, 0x49, 0x3b7, 0x46, 0x3c, 0x37, 0x17, 0x19, 0x17, 0x33, 0x4d, 0x40, 0x1, 0x4, 0x4bb, 0x36, 0x94a, 0x36f, 0x91, 0x63, 0xb9d, 0x42f, 0x33d1, 0x239, 0x4c7, 0x45, 0xb, 0x2f, 0x14, 0xd, 0x4060, 0x2, 0x23fe, 0x55, 0x1, 0x47, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x4, 0x1, 0xc, 0x1, 0x1, 0x1, 0x7, 0x1, 0x41, 0x1, 0x4, 0x2, 0x8, 0x1, 0x7, 0x1, 0x1c, 0x1, 0x4, 0x1, 0x5, 0x1, 0x1, 0x3, 0x7, 0x1, 0x154, 0x2, 0x19, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x1f, 0x1, 0x19, 0x1, 0x8, 0x1634, 0x4, 0x1, 0x1b, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0xa, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x1, 0x7, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1, 0x1, 0xa, 0x1, 0x11, 0x5, 0x3, 0x1, 0x5, 0x1, 0x11, 0x1144, 0xa6d7, 0x29, 0x1035, 0xb, 0xde, 0x3fe2, 0x21e]);
immutable unicodeBalinese = RleBitSet!ushort.fromRawArray([0x1b00, 0x4c, 0x4, 0x2d]);
immutable unicodeInLydian = RleBitSet!uint.fromRawArray([0x10920, 0x20]);
immutable unicodeInKana_Supplement = RleBitSet!uint.fromRawArray([0x1b000, 0x100]);
immutable unicodeInOld_Italic = RleBitSet!uint.fromRawArray([0x10300, 0x30]);
immutable unicodeInUgaritic = RleBitSet!uint.fromRawArray([0x10380, 0x20]);
immutable unicodeInLinear_B_Syllabary = RleBitSet!uint.fromRawArray([0x10000, 0x80]);
immutable unicodeInEgyptian_Hieroglyphs = RleBitSet!uint.fromRawArray([0x13000, 0x430]);
immutable unicodeInLycian = RleBitSet!uint.fromRawArray([0x10280, 0x20]);
immutable unicodeOld_South_Arabian = RleBitSet!uint.fromRawArray([0x10a60, 0x20]);
immutable unicodeInBamum_Supplement = RleBitSet!uint.fromRawArray([0x16800, 0x240]);
immutable unicodeInEmoticons = RleBitSet!uint.fromRawArray([0x1f600, 0x50]);
immutable unicodeInDeseret = RleBitSet!uint.fromRawArray([0x10400, 0x50]);
immutable unicodeInByzantine_Musical_Symbols = RleBitSet!uint.fromRawArray([0x1d000, 0x100]);
immutable unicodeInTransport_And_Map_Symbols = RleBitSet!uint.fromRawArray([0x1f680, 0x80]);
immutable unicodeInTai_Xuan_Jing_Symbols = RleBitSet!uint.fromRawArray([0x1d300, 0x60]);
immutable unicodeEgyptian_Hieroglyphs = RleBitSet!uint.fromRawArray([0x13000, 0x42f]);
immutable unicodeInChakma = RleBitSet!uint.fromRawArray([0x11100, 0x50]);
immutable unicodeInOld_Persian = RleBitSet!uint.fromRawArray([0x103a0, 0x40]);
immutable unicodeInCypriot_Syllabary = RleBitSet!uint.fromRawArray([0x10800, 0x40]);
immutable unicodeInSupplementary_Private_Use_Area_A = RleBitSet!uint.fromRawArray([0xf0000, 0x10000]);
immutable unicodeShavian = RleBitSet!uint.fromRawArray([0x10450, 0x30]);
immutable unicodeInRumi_Numeral_Symbols = RleBitSet!uint.fromRawArray([0x10e60, 0x20]);
immutable unicodeInSharada = RleBitSet!uint.fromRawArray([0x11180, 0x60]);
immutable unicodeInSupplementary_Private_Use_Area_B = RleBitSet!uint.fromRawArray([0x100000, 0x10000]);
immutable unicodeInCuneiform = RleBitSet!uint.fromRawArray([0x12000, 0x400]);
immutable unicodeInAvestan = RleBitSet!uint.fromRawArray([0x10b00, 0x40]);
immutable unicodeInCJK_Compatibility_Ideographs_Supplement = RleBitSet!uint.fromRawArray([0x2f800, 0x220]);
immutable unicodeLycian = RleBitSet!uint.fromRawArray([0x10280, 0x1d]);
immutable unicodeInPhaistos_Disc = RleBitSet!uint.fromRawArray([0x101d0, 0x30]);
immutable unicodeInOld_South_Arabian = RleBitSet!uint.fromRawArray([0x10a60, 0x20]);
immutable unicodeInPhoenician = RleBitSet!uint.fromRawArray([0x10900, 0x20]);
immutable unicodeInTakri = RleBitSet!uint.fromRawArray([0x11680, 0x50]);
immutable unicodeCo = RleBitSet!uint.fromRawArray([0xe000, 0x1900, 0xe0700, 0xfffe, 0x2, 0xfffe]);
immutable unicodeInInscriptional_Pahlavi = RleBitSet!uint.fromRawArray([0x10b60, 0x20]);
immutable unicodeInCarian = RleBitSet!uint.fromRawArray([0x102a0, 0x40]);
immutable unicodeInMiscellaneous_Symbols_And_Pictographs = RleBitSet!uint.fromRawArray([0x1f300, 0x300]);
immutable unicodeInBrahmi = RleBitSet!uint.fromRawArray([0x11000, 0x80]);
immutable unicodeInOld_Turkic = RleBitSet!uint.fromRawArray([0x10c00, 0x50]);
immutable unicodeDeprecated = RleBitSet!uint.fromRawArray([0x149, 0x1, 0x529, 0x1, 0x903, 0x1, 0x1, 0x1, 0x829, 0x2, 0x8c5, 0x6, 0x2b9, 0x2, 0xddcd6, 0x1, 0x1e, 0x60]);
immutable unicodeInImperial_Aramaic = RleBitSet!uint.fromRawArray([0x10840, 0x20]);
immutable unicodeInVariation_Selectors_Supplement = RleBitSet!uint.fromRawArray([0xe0100, 0xf0]);
immutable unicodeInCJK_Unified_Ideographs_Extension_B = RleBitSet!uint.fromRawArray([0x20000, 0xa6e0]);
immutable unicodeInMahjong_Tiles = RleBitSet!uint.fromRawArray([0x1f000, 0x30]);
immutable unicodeInTags = RleBitSet!uint.fromRawArray([0xe0000, 0x80]);
immutable unicodeInShavian = RleBitSet!uint.fromRawArray([0x10450, 0x30]);
immutable unicodeInCJK_Unified_Ideographs_Extension_C = RleBitSet!uint.fromRawArray([0x2a700, 0x1040]);
immutable unicodeInCounting_Rod_Numerals = RleBitSet!uint.fromRawArray([0x1d360, 0x20]);
immutable unicodeInCuneiform_Numbers_and_Punctuation = RleBitSet!uint.fromRawArray([0x12400, 0x80]);
immutable unicodeInCJK_Unified_Ideographs_Extension_D = RleBitSet!uint.fromRawArray([0x2b740, 0xe0]);
immutable unicodeCarian = RleBitSet!uint.fromRawArray([0x102a0, 0x31]);
immutable unicodeInSora_Sompeng = RleBitSet!uint.fromRawArray([0x110d0, 0x30]);
immutable unicodeInOsmanya = RleBitSet!uint.fromRawArray([0x10480, 0x30]);
immutable unicodeOld_Turkic = RleBitSet!uint.fromRawArray([0x10c00, 0x49]);
immutable unicodeInLinear_B_Ideograms = RleBitSet!uint.fromRawArray([0x10080, 0x80]);
immutable unicodeVariation_Selector = RleBitSet!uint.fromRawArray([0x180b, 0x3, 0xe5f2, 0x10, 0xd02f0, 0xf0]);
immutable unicodeInAegean_Numbers = RleBitSet!uint.fromRawArray([0x10100, 0x40]);
immutable unicodeInGothic = RleBitSet!uint.fromRawArray([0x10330, 0x20]);
immutable unicodeInMeroitic_Cursive = RleBitSet!uint.fromRawArray([0x109a0, 0x60]);
immutable unicodeInAncient_Greek_Numbers = RleBitSet!uint.fromRawArray([0x10140, 0x50]);
immutable unicodeDeseret = RleBitSet!uint.fromRawArray([0x10400, 0x50]);
immutable unicodeInEnclosed_Alphanumeric_Supplement = RleBitSet!uint.fromRawArray([0x1f100, 0x100]);
immutable unicodeInMathematical_Alphanumeric_Symbols = RleBitSet!uint.fromRawArray([0x1d400, 0x400]);
immutable unicodeInPlaying_Cards = RleBitSet!uint.fromRawArray([0x1f0a0, 0x60]);
immutable unicodeInKaithi = RleBitSet!uint.fromRawArray([0x11080, 0x50]);
immutable unicodeInMusical_Symbols = RleBitSet!uint.fromRawArray([0x1d100, 0x100]);
immutable unicodeInAncient_Symbols = RleBitSet!uint.fromRawArray([0x10190, 0x40]);
immutable unicodeInDomino_Tiles = RleBitSet!uint.fromRawArray([0x1f030, 0x70]);
immutable unicodeInKharoshthi = RleBitSet!uint.fromRawArray([0x10a00, 0x60]);
immutable unicodeGothic = RleBitSet!uint.fromRawArray([0x10330, 0x1b]);
immutable unicodeInAncient_Greek_Musical_Notation = RleBitSet!uint.fromRawArray([0x1d200, 0x50]);
immutable unicodeInInscriptional_Parthian = RleBitSet!uint.fromRawArray([0x10b40, 0x20]);
immutable unicodeInArabic_Mathematical_Alphabetic_Symbols = RleBitSet!uint.fromRawArray([0x1ee00, 0x100]);
immutable unicodeOther_Default_Ignorable_Code_Point = RleBitSet!uint.fromRawArray([0x34f, 0x1, 0xe0f, 0x2, 0x653, 0x2, 0x8af, 0x5, 0x10fa, 0x1, 0xce3b, 0x1, 0x4f, 0x9, 0xd0007, 0x1, 0x1, 0x1e, 0x60, 0x80, 0xf0, 0xe10]);
immutable unicodeMeroitic_Hieroglyphs = RleBitSet!uint.fromRawArray([0x10980, 0x20]);
immutable unicodeInMiao = RleBitSet!uint.fromRawArray([0x16f00, 0xa0]);
immutable unicodeInAlchemical_Symbols = RleBitSet!uint.fromRawArray([0x1f700, 0x80]);
immutable unicodeInMeroitic_Hieroglyphs = RleBitSet!uint.fromRawArray([0x10980, 0x20]);
immutable unicodeKaithi = RleBitSet!uint.fromRawArray([0x11080, 0x42]);
immutable unicodeInEnclosed_Ideographic_Supplement = RleBitSet!uint.fromRawArray([0x1f200, 0x100]);

immutable UnicodeProperty!ubyte[] tinyUnicodeProps = [
immutable(UnicodeProperty!ubyte)("ASCII_Hex_Digit", unicodeASCII_Hex_Digit),
immutable(UnicodeProperty!ubyte)("Bengali", unicodeBengali),
immutable(UnicodeProperty!ubyte)("Cc", unicodeCc),
immutable(UnicodeProperty!ubyte)("Control", unicodeCc),
immutable(UnicodeProperty!ubyte)("Gujarati", unicodeGujarati),
immutable(UnicodeProperty!ubyte)("Gurmukhi", unicodeGurmukhi),
immutable(UnicodeProperty!ubyte)("InBasic Latin", unicodeInBasic_Latin),
immutable(UnicodeProperty!ubyte)("InLatin-1 Supplement", unicodeInLatin_1_Supplement),
immutable(UnicodeProperty!ubyte)("Kannada", unicodeKannada),
immutable(UnicodeProperty!ubyte)("Lao", unicodeLao),
immutable(UnicodeProperty!ubyte)("Ll", unicodeLl),
immutable(UnicodeProperty!ubyte)("Lowercase", unicodeLowercase),
immutable(UnicodeProperty!ubyte)("Lowercase_Letter", unicodeLl),
immutable(UnicodeProperty!ubyte)("Lu", unicodeLu),
immutable(UnicodeProperty!ubyte)("Oriya", unicodeOriya),
immutable(UnicodeProperty!ubyte)("Tamil", unicodeTamil),
immutable(UnicodeProperty!ubyte)("Telugu", unicodeTelugu),
immutable(UnicodeProperty!ubyte)("Uppercase", unicodeUppercase),
immutable(UnicodeProperty!ubyte)("Uppercase_Letter", unicodeLu),
];

immutable UnicodeProperty!ushort[] smallUnicodeProps = [
immutable(UnicodeProperty!ushort)("Alphabetic", unicodeAlphabetic),
immutable(UnicodeProperty!ushort)("Arabic", unicodeArabic),
immutable(UnicodeProperty!ushort)("Armenian", unicodeArmenian),
immutable(UnicodeProperty!ushort)("Avestan", unicodeAvestan),
immutable(UnicodeProperty!ushort)("Balinese", unicodeBalinese),
immutable(UnicodeProperty!ushort)("Bamum", unicodeBamum),
immutable(UnicodeProperty!ushort)("Batak", unicodeBatak),
immutable(UnicodeProperty!ushort)("Bidi_Control", unicodeBidi_Control),
immutable(UnicodeProperty!ushort)("Bopomofo", unicodeBopomofo),
immutable(UnicodeProperty!ushort)("Brahmi", unicodeBrahmi),
immutable(UnicodeProperty!ushort)("Braille", unicodeBraille),
immutable(UnicodeProperty!ushort)("Buginese", unicodeBuginese),
immutable(UnicodeProperty!ushort)("Buhid", unicodeBuhid),
immutable(UnicodeProperty!ushort)("Canadian_Aboriginal", unicodeCanadian_Aboriginal),
immutable(UnicodeProperty!ushort)("Cased", unicodeCased),
immutable(UnicodeProperty!ushort)("Case_Ignorable", unicodeCase_Ignorable),
immutable(UnicodeProperty!ushort)("Cf", unicodeCf),
immutable(UnicodeProperty!ushort)("Chakma", unicodeChakma),
immutable(UnicodeProperty!ushort)("Cham", unicodeCham),
immutable(UnicodeProperty!ushort)("Cherokee", unicodeCherokee),
immutable(UnicodeProperty!ushort)("Close_Punctuation", unicodePe),
immutable(UnicodeProperty!ushort)("Cn", unicodeCn),
immutable(UnicodeProperty!ushort)("Common", unicodeCommon),
immutable(UnicodeProperty!ushort)("Connector_Punctuation", unicodePc),
immutable(UnicodeProperty!ushort)("Coptic", unicodeCoptic),
immutable(UnicodeProperty!ushort)("Cs", unicodeCs),
immutable(UnicodeProperty!ushort)("Cuneiform", unicodeCuneiform),
immutable(UnicodeProperty!ushort)("Currency_Symbol", unicodeSc),
immutable(UnicodeProperty!ushort)("Cypriot", unicodeCypriot),
immutable(UnicodeProperty!ushort)("Cyrillic", unicodeCyrillic),
immutable(UnicodeProperty!ushort)("Dash", unicodeDash),
immutable(UnicodeProperty!ushort)("Dash_Punctuation", unicodePd),
immutable(UnicodeProperty!ushort)("Decimal_Number", unicodeNd),
immutable(UnicodeProperty!ushort)("Default_Ignorable_Code_Point", unicodeDefault_Ignorable_Code_Point),
immutable(UnicodeProperty!ushort)("Devanagari", unicodeDevanagari),
immutable(UnicodeProperty!ushort)("Diacritic", unicodeDiacritic),
immutable(UnicodeProperty!ushort)("Enclosing_Mark", unicodeMe),
immutable(UnicodeProperty!ushort)("Ethiopic", unicodeEthiopic),
immutable(UnicodeProperty!ushort)("Extender", unicodeExtender),
immutable(UnicodeProperty!ushort)("Final_Punctuation", unicodePf),
immutable(UnicodeProperty!ushort)("Format", unicodeCf),
immutable(UnicodeProperty!ushort)("Georgian", unicodeGeorgian),
immutable(UnicodeProperty!ushort)("Glagolitic", unicodeGlagolitic),
immutable(UnicodeProperty!ushort)("Grapheme_Base", unicodeGrapheme_Base),
immutable(UnicodeProperty!ushort)("Grapheme_Extend", unicodeGrapheme_Extend),
immutable(UnicodeProperty!ushort)("Grapheme_Link", unicodeGrapheme_Link),
immutable(UnicodeProperty!ushort)("Greek", unicodeGreek),
immutable(UnicodeProperty!ushort)("Han", unicodeHan),
immutable(UnicodeProperty!ushort)("Hangul", unicodeHangul),
immutable(UnicodeProperty!ushort)("Hanunoo", unicodeHanunoo),
immutable(UnicodeProperty!ushort)("Hebrew", unicodeHebrew),
immutable(UnicodeProperty!ushort)("Hex_Digit", unicodeHex_Digit),
immutable(UnicodeProperty!ushort)("Hiragana", unicodeHiragana),
immutable(UnicodeProperty!ushort)("Hyphen", unicodeHyphen),
immutable(UnicodeProperty!ushort)("ID_Continue", unicodeID_Continue),
immutable(UnicodeProperty!ushort)("Ideographic", unicodeIdeographic),
immutable(UnicodeProperty!ushort)("IDS_Binary_Operator", unicodeIDS_Binary_Operator),
immutable(UnicodeProperty!ushort)("ID_Start", unicodeID_Start),
immutable(UnicodeProperty!ushort)("IDS_Trinary_Operator", unicodeIDS_Trinary_Operator),
immutable(UnicodeProperty!ushort)("Imperial_Aramaic", unicodeImperial_Aramaic),
immutable(UnicodeProperty!ushort)("InAlphabetic Presentation Forms", unicodeInAlphabetic_Presentation_Forms),
immutable(UnicodeProperty!ushort)("InArabic", unicodeInArabic),
immutable(UnicodeProperty!ushort)("InArabic Extended-A", unicodeInArabic_Extended_A),
immutable(UnicodeProperty!ushort)("InArabic Presentation Forms-A", unicodeInArabic_Presentation_Forms_A),
immutable(UnicodeProperty!ushort)("InArabic Presentation Forms-B", unicodeInArabic_Presentation_Forms_B),
immutable(UnicodeProperty!ushort)("InArabic Supplement", unicodeInArabic_Supplement),
immutable(UnicodeProperty!ushort)("InArmenian", unicodeInArmenian),
immutable(UnicodeProperty!ushort)("InArrows", unicodeInArrows),
immutable(UnicodeProperty!ushort)("InBalinese", unicodeInBalinese),
immutable(UnicodeProperty!ushort)("InBamum", unicodeInBamum),
immutable(UnicodeProperty!ushort)("InBatak", unicodeInBatak),
immutable(UnicodeProperty!ushort)("InBengali", unicodeInBengali),
immutable(UnicodeProperty!ushort)("InBlock Elements", unicodeInBlock_Elements),
immutable(UnicodeProperty!ushort)("InBopomofo", unicodeInBopomofo),
immutable(UnicodeProperty!ushort)("InBopomofo Extended", unicodeInBopomofo_Extended),
immutable(UnicodeProperty!ushort)("InBox Drawing", unicodeInBox_Drawing),
immutable(UnicodeProperty!ushort)("InBraille Patterns", unicodeInBraille_Patterns),
immutable(UnicodeProperty!ushort)("InBuginese", unicodeInBuginese),
immutable(UnicodeProperty!ushort)("InBuhid", unicodeInBuhid),
immutable(UnicodeProperty!ushort)("InCham", unicodeInCham),
immutable(UnicodeProperty!ushort)("InCherokee", unicodeInCherokee),
immutable(UnicodeProperty!ushort)("InCJK Compatibility", unicodeInCJK_Compatibility),
immutable(UnicodeProperty!ushort)("InCJK Compatibility Forms", unicodeInCJK_Compatibility_Forms),
immutable(UnicodeProperty!ushort)("InCJK Compatibility Ideographs", unicodeInCJK_Compatibility_Ideographs),
immutable(UnicodeProperty!ushort)("InCJK Radicals Supplement", unicodeInCJK_Radicals_Supplement),
immutable(UnicodeProperty!ushort)("InCJK Strokes", unicodeInCJK_Strokes),
immutable(UnicodeProperty!ushort)("InCJK Symbols and Punctuation", unicodeInCJK_Symbols_and_Punctuation),
immutable(UnicodeProperty!ushort)("InCJK Unified Ideographs", unicodeInCJK_Unified_Ideographs),
immutable(UnicodeProperty!ushort)("InCJK Unified Ideographs Extension A", unicodeInCJK_Unified_Ideographs_Extension_A),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks", unicodeInCombining_Diacritical_Marks),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks for Symbols", unicodeInCombining_Diacritical_Marks_for_Symbols),
immutable(UnicodeProperty!ushort)("InCombining Diacritical Marks Supplement", unicodeInCombining_Diacritical_Marks_Supplement),
immutable(UnicodeProperty!ushort)("InCombining Half Marks", unicodeInCombining_Half_Marks),
immutable(UnicodeProperty!ushort)("InCommon Indic Number Forms", unicodeInCommon_Indic_Number_Forms),
immutable(UnicodeProperty!ushort)("InControl Pictures", unicodeInControl_Pictures),
immutable(UnicodeProperty!ushort)("InCoptic", unicodeInCoptic),
immutable(UnicodeProperty!ushort)("InCurrency Symbols", unicodeInCurrency_Symbols),
immutable(UnicodeProperty!ushort)("InCyrillic", unicodeInCyrillic),
immutable(UnicodeProperty!ushort)("InCyrillic Extended-A", unicodeInCyrillic_Extended_A),
immutable(UnicodeProperty!ushort)("InCyrillic Extended-B", unicodeInCyrillic_Extended_B),
immutable(UnicodeProperty!ushort)("InCyrillic Supplement", unicodeInCyrillic_Supplement),
immutable(UnicodeProperty!ushort)("InDevanagari", unicodeInDevanagari),
immutable(UnicodeProperty!ushort)("InDevanagari Extended", unicodeInDevanagari_Extended),
immutable(UnicodeProperty!ushort)("InDingbats", unicodeInDingbats),
immutable(UnicodeProperty!ushort)("InEnclosed Alphanumerics", unicodeInEnclosed_Alphanumerics),
immutable(UnicodeProperty!ushort)("InEnclosed CJK Letters and Months", unicodeInEnclosed_CJK_Letters_and_Months),
immutable(UnicodeProperty!ushort)("InEthiopic", unicodeInEthiopic),
immutable(UnicodeProperty!ushort)("InEthiopic Extended", unicodeInEthiopic_Extended),
immutable(UnicodeProperty!ushort)("InEthiopic Extended-A", unicodeInEthiopic_Extended_A),
immutable(UnicodeProperty!ushort)("InEthiopic Supplement", unicodeInEthiopic_Supplement),
immutable(UnicodeProperty!ushort)("InGeneral Punctuation", unicodeInGeneral_Punctuation),
immutable(UnicodeProperty!ushort)("InGeometric Shapes", unicodeInGeometric_Shapes),
immutable(UnicodeProperty!ushort)("InGeorgian", unicodeInGeorgian),
immutable(UnicodeProperty!ushort)("InGeorgian Supplement", unicodeInGeorgian_Supplement),
immutable(UnicodeProperty!ushort)("InGlagolitic", unicodeInGlagolitic),
immutable(UnicodeProperty!ushort)("InGreek and Coptic", unicodeInGreek_and_Coptic),
immutable(UnicodeProperty!ushort)("InGreek Extended", unicodeInGreek_Extended),
immutable(UnicodeProperty!ushort)("InGujarati", unicodeInGujarati),
immutable(UnicodeProperty!ushort)("InGurmukhi", unicodeInGurmukhi),
immutable(UnicodeProperty!ushort)("InHalfwidth and Fullwidth Forms", unicodeInHalfwidth_and_Fullwidth_Forms),
immutable(UnicodeProperty!ushort)("InHangul Compatibility Jamo", unicodeInHangul_Compatibility_Jamo),
immutable(UnicodeProperty!ushort)("InHangul Jamo", unicodeInHangul_Jamo),
immutable(UnicodeProperty!ushort)("InHangul Jamo Extended-A", unicodeInHangul_Jamo_Extended_A),
immutable(UnicodeProperty!ushort)("InHangul Jamo Extended-B", unicodeInHangul_Jamo_Extended_B),
immutable(UnicodeProperty!ushort)("InHangul Syllables", unicodeInHangul_Syllables),
immutable(UnicodeProperty!ushort)("InHanunoo", unicodeInHanunoo),
immutable(UnicodeProperty!ushort)("InHebrew", unicodeInHebrew),
immutable(UnicodeProperty!ushort)("Inherited", unicodeInherited),
immutable(UnicodeProperty!ushort)("InHigh Private Use Surrogates", unicodeInHigh_Private_Use_Surrogates),
immutable(UnicodeProperty!ushort)("InHigh Surrogates", unicodeInHigh_Surrogates),
immutable(UnicodeProperty!ushort)("InHiragana", unicodeInHiragana),
immutable(UnicodeProperty!ushort)("InIdeographic Description Characters", unicodeInIdeographic_Description_Characters),
immutable(UnicodeProperty!ushort)("InIPA Extensions", unicodeInIPA_Extensions),
immutable(UnicodeProperty!ushort)("Initial_Punctuation", unicodePi),
immutable(UnicodeProperty!ushort)("InJavanese", unicodeInJavanese),
immutable(UnicodeProperty!ushort)("InKanbun", unicodeInKanbun),
immutable(UnicodeProperty!ushort)("InKangxi Radicals", unicodeInKangxi_Radicals),
immutable(UnicodeProperty!ushort)("InKannada", unicodeInKannada),
immutable(UnicodeProperty!ushort)("InKatakana", unicodeInKatakana),
immutable(UnicodeProperty!ushort)("InKatakana Phonetic Extensions", unicodeInKatakana_Phonetic_Extensions),
immutable(UnicodeProperty!ushort)("InKayah Li", unicodeInKayah_Li),
immutable(UnicodeProperty!ushort)("InKhmer", unicodeInKhmer),
immutable(UnicodeProperty!ushort)("InKhmer Symbols", unicodeInKhmer_Symbols),
immutable(UnicodeProperty!ushort)("InLao", unicodeInLao),
immutable(UnicodeProperty!ushort)("InLatin Extended-A", unicodeInLatin_Extended_A),
immutable(UnicodeProperty!ushort)("InLatin Extended Additional", unicodeInLatin_Extended_Additional),
immutable(UnicodeProperty!ushort)("InLatin Extended-B", unicodeInLatin_Extended_B),
immutable(UnicodeProperty!ushort)("InLatin Extended-C", unicodeInLatin_Extended_C),
immutable(UnicodeProperty!ushort)("InLatin Extended-D", unicodeInLatin_Extended_D),
immutable(UnicodeProperty!ushort)("InLepcha", unicodeInLepcha),
immutable(UnicodeProperty!ushort)("InLetterlike Symbols", unicodeInLetterlike_Symbols),
immutable(UnicodeProperty!ushort)("InLimbu", unicodeInLimbu),
immutable(UnicodeProperty!ushort)("InLisu", unicodeInLisu),
immutable(UnicodeProperty!ushort)("InLow Surrogates", unicodeInLow_Surrogates),
immutable(UnicodeProperty!ushort)("InMalayalam", unicodeInMalayalam),
immutable(UnicodeProperty!ushort)("InMandaic", unicodeInMandaic),
immutable(UnicodeProperty!ushort)("InMathematical Operators", unicodeInMathematical_Operators),
immutable(UnicodeProperty!ushort)("InMeetei Mayek", unicodeInMeetei_Mayek),
immutable(UnicodeProperty!ushort)("InMeetei Mayek Extensions", unicodeInMeetei_Mayek_Extensions),
immutable(UnicodeProperty!ushort)("InMiscellaneous Mathematical Symbols-A", unicodeInMiscellaneous_Mathematical_Symbols_A),
immutable(UnicodeProperty!ushort)("InMiscellaneous Mathematical Symbols-B", unicodeInMiscellaneous_Mathematical_Symbols_B),
immutable(UnicodeProperty!ushort)("InMiscellaneous Symbols", unicodeInMiscellaneous_Symbols),
immutable(UnicodeProperty!ushort)("InMiscellaneous Symbols and Arrows", unicodeInMiscellaneous_Symbols_and_Arrows),
immutable(UnicodeProperty!ushort)("InMiscellaneous Technical", unicodeInMiscellaneous_Technical),
immutable(UnicodeProperty!ushort)("InModifier Tone Letters", unicodeInModifier_Tone_Letters),
immutable(UnicodeProperty!ushort)("InMongolian", unicodeInMongolian),
immutable(UnicodeProperty!ushort)("InMyanmar", unicodeInMyanmar),
immutable(UnicodeProperty!ushort)("InMyanmar Extended-A", unicodeInMyanmar_Extended_A),
immutable(UnicodeProperty!ushort)("InNew Tai Lue", unicodeInNew_Tai_Lue),
immutable(UnicodeProperty!ushort)("InNKo", unicodeInNKo),
immutable(UnicodeProperty!ushort)("InNumber Forms", unicodeInNumber_Forms),
immutable(UnicodeProperty!ushort)("InOgham", unicodeInOgham),
immutable(UnicodeProperty!ushort)("InOl Chiki", unicodeInOl_Chiki),
immutable(UnicodeProperty!ushort)("InOptical Character Recognition", unicodeInOptical_Character_Recognition),
immutable(UnicodeProperty!ushort)("InOriya", unicodeInOriya),
immutable(UnicodeProperty!ushort)("InPhags-pa", unicodeInPhags_pa),
immutable(UnicodeProperty!ushort)("InPhonetic Extensions", unicodeInPhonetic_Extensions),
immutable(UnicodeProperty!ushort)("InPhonetic Extensions Supplement", unicodeInPhonetic_Extensions_Supplement),
immutable(UnicodeProperty!ushort)("InPrivate Use Area", unicodeInPrivate_Use_Area),
immutable(UnicodeProperty!ushort)("InRejang", unicodeInRejang),
immutable(UnicodeProperty!ushort)("InRunic", unicodeInRunic),
immutable(UnicodeProperty!ushort)("InSamaritan", unicodeInSamaritan),
immutable(UnicodeProperty!ushort)("InSaurashtra", unicodeInSaurashtra),
immutable(UnicodeProperty!ushort)("Inscriptional_Pahlavi", unicodeInscriptional_Pahlavi),
immutable(UnicodeProperty!ushort)("Inscriptional_Parthian", unicodeInscriptional_Parthian),
immutable(UnicodeProperty!ushort)("InSinhala", unicodeInSinhala),
immutable(UnicodeProperty!ushort)("InSmall Form Variants", unicodeInSmall_Form_Variants),
immutable(UnicodeProperty!ushort)("InSpacing Modifier Letters", unicodeInSpacing_Modifier_Letters),
immutable(UnicodeProperty!ushort)("InSpecials", unicodeInSpecials),
immutable(UnicodeProperty!ushort)("InSundanese", unicodeInSundanese),
immutable(UnicodeProperty!ushort)("InSundanese Supplement", unicodeInSundanese_Supplement),
immutable(UnicodeProperty!ushort)("InSuperscripts and Subscripts", unicodeInSuperscripts_and_Subscripts),
immutable(UnicodeProperty!ushort)("InSupplemental Arrows-A", unicodeInSupplemental_Arrows_A),
immutable(UnicodeProperty!ushort)("InSupplemental Arrows-B", unicodeInSupplemental_Arrows_B),
immutable(UnicodeProperty!ushort)("InSupplemental Mathematical Operators", unicodeInSupplemental_Mathematical_Operators),
immutable(UnicodeProperty!ushort)("InSupplemental Punctuation", unicodeInSupplemental_Punctuation),
immutable(UnicodeProperty!ushort)("InSyloti Nagri", unicodeInSyloti_Nagri),
immutable(UnicodeProperty!ushort)("InSyriac", unicodeInSyriac),
immutable(UnicodeProperty!ushort)("InTagalog", unicodeInTagalog),
immutable(UnicodeProperty!ushort)("InTagbanwa", unicodeInTagbanwa),
immutable(UnicodeProperty!ushort)("InTai Le", unicodeInTai_Le),
immutable(UnicodeProperty!ushort)("InTai Tham", unicodeInTai_Tham),
immutable(UnicodeProperty!ushort)("InTai Viet", unicodeInTai_Viet),
immutable(UnicodeProperty!ushort)("InTamil", unicodeInTamil),
immutable(UnicodeProperty!ushort)("InTelugu", unicodeInTelugu),
immutable(UnicodeProperty!ushort)("InThaana", unicodeInThaana),
immutable(UnicodeProperty!ushort)("InThai", unicodeInThai),
immutable(UnicodeProperty!ushort)("InTibetan", unicodeInTibetan),
immutable(UnicodeProperty!ushort)("InTifinagh", unicodeInTifinagh),
immutable(UnicodeProperty!ushort)("InUnified Canadian Aboriginal Syllabics", unicodeInUnified_Canadian_Aboriginal_Syllabics),
immutable(UnicodeProperty!ushort)("InUnified Canadian Aboriginal Syllabics Extended", unicodeInUnified_Canadian_Aboriginal_Syllabics_Extended),
immutable(UnicodeProperty!ushort)("InVai", unicodeInVai),
immutable(UnicodeProperty!ushort)("InVariation Selectors", unicodeInVariation_Selectors),
immutable(UnicodeProperty!ushort)("InVedic Extensions", unicodeInVedic_Extensions),
immutable(UnicodeProperty!ushort)("InVertical Forms", unicodeInVertical_Forms),
immutable(UnicodeProperty!ushort)("InYijing Hexagram Symbols", unicodeInYijing_Hexagram_Symbols),
immutable(UnicodeProperty!ushort)("InYi Radicals", unicodeInYi_Radicals),
immutable(UnicodeProperty!ushort)("InYi Syllables", unicodeInYi_Syllables),
immutable(UnicodeProperty!ushort)("Javanese", unicodeJavanese),
immutable(UnicodeProperty!ushort)("Join_Control", unicodeJoin_Control),
immutable(UnicodeProperty!ushort)("Katakana", unicodeKatakana),
immutable(UnicodeProperty!ushort)("Kayah_Li", unicodeKayah_Li),
immutable(UnicodeProperty!ushort)("Kharoshthi", unicodeKharoshthi),
immutable(UnicodeProperty!ushort)("Khmer", unicodeKhmer),
immutable(UnicodeProperty!ushort)("Latin", unicodeLatin),
immutable(UnicodeProperty!ushort)("Lepcha", unicodeLepcha),
immutable(UnicodeProperty!ushort)("Letter_Number", unicodeNl),
immutable(UnicodeProperty!ushort)("Limbu", unicodeLimbu),
immutable(UnicodeProperty!ushort)("Linear_B", unicodeLinear_B),
immutable(UnicodeProperty!ushort)("Line_Separator", unicodeZl),
immutable(UnicodeProperty!ushort)("Lisu", unicodeLisu),
immutable(UnicodeProperty!ushort)("Lm", unicodeLm),
immutable(UnicodeProperty!ushort)("Lo", unicodeLo),
immutable(UnicodeProperty!ushort)("Logical_Order_Exception", unicodeLogical_Order_Exception),
immutable(UnicodeProperty!ushort)("Lt", unicodeLt),
immutable(UnicodeProperty!ushort)("Lydian", unicodeLydian),
immutable(UnicodeProperty!ushort)("Malayalam", unicodeMalayalam),
immutable(UnicodeProperty!ushort)("Mandaic", unicodeMandaic),
immutable(UnicodeProperty!ushort)("Math", unicodeMath),
immutable(UnicodeProperty!ushort)("Math_Symbol", unicodeSm),
immutable(UnicodeProperty!ushort)("Mc", unicodeMc),
immutable(UnicodeProperty!ushort)("Me", unicodeMe),
immutable(UnicodeProperty!ushort)("Meetei_Mayek", unicodeMeetei_Mayek),
immutable(UnicodeProperty!ushort)("Meroitic_Cursive", unicodeMeroitic_Cursive),
immutable(UnicodeProperty!ushort)("Miao", unicodeMiao),
immutable(UnicodeProperty!ushort)("Mn", unicodeMn),
immutable(UnicodeProperty!ushort)("Modifier_Letter", unicodeLm),
immutable(UnicodeProperty!ushort)("Modifier_Symbol", unicodeSk),
immutable(UnicodeProperty!ushort)("Mongolian", unicodeMongolian),
immutable(UnicodeProperty!ushort)("Myanmar", unicodeMyanmar),
immutable(UnicodeProperty!ushort)("Nd", unicodeNd),
immutable(UnicodeProperty!ushort)("New_Tai_Lue", unicodeNew_Tai_Lue),
immutable(UnicodeProperty!ushort)("Nko", unicodeNko),
immutable(UnicodeProperty!ushort)("Nl", unicodeNl),
immutable(UnicodeProperty!ushort)("No", unicodeNo),
immutable(UnicodeProperty!ushort)("Noncharacter_Code_Point", unicodeNoncharacter_Code_Point),
immutable(UnicodeProperty!ushort)("Nonspacing_Mark", unicodeMn),
immutable(UnicodeProperty!ushort)("Ogham", unicodeOgham),
immutable(UnicodeProperty!ushort)("Ol_Chiki", unicodeOl_Chiki),
immutable(UnicodeProperty!ushort)("Old_Italic", unicodeOld_Italic),
immutable(UnicodeProperty!ushort)("Old_Persian", unicodeOld_Persian),
immutable(UnicodeProperty!ushort)("Open_Punctuation", unicodePs),
immutable(UnicodeProperty!ushort)("Osmanya", unicodeOsmanya),
immutable(UnicodeProperty!ushort)("Other_Alphabetic", unicodeOther_Alphabetic),
immutable(UnicodeProperty!ushort)("Other_Grapheme_Extend", unicodeOther_Grapheme_Extend),
immutable(UnicodeProperty!ushort)("Other_ID_Continue", unicodeOther_ID_Continue),
immutable(UnicodeProperty!ushort)("Other_ID_Start", unicodeOther_ID_Start),
immutable(UnicodeProperty!ushort)("Other_Letter", unicodeLo),
immutable(UnicodeProperty!ushort)("Other_Lowercase", unicodeOther_Lowercase),
immutable(UnicodeProperty!ushort)("Other_Math", unicodeOther_Math),
immutable(UnicodeProperty!ushort)("Other_Number", unicodeNo),
immutable(UnicodeProperty!ushort)("Other_Punctuation", unicodePo),
immutable(UnicodeProperty!ushort)("Other_Symbol", unicodeSo),
immutable(UnicodeProperty!ushort)("Other_Uppercase", unicodeOther_Uppercase),
immutable(UnicodeProperty!ushort)("Paragraph_Separator", unicodeZp),
immutable(UnicodeProperty!ushort)("Pattern_Syntax", unicodePattern_Syntax),
immutable(UnicodeProperty!ushort)("Pattern_White_Space", unicodePattern_White_Space),
immutable(UnicodeProperty!ushort)("Pc", unicodePc),
immutable(UnicodeProperty!ushort)("Pd", unicodePd),
immutable(UnicodeProperty!ushort)("Pe", unicodePe),
immutable(UnicodeProperty!ushort)("Pf", unicodePf),
immutable(UnicodeProperty!ushort)("Phags_Pa", unicodePhags_Pa),
immutable(UnicodeProperty!ushort)("Phoenician", unicodePhoenician),
immutable(UnicodeProperty!ushort)("Pi", unicodePi),
immutable(UnicodeProperty!ushort)("Po", unicodePo),
immutable(UnicodeProperty!ushort)("Ps", unicodePs),
immutable(UnicodeProperty!ushort)("Quotation_Mark", unicodeQuotation_Mark),
immutable(UnicodeProperty!ushort)("Radical", unicodeRadical),
immutable(UnicodeProperty!ushort)("Rejang", unicodeRejang),
immutable(UnicodeProperty!ushort)("Runic", unicodeRunic),
immutable(UnicodeProperty!ushort)("Samaritan", unicodeSamaritan),
immutable(UnicodeProperty!ushort)("Saurashtra", unicodeSaurashtra),
immutable(UnicodeProperty!ushort)("Sc", unicodeSc),
immutable(UnicodeProperty!ushort)("Sharada", unicodeSharada),
immutable(UnicodeProperty!ushort)("Sinhala", unicodeSinhala),
immutable(UnicodeProperty!ushort)("Sk", unicodeSk),
immutable(UnicodeProperty!ushort)("Sm", unicodeSm),
immutable(UnicodeProperty!ushort)("So", unicodeSo),
immutable(UnicodeProperty!ushort)("Soft_Dotted", unicodeSoft_Dotted),
immutable(UnicodeProperty!ushort)("Sora_Sompeng", unicodeSora_Sompeng),
immutable(UnicodeProperty!ushort)("Space_Separator", unicodeZs),
immutable(UnicodeProperty!ushort)("Spacing_Mark", unicodeMc),
immutable(UnicodeProperty!ushort)("STerm", unicodeSTerm),
immutable(UnicodeProperty!ushort)("Sundanese", unicodeSundanese),
immutable(UnicodeProperty!ushort)("Surrogate", unicodeCs),
immutable(UnicodeProperty!ushort)("Syloti_Nagri", unicodeSyloti_Nagri),
immutable(UnicodeProperty!ushort)("Syriac", unicodeSyriac),
immutable(UnicodeProperty!ushort)("Tagalog", unicodeTagalog),
immutable(UnicodeProperty!ushort)("Tagbanwa", unicodeTagbanwa),
immutable(UnicodeProperty!ushort)("Tai_Le", unicodeTai_Le),
immutable(UnicodeProperty!ushort)("Tai_Tham", unicodeTai_Tham),
immutable(UnicodeProperty!ushort)("Tai_Viet", unicodeTai_Viet),
immutable(UnicodeProperty!ushort)("Takri", unicodeTakri),
immutable(UnicodeProperty!ushort)("Terminal_Punctuation", unicodeTerminal_Punctuation),
immutable(UnicodeProperty!ushort)("Thaana", unicodeThaana),
immutable(UnicodeProperty!ushort)("Thai", unicodeThai),
immutable(UnicodeProperty!ushort)("Tibetan", unicodeTibetan),
immutable(UnicodeProperty!ushort)("Tifinagh", unicodeTifinagh),
immutable(UnicodeProperty!ushort)("Titlecase_Letter", unicodeLt),
immutable(UnicodeProperty!ushort)("Ugaritic", unicodeUgaritic),
immutable(UnicodeProperty!ushort)("Unassigned", unicodeCn),
immutable(UnicodeProperty!ushort)("Unified_Ideograph", unicodeUnified_Ideograph),
immutable(UnicodeProperty!ushort)("Vai", unicodeVai),
immutable(UnicodeProperty!ushort)("White_Space", unicodeWhite_Space),
immutable(UnicodeProperty!ushort)("XID_Continue", unicodeXID_Continue),
immutable(UnicodeProperty!ushort)("XID_Start", unicodeXID_Start),
immutable(UnicodeProperty!ushort)("Yi", unicodeYi),
immutable(UnicodeProperty!ushort)("Zl", unicodeZl),
immutable(UnicodeProperty!ushort)("Zp", unicodeZp),
immutable(UnicodeProperty!ushort)("Zs", unicodeZs),
];

immutable UnicodeProperty!uint[] fullUnicodeProps = [
immutable(UnicodeProperty!uint)("Carian", unicodeCarian),
immutable(UnicodeProperty!uint)("Co", unicodeCo),
immutable(UnicodeProperty!uint)("Deprecated", unicodeDeprecated),
immutable(UnicodeProperty!uint)("Deseret", unicodeDeseret),
immutable(UnicodeProperty!uint)("Egyptian_Hieroglyphs", unicodeEgyptian_Hieroglyphs),
immutable(UnicodeProperty!uint)("Gothic", unicodeGothic),
immutable(UnicodeProperty!uint)("InAegean Numbers", unicodeInAegean_Numbers),
immutable(UnicodeProperty!uint)("InAlchemical Symbols", unicodeInAlchemical_Symbols),
immutable(UnicodeProperty!uint)("InAncient Greek Musical Notation", unicodeInAncient_Greek_Musical_Notation),
immutable(UnicodeProperty!uint)("InAncient Greek Numbers", unicodeInAncient_Greek_Numbers),
immutable(UnicodeProperty!uint)("InAncient Symbols", unicodeInAncient_Symbols),
immutable(UnicodeProperty!uint)("InArabic Mathematical Alphabetic Symbols", unicodeInArabic_Mathematical_Alphabetic_Symbols),
immutable(UnicodeProperty!uint)("InAvestan", unicodeInAvestan),
immutable(UnicodeProperty!uint)("InBamum Supplement", unicodeInBamum_Supplement),
immutable(UnicodeProperty!uint)("InBrahmi", unicodeInBrahmi),
immutable(UnicodeProperty!uint)("InByzantine Musical Symbols", unicodeInByzantine_Musical_Symbols),
immutable(UnicodeProperty!uint)("InCarian", unicodeInCarian),
immutable(UnicodeProperty!uint)("InChakma", unicodeInChakma),
immutable(UnicodeProperty!uint)("InCJK Compatibility Ideographs Supplement", unicodeInCJK_Compatibility_Ideographs_Supplement),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension B", unicodeInCJK_Unified_Ideographs_Extension_B),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension C", unicodeInCJK_Unified_Ideographs_Extension_C),
immutable(UnicodeProperty!uint)("InCJK Unified Ideographs Extension D", unicodeInCJK_Unified_Ideographs_Extension_D),
immutable(UnicodeProperty!uint)("InCounting Rod Numerals", unicodeInCounting_Rod_Numerals),
immutable(UnicodeProperty!uint)("InCuneiform", unicodeInCuneiform),
immutable(UnicodeProperty!uint)("InCuneiform Numbers and Punctuation", unicodeInCuneiform_Numbers_and_Punctuation),
immutable(UnicodeProperty!uint)("InCypriot Syllabary", unicodeInCypriot_Syllabary),
immutable(UnicodeProperty!uint)("InDeseret", unicodeInDeseret),
immutable(UnicodeProperty!uint)("InDomino Tiles", unicodeInDomino_Tiles),
immutable(UnicodeProperty!uint)("InEgyptian Hieroglyphs", unicodeInEgyptian_Hieroglyphs),
immutable(UnicodeProperty!uint)("InEmoticons", unicodeInEmoticons),
immutable(UnicodeProperty!uint)("InEnclosed Alphanumeric Supplement", unicodeInEnclosed_Alphanumeric_Supplement),
immutable(UnicodeProperty!uint)("InEnclosed Ideographic Supplement", unicodeInEnclosed_Ideographic_Supplement),
immutable(UnicodeProperty!uint)("InGothic", unicodeInGothic),
immutable(UnicodeProperty!uint)("InImperial Aramaic", unicodeInImperial_Aramaic),
immutable(UnicodeProperty!uint)("InInscriptional Pahlavi", unicodeInInscriptional_Pahlavi),
immutable(UnicodeProperty!uint)("InInscriptional Parthian", unicodeInInscriptional_Parthian),
immutable(UnicodeProperty!uint)("InKaithi", unicodeInKaithi),
immutable(UnicodeProperty!uint)("InKana Supplement", unicodeInKana_Supplement),
immutable(UnicodeProperty!uint)("InKharoshthi", unicodeInKharoshthi),
immutable(UnicodeProperty!uint)("InLinear B Ideograms", unicodeInLinear_B_Ideograms),
immutable(UnicodeProperty!uint)("InLinear B Syllabary", unicodeInLinear_B_Syllabary),
immutable(UnicodeProperty!uint)("InLycian", unicodeInLycian),
immutable(UnicodeProperty!uint)("InLydian", unicodeInLydian),
immutable(UnicodeProperty!uint)("InMahjong Tiles", unicodeInMahjong_Tiles),
immutable(UnicodeProperty!uint)("InMathematical Alphanumeric Symbols", unicodeInMathematical_Alphanumeric_Symbols),
immutable(UnicodeProperty!uint)("InMeroitic Cursive", unicodeInMeroitic_Cursive),
immutable(UnicodeProperty!uint)("InMeroitic Hieroglyphs", unicodeInMeroitic_Hieroglyphs),
immutable(UnicodeProperty!uint)("InMiao", unicodeInMiao),
immutable(UnicodeProperty!uint)("InMiscellaneous Symbols And Pictographs", unicodeInMiscellaneous_Symbols_And_Pictographs),
immutable(UnicodeProperty!uint)("InMusical Symbols", unicodeInMusical_Symbols),
immutable(UnicodeProperty!uint)("InOld Italic", unicodeInOld_Italic),
immutable(UnicodeProperty!uint)("InOld Persian", unicodeInOld_Persian),
immutable(UnicodeProperty!uint)("InOld South Arabian", unicodeInOld_South_Arabian),
immutable(UnicodeProperty!uint)("InOld Turkic", unicodeInOld_Turkic),
immutable(UnicodeProperty!uint)("InOsmanya", unicodeInOsmanya),
immutable(UnicodeProperty!uint)("InPhaistos Disc", unicodeInPhaistos_Disc),
immutable(UnicodeProperty!uint)("InPhoenician", unicodeInPhoenician),
immutable(UnicodeProperty!uint)("InPlaying Cards", unicodeInPlaying_Cards),
immutable(UnicodeProperty!uint)("InRumi Numeral Symbols", unicodeInRumi_Numeral_Symbols),
immutable(UnicodeProperty!uint)("InSharada", unicodeInSharada),
immutable(UnicodeProperty!uint)("InShavian", unicodeInShavian),
immutable(UnicodeProperty!uint)("InSora Sompeng", unicodeInSora_Sompeng),
immutable(UnicodeProperty!uint)("InSupplementary Private Use Area-A", unicodeInSupplementary_Private_Use_Area_A),
immutable(UnicodeProperty!uint)("InSupplementary Private Use Area-B", unicodeInSupplementary_Private_Use_Area_B),
immutable(UnicodeProperty!uint)("InTags", unicodeInTags),
immutable(UnicodeProperty!uint)("InTai Xuan Jing Symbols", unicodeInTai_Xuan_Jing_Symbols),
immutable(UnicodeProperty!uint)("InTakri", unicodeInTakri),
immutable(UnicodeProperty!uint)("InTransport And Map Symbols", unicodeInTransport_And_Map_Symbols),
immutable(UnicodeProperty!uint)("InUgaritic", unicodeInUgaritic),
immutable(UnicodeProperty!uint)("InVariation Selectors Supplement", unicodeInVariation_Selectors_Supplement),
immutable(UnicodeProperty!uint)("Kaithi", unicodeKaithi),
immutable(UnicodeProperty!uint)("Lycian", unicodeLycian),
immutable(UnicodeProperty!uint)("Meroitic_Hieroglyphs", unicodeMeroitic_Hieroglyphs),
immutable(UnicodeProperty!uint)("Old_South_Arabian", unicodeOld_South_Arabian),
immutable(UnicodeProperty!uint)("Old_Turkic", unicodeOld_Turkic),
immutable(UnicodeProperty!uint)("Other_Default_Ignorable_Code_Point", unicodeOther_Default_Ignorable_Code_Point),
immutable(UnicodeProperty!uint)("Private_Use", unicodeCo),
immutable(UnicodeProperty!uint)("Shavian", unicodeShavian),
immutable(UnicodeProperty!uint)("Variation_Selector", unicodeVariation_Selector),
];
immutable NFC_QCN = RleBitSet!uint.fromRawArray([0x340, 0x2, 0x1, 0x2, 0x2f, 0x1, 0x9, 0x1, 0x8, 0x1, 0x5d0, 0x8, 0x7c, 0x2, 0x1, 0x1, 0x53, 0x1, 0x2, 0x1, 0x22, 0x3, 0x2, 0x1, 0xfd, 0x2, 0x3e5, 0x1, 0x9, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xc, 0x1, 0x9, 0x1, 0x1, 0x2, 0x1, 0x1, 0x8, 0x1, 0x11, 0x1, 0x9, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xc, 0x1, 0xfb7, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3d, 0x1, 0x2, 0x1, 0xa, 0x1, 0x1, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x7, 0x1, 0x2, 0x2, 0x9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x124, 0x1, 0x3, 0x2, 0x1fd, 0x2, 0x7b1, 0x1, 0xce23, 0x10e, 0x2, 0x1, 0x1, 0x1, 0x2, 0xa, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x3, 0x44, 0x2, 0x6a, 0x43, 0x1, 0x1, 0x1, 0xa, 0xd, 0x1, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x9, 0xd60f, 0x7, 0x56, 0x6, 0x1263f, 0x21e]);immutable NFC_QCM = RleBitSet!uint.fromRawArray([0x300, 0x5, 0x1, 0x7, 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0x6, 0x1, 0x7, 0x6, 0x4, 0x2, 0x1, 0x2, 0x6, 0x1, 0x9, 0x1, 0x2, 0x1, 0x30d, 0x3, 0x2e6, 0x1, 0x81, 0x1, 0x18, 0x1, 0x166, 0x1, 0x17, 0x2, 0x66, 0x1, 0x18, 0x1, 0x7e, 0x1, 0x6b, 0x1, 0x12, 0x2, 0x67, 0x1, 0x18, 0x1, 0x72, 0x1, 0x4, 0x1, 0xf, 0x1, 0x24e, 0x1, 0x132, 0x15, 0x32, 0x1b, 0x972, 0x1, 0x1563, 0x2, 0xe01f, 0x1, 0x6c, 0x1]);
